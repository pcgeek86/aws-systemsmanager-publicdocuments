{
  "AttachmentsContent": [],
  "Content": "{\n  \"schemaVersion\" : \"0.3\",\n  \"description\" : \"The AWSEC2-SQLServerDBRestore document restores Microsoft SQL Server database backups stored in Amazon S3 to SQL Server 2017 running on an Amazon EC2 Linux instance. You may provide your own EC2 instance running SQL Server 2017 Linux. If an EC2 instance is not provided, the automation workflow launches and configures a new Ubuntu 16.04 EC2 instance with SQL Server 2017. The automation supports restoring full, differential, and transactional log backups. This automation accepts multiple database backup files and automatically restores the most recent valid backup of each database in the files provided. To automate both backup and restore of an on-premises SQL Server database to an EC2 instance running SQL Server 2017 Linux, see the AWS-signed PowerShell script (https://s3-us-west-1.amazonaws.com/awsec2-server-upgrade-prod/MigrateSQLServerToEC2Linux.ps1). Note: This automation resets the SQL Server 'SA' user password every time it runs. Once the automation is complete, you will need to set your own 'SA' user password again before you can connect to the SQL Server instance.\",\n  \"parameters\" : {\n    \"S3Input\" : {\n      \"type\" : \"String\",\n      \"description\" : \"(Required) S3 bucket name, comma-separated list of S3 object keys, or comma-separated list of pre-signed S3 URLs containing the SQL backup files to be restored. Accepted formats: 1) Single S3 file: 'sample-bucket/sample-key' 2) List of S3 files: 'sample-bucket/sample-key-1, sample-bucket/sample-key-2' 3) Presigned S3 URL: 'https://sample-bucket.s3.amazonaws.com/sample-object?...'\",\n      \"allowedPattern\" : \"^[a-zA-Z0-9_\\\\/\\\\!\\\\-\\\\_\\\\.\\\\*\\\\(\\\\)\\\\&\\\\$\\\\@\\\\=\\\\;\\\\:\\\\+\\\\?\\\\,\\\\ ]*$\"\n    },\n    \"IsS3PresignedURL\" : {\n      \"type\" : \"String\",\n      \"description\" : \"(Required) If S3Input is a pre-signed S3 URL, indicate 'yes'.\",\n      \"default\" : \"no\",\n      \"allowedValues\" : [ \"yes\", \"no\" ]\n    },\n    \"InstanceId\" : {\n      \"type\" : \"String\",\n      \"description\" : \"(Optional) The instance running SQL Server 2017 on Linux. If no InstanceId is provided, the automation launches a new EC2 instance using the InstanceType and SQLServerEdition provided.\",\n      \"default\" : \"\"\n    },\n    \"InstanceType\" : {\n      \"type\" : \"String\",\n      \"description\" : \"(Optional) The instance type of the EC2 instance to be launched.\",\n      \"default\" : \"\"\n    },\n    \"SQLServerEdition\" : {\n      \"type\" : \"String\",\n      \"description\" : \"(Optional) The edition of SQL Server 2017 to be installed on the newly created EC2 instance.\",\n      \"default\" : \"Standard\",\n      \"allowedValues\" : [ \"Standard\", \"Enterprise\", \"Web\", \"Express\" ]\n    },\n    \"IamInstanceProfileName\" : {\n      \"type\" : \"String\",\n      \"description\" : \"(Optional) The IAM instance profile to attach to the new EC2 instance. The IAM instance profile must have the SSM managed policy attached as documented https://docs.aws.amazon.com/systems-manager/latest/userguide/setup-instance-profile.html\",\n      \"default\" : \"\"\n    },\n    \"KeyPair\" : {\n      \"type\" : \"String\",\n      \"description\" : \"(Optional) Name of the EC2 key pair to be used to access the newly created EC2 instance. When restoring to a new EC2 instance, it is highly recommended that you provide a key pair, as the SQL Server 'sa' password will need to be reset before the databases can be accessed.\",\n      \"default\" : \"\"\n    },\n    \"SubnetId\" : {\n      \"type\" : \"String\",\n      \"description\" : \"(Optional) The subnet in which to launch the new EC2 instance. The subnet must have outbound connectivity to AWS services. If a value for SubnetId is not provided, the automation uses the default subnet.\",\n      \"default\" : \"\"\n    },\n    \"DataDirectorySize\" : {\n      \"type\" : \"String\",\n      \"description\" : \"(Optional) Desired volume size (GiB) of the SQL Server Data directory for the new EC2 instance.\",\n      \"default\" : \"100\"\n    },\n    \"LogDirectorySize\" : {\n      \"type\" : \"String\",\n      \"description\" : \"(Optional) Desired volume size (GiB) of the SQL Server Log directory for the new EC2 instance.\",\n      \"default\" : \"100\"\n    },\n    \"TempDbDirectorySize\" : {\n      \"type\" : \"String\",\n      \"description\" : \"(Optional) Desired volume size (GiB) of the SQL Server TempDB directory for the new EC2 instance.\",\n      \"default\" : \"100\"\n    },\n    \"DatabaseNames\" : {\n      \"type\" : \"String\",\n      \"description\" : \"(Optional) Comma-separated list of the names of the databases to be restored. If no names are provided, all databases present in the backup files will be restored.\",\n      \"default\" : \"''\"\n    },\n    \"TargetOperatingSystem\" : {\n      \"type\" : \"String\",\n      \"description\" : \"(Optional) The operating system of the target EC2 instance to be restored to.\",\n      \"default\" : \"Linux\",\n      \"allowedValues\" : [ \"Linux\", \"Windows\" ]\n    }\n  },\n  \"mainSteps\" : [ {\n    \"name\" : \"checkTargetOperatingSystem\",\n    \"action\" : \"aws:branch\",\n    \"onFailure\" : \"Abort\",\n    \"inputs\" : {\n      \"Choices\" : [ {\n        \"Variable\" : \"{{ TargetOperatingSystem }}\",\n        \"StringEquals\" : \"Linux\",\n        \"NextStep\" : \"doesInstanceNeedToBeCreated\"\n      }, {\n        \"Variable\" : \"{{ TargetOperatingSystem }}\",\n        \"StringEquals\" : \"Windows\",\n        \"NextStep\" : \"doesInstanceNeedToBeCreatedWindows\"\n      } ]\n    }\n  }, {\n    \"name\" : \"doesInstanceNeedToBeCreated\",\n    \"action\" : \"aws:branch\",\n    \"onFailure\" : \"Abort\",\n    \"inputs\" : {\n      \"Choices\" : [ {\n        \"Variable\" : \"{{ InstanceId }}\",\n        \"StartsWith\" : \"i-\",\n        \"NextStep\" : \"tagExistingInstance\"\n      }, {\n        \"Variable\" : \"{{ InstanceId }}\",\n        \"StartsWith\" : \"mi-\",\n        \"NextStep\" : \"restoreToExistingManagedLinuxInstance\"\n      } ],\n      \"Default\" : \"getUbuntuAMI\"\n    }\n  }, {\n    \"name\" : \"getUbuntuAMI\",\n    \"action\" : \"aws:executeAwsApi\",\n    \"onFailure\" : \"Abort\",\n    \"inputs\" : {\n      \"Service\" : \"ec2\",\n      \"Api\" : \"DescribeImages\",\n      \"Owners\" : [ \"amazon\" ],\n      \"Filters\" : [ {\n        \"Name\" : \"name\",\n        \"Values\" : [ \"ubuntu-xenial-16.04-amd64-server-20180306-SQL_2017_{{ SQLServerEdition }}-2018.04.10\" ]\n      }, {\n        \"Name\" : \"state\",\n        \"Values\" : [ \"available\" ]\n      } ]\n    },\n    \"outputs\" : [ {\n      \"Name\" : \"amiId\",\n      \"Selector\" : \"$.Images[0].ImageId\",\n      \"Type\" : \"String\"\n    } ],\n    \"isCritical\" : \"true\",\n    \"nextStep\" : \"branchOnWhetherKeyPairExists\"\n  }, {\n    \"name\" : \"branchOnWhetherKeyPairExists\",\n    \"action\" : \"aws:branch\",\n    \"onFailure\" : \"Abort\",\n    \"inputs\" : {\n      \"Choices\" : [ {\n        \"Not\" : {\n          \"Variable\" : \"{{ KeyPair }}\",\n          \"EqualsIgnoreCase\" : \"\"\n        },\n        \"NextStep\" : \"createNewInstanceWithKeyPair\"\n      } ],\n      \"Default\" : \"createNewInstanceWithoutKeyPair\"\n    }\n  }, {\n    \"name\" : \"createNewInstanceWithKeyPair\",\n    \"action\" : \"aws:runInstances\",\n    \"maxAttempts\" : 3,\n    \"timeoutSeconds\" : 1200,\n    \"onFailure\" : \"Abort\",\n    \"inputs\" : {\n      \"ImageId\" : \"{{ getUbuntuAMI.amiId }}\",\n      \"InstanceType\" : \"{{ InstanceType }}\",\n      \"MinInstanceCount\" : 1,\n      \"MaxInstanceCount\" : 1,\n      \"IamInstanceProfileName\" : \"{{ IamInstanceProfileName }}\",\n      \"KeyName\" : \"{{ KeyPair }}\",\n      \"SubnetId\" : \"{{ SubnetId }}\",\n      \"TagSpecifications\" : [ {\n        \"ResourceType\" : \"instance\",\n        \"Tags\" : [ {\n          \"Key\" : \"AWSEC2-SQLREPLATFORM-INSTANCE-KEY\",\n          \"Value\" : \"AWSEC2-{{automation:EXECUTION_ID}}\"\n        } ]\n      } ],\n      \"BlockDeviceMappings\" : [ {\n        \"DeviceName\" : \"/dev/xvdb\",\n        \"Ebs\" : {\n          \"VolumeSize\" : \"{{ DataDirectorySize }}\"\n        }\n      }, {\n        \"DeviceName\" : \"/dev/xvdc\",\n        \"Ebs\" : {\n          \"VolumeSize\" : \"{{ LogDirectorySize }}\"\n        }\n      }, {\n        \"DeviceName\" : \"/dev/xvdd\",\n        \"Ebs\" : {\n          \"VolumeSize\" : \"{{ TempDbDirectorySize }}\"\n        }\n      }, {\n        \"DeviceName\" : \"/dev/xvde\",\n        \"Ebs\" : {\n          \"VolumeSize\" : \"{{ DataDirectorySize }}\"\n        }\n      } ],\n      \"UserData\" : \"IyEvYmluL3NoCm1rZGlyIC90bXAvc3NtCmNkIC90bXAvc3NtCndnZXQgaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL2VjMi1kb3dubG9hZHMtd2luZG93cy9TU01BZ2VudC9sYXRlc3QvZGViaWFuX2FtZDY0L2FtYXpvbi1zc20tYWdlbnQuZGViCiMgc3VkbyBybSAvdmFyL2xpYi9kcGtnL2xvY2sKIyBzdWRvIGRwa2cgLS1jb25maWd1cmUgLWEKc3VkbyBkcGtnIC1pIGFtYXpvbi1zc20tYWdlbnQuZGViCnN1ZG8gc3lzdGVtY3RsIHN0YXR1cyBhbWF6b24tc3NtLWFnZW50\"\n    },\n    \"nextStep\" : \"getInstance\"\n  }, {\n    \"name\" : \"createNewInstanceWithoutKeyPair\",\n    \"action\" : \"aws:runInstances\",\n    \"maxAttempts\" : 3,\n    \"timeoutSeconds\" : 1200,\n    \"onFailure\" : \"Abort\",\n    \"inputs\" : {\n      \"ImageId\" : \"{{ getUbuntuAMI.amiId }}\",\n      \"InstanceType\" : \"{{ InstanceType }}\",\n      \"MinInstanceCount\" : 1,\n      \"MaxInstanceCount\" : 1,\n      \"IamInstanceProfileName\" : \"{{ IamInstanceProfileName }}\",\n      \"SubnetId\" : \"{{ SubnetId }}\",\n      \"TagSpecifications\" : [ {\n        \"ResourceType\" : \"instance\",\n        \"Tags\" : [ {\n          \"Key\" : \"AWSEC2-SQLREPLATFORM-INSTANCE-KEY\",\n          \"Value\" : \"AWSEC2-{{automation:EXECUTION_ID}}\"\n        } ]\n      } ],\n      \"BlockDeviceMappings\" : [ {\n        \"DeviceName\" : \"/dev/xvdb\",\n        \"Ebs\" : {\n          \"VolumeSize\" : \"{{ DataDirectorySize }}\"\n        }\n      }, {\n        \"DeviceName\" : \"/dev/xvdc\",\n        \"Ebs\" : {\n          \"VolumeSize\" : \"{{ LogDirectorySize }}\"\n        }\n      }, {\n        \"DeviceName\" : \"/dev/xvdd\",\n        \"Ebs\" : {\n          \"VolumeSize\" : \"{{ TempDbDirectorySize }}\"\n        }\n      }, {\n        \"DeviceName\" : \"/dev/xvde\",\n        \"Ebs\" : {\n          \"VolumeSize\" : \"{{ DataDirectorySize }}\"\n        }\n      } ],\n      \"UserData\" : \"IyEvYmluL3NoCm1rZGlyIC90bXAvc3NtCmNkIC90bXAvc3NtCndnZXQgaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL2VjMi1kb3dubG9hZHMtd2luZG93cy9TU01BZ2VudC9sYXRlc3QvZGViaWFuX2FtZDY0L2FtYXpvbi1zc20tYWdlbnQuZGViCiMgc3VkbyBybSAvdmFyL2xpYi9kcGtnL2xvY2sKIyBzdWRvIGRwa2cgLS1jb25maWd1cmUgLWEKc3VkbyBkcGtnIC1pIGFtYXpvbi1zc20tYWdlbnQuZGViCnN1ZG8gc3lzdGVtY3RsIHN0YXR1cyBhbWF6b24tc3NtLWFnZW50\"\n    },\n    \"nextStep\" : \"getInstance\"\n  }, {\n    \"name\" : \"tagExistingInstance\",\n    \"action\" : \"aws:executeAwsApi\",\n    \"maxAttempts\" : 2,\n    \"onFailure\" : \"Abort\",\n    \"inputs\" : {\n      \"Service\" : \"ec2\",\n      \"Api\" : \"CreateTags\",\n      \"Tags\" : [ {\n        \"Key\" : \"AWSEC2-SQLREPLATFORM-INSTANCE-KEY\",\n        \"Value\" : \"AWSEC2-{{automation:EXECUTION_ID}}\"\n      } ],\n      \"Resources\" : [ \"{{InstanceId}}\" ]\n    },\n    \"isCritical\" : \"true\",\n    \"nextStep\" : \"getInstance\"\n  }, {\n    \"name\" : \"getInstance\",\n    \"action\" : \"aws:executeAwsApi\",\n    \"maxAttempts\" : 2,\n    \"onFailure\" : \"Abort\",\n    \"inputs\" : {\n      \"Service\" : \"ec2\",\n      \"Api\" : \"DescribeInstances\",\n      \"Filters\" : [ {\n        \"Name\" : \"tag:AWSEC2-SQLREPLATFORM-INSTANCE-KEY\",\n        \"Values\" : [ \"AWSEC2-{{automation:EXECUTION_ID}}\" ]\n      } ]\n    },\n    \"outputs\" : [ {\n      \"Name\" : \"InstanceId\",\n      \"Selector\" : \"$.Reservations[0].Instances[0].InstanceId\",\n      \"Type\" : \"String\"\n    } ],\n    \"isCritical\" : \"true\",\n    \"nextStep\" : \"waitForInstanceToBeReady\"\n  }, {\n    \"name\" : \"waitForInstanceToBeReady\",\n    \"action\" : \"aws:waitForAwsResourceProperty\",\n    \"onFailure\" : \"step:rebootToMakeItReady\",\n    \"timeoutSeconds\" : 600,\n    \"maxAttempts\" : 2,\n    \"inputs\" : {\n      \"Service\" : \"ec2\",\n      \"Api\" : \"DescribeInstanceStatus\",\n      \"InstanceIds\" : [ \"{{ getInstance.InstanceId }}\" ],\n      \"PropertySelector\" : \"$.InstanceStatuses[0].InstanceStatus.Details[0].Status\",\n      \"DesiredValues\" : [ \"passed\" ]\n    },\n    \"isCritical\" : \"false\",\n    \"nextStep\" : \"waitForSSMAgentOnline\"\n  }, {\n    \"name\" : \"rebootToMakeItReady\",\n    \"action\" : \"aws:executeAwsApi\",\n    \"onFailure\" : \"step:waitForInstanceToBeReadyAfterReboot\",\n    \"inputs\" : {\n      \"Service\" : \"ec2\",\n      \"Api\" : \"RebootInstances\",\n      \"InstanceIds\" : [ \"{{ getInstance.InstanceId }}\" ]\n    },\n    \"isCritical\" : \"false\",\n    \"nextStep\" : \"waitForInstanceToBeReadyAfterReboot\"\n  }, {\n    \"name\" : \"waitForInstanceToBeReadyAfterReboot\",\n    \"action\" : \"aws:waitForAwsResourceProperty\",\n    \"timeoutSeconds\" : 600,\n    \"maxAttempts\" : 2,\n    \"inputs\" : {\n      \"Service\" : \"ec2\",\n      \"Api\" : \"DescribeInstanceStatus\",\n      \"InstanceIds\" : [ \"{{ getInstance.InstanceId }}\" ],\n      \"PropertySelector\" : \"$.InstanceStatuses[0].InstanceStatus.Details[0].Status\",\n      \"DesiredValues\" : [ \"passed\" ]\n    },\n    \"isCritical\" : \"true\",\n    \"nextStep\" : \"waitForSSMAgentOnline\"\n  }, {\n    \"name\" : \"waitForSSMAgentOnline\",\n    \"action\" : \"aws:waitForAwsResourceProperty\",\n    \"timeoutSeconds\" : 600,\n    \"inputs\" : {\n      \"Service\" : \"ssm\",\n      \"Api\" : \"DescribeInstanceInformation\",\n      \"InstanceInformationFilterList\" : [ {\n        \"key\" : \"InstanceIds\",\n        \"valueSet\" : [ \"{{ getInstance.InstanceId }}\" ]\n      } ],\n      \"PropertySelector\" : \"$.InstanceInformationList[0].PingStatus\",\n      \"DesiredValues\" : [ \"Online\" ]\n    },\n    \"isCritical\" : \"true\",\n    \"nextStep\" : \"branchOnTargetOperatingSystem\"\n  }, {\n    \"name\" : \"doesInstanceNeedToBeConfigured\",\n    \"action\" : \"aws:branch\",\n    \"onFailure\" : \"Abort\",\n    \"inputs\" : {\n      \"Choices\" : [ {\n        \"Not\" : {\n          \"Variable\" : \"{{ InstanceId }}\",\n          \"EqualsIgnoreCase\" : \"\"\n        },\n        \"NextStep\" : \"restoreToExistingEC2InstanceLinux\"\n      } ],\n      \"Default\" : \"restoreToNewInstanceLinux\"\n    }\n  }, {\n    \"name\" : \"restoreToNewInstanceLinux\",\n    \"action\" : \"aws:runCommand\",\n    \"timeoutSeconds\" : 18000,\n    \"inputs\" : {\n      \"DocumentName\" : \"AWS-RunPowerShellScript\",\n      \"InstanceIds\" : [ \"{{ getInstance.InstanceId }}\" ],\n      \"Parameters\" : {\n        \"commands\" : [ \"New-Item -Name SQLServerReplatform -ItemType directory\", \"cd SQLServerReplatform\", \"$currentDirectory = $(Get-Location).Path\", \"Write-Host SSM current directory: $currentDirectory\", \"Write-Host To view restore logs, go to: $currentDirectory/logs/{{automation:EXECUTION_ID}}/log.txt\", \"New-Item -Name Scripts -ItemType directory\", \"[void](wget -P $currentDirectory/Scripts https://s3-us-west-1.amazonaws.com/awsec2-server-upgrade-prod/SQLServerRestore.zip -q)\", \"Expand-Archive -Path $currentDirectory/Scripts/SQLServerRestore.zip -DestinationPath $currentDirectory/Scripts\", \"$smoDirectory = $currentDirectory+'/Scripts/SMODLL'\", \"./Scripts/SQLServerRestore.ps1 -S3Input '{{ S3Input }}' -IsS3PresignedURL {{IsS3PresignedURL}} -InstanceIsNew $true -RunningDirectory $currentDirectory -DatabaseNames \\\"{{ DatabaseNames }}\\\" -ExecutionId {{automation:EXECUTION_ID}} -SmodllPath $smoDirectory\", \"rm -r $currentDirectory/Scripts\" ],\n        \"executionTimeout\" : \"18000\"\n      }\n    },\n    \"isEnd\" : \"true\"\n  }, {\n    \"name\" : \"restoreToExistingEC2InstanceLinux\",\n    \"action\" : \"aws:runCommand\",\n    \"timeoutSeconds\" : 18000,\n    \"inputs\" : {\n      \"DocumentName\" : \"AWS-RunPowerShellScript\",\n      \"InstanceIds\" : [ \"{{ InstanceId }}\" ],\n      \"Parameters\" : {\n        \"commands\" : [ \"if ($(Test-Path SQLServerReplatform) -eq $False) { New-Item -Name SQLServerReplatform -ItemType directory }\", \"cd SQLServerReplatform\", \"$currentDirectory = $(Get-Location).Path\", \"Write-Host SSM current directory: $currentDirectory\", \"Write-Host To view restore logs, go to: $currentDirectory/logs/{{automation:EXECUTION_ID}}/log.txt\", \"if ($(Test-Path Scripts) -eq $True) { rm -r Scripts }\", \"New-Item -Name Scripts -ItemType directory\", \"[void](wget -P $currentDirectory/Scripts https://s3-us-west-1.amazonaws.com/awsec2-server-upgrade-prod/SQLServerRestore.zip -q)\", \"Expand-Archive -Path $currentDirectory/Scripts/SQLServerRestore.zip -DestinationPath $currentDirectory/Scripts\", \"$smoDirectory = $currentDirectory+'/Scripts/SMODLL'\", \"./Scripts/SQLServerRestore.ps1 -S3Input '{{ S3Input }}' -IsS3PresignedURL {{IsS3PresignedURL}} -InstanceIsNew $false -RunningDirectory $currentDirectory -DatabaseNames \\\"{{ DatabaseNames }}\\\" -ExecutionId {{automation:EXECUTION_ID}} -SmodllPath $smoDirectory\", \"rm -r $currentDirectory/Scripts\" ],\n        \"executionTimeout\" : \"18000\"\n      }\n    },\n    \"isEnd\" : \"true\"\n  }, {\n    \"name\" : \"restoreToExistingManagedLinuxInstance\",\n    \"action\" : \"aws:runCommand\",\n    \"timeoutSeconds\" : 18000,\n    \"inputs\" : {\n      \"DocumentName\" : \"AWS-RunShellScript\",\n      \"InstanceIds\" : [ \"{{ InstanceId }}\" ],\n      \"Parameters\" : {\n        \"commands\" : [ \"wget https://s3-us-west-1.amazonaws.com/awsec2-server-upgrade-prod/ManagedInstanceSQLServerRestoreWrapper.ps1\", \"sudo pwsh ./ManagedInstanceSQLServerRestoreWrapper.ps1 -S3Input '{{ S3Input }}' -IsS3PresignedURL {{ IsS3PresignedURL }} -DatabaseNames {{ DatabaseNames }} -ExecutionId {{ automation:EXECUTION_ID }}\", \"rm -r ManagedInstanceSQLServerRestoreWrapper.ps1\" ],\n        \"executionTimeout\" : \"18000\"\n      }\n    },\n    \"isEnd\" : \"true\"\n  }, {\n    \"name\" : \"doesInstanceNeedToBeCreatedWindows\",\n    \"action\" : \"aws:branch\",\n    \"onFailure\" : \"Abort\",\n    \"inputs\" : {\n      \"Choices\" : [ {\n        \"Not\" : {\n          \"Variable\" : \"{{ InstanceId }}\",\n          \"StringEquals\" : \"\"\n        },\n        \"NextStep\" : \"tagExistingInstance\"\n      } ],\n      \"Default\" : \"getAMIWindows\"\n    }\n  }, {\n    \"name\" : \"getAMIWindows\",\n    \"action\" : \"aws:executeAwsApi\",\n    \"onFailure\" : \"Abort\",\n    \"inputs\" : {\n      \"Service\" : \"ec2\",\n      \"Api\" : \"DescribeImages\",\n      \"Owners\" : [ \"amazon\" ],\n      \"Filters\" : [ {\n        \"Name\" : \"name\",\n        \"Values\" : [ \"Windows_Server-2019-English-Full-SQL_2017_{{ SQLServerEdition }}-2019.05.15\" ]\n      }, {\n        \"Name\" : \"state\",\n        \"Values\" : [ \"available\" ]\n      } ]\n    },\n    \"outputs\" : [ {\n      \"Name\" : \"amiId\",\n      \"Selector\" : \"$.Images[0].ImageId\",\n      \"Type\" : \"String\"\n    } ],\n    \"isCritical\" : \"true\",\n    \"nextStep\" : \"branchOnWhetherKeyPairExistsWindows\"\n  }, {\n    \"name\" : \"branchOnWhetherKeyPairExistsWindows\",\n    \"action\" : \"aws:branch\",\n    \"onFailure\" : \"Abort\",\n    \"inputs\" : {\n      \"Choices\" : [ {\n        \"Not\" : {\n          \"Variable\" : \"{{ KeyPair }}\",\n          \"EqualsIgnoreCase\" : \"\"\n        },\n        \"NextStep\" : \"createNewInstanceWithKeyPairWindows\"\n      } ],\n      \"Default\" : \"createNewInstanceWithoutKeyPairWindows\"\n    }\n  }, {\n    \"name\" : \"createNewInstanceWithKeyPairWindows\",\n    \"action\" : \"aws:runInstances\",\n    \"maxAttempts\" : 3,\n    \"timeoutSeconds\" : 1200,\n    \"onFailure\" : \"Abort\",\n    \"inputs\" : {\n      \"ImageId\" : \"{{ getAMIWindows.amiId }}\",\n      \"InstanceType\" : \"{{ InstanceType }}\",\n      \"MinInstanceCount\" : 1,\n      \"MaxInstanceCount\" : 1,\n      \"IamInstanceProfileName\" : \"{{ IamInstanceProfileName }}\",\n      \"KeyName\" : \"{{ KeyPair }}\",\n      \"SubnetId\" : \"{{ SubnetId }}\",\n      \"TagSpecifications\" : [ {\n        \"ResourceType\" : \"instance\",\n        \"Tags\" : [ {\n          \"Key\" : \"AWSEC2-SQLREPLATFORM-INSTANCE-KEY\",\n          \"Value\" : \"AWSEC2-{{automation:EXECUTION_ID}}\"\n        } ]\n      } ],\n      \"BlockDeviceMappings\" : [ {\n        \"DeviceName\" : \"/dev/sda1\",\n        \"Ebs\" : {\n          \"VolumeSize\" : \"{{ DataDirectorySize }}\"\n        }\n      } ]\n    },\n    \"nextStep\" : \"getInstance\"\n  }, {\n    \"name\" : \"createNewInstanceWithoutKeyPairWindows\",\n    \"action\" : \"aws:runInstances\",\n    \"maxAttempts\" : 3,\n    \"timeoutSeconds\" : 1200,\n    \"onFailure\" : \"Abort\",\n    \"inputs\" : {\n      \"ImageId\" : \"{{ getAMIWindows.amiId }}\",\n      \"InstanceType\" : \"{{ InstanceType }}\",\n      \"MinInstanceCount\" : 1,\n      \"MaxInstanceCount\" : 1,\n      \"IamInstanceProfileName\" : \"{{ IamInstanceProfileName }}\",\n      \"SubnetId\" : \"{{ SubnetId }}\",\n      \"TagSpecifications\" : [ {\n        \"ResourceType\" : \"instance\",\n        \"Tags\" : [ {\n          \"Key\" : \"AWSEC2-SQLREPLATFORM-INSTANCE-KEY\",\n          \"Value\" : \"AWSEC2-{{automation:EXECUTION_ID}}\"\n        } ]\n      } ],\n      \"BlockDeviceMappings\" : [ {\n        \"DeviceName\" : \"/dev/xvdb\",\n        \"Ebs\" : {\n          \"VolumeSize\" : \"{{ DataDirectorySize }}\"\n        }\n      } ]\n    },\n    \"nextStep\" : \"getInstance\"\n  }, {\n    \"name\" : \"branchOnTargetOperatingSystem\",\n    \"action\" : \"aws:branch\",\n    \"onFailure\" : \"Abort\",\n    \"inputs\" : {\n      \"Choices\" : [ {\n        \"Variable\" : \"{{ TargetOperatingSystem }}\",\n        \"StringEquals\" : \"Linux\",\n        \"NextStep\" : \"doesInstanceNeedToBeConfigured\"\n      }, {\n        \"Variable\" : \"{{ TargetOperatingSystem }}\",\n        \"StringEquals\" : \"Windows\",\n        \"NextStep\" : \"doesInstanceNeedToBeConfiguredWindows\"\n      } ]\n    }\n  }, {\n    \"name\" : \"doesInstanceNeedToBeConfiguredWindows\",\n    \"action\" : \"aws:branch\",\n    \"onFailure\" : \"Abort\",\n    \"inputs\" : {\n      \"Choices\" : [ {\n        \"Not\" : {\n          \"Variable\" : \"{{ InstanceId }}\",\n          \"EqualsIgnoreCase\" : \"\"\n        },\n        \"NextStep\" : \"restoreToExistingEC2InstanceWindows\"\n      } ],\n      \"Default\" : \"restoreToNewInstanceWindows\"\n    }\n  }, {\n    \"name\" : \"restoreToNewInstanceWindows\",\n    \"action\" : \"aws:runCommand\",\n    \"timeoutSeconds\" : 18000,\n    \"inputs\" : {\n      \"DocumentName\" : \"AWS-RunPowerShellScript\",\n      \"InstanceIds\" : [ \"{{ getInstance.InstanceId }}\" ],\n      \"Parameters\" : {\n        \"commands\" : [ \"Set-Location 'C:\\\\Program Files\\\\Amazon'\", \"New-Item -Name SQLServerReplatform -ItemType directory\", \"cd SQLServerReplatform\", \"$currentDirectory = $(Get-Location).Path\", \"Write-Host SSM current directory: $currentDirectory\", \"Write-Host To view restore logs, go to: $currentDirectory\\\\runs\\\\{{automation:EXECUTION_ID}}\\\\log.txt\", \"New-Item -Name Scripts -ItemType directory\", \"$scriptsDirectory = Join-Path $currentDirectory Scripts\", \"[void](new-object System.Net.WebClient).DownloadFile('https://s3-us-west-1.amazonaws.com/awsec2-server-upgrade-prod/SQLServerRestoreWindows.zip', \\\"$(Join-Path $scriptsDirectory SQLServerRestoreWindows.zip)\\\")\", \"Expand-Archive -Path $(Join-Path $scriptsDirectory SQLServerRestoreWindows.zip) -DestinationPath $scriptsDirectory\", \"$smoDirectory = Join-Path $scriptsDirectory SMODLL\", \" .\\\\Scripts\\\\SQLServerRestoreWindows.ps1 -S3Input '{{ S3Input }}' -IsS3PresignedURL {{ IsS3PresignedURL }} -InstanceIsNew $true -RunningDirectory $currentDirectory -DatabaseNames {{ DatabaseNames }} -ExecutionId {{ automation:EXECUTION_ID }} -SmodllPath $smoDirectory -Os Windows\", \"if ($(Test-Path $scriptsDirectory) -eq $True) { rm -r $scriptsDirectory }\" ],\n        \"executionTimeout\" : \"18000\"\n      }\n    },\n    \"isEnd\" : \"true\"\n  }, {\n    \"name\" : \"restoreToExistingEC2InstanceWindows\",\n    \"action\" : \"aws:runCommand\",\n    \"timeoutSeconds\" : 18000,\n    \"inputs\" : {\n      \"DocumentName\" : \"AWS-RunPowerShellScript\",\n      \"InstanceIds\" : [ \"{{ InstanceId }}\" ],\n      \"Parameters\" : {\n        \"commands\" : [ \"Set-Location 'C:\\\\Program Files\\\\Amazon'\", \"if ($(Test-Path SQLServerReplatform) -eq $False) { New-Item -Name SQLServerReplatform -ItemType directory }\", \"Set-Location SQLServerReplatform\", \"$currentDirectory = $(Get-Location).Path\", \"Write-Host SSM current directory: $currentDirectory\", \"Write-Host To view restore logs, go to: $currentDirectory\\\\runs\\\\{{automation:EXECUTION_ID}}\\\\log.txt\", \"if ($(Test-Path Scripts) -eq $True) { rm -r Scripts }\", \"New-Item -Name Scripts -ItemType directory\", \"$scriptsDirectory = Join-Path $currentDirectory Scripts\", \"[void](new-object System.Net.WebClient).DownloadFile('https://s3-us-west-1.amazonaws.com/awsec2-server-upgrade-prod/SQLServerRestoreWindows.zip', \\\"$(Join-Path $scriptsDirectory SQLServerRestoreWindows.zip)\\\")\", \"Expand-Archive -Path $(Join-Path $scriptsDirectory SQLServerRestoreWindows.zip) -DestinationPath $scriptsDirectory\", \"$smoDirectory = Join-Path $scriptsDirectory SMODLL\", \" .\\\\Scripts\\\\SQLServerRestoreWindows.ps1 -S3Input '{{ S3Input }}' -IsS3PresignedURL {{ IsS3PresignedURL }} -InstanceIsNew $false -RunningDirectory $currentDirectory -DatabaseNames {{ DatabaseNames }} -ExecutionId {{ automation:EXECUTION_ID }} -SmodllPath $smoDirectory -Os Windows\", \"if ($(Test-Path $scriptsDirectory) -eq $True) { rm -r $scriptsDirectory }\" ],\n        \"executionTimeout\" : \"18000\"\n      }\n    },\n    \"isEnd\" : \"true\"\n  } ],\n  \"outputs\" : [ \"getInstance.InstanceId\", \"restoreToNewInstanceLinux.Output\", \"restoreToExistingEC2InstanceLinux.Output\", \"restoreToExistingManagedLinuxInstance.Output\", \"restoreToNewInstanceWindows.Output\", \"restoreToExistingEC2InstanceWindows.Output\" ]\n}",
  "CreatedDate": "2022-03-09T19:32:20.485Z",
  "DisplayName": null,
  "DocumentFormat": {
    "Value": "JSON"
  },
  "DocumentType": {
    "Value": "Automation"
  },
  "DocumentVersion": "5",
  "Name": "AWSEC2-SQLServerDBRestore",
  "Requires": [],
  "ReviewStatus": null,
  "Status": {
    "Value": "Active"
  },
  "StatusInformation": null,
  "VersionName": null,
  "ResponseMetadata": {
    "RequestId": "d322dc73-73c3-472c-9cd6-56a2f513ceb2",
    "Metadata": {},
    "ChecksumAlgorithm": 0,
    "ChecksumValidationStatus": 0
  },
  "ContentLength": 26534,
  "HttpStatusCode": 200,
  "LoggedAt": "2022-10-31T07:14:42.8432832+00:00"
}
