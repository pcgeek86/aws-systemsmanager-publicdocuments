{
  "AttachmentsContent": [],
  "Content": "{\n  \"description\" : \"Automation Document for installing the Crowdstike's Falcon Sensor .\",\n  \"schemaVersion\" : \"0.3\",\n  \"assumeRole\" : \"{{ AutomationAssumeRole }}\",\n  \"parameters\" : {\n    \"AutomationAssumeRole\" : {\n      \"type\" : \"String\",\n      \"description\" : \"(Required) The ARN of the role that allows Automation to perform the actions on your behalf. If no role is specified, Systems Manager Automation uses your IAM permissions to run this runbook.\",\n      \"default\" : \"\"\n    },\n    \"Action\" : {\n      \"type\" : \"String\",\n      \"allowedValues\" : [ \"Install\", \"Uninstall\" ],\n      \"description\" : \"(Required) Specify whether or not to install or uninstall the package.\",\n      \"default\" : \"Install\"\n    },\n    \"InstallationType\" : {\n      \"type\" : \"String\",\n      \"allowedValues\" : [ \"Uninstall and reinstall\" ],\n      \"description\" : \"(Optional) Specify the type of installation. Uninstall and reinstall: The application is taken offline until the reinstallation process completes. In-place update: The application is available while new or updated files are added to the installation.\",\n      \"default\" : \"Uninstall and reinstall\"\n    },\n    \"LinuxPackageVersion\" : {\n      \"type\" : \"String\",\n      \"description\" : \"(Optional) The version of the package to install or uninstall on Linux nodes. If you do not specify a version, the system installs the default version specified by the Distributor package.\",\n      \"default\" : \"\"\n    },\n    \"LinuxInstallerParams\" : {\n      \"type\" : \"String\",\n      \"default\" : \"\",\n      \"description\" : \"(Optional) Enter CrowdStrike's install time params to be used on Linux nodes. For more information refer to the console.\"\n    },\n    \"WindowsPackageVersion\" : {\n      \"type\" : \"String\",\n      \"description\" : \"(Optional) The version of the package to install or uninstall on Windows nodes. If you do not specify a version, the system installs the default version specified by the Distributor package.\",\n      \"default\" : \"\"\n    },\n    \"WindowsInstallerParams\" : {\n      \"type\" : \"String\",\n      \"default\" : \"\",\n      \"description\" : \"(Optional) Enter CrowdStrike's install time params to be used on Windows nodes. For more information refer to the console.\"\n    },\n    \"FalconCloud\" : {\n      \"type\" : \"String\",\n      \"description\" : \"(Required) SSM Parameter Store name that contains the Falcon Cloud URL for CrowdStrike APIs.\",\n      \"default\" : \"/CrowdStrike/Falcon/Cloud\"\n    },\n    \"FalconClientId\" : {\n      \"type\" : \"String\",\n      \"default\" : \"/CrowdStrike/Falcon/ClientId\",\n      \"description\" : \"(Required) SSM Parameter Store name that contains the Falcon Client Id for CrowdStrike APIs.\"\n    },\n    \"FalconClientSecret\" : {\n      \"type\" : \"String\",\n      \"description\" : \"(Required) SSM Parameter Store name that contains the Falcon Client Secret for CrowdStrike APIs.\",\n      \"default\" : \"/CrowdStrike/Falcon/ClientSecret\"\n    },\n    \"InstanceIds\" : {\n      \"type\" : \"StringList\"\n    },\n    \"Targets\" : {\n      \"type\" : \"MapList\",\n      \"default\" : [ ]\n    }\n  },\n  \"mainSteps\" : [ {\n    \"name\" : \"GetSSMInstanceInformation\",\n    \"action\" : \"aws:executeAwsApi\",\n    \"inputs\" : {\n      \"Service\" : \"ssm\",\n      \"Api\" : \"DescribeInstanceInformation\",\n      \"Filters\" : [ {\n        \"Key\" : \"InstanceIds\",\n        \"Values\" : [ \"{{ InstanceIds }}\" ]\n      } ]\n    },\n    \"outputs\" : [ {\n      \"Name\" : \"instances\",\n      \"Selector\" : \"$.InstanceInformationList\",\n      \"Type\" : \"MapList\"\n    } ]\n  }, {\n    \"name\" : \"CompileInstanceList\",\n    \"action\" : \"aws:executeScript\",\n    \"inputs\" : {\n      \"Runtime\" : \"python3.7\",\n      \"Handler\" : \"script_handler\",\n      \"InputPayload\" : {\n        \"instances\" : \"{{ GetSSMInstanceInformation.instances }}\"\n      },\n      \"Script\" : \"def script_handler(events, context):\\n  window_instances = []\\n  linux_instances = []\\n\\n  for instance in events['instances']:\\n    if instance['PlatformType'] == 'Windows':\\n      window_instances.append(instance['InstanceId'])\\n    elif instance['PlatformType'] == 'Linux':\\n      linux_instances.append(instance['InstanceId'])\\n    else:\\n      raise ValueError('Unsupported platform {}'.format(instance['PlatformType']))\\n    \\n  return {\\n    'windows_instances': window_instances,\\n    'linux_instances': linux_instances,\\n    'contains_windows_instances': any(window_instances),\\n    'contains_linux_instances': any(linux_instances)\\n  }\"\n    },\n    \"outputs\" : [ {\n      \"Name\" : \"windows_instances\",\n      \"Selector\" : \"$.Payload.windows_instances\",\n      \"Type\" : \"StringList\"\n    }, {\n      \"Name\" : \"linux_instances\",\n      \"Selector\" : \"$.Payload.linux_instances\",\n      \"Type\" : \"StringList\"\n    }, {\n      \"Name\" : \"contains_windows_instances\",\n      \"Selector\" : \"$.Payload.contains_windows_instances\",\n      \"Type\" : \"Boolean\"\n    }, {\n      \"Name\" : \"contains_linux_instances\",\n      \"Selector\" : \"$.Payload.contains_linux_instances\",\n      \"Type\" : \"Boolean\"\n    } ]\n  }, {\n    \"name\" : \"GetAuthenticationToken\",\n    \"action\" : \"aws:executeScript\",\n    \"inputs\" : {\n      \"Runtime\" : \"python3.7\",\n      \"Handler\" : \"script_handler\",\n      \"Script\" : \"import http.client\\nimport mimetypes\\nimport urllib.parse\\nimport boto3\\nimport json\\n\\ndef script_handler(events, context):\\n  print('Configuring AWS region {}'.format(events['Region']))\\n  ssm = boto3.client('ssm', region_name=events['Region'])\\n\\n  print('Fetching required configuration from Parameter Service')\\n\\n  print('... Fetching FalconCloud')\\n  apiGateWayHostResponse = ssm.get_parameter(Name=events['FalconCloud'], WithDecryption=True)\\n  if apiGateWayHostResponse['ResponseMetadata']['HTTPStatusCode'] != 200:\\n    raise ValueError('Required property {} not found'.format(events['FalconCloud']))\\n\\n  print('... Fetching FalconClientId')\\n  apiGatewayClientIDResponse = ssm.get_parameter(Name=events['FalconClientId'], WithDecryption=True)\\n  if apiGatewayClientIDResponse['ResponseMetadata']['HTTPStatusCode'] != 200:\\n    raise ValueError('Required property {} not found'.format(events['FalconClientId']))\\n\\n  print('... Fetching FalconClientSecret')\\n  apiGatewayClientSecretResponse = ssm.get_parameter(Name=events['FalconClientSecret'], WithDecryption=True)\\n  if apiGatewayClientSecretResponse['ResponseMetadata']['HTTPStatusCode'] != 200:\\n    raise ValueError('Required property {} not found'.format(events['FalconClientSecret']))\\n\\n  apiGateWayHostValue = apiGateWayHostResponse['Parameter']['Value']\\n  apiGateWayHostValue = apiGateWayHostValue.replace(\\\"https://\\\", \\\"\\\").replace(\\\"http://\\\", \\\"\\\")\\n  apiGatewayClientIDValue = apiGatewayClientIDResponse['Parameter']['Value']\\n  apiGatewayClientSecretValue = apiGatewayClientSecretResponse['Parameter']['Value']\\n\\n  try:\\n    print('Requesting Authentication token from Crowdstrike backend.')\\n    conn = http.client.HTTPSConnection(apiGateWayHostValue)\\n    params = urllib.parse.urlencode({'client_id': apiGatewayClientIDValue, 'client_secret': apiGatewayClientSecretValue})\\n    headers = {'Content-Type': 'application/x-www-form-urlencoded'}\\n    conn.request('POST', '/oauth2/token', params, headers)\\n    res = conn.getresponse()\\n\\n    if res.status != 201:\\n      raise ValueError('Received non success response {}. Error {}'.format(res.status, res.reason))\\n\\n    data = res.read()\\n    print('Successfully received OAuth token.')\\n    return {'AuthToken': json.loads(data)['access_token'], 'ApiGatewayHost':apiGateWayHostValue}\\n  except Exception as e:\\n    raise ValueError('Failure while interacting with Crowdstrike backend. Error: {}'.format(e))\",\n      \"InputPayload\" : {\n        \"FalconCloud\" : \"{{FalconCloud}}\",\n        \"FalconClientId\" : \"{{FalconClientId}}\",\n        \"FalconClientSecret\" : \"{{FalconClientSecret}}\",\n        \"Region\" : \"{{global:REGION}}\"\n      }\n    },\n    \"outputs\" : [ {\n      \"Name\" : \"AuthToken\",\n      \"Selector\" : \"$.Payload.AuthToken\",\n      \"Type\" : \"String\"\n    }, {\n      \"Name\" : \"ApiGatewayHost\",\n      \"Selector\" : \"$.Payload.ApiGatewayHost\",\n      \"Type\" : \"String\"\n    } ]\n  }, {\n    \"name\" : \"GetCustomerIdentifier\",\n    \"action\" : \"aws:executeScript\",\n    \"inputs\" : {\n      \"Runtime\" : \"python3.7\",\n      \"Handler\" : \"script_handler\",\n      \"Script\" : \"import http.client\\nimport mimetypes\\nimport urllib.parse\\nimport json\\ndef script_handler(events, context):\\n  try:\\n    print('Requesting Customer ID from Crowdstrike backend.')\\n    conn = http.client.HTTPSConnection(events['ApiGatewayHost'])\\n    headers = {\\n      'Authorization': 'Bearer {}'.format(events['AuthToken'])\\n    }\\n\\n    conn.request('GET', '/sensors/queries/installers/ccid/v1', '', headers)\\n    res = conn.getresponse()\\n\\n    if res.status != 200:\\n      raise ValueError('Received non success response {}. Error {}'.format(res.status, res.reason))\\n\\n    data = res.read()\\n    print('Successfully received Customer ID.')\\n    return {'CCID': json.loads(data)['resources'][0]}\\n  except Exception as e:\\n    raise ValueError('Failure while interacting with Crowdstrike backend. Error {}'.format(e))\\n\",\n      \"InputPayload\" : {\n        \"AuthToken\" : \"{{GetAuthenticationToken.AuthToken}}\",\n        \"ApiGatewayHost\" : \"{{GetAuthenticationToken.ApiGatewayHost}}\"\n      }\n    },\n    \"outputs\" : [ {\n      \"Name\" : \"CCID\",\n      \"Selector\" : \"$.Payload.CCID\",\n      \"Type\" : \"String\"\n    } ]\n  }, {\n    \"name\" : \"GetInstallationToken\",\n    \"action\" : \"aws:executeScript\",\n    \"inputs\" : {\n      \"Runtime\" : \"python3.6\",\n      \"Handler\" : \"script_handler\",\n      \"Script\" : \"import http.client\\nimport mimetypes\\nimport urllib.parse\\nimport json\\ndef script_handler(events, context):\\n  try:\\n    print('Requesting Installtion Token from Crowdstrike backend.')\\n    conn = http.client.HTTPSConnection(events['ApiGatewayHost'])\\n\\n    headers = {\\n      'Authorization': 'Bearer {}'.format(events['AuthToken'])\\n    }\\n\\n    conn.request('GET', \\\"/installation-tokens/queries/tokens/v1?filter=status:'valid'\\\", '', headers)\\n    queryRes = conn.getresponse()\\n\\n    if queryRes.status != 200:\\n      raise ValueError('Received non success response {} while querying for token. Error {}'.format(queryRes.status, queryRes.reason))\\n\\n    queryResData = queryRes.read()\\n    resources = json.loads(queryResData)['resources']\\n    if len(resources) == 0:\\n      print('No Installation token found, skipping')\\n      return {'InstallationToken': \\\"\\\" }\\n\\n    resId = resources[0]\\n    url ='/installation-tokens/entities/tokens/v1?ids={}'.format(resId)\\n    conn.request('GET', url, '', headers)\\n    entitiesRes = conn.getresponse()\\n\\n    if entitiesRes.status != 200:\\n      raise ValueError('Received non success response {} while fetching token by id. Error {}'.format(entitiesRes.status, entitiesRes.reason))\\n\\n    entitiesResData = entitiesRes.read()\\n    token = json.loads(entitiesResData)['resources'][0]['value']\\n\\n    print('Successfully received Installation token')\\n    return {'InstallationToken': token }\\n  except Exception as e:\\n    raise ValueError('Failure while interacting with Crowdstrike backend. Error {}'.format(e))\",\n      \"InputPayload\" : {\n        \"AuthToken\" : \"{{GetAuthenticationToken.AuthToken}}\",\n        \"ApiGatewayHost\" : \"{{GetAuthenticationToken.ApiGatewayHost}}\"\n      }\n    },\n    \"outputs\" : [ {\n      \"Selector\" : \"$.Payload.InstallationToken\",\n      \"Name\" : \"InstallationToken\",\n      \"Type\" : \"String\"\n    } ]\n  }, {\n    \"name\" : \"BranchExecuteWindowsDistributorPackage\",\n    \"action\" : \"aws:branch\",\n    \"inputs\" : {\n      \"Choices\" : [ {\n        \"NextStep\" : \"ExecuteDistributorPackageWindows\",\n        \"Variable\" : \"{{ CompileInstanceList.contains_windows_instances }}\",\n        \"BooleanEquals\" : true\n      } ],\n      \"Default\" : \"BranchExecuteLinuxDistributorPackage\"\n    }\n  }, {\n    \"name\" : \"ExecuteDistributorPackageWindows\",\n    \"action\" : \"aws:runCommand\",\n    \"onFailure\" : \"Continue\",\n    \"inputs\" : {\n      \"Targets\" : \"{{ Targets }}\",\n      \"InstanceIds\" : \"{{ CompileInstanceList.windows_instances }}\",\n      \"DocumentName\" : \"AWS-ConfigureAWSPackage\",\n      \"Parameters\" : {\n        \"name\" : \"FalconSensor-Windows\",\n        \"action\" : \"{{Action}}\",\n        \"version\" : \"{{WindowsPackageVersion}}\",\n        \"additionalArguments\" : {\n          \"SSM_CS_INSTALLTOKEN\" : \"{{GetInstallationToken.InstallationToken}}\",\n          \"SSM_CS_CCID\" : \"{{GetCustomerIdentifier.CCID}}\",\n          \"SSM_CS_INSTALLPARAMS\" : \"{{WindowsInstallerParams}}\",\n          \"SSM_CS_AUTH_TOKEN\" : \"{{GetAuthenticationToken.AuthToken}}\",\n          \"SSM_CS_HOST\" : \"{{GetAuthenticationToken.ApiGatewayHost}}\"\n        }\n      }\n    }\n  }, {\n    \"name\" : \"BranchExecuteLinuxDistributorPackage\",\n    \"action\" : \"aws:branch\",\n    \"inputs\" : {\n      \"Choices\" : [ {\n        \"NextStep\" : \"ExecuteDistributorPackageLinux\",\n        \"Variable\" : \"{{ CompileInstanceList.contains_linux_instances }}\",\n        \"BooleanEquals\" : true\n      } ]\n    },\n    \"isEnd\" : true\n  }, {\n    \"name\" : \"ExecuteDistributorPackageLinux\",\n    \"action\" : \"aws:runCommand\",\n    \"inputs\" : {\n      \"Targets\" : \"{{ Targets }}\",\n      \"InstanceIds\" : \"{{ CompileInstanceList.linux_instances }}\",\n      \"DocumentName\" : \"AWS-ConfigureAWSPackage\",\n      \"Parameters\" : {\n        \"name\" : \"FalconSensor-Linux\",\n        \"action\" : \"{{Action}}\",\n        \"version\" : \"{{LinuxPackageVersion}}\",\n        \"additionalArguments\" : {\n          \"SSM_CS_INSTALLTOKEN\" : \"{{GetInstallationToken.InstallationToken}}\",\n          \"SSM_CS_CCID\" : \"{{GetCustomerIdentifier.CCID}}\",\n          \"SSM_CS_INSTALLPARAMS\" : \"{{LinuxInstallerParams}}\",\n          \"SSM_CS_AUTH_TOKEN\" : \"{{GetAuthenticationToken.AuthToken}}\",\n          \"SSM_CS_HOST\" : \"{{GetAuthenticationToken.ApiGatewayHost}}\"\n        }\n      }\n    }\n  } ]\n}",
  "CreatedDate": "2023-05-03T06:20:42.803Z",
  "DisplayName": null,
  "DocumentFormat": {
    "Value": "JSON"
  },
  "DocumentType": {
    "Value": "Automation"
  },
  "DocumentVersion": "1",
  "Name": "CrowdStrike-FalconSensorDeploy",
  "Requires": [],
  "ReviewStatus": null,
  "Status": {
    "Value": "Active"
  },
  "StatusInformation": null,
  "VersionName": null,
  "ResponseMetadata": {
    "RequestId": "65007e45-e3ae-47b0-be35-67c009ebdc86",
    "Metadata": {},
    "ChecksumAlgorithm": 0,
    "ChecksumValidationStatus": 0
  },
  "ContentLength": 14888,
  "HttpStatusCode": 200,
  "LoggedAt": "2023-06-20T07:12:34.0518695+00:00"
}
