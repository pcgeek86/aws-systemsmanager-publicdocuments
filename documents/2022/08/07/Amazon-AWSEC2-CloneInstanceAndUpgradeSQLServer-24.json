{
  "AttachmentsContent": [],
  "Content": "{\n  \"schemaVersion\" : \"0.3\",\n  \"description\" : \"SSM Automation for upgrading SQL Server 2008 (or later) to SQL Server 2014/2016/2017/2019.  The running instance remains untouched, while the automation upgrades a cloned instance. If the instance is running Windows Server 2008 R2, the automation will upgrade the operating system to Windows Server 2012 R2. If you are upgrading the SQL Server to 2019  and your Windows is 2008/2012, it will first upgrade your Windows Server to 2016 and upgrade  SQL Server afterwards.\",\n  \"parameters\" : {\n    \"InstanceId\" : {\n      \"type\" : \"String\",\n      \"description\" : \"(Required) The instance running Windows Server 2008 R2 or above, SQL Server 2008 or above, with the SSM agent installed.\"\n    },\n    \"IamInstanceProfile\" : {\n      \"type\" : \"String\",\n      \"description\" : \"(Required) The IAM instance profile managed policy attached. Please refer to https://docs.aws.amazon.com/systems-manager/latest/userguide/sysman-configuring-access-role.html for more information.\"\n    },\n    \"SubnetId\" : {\n      \"type\" : \"String\",\n      \"description\" : \"(Required) Provide a subnet for the upgrade process. Verify that the subnet has outbound connectivity to AWS services, Amazon S3, and Microsoft (to download patches).\",\n      \"allowedPattern\" : \"^subnet-[a-z0-9]{8,17}$\"\n    },\n    \"SQLServerSnapshotId\" : {\n      \"type\" : \"String\",\n      \"description\" : \"(Conditional) The snapshot id for target SQL Server installation media. This parameter  is not required for SQL Server license-included instances (instances launched using an  AWS provided Amazon Machine Image for Windows Server with Microsoft SQL Server), only  required if you are running BYOL instance.\",\n      \"default\" : \"\",\n      \"allowedPattern\" : \"(^$|^snap-[0-9a-f]+$)\"\n    },\n    \"AlternativeKeyPairName\" : {\n      \"type\" : \"String\",\n      \"description\" : \"(Optional) The name of an alternative key pair to use during the upgrade process. Useful in situations where the key pair used on the original instance is not available.\",\n      \"default\" : \"\"\n    },\n    \"KeepPreUpgradeImageBackUp\" : {\n      \"type\" : \"String\",\n      \"description\" : \"(Optional) If set to True, the Automation doesn't delete the AMI created from the instance before the upgrade. By default, the AMI is deleted.\",\n      \"default\" : \"False\",\n      \"allowedValues\" : [ \"True\", \"False\" ]\n    },\n    \"RebootInstanceBeforeTakingImage\" : {\n      \"type\" : \"String\",\n      \"description\" : \"(Optional) If set to True, the Automation reboots the instance before creating a pre-upgrade AMI. By default, the Automation doesn't reboot before upgrade.\",\n      \"default\" : \"False\",\n      \"allowedValues\" : [ \"True\", \"False\" ]\n    },\n    \"TargetSQLVersion\" : {\n      \"type\" : \"String\",\n      \"description\" : \"(Optional) Select the target SQL Server version. Default is SQL Server 2016.\",\n      \"default\" : \"2016\",\n      \"allowedValues\" : [ \"2014\", \"2016\", \"2017\", \"2019\" ]\n    }\n  },\n  \"mainSteps\" : [ {\n    \"name\" : \"putSSMInvocationMetric\",\n    \"action\" : \"aws:putServerUpgradeMetrics\",\n    \"maxAttempts\" : 3,\n    \"onFailure\" : \"Abort\",\n    \"inputs\" : {\n      \"DimensionName\" : \"SSM_METRICS\",\n      \"DimensionValue\" : \"AWSEC2-CloneInstanceAndUpgradeSQLServer\",\n      \"MetricName\" : \"Invocations\",\n      \"MetricValue\" : \"1.0\"\n    },\n    \"isCritical\" : \"true\",\n    \"nextStep\" : \"assertSSMAgentOnline\"\n  }, {\n    \"name\" : \"assertSSMAgentOnline\",\n    \"action\" : \"aws:assertAwsResourceProperty\",\n    \"maxAttempts\" : 3,\n    \"timeoutSeconds\" : 300,\n    \"onFailure\" : \"Abort\",\n    \"inputs\" : {\n      \"Service\" : \"ssm\",\n      \"Api\" : \"DescribeInstanceInformation\",\n      \"InstanceInformationFilterList\" : [ {\n        \"key\" : \"InstanceIds\",\n        \"valueSet\" : [ \"{{ InstanceId }}\" ]\n      } ],\n      \"PropertySelector\" : \"$.InstanceInformationList[0].PingStatus\",\n      \"DesiredValues\" : [ \"Online\" ]\n    },\n    \"isCritical\" : \"true\",\n    \"nextStep\" : \"assertReadyToUpgradeSQLServer\"\n  }, {\n    \"name\" : \"assertReadyToUpgradeSQLServer\",\n    \"action\" : \"aws:runCommand\",\n    \"maxAttempts\" : 3,\n    \"onFailure\" : \"Abort\",\n    \"timeoutSeconds\" : 300,\n    \"inputs\" : {\n      \"DocumentName\" : \"AWS-RunPowerShellScript\",\n      \"InstanceIds\" : [ \"{{ InstanceId }}\" ],\n      \"Parameters\" : {\n        \"executionTimeout\" : \"300\",\n        \"commands\" : [ \"function Check-SqlUpgradeEligibility {\", \"$osInfo = (Get-WmiObject -class Win32_OperatingSystem)\", \"# https://docs.microsoft.com/en-us/windows/desktop/CIMWin32Prov/win32-operatingsystem ProductType 3 is Server\\\" ,\", \"if ($osInfo.ProductType -ne 3) {\", \"Write-Host \\\"Server Upgrade not allowed if Server is of type Work Station OR Domain Controller.\\\"\", \"exit 1\", \"}\", \"\", \"$OSVersion = $osInfo.Caption.ToUpper()\", \"$instances = (get-itemproperty \\\"HKLM:\\\\SOFTWARE\\\\Microsoft\\\\Microsoft SQL Server\\\").InstalledInstances\", \"if ($instances.count -eq 0) {\", \"Write-Host \\\"Couldn't find any installed instance of SQL Server.\\\"\", \"exit 1\", \"}\", \"if ($instances.count -gt 1) {\", \"Write-Host \\\"Found multiple instances of SQL Server, presently not supported\\\"\", \"exit 1\", \"}\", \"$instance = (Get-ItemProperty \\\"HKLM:\\\\SOFTWARE\\\\Microsoft\\\\Microsoft SQL Server\\\\Instance Names\\\\SQL\\\").$instances\", \"$instanceDetails = (Get-ItemProperty \\\"HKLM:\\\\SOFTWARE\\\\Microsoft\\\\Microsoft SQL Server\\\\$instance\\\\Setup\\\")\", \"$edition = $instanceDetails.Edition\", \"\", \"$targetSQLVersion = {{ TargetSQLVersion }}\", \"\", \"Write-Host \\\"SQL Server Edition is $edition\\\"\", \"\", \"if ($instanceDetails.Cluster) {\", \"Write-Host \\\"SQL Server is clustered, presently not supported\\\"\", \"exit 1\", \"}\", \"$v = $instanceDetails.Version.subString(0, $instanceDetails.Version.indexOf(\\\".\\\"))\", \"if ($v -ge 10) {\", \"if ($v -eq 10 ) {\", \"if ($instanceDetails.SP -lt 3) {\", \"Write-host \\\"SQL Server Version 2008 , apply patch for SQL Server 2008\\\"\", \"}\", \"ElseIf ($instanceDetails.SP -eq 3) {\", \"Write-host \\\"Supported SQL Version 2008 R2 SP3\\\"\", \"}\", \"}\", \"else {\", \"if (($v -eq 13) -and ($targetSQLVersion -eq '2014'))\", \"{ \", \"Write-Host \\\"Current SQL Version 2016, cannot downgrade to 2014.\\\"\", \"exit 1\", \"}\", \"elseif (($v -eq 14) -and (($targetSQLVersion -eq '2016') -or ($targetSQLVersion -eq '2014')))\", \"{ \", \"Write-Host \\\"Current SQL Version 2017, cannot downgrade to $targetSQLVersion.\\\"\", \"exit 1\", \"}\", \"elseif (($v -eq 15) -and (($targetSQLVersion -eq '2017') -or ($targetSQLVersion -eq '2016') -or ($targetSQLVersion -eq '2014')))\", \"{ \", \"Write-Host \\\"Current SQL Version 2019, cannot downgrade to $targetSQLVersion.\\\"\", \"  exit 1\", \"}\", \"else\", \"{ \", \"Write-host \\\"Supported SQL Version\\\"\", \"}\", \"}\", \"}\", \"else {\", \"Write-host \\\" SQL Server Version $instanceDetails.Version is presently not supported\\\"\", \"exit 1\", \"}\", \"[System.Reflection.Assembly]::LoadWithPartialName(\\\"Microsoft.SqlServer.SMO\\\") | out-null\", \"$SQLServer = New-Object (\\\"Microsoft.SqlServer.Management.Smo.Server\\\")\", \"if([string]::IsNullOrEmpty($SQLServer.VersionString)) {$SQLServer=New-Object (\\\"Microsoft.SqlServer.Management.Smo.Server\\\") \\\"$env:COMPUTERNAME\\\\$instances\\\"} \", \"Foreach ($Database in $SQLServer.Databases) {\", \"if ($Database.IsMirroringEnabled) {\", \"$Name = $Database.Name\", \"Write-Host \\\"Mirroring is enabled for DB $Name \\\"\", \"Write-Host \\\" Presently we are not supporting Mirroring instances \\\"\", \"exit 1\", \"}\", \"}\", \"\", \"$targetVersion = {{ TargetSQLVersion }}\", \"if ((($OSVersion.indexOf(\\\"2019\\\")  -ge 0) -or ($OSVersion.indexOf(\\\"2016\\\")  -ge 0)) -and (($OSVersion.indexOf(\\\"STANDARD\\\") -ge 0) -or ($OSVersion.indexOf(\\\"DATACENTER\\\") -ge 0))) {\", \"Write-Host \\\"OSVersion : $OSVersion \\\"\", \"}\", \"elseif (($OSVersion.indexOf(\\\"2012\\\") -ge 0 ) -and (($OSVersion.indexOf(\\\"STANDARD\\\") -ge 0) -or ($OSVersion.indexOf(\\\"DATACENTER\\\") -ge 0))) {\", \"if($targetVersion -eq \\\"2019\\\")\", \"{\", \"Write-Host \\\"WINDOWSUPGRADE 2016 Will be done first\\\"\", \"}\", \"else\", \"{\", \"Write-Host \\\"OSVersion : $OSVersion \\\"\", \"}\", \"}\", \"elseif ($OSVersion.indexOf(\\\"2008\\\") -ge 0 -and (($OSVersion.indexOf(\\\"STANDARD\\\") -ge 0) -or ($OSVersion.indexOf(\\\"DATACENTER\\\") -ge 0))) {\", \"Write-Host \\\"WINDOWSUPGRADE 2012 Will be done first\\\"\", \"}\", \"else {\", \"Write-Host \\\"This document support upgrades of 2012 R2/RTM Standard, 2012 R2/RTM Datacenter, 2016 Standard and 2016 Datacenter\\\"\", \"exit 1\", \"}\", \"}\", \"\", \"\", \"function Validate-InstanceLicensing([string]$SnapshotId) {\", \"$IsError = $True\", \"try {\", \"# signature verification for IMDS\", \"Add-Type -AssemblyName System.Security\", \"$region = \\\"us-west-2\\\"\", \"$certificate_string = (Invoke-RestMethod -Uri \\\"https://s3.us-west-2.amazonaws.com/aws.portingassistant.dotnet.datastore/certificates/imds_certificates.json\\\").certificates.$region\", \"$certificate_bytes_arr = [system.Text.Encoding]::UTF8.GetBytes($certificate_string)\", \"$token = (Invoke-RestMethod -Method Put -Uri http://169.254.169.254/latest/api/token -Headers @{\\\"X-aws-ec2-metadata-token-ttl-seconds\\\"=\\\"60\\\"})\", \"$Signature = [Convert]::FromBase64String((Invoke-WebRequest -UseBasicParsing -Headers @{'X-aws-ec2-metadata-token' = [string]$token} http://169.254.169.254/latest/dynamic/instance-identity/rsa2048).Content)\", \"$Document = [Text.Encoding]::UTF8.GetBytes((Invoke-WebRequest -UseBasicParsing -Headers @{'X-aws-ec2-metadata-token' = [string]$token} http://169.254.169.254/latest/dynamic/instance-identity/document).Content)\", \"$X509Certificate2 = New-Object -TypeName Security.Cryptography.X509Certificates.X509Certificate2 -ArgumentList @(,$certificate_bytes_arr)\", \"$Store = New-Object -TypeName Security.Cryptography.X509Certificates.X509Certificate2Collection -ArgumentList $X509Certificate2\", \"$SignatureDocument = New-Object -TypeName Security.Cryptography.Pkcs.SignedCms\", \"$SignatureDocument.Decode($Signature)\", \"$verify_result = $SignatureDocument.CheckSignature($Store, $true)\", \"if ($verify_result) {\", \"throw $verify_result\", \"}\", \"if(![Linq.Enumerable]::SequenceEqual($SignatureDocument.ContentInfo.Content, $Document)) {\", \"throw \\\"Instance Identity Document Cannot be Validated.\\\"\", \"}\", \"\", \"# compatible with PS2.0\", \"$token = (Invoke-RestMethod -Method Put -Uri http://169.254.169.254/latest/api/token -Headers @{\\\"X-aws-ec2-metadata-token-ttl-seconds\\\"=\\\"60\\\"})\", \"$webrequest = [System.Net.WebRequest]::Create(\\\"http://169.254.169.254/latest/dynamic/instance-identity/document\\\")\", \"$webrequest.Headers.Add(\\\"X-aws-ec2-metadata-token\\\",$token)\", \"$response = $webrequest.GetResponse()\", \"$stream = $response.GetResponseStream()\", \"$sr = new-object System.IO.StreamReader($stream)\", \"$content = $sr.ReadToEnd();\", \"[System.Reflection.Assembly]::LoadWithPartialName(\\\"System.Web.Extensions\\\") | out-null\", \"$ser = New-Object System.Web.Script.Serialization.JavaScriptSerializer\", \"$billingProduct = $ser.DeserializeObject($content).billingProducts\", \"if (($billingProduct -eq \\\"bp-6aa54003\\\") -or ($billingProduct -eq \\\"bp-62a5400b\\\") -or ($billingProduct -eq \\\"bp-65a5400c\\\")) {\", \"$IsError = $False\", \"Write-Host \\\"Instance has license included\\\"\", \"}\", \"elseif (-not [string]::IsNullOrEmpty($SnapshotId)) {\", \"$IsError = $False\", \"Write-Host \\\"Instance will use $SnapshotId for BYOL\\\"\", \"}\", \"else {\", \"$IsError = $True\", \"Write-Host \\\"Your instance is BYOL, but you did not provide a BYOL Windows installation media snapshot id. Please re-run this automation with the necessary paramaters.\\\"\", \"}\", \"}\", \"catch {\", \"Write-Error $_.Exception.Message\", \"}\", \"finally {\", \"if ($sr -ne $null) { $sr.Close(); }\", \"if ($response -ne $null) { $response.Close(); }\", \"if ($IsError) {\", \"exit 1\", \"}\", \"else {\", \"exit 0\", \"}\", \"}\", \"}\", \"\", \"try {\", \"Check-SqlUpgradeEligibility\", \"$SnapShotId = \\\"{{ SQLServerSnapshotId }}\\\"\", \"Validate-InstanceLicensing($SnapShotId)\", \"}\", \"catch {\", \"Write-Error $_.Exception.Message\", \"exit 1\", \"}\" ]\n      }\n    },\n    \"isCritical\" : \"true\",\n    \"nextStep\" : \"describeOriginalInstanceDetails\"\n  }, {\n    \"name\" : \"describeOriginalInstanceDetails\",\n    \"action\" : \"aws:executeAwsApi\",\n    \"maxAttempts\" : 2,\n    \"onFailure\" : \"Abort\",\n    \"timeoutSeconds\" : 300,\n    \"inputs\" : {\n      \"Service\" : \"ec2\",\n      \"Api\" : \"DescribeInstances\",\n      \"InstanceIds\" : [ \"{{ InstanceId }}\" ]\n    },\n    \"outputs\" : [ {\n      \"Name\" : \"InstanceType\",\n      \"Selector\" : \"$.Reservations[0].Instances[0].InstanceType\",\n      \"Type\" : \"String\"\n    }, {\n      \"Name\" : \"KeyName\",\n      \"Selector\" : \"$.Reservations[0].Instances[0].KeyName\",\n      \"Type\" : \"String\"\n    }, {\n      \"Name\" : \"AvailabilityZone\",\n      \"Selector\" : \"$.Reservations[0].Instances[0].Placement.AvailabilityZone\",\n      \"Type\" : \"String\"\n    }, {\n      \"Name\" : \"RootDeviceName\",\n      \"Selector\" : \"$.Reservations[0].Instances[0].RootDeviceName\",\n      \"Type\" : \"String\"\n    }, {\n      \"Name\" : \"SubnetId\",\n      \"Selector\" : \"$.Reservations[0].Instances[0].NetworkInterfaces[0].SubnetId\",\n      \"Type\" : \"String\"\n    }, {\n      \"Name\" : \"Platform\",\n      \"Selector\" : \"$.Reservations[0].Instances[0].Platform\",\n      \"Type\" : \"String\"\n    }, {\n      \"Name\" : \"SecurityGroupIds\",\n      \"Selector\" : \"$.Reservations[0].Instances[0].SecurityGroups..GroupId\",\n      \"Type\" : \"StringList\"\n    } ],\n    \"isCritical\" : \"false\",\n    \"nextStep\" : \"assertRootVolumeIsEbs\"\n  }, {\n    \"name\" : \"assertRootVolumeIsEbs\",\n    \"action\" : \"aws:assertAwsResourceProperty\",\n    \"onFailure\" : \"Abort\",\n    \"maxAttempts\" : 2,\n    \"timeoutSeconds\" : 300,\n    \"inputs\" : {\n      \"Service\" : \"ec2\",\n      \"Api\" : \"DescribeInstances\",\n      \"InstanceIds\" : [ \"{{ InstanceId }}\" ],\n      \"PropertySelector\" : \"$.Reservations[0].Instances[0].RootDeviceType\",\n      \"DesiredValues\" : [ \"ebs\" ]\n    },\n    \"isCritical\" : \"true\",\n    \"nextStep\" : \"branchIfWindowsUpgradeRequired\"\n  }, {\n    \"name\" : \"branchIfWindowsUpgradeRequired\",\n    \"action\" : \"aws:branch\",\n    \"onFailure\" : \"Abort\",\n    \"inputs\" : {\n      \"Choices\" : [ {\n        \"NextStep\" : \"putWindowsUpgradeRequiredMetric\",\n        \"Variable\" : \"{{ assertReadyToUpgradeSQLServer.Output }}\",\n        \"Contains\" : \"WINDOWSUPGRADE 2012\"\n      }, {\n        \"NextStep\" : \"putWindows2016UpgradeRequiredMetric\",\n        \"Variable\" : \"{{ assertReadyToUpgradeSQLServer.Output }}\",\n        \"Contains\" : \"WINDOWSUPGRADE 2016\"\n      } ],\n      \"Default\" : \"branchOnRebootInstanceBeforeTakingImage\"\n    },\n    \"isCritical\" : \"true\"\n  }, {\n    \"name\" : \"putWindowsUpgradeRequiredMetric\",\n    \"action\" : \"aws:putServerUpgradeMetrics\",\n    \"maxAttempts\" : 3,\n    \"onFailure\" : \"Abort\",\n    \"inputs\" : {\n      \"DimensionName\" : \"SSM_METRICS\",\n      \"DimensionValue\" : \"AWSEC2-CloneInstanceAndUpgradeSQLServer\",\n      \"MetricName\" : \"Windows_Upgrade_Required\",\n      \"MetricValue\" : \"1.0\"\n    },\n    \"isCritical\" : \"true\",\n    \"nextStep\" : \"upgradeWindowsFirst\"\n  }, {\n    \"name\" : \"putWindows2016UpgradeRequiredMetric\",\n    \"action\" : \"aws:putServerUpgradeMetrics\",\n    \"maxAttempts\" : 3,\n    \"onFailure\" : \"Abort\",\n    \"inputs\" : {\n      \"DimensionName\" : \"SSM_METRICS\",\n      \"DimensionValue\" : \"AWSEC2-CloneInstanceAndUpgradeSQLServer\",\n      \"MetricName\" : \"Windows_Upgrade_Required\",\n      \"MetricValue\" : \"1.0\"\n    },\n    \"isCritical\" : \"true\",\n    \"nextStep\" : \"upgradeWindows2016First\"\n  }, {\n    \"name\" : \"putNoWindowsUpgradeRequiredMetric\",\n    \"action\" : \"aws:putServerUpgradeMetrics\",\n    \"maxAttempts\" : 3,\n    \"onFailure\" : \"Abort\",\n    \"inputs\" : {\n      \"DimensionName\" : \"SSM_METRICS\",\n      \"DimensionValue\" : \"AWSEC2-CloneInstanceAndUpgradeSQLServer\",\n      \"MetricName\" : \"No_Windows_Upgrade_Required\",\n      \"MetricValue\" : \"1.0\"\n    },\n    \"isCritical\" : \"true\",\n    \"nextStep\" : \"branchOnRebootInstanceBeforeTakingImage\"\n  }, {\n    \"name\" : \"upgradeWindowsFirst\",\n    \"action\" : \"aws:executeAutomation\",\n    \"maxAttempts\" : 3,\n    \"onFailure\" : \"Abort\",\n    \"inputs\" : {\n      \"DocumentName\" : \"AWSEC2-CloneInstanceAndUpgradeWindows\",\n      \"RuntimeParameters\" : {\n        \"InstanceId\" : [ \"{{ InstanceId }}\" ],\n        \"IamInstanceProfile\" : [ \"{{ IamInstanceProfile }}\" ],\n        \"SubnetId\" : [ \"{{ SubnetId }}\" ],\n        \"AlternativeKeyPairName\" : [ \"{{ AlternativeKeyPairName }}\" ]\n      }\n    },\n    \"isCritical\" : \"true\",\n    \"nextStep\" : \"getWindowsUpgradeAMI\"\n  }, {\n    \"name\" : \"upgradeWindows2016First\",\n    \"action\" : \"aws:executeAutomation\",\n    \"maxAttempts\" : 3,\n    \"onFailure\" : \"Abort\",\n    \"inputs\" : {\n      \"DocumentName\" : \"AWSEC2-CloneInstanceAndUpgradeWindows\",\n      \"RuntimeParameters\" : {\n        \"InstanceId\" : [ \"{{ InstanceId }}\" ],\n        \"IamInstanceProfile\" : [ \"{{ IamInstanceProfile }}\" ],\n        \"SubnetId\" : [ \"{{ SubnetId }}\" ],\n        \"AlternativeKeyPairName\" : [ \"{{ AlternativeKeyPairName }}\" ],\n        \"TargetWindowVersion\" : [ \"2016\" ]\n      }\n    },\n    \"isCritical\" : \"true\",\n    \"nextStep\" : \"getWindows2016UpgradeAMI\"\n  }, {\n    \"name\" : \"getWindowsUpgradeAMI\",\n    \"action\" : \"aws:executeAwsApi\",\n    \"onFailure\" : \"Abort\",\n    \"inputs\" : {\n      \"Service\" : \"ssm\",\n      \"Api\" : \"GetAutomationExecution\",\n      \"AutomationExecutionId\" : \"{{ upgradeWindowsFirst.ExecutionId }}\"\n    },\n    \"outputs\" : [ {\n      \"Name\" : \"ImageId\",\n      \"Selector\" : \"$.AutomationExecution.Outputs.'UpgradedTo2012R2.ImageId'[0]\",\n      \"Type\" : \"String\"\n    } ],\n    \"isCritical\" : \"true\",\n    \"nextStep\" : \"addUniqueTagForTheAMI\"\n  }, {\n    \"name\" : \"getWindows2016UpgradeAMI\",\n    \"action\" : \"aws:executeAwsApi\",\n    \"onFailure\" : \"Abort\",\n    \"inputs\" : {\n      \"Service\" : \"ssm\",\n      \"Api\" : \"GetAutomationExecution\",\n      \"AutomationExecutionId\" : \"{{ upgradeWindows2016First.ExecutionId }}\"\n    },\n    \"outputs\" : [ {\n      \"Name\" : \"ImageId\",\n      \"Selector\" : \"$.AutomationExecution.Outputs.'UpgradedFrom2012R2Or2016.ImageId'[0]\",\n      \"Type\" : \"String\"\n    } ],\n    \"isCritical\" : \"true\",\n    \"nextStep\" : \"addUniqueTagForThe2016AMI\"\n  }, {\n    \"name\" : \"addUniqueTagForTheAMI\",\n    \"action\" : \"aws:createTags\",\n    \"onFailure\" : \"step:deleteServerUpgradeInstance\",\n    \"inputs\" : {\n      \"ResourceIds\" : [ \"{{ getWindowsUpgradeAMI.ImageId }}\" ],\n      \"Tags\" : [ {\n        \"Key\" : \"AWSEC2-ORIG-IMAGE-{{ automation:EXECUTION_ID }}\",\n        \"Value\" : \"AWSEC2-IMAGE: {{ InstanceId }}\"\n      } ],\n      \"ResourceType\" : \"EC2\"\n    },\n    \"isCritical\" : \"true\",\n    \"nextStep\" : \"describeOriginalInstanceImage\"\n  }, {\n    \"name\" : \"addUniqueTagForThe2016AMI\",\n    \"action\" : \"aws:createTags\",\n    \"onFailure\" : \"step:deleteServerUpgradeInstance\",\n    \"inputs\" : {\n      \"ResourceIds\" : [ \"{{ getWindows2016UpgradeAMI.ImageId }}\" ],\n      \"Tags\" : [ {\n        \"Key\" : \"AWSEC2-ORIG-IMAGE-{{ automation:EXECUTION_ID }}\",\n        \"Value\" : \"AWSEC2-IMAGE: {{ InstanceId }}\"\n      } ],\n      \"ResourceType\" : \"EC2\"\n    },\n    \"isCritical\" : \"true\",\n    \"nextStep\" : \"describeOriginalInstanceImage\"\n  }, {\n    \"name\" : \"branchOnRebootInstanceBeforeTakingImage\",\n    \"action\" : \"aws:branch\",\n    \"onFailure\" : \"Abort\",\n    \"inputs\" : {\n      \"Choices\" : [ {\n        \"NextStep\" : \"createImageWithReboot\",\n        \"Variable\" : \"{{ RebootInstanceBeforeTakingImage }}\",\n        \"EqualsIgnoreCase\" : \"True\"\n      } ],\n      \"Default\" : \"createImageWithNoReboot\"\n    },\n    \"isCritical\" : \"true\"\n  }, {\n    \"name\" : \"createImageWithReboot\",\n    \"action\" : \"aws:executeAwsApi\",\n    \"maxAttempts\" : 2,\n    \"onFailure\" : \"step:deleteServerUpgradeInstance\",\n    \"inputs\" : {\n      \"Service\" : \"ec2\",\n      \"Api\" : \"CreateImage\",\n      \"InstanceId\" : \"{{ InstanceId }}\",\n      \"Name\" : \"AWSEC2SQLSERVER_ImageFromOriginalInstance_{{ automation:EXECUTION_ID }}\",\n      \"NoReboot\" : false\n    },\n    \"outputs\" : [ {\n      \"Name\" : \"ImageId\",\n      \"Selector\" : \"$.ImageId\",\n      \"Type\" : \"String\"\n    } ],\n    \"nextStep\" : \"getImageWhereNoWindowUpgradeHappen\"\n  }, {\n    \"name\" : \"createImageWithNoReboot\",\n    \"action\" : \"aws:executeAwsApi\",\n    \"maxAttempts\" : 2,\n    \"onFailure\" : \"step:deleteServerUpgradeInstance\",\n    \"inputs\" : {\n      \"Service\" : \"ec2\",\n      \"Api\" : \"CreateImage\",\n      \"InstanceId\" : \"{{ InstanceId }}\",\n      \"Name\" : \"AWSEC2SQLSERVER_ImageFromOriginalInstance_{{ automation:EXECUTION_ID }}\",\n      \"NoReboot\" : true\n    },\n    \"outputs\" : [ {\n      \"Name\" : \"ImageId\",\n      \"Selector\" : \"$.ImageId\",\n      \"Type\" : \"String\"\n    } ],\n    \"nextStep\" : \"getImageWhereNoWindowUpgradeHappen\"\n  }, {\n    \"name\" : \"getImageWhereNoWindowUpgradeHappen\",\n    \"action\" : \"aws:executeAwsApi\",\n    \"maxAttempts\" : 2,\n    \"onFailure\" : \"step:deleteServerUpgradeInstance\",\n    \"inputs\" : {\n      \"Service\" : \"ec2\",\n      \"Api\" : \"DescribeImages\",\n      \"Filters\" : [ {\n        \"Name\" : \"name\",\n        \"Values\" : [ \"AWSEC2SQLSERVER_ImageFromOriginalInstance_{{ automation:EXECUTION_ID }}\" ]\n      } ]\n    },\n    \"outputs\" : [ {\n      \"Name\" : \"ImageId\",\n      \"Selector\" : \"$.Images[0].ImageId\",\n      \"Type\" : \"String\"\n    } ],\n    \"nextStep\" : \"addTagForTheAMINoWindowUpgrade\"\n  }, {\n    \"name\" : \"addTagForTheAMINoWindowUpgrade\",\n    \"action\" : \"aws:createTags\",\n    \"onFailure\" : \"step:deleteServerUpgradeInstance\",\n    \"inputs\" : {\n      \"ResourceIds\" : [ \"{{ getImageWhereNoWindowUpgradeHappen.ImageId }}\" ],\n      \"Tags\" : [ {\n        \"Key\" : \"AWSEC2-ORIG-IMAGE-{{ automation:EXECUTION_ID }}\",\n        \"Value\" : \"AWSEC2-IMAGE: {{ InstanceId }}\"\n      } ],\n      \"ResourceType\" : \"EC2\"\n    },\n    \"isCritical\" : \"true\",\n    \"nextStep\" : \"describeOriginalInstanceImage\"\n  }, {\n    \"name\" : \"describeOriginalInstanceImage\",\n    \"action\" : \"aws:executeAwsApi\",\n    \"maxAttempts\" : 2,\n    \"onFailure\" : \"step:deleteServerUpgradeInstance\",\n    \"inputs\" : {\n      \"Service\" : \"ec2\",\n      \"Api\" : \"DescribeImages\",\n      \"Filters\" : [ {\n        \"Name\" : \"tag-key\",\n        \"Values\" : [ \"AWSEC2-ORIG-IMAGE-{{ automation:EXECUTION_ID }}\" ]\n      } ]\n    },\n    \"outputs\" : [ {\n      \"Name\" : \"ImageId\",\n      \"Selector\" : \"$.Images[0].ImageId\",\n      \"Type\" : \"String\"\n    } ],\n    \"nextStep\" : \"waitTillOriginalInstanceImageImageReady\"\n  }, {\n    \"name\" : \"waitTillOriginalInstanceImageImageReady\",\n    \"action\" : \"aws:waitForAwsResourceProperty\",\n    \"onFailure\" : \"step:deleteServerUpgradeInstance\",\n    \"maxAttempts\" : 2,\n    \"inputs\" : {\n      \"Service\" : \"ec2\",\n      \"Api\" : \"DescribeImages\",\n      \"ImageIds\" : [ \"{{ describeOriginalInstanceImage.ImageId }}\" ],\n      \"PropertySelector\" : \"$.Images[0].State\",\n      \"DesiredValues\" : [ \"available\" ]\n    },\n    \"nextStep\" : \"branchUseAlternativeKeyPair\"\n  }, {\n    \"name\" : \"branchUseAlternativeKeyPair\",\n    \"action\" : \"aws:branch\",\n    \"onFailure\" : \"Abort\",\n    \"inputs\" : {\n      \"Choices\" : [ {\n        \"NextStep\" : \"serverUpgradeInstanceWithAlternativeKeyPair\",\n        \"Not\" : {\n          \"Variable\" : \"{{ AlternativeKeyPairName }}\",\n          \"StringEquals\" : \"\"\n        }\n      } ],\n      \"Default\" : \"serverUpgradeInstanceWithOriginalKeyPair\"\n    },\n    \"isCritical\" : \"true\"\n  }, {\n    \"name\" : \"serverUpgradeInstanceWithAlternativeKeyPair\",\n    \"action\" : \"aws:runInstances\",\n    \"timeoutSeconds\" : 2700,\n    \"maxAttempts\" : 3,\n    \"onFailure\" : \"step:deleteServerUpgradeInstance\",\n    \"inputs\" : {\n      \"ImageId\" : \"{{ describeOriginalInstanceImage.ImageId }}\",\n      \"InstanceType\" : \"{{ describeOriginalInstanceDetails.InstanceType }}\",\n      \"MinInstanceCount\" : 1,\n      \"MaxInstanceCount\" : 1,\n      \"IamInstanceProfileName\" : \"{{ IamInstanceProfile }}\",\n      \"SubnetId\" : \"{{ SubnetId }}\",\n      \"KeyName\" : \"{{ AlternativeKeyPairName }}\",\n      \"SecurityGroupIds\" : [ \"{{ describeOriginalInstanceDetails.SecurityGroupIds }}\" ],\n      \"TagSpecifications\" : [ {\n        \"ResourceType\" : \"instance\",\n        \"Tags\" : [ {\n          \"Key\" : \"Name\",\n          \"Value\" : \"AWSEC2_UpgradeInstance_{{ automation:EXECUTION_ID }}\"\n        } ]\n      } ]\n    },\n    \"isCritical\" : \"true\",\n    \"nextStep\" : \"getServerUpgradeInstance\"\n  }, {\n    \"name\" : \"serverUpgradeInstanceWithOriginalKeyPair\",\n    \"action\" : \"aws:runInstances\",\n    \"timeoutSeconds\" : 2700,\n    \"maxAttempts\" : 3,\n    \"onFailure\" : \"step:deleteServerUpgradeInstance\",\n    \"inputs\" : {\n      \"ImageId\" : \"{{ describeOriginalInstanceImage.ImageId }}\",\n      \"InstanceType\" : \"{{ describeOriginalInstanceDetails.InstanceType }}\",\n      \"MinInstanceCount\" : 1,\n      \"MaxInstanceCount\" : 1,\n      \"IamInstanceProfileName\" : \"{{ IamInstanceProfile }}\",\n      \"SubnetId\" : \"{{ SubnetId }}\",\n      \"KeyName\" : \"{{ describeOriginalInstanceDetails.KeyName }}\",\n      \"SecurityGroupIds\" : [ \"{{ describeOriginalInstanceDetails.SecurityGroupIds }}\" ],\n      \"TagSpecifications\" : [ {\n        \"ResourceType\" : \"instance\",\n        \"Tags\" : [ {\n          \"Key\" : \"Name\",\n          \"Value\" : \"AWSEC2_UpgradeInstance_{{ automation:EXECUTION_ID }}\"\n        } ]\n      } ]\n    },\n    \"isCritical\" : \"true\",\n    \"nextStep\" : \"getServerUpgradeInstance\"\n  }, {\n    \"name\" : \"getServerUpgradeInstance\",\n    \"action\" : \"aws:executeAwsApi\",\n    \"onFailure\" : \"step:deleteServerUpgradeInstance\",\n    \"inputs\" : {\n      \"Service\" : \"ec2\",\n      \"Api\" : \"DescribeInstances\",\n      \"InstanceIds\" : null,\n      \"Filters\" : [ {\n        \"Name\" : \"tag:Name\",\n        \"Values\" : [ \"AWSEC2_UpgradeInstance_{{ automation:EXECUTION_ID }}\" ]\n      } ]\n    },\n    \"outputs\" : [ {\n      \"Name\" : \"InstanceId\",\n      \"Selector\" : \"$.Reservations[0].Instances[0].InstanceId\",\n      \"Type\" : \"String\"\n    } ],\n    \"isCritical\" : \"true\",\n    \"nextStep\" : \"waitForInstanceToReady\"\n  }, {\n    \"name\" : \"waitForInstanceToReady\",\n    \"action\" : \"aws:waitForAwsResourceProperty\",\n    \"onFailure\" : \"step:rebootToMakeItReady\",\n    \"timeoutSeconds\" : 600,\n    \"maxAttempts\" : 2,\n    \"inputs\" : {\n      \"Service\" : \"ec2\",\n      \"Api\" : \"DescribeInstanceStatus\",\n      \"InstanceIds\" : [ \"{{ getServerUpgradeInstance.InstanceId }}\" ],\n      \"PropertySelector\" : \"$.InstanceStatuses[0].InstanceStatus.Details[0].Status\",\n      \"DesiredValues\" : [ \"passed\" ]\n    },\n    \"isCritical\" : \"false\",\n    \"nextStep\" : \"waitForSSMAgentOnlineOnServerUpgradeInstance\"\n  }, {\n    \"name\" : \"rebootToMakeItReady\",\n    \"action\" : \"aws:executeAwsApi\",\n    \"onFailure\" : \"step:waitForInstanceToBeReadyAfterReboot\",\n    \"inputs\" : {\n      \"Service\" : \"ec2\",\n      \"Api\" : \"RebootInstances\",\n      \"InstanceIds\" : [ \"{{ getServerUpgradeInstance.InstanceId }}\" ]\n    },\n    \"isCritical\" : \"false\",\n    \"nextStep\" : \"waitForInstanceToBeReadyAfterReboot\"\n  }, {\n    \"name\" : \"waitForInstanceToBeReadyAfterReboot\",\n    \"action\" : \"aws:waitForAwsResourceProperty\",\n    \"onFailure\" : \"step:deleteServerUpgradeInstance\",\n    \"timeoutSeconds\" : 600,\n    \"maxAttempts\" : 2,\n    \"inputs\" : {\n      \"Service\" : \"ec2\",\n      \"Api\" : \"DescribeInstanceStatus\",\n      \"InstanceIds\" : [ \"{{ getServerUpgradeInstance.InstanceId }}\" ],\n      \"PropertySelector\" : \"$.InstanceStatuses[0].InstanceStatus.Details[0].Status\",\n      \"DesiredValues\" : [ \"passed\" ]\n    },\n    \"isCritical\" : \"true\",\n    \"nextStep\" : \"waitForSSMAgentOnlineOnServerUpgradeInstance\"\n  }, {\n    \"name\" : \"waitForSSMAgentOnlineOnServerUpgradeInstance\",\n    \"action\" : \"aws:waitForAwsResourceProperty\",\n    \"timeoutSeconds\" : 600,\n    \"maxAttempts\" : 3,\n    \"onFailure\" : \"step:deleteServerUpgradeInstance\",\n    \"inputs\" : {\n      \"Service\" : \"ssm\",\n      \"Api\" : \"DescribeInstanceInformation\",\n      \"InstanceInformationFilterList\" : [ {\n        \"key\" : \"InstanceIds\",\n        \"valueSet\" : [ \"{{ getServerUpgradeInstance.InstanceId }}\" ]\n      } ],\n      \"PropertySelector\" : \"$.InstanceInformationList[0].PingStatus\",\n      \"DesiredValues\" : [ \"Online\" ]\n    },\n    \"isCritical\" : \"true\",\n    \"nextStep\" : \"getUpgradeServerInstanceDetails\"\n  }, {\n    \"name\" : \"getUpgradeServerInstanceDetails\",\n    \"action\" : \"aws:executeAwsApi\",\n    \"maxAttempts\" : 2,\n    \"onFailure\" : \"step:deleteServerUpgradeInstance\",\n    \"inputs\" : {\n      \"Service\" : \"ec2\",\n      \"Api\" : \"DescribeInstances\",\n      \"InstanceIds\" : [ \"{{ getServerUpgradeInstance.InstanceId }}\" ]\n    },\n    \"outputs\" : [ {\n      \"Name\" : \"AvailabilityZone\",\n      \"Selector\" : \"$.Reservations[0].Instances[0].Placement.AvailabilityZone\",\n      \"Type\" : \"String\"\n    }, {\n      \"Name\" : \"SubnetId\",\n      \"Selector\" : \"$.Reservations[0].Instances[0].NetworkInterfaces[0].SubnetId\",\n      \"Type\" : \"String\"\n    } ],\n    \"isCritical\" : \"true\",\n    \"nextStep\" : \"branchForRequiredPatchesBeforeUpgrade\"\n  }, {\n    \"name\" : \"branchForRequiredPatchesBeforeUpgrade\",\n    \"action\" : \"aws:branch\",\n    \"onFailure\" : \"step:deleteServerUpgradeInstance\",\n    \"inputs\" : {\n      \"Choices\" : [ {\n        \"NextStep\" : \"putSQL2008R2SP3Metric\",\n        \"Variable\" : \"{{ assertReadyToUpgradeSQLServer.Output }}\",\n        \"Contains\" : \"2008 R2 SP3\"\n      }, {\n        \"NextStep\" : \"putSQL2008Metric\",\n        \"Variable\" : \"{{ assertReadyToUpgradeSQLServer.Output }}\",\n        \"Contains\" : \"apply patch for SQL Server 2008\"\n      } ],\n      \"Default\" : \"putSQL2012Metric\"\n    },\n    \"isCritical\" : \"true\"\n  }, {\n    \"name\" : \"putSQL2008R2SP3Metric\",\n    \"action\" : \"aws:putServerUpgradeMetrics\",\n    \"maxAttempts\" : 3,\n    \"onFailure\" : \"Abort\",\n    \"inputs\" : {\n      \"DimensionName\" : \"SSM_METRICS\",\n      \"DimensionValue\" : \"AWSEC2-CloneInstanceAndUpgradeSQLServer\",\n      \"MetricName\" : \"SQL_2008_R2_SP3\",\n      \"MetricValue\" : \"1.0\"\n    },\n    \"isCritical\" : \"true\",\n    \"nextStep\" : \"checkAndInstallSpecificPatchesForWindows2012R2\"\n  }, {\n    \"name\" : \"putSQL2008Metric\",\n    \"action\" : \"aws:putServerUpgradeMetrics\",\n    \"maxAttempts\" : 3,\n    \"onFailure\" : \"Abort\",\n    \"inputs\" : {\n      \"DimensionName\" : \"SSM_METRICS\",\n      \"DimensionValue\" : \"AWSEC2-CloneInstanceAndUpgradeSQLServer\",\n      \"MetricName\" : \"SQL_2008\",\n      \"MetricValue\" : \"1.0\"\n    },\n    \"isCritical\" : \"true\",\n    \"nextStep\" : \"applySQLServerPatchForUpgradeEligible\"\n  }, {\n    \"name\" : \"putSQL2012Metric\",\n    \"action\" : \"aws:putServerUpgradeMetrics\",\n    \"maxAttempts\" : 3,\n    \"onFailure\" : \"Abort\",\n    \"inputs\" : {\n      \"DimensionName\" : \"SSM_METRICS\",\n      \"DimensionValue\" : \"AWSEC2-CloneInstanceAndUpgradeSQLServer\",\n      \"MetricName\" : \"SQL_2012\",\n      \"MetricValue\" : \"1.0\"\n    },\n    \"isCritical\" : \"true\",\n    \"nextStep\" : \"runScriptBeforeSQLServerUpgrade\"\n  }, {\n    \"name\" : \"applySQLServerPatchForUpgradeEligible\",\n    \"action\" : \"aws:runCommand\",\n    \"maxAttempts\" : 3,\n    \"onFailure\" : \"step:deleteServerUpgradeInstance\",\n    \"timeoutSeconds\" : 14400,\n    \"inputs\" : {\n      \"DocumentName\" : \"AWS-RunPowerShellScript\",\n      \"InstanceIds\" : [ \"{{ getServerUpgradeInstance.InstanceId }}\" ],\n      \"Parameters\" : {\n        \"commands\" : [ \"function Apply-ServicePack {\", \"$instances = (get-itemproperty \\\"HKLM:\\\\SOFTWARE\\\\Microsoft\\\\Microsoft SQL Server\\\").InstalledInstances\", \"$SMOServerDLL = \\\"Microsoft.SqlServer.Management.Smo.Server\\\"\", \"[System.Reflection.Assembly]::LoadWithPartialName(\\\"Microsoft.SqlServer.SMO\\\") | out-null\", \"$SQLServer = New-Object ($SMOServerDLL)\", \"if ([string]::IsNullOrEmpty($SQLServer.VersionString)){$SQLServer=New-Object ($SMOServerDLL) \\\"$env:COMPUTERNAME\\\\$instances\\\"}  \", \"Write-host \\\"SQLServer version $($SQLServer.VersionString)\\\"\", \"$Versions = $SQLServer.VersionString.Split(\\\".\\\")\", \"$SQLVersionObj = New-Object PSObject -Property @{\", \"Version = $SQLServer.VersionString\", \"Major = $Versions[0]\", \"Minor = $Versions[1]\", \"Build = $Versions[2]\", \"Revision = $Versions[3]\", \"}\", \"if ($SQLVersionObj.Major -ge 12) {\", \"Write-host \\\"Already SQL Server 2014 or above running, exiting\\\"\", \"exit 0\", \"}\", \"else {\", \"$DownloadUrl = Get-DownloadPath $SQLVersionObj.Major $SQLVersionObj.Minor $SQLVersionObj.Build $SQLVersionObj.Revision\", \"if (-not [string]::IsNullOrEmpty($DownloadUrl)) {\", \"$FileName = $DownloadUrl.Substring($DownloadUrl.LastIndexOf(\\\"/\\\") + 1)\", \"$ParentDirectory = \\\"C:\\\\SQLUpgrade\\\\{{ automation:EXECUTION_ID }}\\\"\", \"if ((Test-Path $ParentDirectory) -eq $false) {\", \"New-Item -ItemType directory -Path $ParentDirectory\", \"}\", \"$FullPath = $ParentDirectory + \\\"\\\\\\\" + $FileName\", \"Download-AndInstall $DownloadUrl $FullPath\", \"$SQLServerNew = New-Object ($SMOServerDLL)\", \"Write-Host \\\"After upgrade SQL Server version $($SQLServerNew.VersionString)\\\"\", \"}\", \"else {\", \"Write-host \\\"No need to install Service pack\\\"\", \"}\", \"}\", \"}\", \"\", \"function Get-DownloadPath {\", \"PARAM\", \"(\", \"$Major\", \", $Minor\", \", $Build\", \", $Revision\", \")\", \"if ($Major -eq 10) {\", \"#Microsoft SQL Server 2008 sp4, 10.0.6000.29\\\"\", \"if ($Minor -eq 0 -and ($Build -lt 6000 -or ($Build -eq 6000 -and $Revision -lt 29))) {\", \"return \\\"https://download.microsoft.com/download/5/E/7/5E7A89F7-C013-4090-901E-1A0F86B6A94C/ENU/SQLServer2008SP4-KB2979596-x64-ENU.exe\\\"\", \"}\", \"#Microsoft SQL Server 2008 R2 sp3, 10.50.6000.234\\\"\", \"elseif ($Minor -lt 50 -or ($Minor -eq 50 -and $Build -lt 6000) -or ($Minor -eq 50 -and $Build -eq 6000 -and $Revision -lt 34)) {\", \"return \\\"https://download.microsoft.com/download/D/7/A/D7A28B6C-FCFE-4F70-A902-B109388E01E9/ENU/SQLServer2008R2SP3-KB2979597-x64-ENU.exe\\\"\", \"}\", \"}\", \"else {\", \"#SQL Server 2012 Sp2 , 11.0.5058.0\", \"if ($Minor -eq 0 -and $Build -lt 5058) {\", \"return \\\"https://download.microsoft.com/download/D/F/7/DF7BEBF9-AA4D-4CFE-B5AE-5C9129D37EFD/SQLServer2012SP2-KB2958429-x64-ENU.exe\\\"\", \"}\", \"}\", \"}\", \"\", \"function Download-AndInstall {\", \"PARAM\", \"(\", \"$UrlToDownload\", \", $LocalFilePath\", \")\", \"$wc = New-Object System.Net.WebClient\", \"$attemptCount = 0\", \"Do {\", \"$attemptCount++\", \"$wc.DownloadFile($UrlToDownload , $LocalFilePath)\", \"} while (((Test-Path $LocalFilePath) -eq $false) -and ($attemptCount -le 3))\", \"If ((Test-Path $LocalFilePath) -eq $true) {\", \"Write-Host \\\"Downloaded service pack to\\tfile to $LocalFilePath\\\"\", \"if ($UrlToDownload.IndexOf(\\\"SQLServer2008SP4\\\") -ge 0) {\", \"$InstallParameters = \\\"/allinstances /quiet \\\"\", \"}\", \"else {\", \"$InstallParameters = \\\"/allinstances /quiet /IAcceptSQLServerLicenseTerms=True\\\"\", \"}\", \"Start-Process $LocalFilePath -ArgumentList $InstallParameters -NoNewWindow -Wait\", \"Write-Host \\\"Installation complete\\\"\", \"}\", \"Else {\", \"Write-Host \\\"Error: Couldn’t download service pack, exiting\\\"\", \"exit 1\", \"}\", \"}\", \"Apply-ServicePack\" ]\n      }\n    },\n    \"isCritical\" : \"true\",\n    \"nextStep\" : \"checkAndInstallSpecificPatchesForWindows2012R2\"\n  }, {\n    \"name\" : \"checkAndInstallSpecificPatchesForWindows2012R2\",\n    \"action\" : \"aws:runCommand\",\n    \"maxAttempts\" : 3,\n    \"onFailure\" : \"step:deleteServerUpgradeInstance\",\n    \"timeoutSeconds\" : 14400,\n    \"inputs\" : {\n      \"DocumentName\" : \"AWS-RunPowerShellScript\",\n      \"InstanceIds\" : [ \"{{ getServerUpgradeInstance.InstanceId }}\" ],\n      \"Parameters\" : {\n        \"commands\" : [ \"function Check-ForReboot {\", \"\\t$AUTOUPDATE = (Get-ItemProperty \\\"HKLM:\\\\SOFTWARE\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\WindowsUpdate\\\\Auto Update\\\")\", \"\\tIf ($AUTOUPDATE.RebootRequired) {\", \"\\t\\twrite-host \\\"Rebooting from Check-ForReboot\\\"\", \"\\t\\texit 3010\", \"\\t}\", \"\\telse {\", \"\\t\\tWrite-host \\\"Reboot not required\\\"\", \"\\t}\", \"}\", \"\", \"function Install-PreReqForSQL {\", \"\\t$HotFixPresent = Get-HotFix -id \\\"KB2919355\\\"\", \"\\tif ($HotFixPresent) {\", \"\\t\\twrite-host \\\"Found the required hotfix, so exiting\\\"\", \"\\t\\texit 0\", \"\\t}\", \"\\telse {\", \"\\t\\t$autoupdate = New-Object -ComObject \\\"Microsoft.Update.AutoUpdate\\\"\", \"\\t\\t$autoupdate.DetectNow()\", \"\\t\\t$Session = New-Object -ComObject Microsoft.Update.Session\", \"\\t\\t$Search = $Session.CreateUpdateSearcher()\", \"\\t\\t$SearchResults = $Search.Search(\\\"IsInstalled=0 and IsHidden=0\\\")\", \"\\t\\t$TotalUpdates = $SearchResults.Updates.Count\", \"\\t\\tWrite-Host \\\"There are $TotalUpdates TOTAL updates available.\\\"\", \"\\t\\t$AvailableUpdates = $SearchResults.Updates\", \"\\t\\tif ($AvailableUpdates.count -lt 1) {\", \"\\t\\t\\tWrite-Host \\\"Can't find required updates, exiting\\\"\", \"\\t\\t\\texit 1\", \"\\t\\t}\", \"\\t\\t$DownloadCollection = New-Object -com \\\"Microsoft.Update.UpdateColl\\\"\", \"\\t\\t$AvailableUpdates | ForEach-Object {\", \"\\t\\t\\tif ($_.InstallationBehavior.CanRequestUserInput -ne $TRUE) {\", \"\\t\\t\\t\\t$DownloadCollection.Add($_) | Out-Null\", \"\\t\\t\\t}\", \"\\t\\t}\", \"\\t\\tWrite-Host \\\"Downloading updates...\\\"\", \"\\t\\t$Downloader = $Session.CreateUpdateDownloader()\", \"\\t\\t$Downloader.Updates = $DownloadCollection\", \"\\t\\t$Downloader.Download()\", \"\\t\\tWrite-Verbose \\\"Creating Installation Object\\\"\", \"\\t\\t$InstallCollection = New-Object -com \\\"Microsoft.Update.UpdateColl\\\"\", \"\\t\\t$AvailableUpdates | ForEach-Object {\", \"\\t\\t\\tif ($_.IsDownloaded) {\", \"\\t\\t\\t\\t$InstallCollection.Add($_) | Out-Null\", \"\\t\\t\\t}\", \"\\t\\t}\", \"\\t\\tWrite-Host \\\"Installing updates...\\\"\", \"\\t\\t$Installer = $Session.CreateUpdateInstaller()\", \"\\t\\t$Installer.Updates = $InstallCollection\", \"\\t\\t$Results = $Installer.Install()\", \"\\t\\tWrite-Host \\\"Installation complete.\\\"\", \"\\t\\texit 3010\", \"\\t}\", \"}\", \"\", \"try {\", \"\\tCheck-ForReboot\", \"\\tInstall-PreReqForSQL\", \"}\", \"catch {\", \"\\tWrite-Error $_.Exception.Message\", \"\\texit 1\", \"}\" ]\n      }\n    },\n    \"isCritical\" : \"true\",\n    \"nextStep\" : \"runScriptBeforeSQLServerUpgrade\"\n  }, {\n    \"name\" : \"runScriptBeforeSQLServerUpgrade\",\n    \"action\" : \"aws:runCommand\",\n    \"maxAttempts\" : 3,\n    \"onFailure\" : \"step:deleteServerUpgradeInstance\",\n    \"inputs\" : {\n      \"DocumentName\" : \"AWS-RunPowerShellScript\",\n      \"InstanceIds\" : [ \"{{ getServerUpgradeInstance.InstanceId }}\" ],\n      \"Parameters\" : {\n        \"commands\" : [ \"function Enable-OfflineDisk {\", \"\\t$culture = Get-Culture   \", \"\\tif ($culture.Name -eq \\\"ja-JP\\\") {\", \"\\t\\t$offlinedisk = \\\"list disk\\\" | diskpart | Where-Object { $_ -match \\\"オフライン\\\" }\", \"\\t} \", \"\\telse {\", \"\\t\\t$offlinedisk = \\\"list disk\\\" | diskpart | Where-Object { $_ -match \\\"offline\\\" }\", \"\\t}\", \"\\t\", \"\\tif ($offlinedisk) {\", \"\\t\\tWrite-Host \\\"Following Offline disk(s) found..Trying to bring Online.\\\"\", \"\\t\\t$offlinedisk\", \"\\t\\tforeach ($offdisk in $offlinedisk) {\", \"\\t\\t\\t$offdiskS = $offdisk.Substring(2, 6)\", \"\\t\\t\\tWrite-Host \\\"Enabling $offdiskS\\\"\", \"\\t\\t\\t$OnlineDisk = @\\\"\", \"select $offdiskS\", \"attributes disk clear readonly\", \"online disk\", \"attributes disk clear readonly\", \"\\\"@\", \"\", \"\\t\\t\\t$noOut = $OnlineDisk | diskpart\", \"\\t\\t\\tStart-Sleep 5\", \"\\t\\t}\", \"\\t\\tif ($culture.Name -eq \\\"ja-JP\\\") {\", \"\\t\\t\\t$offlinedisk = \\\"list disk\\\" | diskpart | Where-Object { $_ -match \\\"オフライン\\\" }\", \"\\t\\t} \", \"\\t\\telse {\", \"\\t\\t\\t$offlinedisk = \\\"list disk\\\" | diskpart | Where-Object { $_ -match \\\"offline\\\" }\", \"\\t\\t}\", \"\\t\\tif ($offlinedisk) {\", \"\\t\\t\\tWrite-Host \\\"Failed to bring the following disk(s) online\\\"\", \"\\t\\t\\t$offlinedisk\", \"\\t\\t}\", \"\\t\\telse {\", \"\\t\\t\\tWrite-Host \\\"Disk(s) are now online.\\\"\", \"\\t\\t}\", \"\\t}\", \"\\telse {\", \"\\t\\tWrite-Host \\\"All disk(s) are online!\\\"\", \"\\t}\", \"}\", \"try {\", \"\\tEnable-OfflineDisk\", \"\\t$TEMPSTORAGE = \\\"C:\\\\SQLUpgrade\\\\{{ automation:EXECUTION_ID }}\\\"\", \"\\t$TEMPSTOGAREFILE = \\\"$TEMPSTORAGE\\\\drive.txt\\\"\", \"\\tif ((Test-Path $TEMPSTORAGE) -eq $false) {\", \"\\t\\tNew-Item -ItemType directory -Path $TEMPSTORAGE\", \"\\t}\", \"\", \"\\t([System.IO.DriveInfo]::getdrives() | Where-Object { $_.DriveType -eq \\\"Fixed\\\" } | select-object -ExpandProperty Name) -join ',' | Out-File \\\"$TEMPSTOGAREFILE\\\"\", \"\\t$OLDDRIVES = Get-Content -Path \\\"C:\\\\SQLUpgrade\\\\{{ automation:EXECUTION_ID }}\\\\drive.txt\\\" -TotalCount 1\", \"\\tWrite-host \\\"Drives are $OLDDRIVES \\\"\", \"}\", \"catch {\", \"\\tWrite-Error $_.Exception.Message\", \"\\texit 1\", \"}\", \"\" ]\n      }\n    },\n    \"isCritical\" : \"true\",\n    \"nextStep\" : \"branchOnLicenseIncludedInstance\"\n  }, {\n    \"name\" : \"branchOnLicenseIncludedInstance\",\n    \"action\" : \"aws:branch\",\n    \"onFailure\" : \"step:deleteServerUpgradeInstance\",\n    \"inputs\" : {\n      \"Choices\" : [ {\n        \"NextStep\" : \"putLicenseIncludedInstanceMetric\",\n        \"Variable\" : \"{{ assertReadyToUpgradeSQLServer.Output }}\",\n        \"Contains\" : \"Instance has license included\"\n      } ],\n      \"Default\" : \"putBYOLInstanceMetric\"\n    },\n    \"isCritical\" : \"true\"\n  }, {\n    \"name\" : \"putLicenseIncludedInstanceMetric\",\n    \"action\" : \"aws:putServerUpgradeMetrics\",\n    \"maxAttempts\" : 3,\n    \"onFailure\" : \"step:deleteServerUpgradeInstance\",\n    \"inputs\" : {\n      \"DimensionName\" : \"SSM_METRICS\",\n      \"DimensionValue\" : \"AWSEC2-CloneInstanceAndUpgradeSQLServer\",\n      \"MetricName\" : \"License_Included_Instances\",\n      \"MetricValue\" : \"1.0\"\n    },\n    \"isCritical\" : \"true\",\n    \"nextStep\" : \"getSQLServerEdition\"\n  }, {\n    \"name\" : \"putBYOLInstanceMetric\",\n    \"action\" : \"aws:putServerUpgradeMetrics\",\n    \"maxAttempts\" : 3,\n    \"onFailure\" : \"step:deleteServerUpgradeInstance\",\n    \"inputs\" : {\n      \"DimensionName\" : \"SSM_METRICS\",\n      \"DimensionValue\" : \"AWSEC2-CloneInstanceAndUpgradeSQLServer\",\n      \"MetricName\" : \"BYOL_Instances\",\n      \"MetricValue\" : \"1.0\"\n    },\n    \"isCritical\" : \"true\",\n    \"nextStep\" : \"assertBYOLSQLServerSnapshotIdExist\"\n  }, {\n    \"name\" : \"assertBYOLSQLServerSnapshotIdExist\",\n    \"action\" : \"aws:assertAwsResourceProperty\",\n    \"onFailure\" : \"step:deleteServerUpgradeInstance\",\n    \"maxAttempts\" : 3,\n    \"inputs\" : {\n      \"Service\" : \"ec2\",\n      \"Api\" : \"DescribeSnapshots\",\n      \"SnapshotIds\" : [ \"{{ SQLServerSnapshotId }}\" ],\n      \"PropertySelector\" : \"$.Snapshots[0].SnapshotId\",\n      \"DesiredValues\" : [ \"{{ SQLServerSnapshotId }}\" ]\n    },\n    \"isCritical\" : \"true\",\n    \"nextStep\" : \"createBYOLSQLServerMediaVolume\"\n  }, {\n    \"name\" : \"createBYOLSQLServerMediaVolume\",\n    \"action\" : \"aws:executeAwsApi\",\n    \"maxAttempts\" : 3,\n    \"inputs\" : {\n      \"Service\" : \"ec2\",\n      \"Api\" : \"CreateVolume\",\n      \"AvailabilityZone\" : \"{{ getUpgradeServerInstanceDetails.AvailabilityZone }}\",\n      \"SnapshotId\" : \"{{ SQLServerSnapshotId }}\",\n      \"VolumeType\" : \"gp2\",\n      \"TagSpecifications\" : [ {\n        \"ResourceType\" : \"volume\",\n        \"Tags\" : [ {\n          \"Key\" : \"SQLServerUpgradeVolumeKey\",\n          \"Value\" : \"SQLServerUpgradeVolume-{{ automation:EXECUTION_ID }}\"\n        } ]\n      } ]\n    },\n    \"outputs\" : [ {\n      \"Name\" : \"VolumeId\",\n      \"Selector\" : \"$.VolumeId\",\n      \"Type\" : \"String\"\n    } ],\n    \"onFailure\" : \"step:deleteServerUpgradeInstance\",\n    \"isCritical\" : \"true\",\n    \"nextStep\" : \"getSQLServerMediaVolumeId\"\n  }, {\n    \"name\" : \"getSQLServerEdition\",\n    \"action\" : \"aws:runCommand\",\n    \"maxAttempts\" : 3,\n    \"onFailure\" : \"step:deleteServerUpgradeInstance\",\n    \"timeoutSeconds\" : 300,\n    \"inputs\" : {\n      \"DocumentName\" : \"AWS-RunPowerShellScript\",\n      \"InstanceIds\" : [ \"{{ InstanceId }}\" ],\n      \"Parameters\" : {\n        \"executionTimeout\" : \"300\",\n        \"commands\" : [ \"$instances = (get-itemproperty \\\"HKLM:\\\\SOFTWARE\\\\Microsoft\\\\Microsoft SQL Server\\\").InstalledInstances\", \"$instance = (Get-ItemProperty \\\"HKLM:\\\\SOFTWARE\\\\Microsoft\\\\Microsoft SQL Server\\\\Instance Names\\\\SQL\\\").$instances\", \"$instanceDetails = (Get-ItemProperty \\\"HKLM:\\\\SOFTWARE\\\\Microsoft\\\\Microsoft SQL Server\\\\$instance\\\\Setup\\\")\", \"$edition = ($instanceDetails.Edition).split()[0]\", \"Write-Host -NoNewline \\\"$edition\\\"\" ]\n      }\n    },\n    \"isCritical\" : \"true\",\n    \"nextStep\" : \"getSQLServerSnapshotForLicenseIncludedInstance\"\n  }, {\n    \"name\" : \"getSQLServerSnapshotForLicenseIncludedInstance\",\n    \"action\" : \"aws:shareSQLMedia\",\n    \"maxAttempts\" : 3,\n    \"onFailure\" : \"step:deleteServerUpgradeInstance\",\n    \"inputs\" : {\n      \"SQLServerVersion\" : \"{{ TargetSQLVersion }}\",\n      \"InstanceId\" : \"{{ InstanceId }}\",\n      \"SQLServerEdition\" : \"{{ getSQLServerEdition.Output }}\"\n    },\n    \"outputs\" : [ {\n      \"Name\" : \"SnapshotId\",\n      \"Selector\" : \"$.EBSSnapshotId\"\n    } ],\n    \"isCritical\" : \"true\",\n    \"nextStep\" : \"assertLicenseIncludedSQLServerSnapshotIdShared\"\n  }, {\n    \"name\" : \"assertLicenseIncludedSQLServerSnapshotIdShared\",\n    \"action\" : \"aws:assertAwsResourceProperty\",\n    \"onFailure\" : \"step:deleteServerUpgradeInstance\",\n    \"maxAttempts\" : 3,\n    \"inputs\" : {\n      \"Service\" : \"ec2\",\n      \"Api\" : \"DescribeSnapshots\",\n      \"SnapshotIds\" : [ \"{{ getSQLServerSnapshotForLicenseIncludedInstance.EBSSnapshotId }}\" ],\n      \"PropertySelector\" : \"$.Snapshots[0].SnapshotId\",\n      \"DesiredValues\" : [ \"{{ getSQLServerSnapshotForLicenseIncludedInstance.EBSSnapshotId }}\" ]\n    },\n    \"isCritical\" : \"true\",\n    \"nextStep\" : \"createLicenseIncludedSQLServerMediaVolume\"\n  }, {\n    \"name\" : \"createLicenseIncludedSQLServerMediaVolume\",\n    \"action\" : \"aws:executeAwsApi\",\n    \"maxAttempts\" : 3,\n    \"timeoutSeconds\" : 600,\n    \"inputs\" : {\n      \"Service\" : \"ec2\",\n      \"Api\" : \"CreateVolume\",\n      \"AvailabilityZone\" : \"{{ getUpgradeServerInstanceDetails.AvailabilityZone }}\",\n      \"SnapshotId\" : \"{{ getSQLServerSnapshotForLicenseIncludedInstance.EBSSnapshotId }}\",\n      \"VolumeType\" : \"gp2\",\n      \"TagSpecifications\" : [ {\n        \"ResourceType\" : \"volume\",\n        \"Tags\" : [ {\n          \"Key\" : \"SQLServerUpgradeVolumeKey\",\n          \"Value\" : \"SQLServerUpgradeVolume-{{ automation:EXECUTION_ID }}\"\n        } ]\n      } ]\n    },\n    \"onFailure\" : \"step:deleteServerUpgradeInstance\",\n    \"isCritical\" : \"true\",\n    \"nextStep\" : \"getSQLServerMediaVolumeId\"\n  }, {\n    \"name\" : \"getSQLServerMediaVolumeId\",\n    \"action\" : \"aws:executeAwsApi\",\n    \"maxAttempts\" : 3,\n    \"onFailure\" : \"step:deleteServerUpgradeInstance\",\n    \"inputs\" : {\n      \"Service\" : \"ec2\",\n      \"Api\" : \"DescribeVolumes\",\n      \"Filters\" : [ {\n        \"Name\" : \"tag:SQLServerUpgradeVolumeKey\",\n        \"Values\" : [ \"SQLServerUpgradeVolume-{{ automation:EXECUTION_ID }}\" ]\n      } ]\n    },\n    \"outputs\" : [ {\n      \"Name\" : \"VolumeId\",\n      \"Selector\" : \"$.Volumes[0].VolumeId\",\n      \"Type\" : \"String\"\n    } ],\n    \"isCritical\" : \"true\",\n    \"nextStep\" : \"waitUntilSQLServerMediaVolumeReady\"\n  }, {\n    \"name\" : \"waitUntilSQLServerMediaVolumeReady\",\n    \"action\" : \"aws:waitForAwsResourceProperty\",\n    \"onFailure\" : \"step:deleteServerUpgradeInstance\",\n    \"maxAttempts\" : 3,\n    \"inputs\" : {\n      \"Service\" : \"ec2\",\n      \"Api\" : \"DescribeVolumes\",\n      \"Filters\" : [ {\n        \"Name\" : \"volume-id\",\n        \"Values\" : [ \"{{ getSQLServerMediaVolumeId.VolumeId }}\" ]\n      } ],\n      \"PropertySelector\" : \"$.Volumes[0].State\",\n      \"DesiredValues\" : [ \"available\" ]\n    },\n    \"isCritical\" : \"true\",\n    \"nextStep\" : \"attachSQLServerMediaVolumeToInstance\"\n  }, {\n    \"name\" : \"attachSQLServerMediaVolumeToInstance\",\n    \"action\" : \"aws:executeAwsApi\",\n    \"maxAttempts\" : 3,\n    \"inputs\" : {\n      \"Service\" : \"ec2\",\n      \"Api\" : \"AttachVolume\",\n      \"Device\" : \"xvdh\",\n      \"InstanceId\" : \"{{ getServerUpgradeInstance.InstanceId }}\",\n      \"VolumeId\" : \"{{ getSQLServerMediaVolumeId.VolumeId }}\"\n    },\n    \"onFailure\" : \"step:deleteServerUpgradeInstance\",\n    \"isCritical\" : \"true\",\n    \"nextStep\" : \"waitUntilSQLServerMediaAttached\"\n  }, {\n    \"name\" : \"waitUntilSQLServerMediaAttached\",\n    \"action\" : \"aws:waitForAwsResourceProperty\",\n    \"maxAttempts\" : 3,\n    \"inputs\" : {\n      \"Service\" : \"ec2\",\n      \"Api\" : \"DescribeVolumes\",\n      \"Filters\" : [ {\n        \"Name\" : \"volume-id\",\n        \"Values\" : [ \"{{ getSQLServerMediaVolumeId.VolumeId }}\" ]\n      }, {\n        \"Name\" : \"attachment.instance-id\",\n        \"Values\" : [ \"{{ getServerUpgradeInstance.InstanceId }}\" ]\n      } ],\n      \"PropertySelector\" : \"$.Volumes[0].State\",\n      \"DesiredValues\" : [ \"in-use\" ]\n    },\n    \"onFailure\" : \"step:deleteServerUpgradeInstance\",\n    \"isCritical\" : \"true\",\n    \"nextStep\" : \"sleepForVolumeTobeAttached\"\n  }, {\n    \"name\" : \"sleepForVolumeTobeAttached\",\n    \"action\" : \"aws:sleep\",\n    \"inputs\" : {\n      \"Duration\" : \"PT10M\"\n    },\n    \"onFailure\" : \"step:deleteServerUpgradeInstance\",\n    \"isCritical\" : \"true\",\n    \"nextStep\" : \"doRestartBeforeUpgradeStart\"\n  }, {\n    \"name\" : \"doRestartBeforeUpgradeStart\",\n    \"action\" : \"aws:runCommand\",\n    \"maxAttempts\" : 3,\n    \"inputs\" : {\n      \"DocumentName\" : \"AWS-RunPowerShellScript\",\n      \"InstanceIds\" : [ \"{{ getServerUpgradeInstance.InstanceId }}\" ],\n      \"Parameters\" : {\n        \"commands\" : [ \"Restart-Computer -Force\" ]\n      }\n    },\n    \"onFailure\" : \"step:deleteServerUpgradeInstance\",\n    \"isCritical\" : \"true\",\n    \"nextStep\" : \"sleepUntillRestartToBeFinished\"\n  }, {\n    \"name\" : \"sleepUntillRestartToBeFinished\",\n    \"action\" : \"aws:sleep\",\n    \"maxAttempts\" : 3,\n    \"inputs\" : {\n      \"Duration\" : \"PT5M\"\n    },\n    \"onFailure\" : \"step:deleteServerUpgradeInstance\",\n    \"isCritical\" : \"true\",\n    \"nextStep\" : \"checkSSRSSetupRequirement\"\n  }, {\n    \"name\" : \"checkSSRSSetupRequirement\",\n    \"action\" : \"aws:branch\",\n    \"maxAttempts\" : 3,\n    \"onFailure\" : \"step:deleteServerUpgradeInstance\",\n    \"inputs\" : {\n      \"Choices\" : [ {\n        \"NextStep\" : \"setupSSRS\",\n        \"Or\" : [ {\n          \"Variable\" : \"{{ TargetSQLVersion }}\",\n          \"EqualsIgnoreCase\" : \"2014\"\n        }, {\n          \"Variable\" : \"{{ TargetSQLVersion }}\",\n          \"EqualsIgnoreCase\" : \"2016\"\n        } ]\n      } ],\n      \"Default\" : \"runSQLServerUpgrade\"\n    },\n    \"isCritical\" : \"true\"\n  }, {\n    \"name\" : \"setupSSRS\",\n    \"action\" : \"aws:runCommand\",\n    \"maxAttempts\" : 3,\n    \"inputs\" : {\n      \"DocumentName\" : \"AWS-RunPowerShellScript\",\n      \"InstanceIds\" : [ \"{{ getServerUpgradeInstance.InstanceId }}\" ],\n      \"Parameters\" : {\n        \"commands\" : [ \" ##################################################\", \"### Objective of this PS module is check if reporting service installed and\", \"### DB is absent, create the DB in native way to bypass the error\", \"### during SQL Server upgrade as listed https://blog.sqlauthority.com/2015/09/25/sql-server-failed-rule-valid-dsn-and-valid-database-compatibility-level-and-successful-connection/\", \"### This is needed for upgrading SQL Server 2012-14/16 etc..\", \"### This script needs to be executed conditionally... \", \"##################################################\", \"\", \"## Check WMI action result \", \"function CheckWmiAction\", \"{\", \"param($wmi_result, $actionname)\", \"if ($wmi_result.HRESULT -ne 0) {\", \"write-error \\\"$actionname failed. Error from WMI: $($wmi_result.Error)\\\"\", \"}\", \"}\", \"\", \"\", \"## Get the SSRS Wmiobject\", \"function Get-ReportingServerObject()\", \"{\", \"##objective is to get MS Name and Version before initialize WmiObject\", \"$instances = (get-itemproperty \\\"HKLM:\\\\SOFTWARE\\\\Microsoft\\\\Microsoft SQL Server\\\").InstalledInstances\", \"$instance = (Get-ItemProperty \\\"HKLM:\\\\SOFTWARE\\\\Microsoft\\\\Microsoft SQL Server\\\\Instance Names\\\\SQL\\\").$instances\", \"$instanceDetails = (Get-ItemProperty \\\"HKLM:\\\\SOFTWARE\\\\Microsoft\\\\Microsoft SQL Server\\\\$instance\\\\Setup\\\")\", \"$version = $instanceDetails.Version.subString(0, $instanceDetails.Version.indexOf(\\\".\\\"))\", \"\", \"return Get-WmiObject –namespace \\\"root\\\\Microsoft\\\\SqlServer\\\\ReportServer\\\\RS_$instances\\\\v$version\\\\Admin\\\" `\", \"-class MSReportServer_ConfigurationSetting -ComputerName localhost\", \"}\", \"\", \"try\", \"{\", \"$ErrorActionPreference = \\\"Stop\\\"\", \"$server = $env:COMPUTERNAME\", \"$HTTPport = 80 \", \"\", \"## initialize SSRS WMIObject\", \"$RSObject = Get-ReportingServerObject\", \" \", \"if(![string]::IsNullOrEmpty($RSObject.DatabaseName))\", \"{\", \"return; #Reporting server DB set up is present, don't do anything.\", \"}\", \"\", \"$starttime=Get-Date\", \"$dbName='ReportServer'\", \"$LocalDetails =  GET-WinSystemLocale \", \"$localeId = $LocalDetails.LCID \", \"\", \" ##check for service status, if it's stopped, first start for WMI object to work\", \" $reportServerService = $RSObject.ServiceName\", \" $service = Get-Service -Name $reportServerService\", \" if($service.Status -ne 'Running')\", \" {\", \" Start-Service -Name $reportServerService\", \" $service.WaitForStatus([System.ServiceProcess.ServiceControllerStatus]::Running)\", \" }\", \" ##end of check \", \" \", \"## Setting the web service URL ##\", \"write-host -foregroundcolor green \\\"Setting the web service URL\\\"\", \"write-host 'Calling SetVirtualDirectory'\", \"$r = $RSObject.SetVirtualDirectory('ReportServerWebService','ReportServer',$localeId)\", \"CheckWmiAction $r \\\"SetVirtualDirectory for ReportServer\\\"\", \"\", \"## ReserveURL for ReportServerWebService - port $HTTPport (for local usage)\", \"write-host \\\"Calling ReserveURL port $HTTPport\\\"\", \"$r = $RSObject.ReserveURL('ReportServerWebService',\\\"http://+:$HTTPport\\\",$localeId)\", \"CheckWmiAction $r \\\"ReserveURL for ReportServer port $HTTPport\\\" \", \" \", \"## Setting the Database ##\", \"write-host -foregroundcolor green \\\"Setting the Database\\\"\", \"\", \"write-host \\\"Calling GenerateDatabaseCreationScript for database $dbName\\\"\", \"$r = $RSObject.GenerateDatabaseCreationScript($dbName,$localeId,$false)\", \"CheckWmiAction $r \\\"GenerateDatabaseCreationScript\\\"\", \"$script = $r.Script\", \" \", \"## Execute sql script to create the database\", \"write-host 'Executing Database Creation Script'\", \"$savedcvd = Get-Location\", \"Import-Module SQLPS\", \"Invoke-SqlCmd -Query $script\", \"Set-Location $savedcvd\", \" \", \"## GenerateGrantRightsScript \", \"$DBUser = $RSObject.WindowsServiceIdentityActual\", \"write-host \\\"Calling GenerateDatabaseRightsScript with user $DBUser\\\"\", \"$r = $RSObject.GenerateDatabaseRightsScript($DBUser,$dbName,$false,$true)\", \"CheckWmiAction $r \\\"GenerateDatabaseRightsScript\\\"\", \"$script = $r.Script\", \" \", \"## Execute grant rights script\", \"write-host 'Executing Database Rights Script'\", \"$savedcvd = Get-Location\", \"cd sqlserver:\\\\\", \"Invoke-SqlCmd -Query $script\", \"Set-Location $savedcvd\", \" \", \"## SetDBConnection - uses Windows Service (type 2), username is ignored\", \"write-host \\\"Calling SetDatabaseConnection server $server, DB $dbName\\\"\", \"$r = $RSObject.SetDatabaseConnection($server,$dbName,2,'','')\", \"CheckWmiAction $r \\\"SetDatabaseConnection\\\"  \", \"\", \"write-host 'Operations completed, Report Server is ready' \", \"}\", \"catch {\", \"Write-Error $_.Exception.Message\", \"exit 1\", \"}\" ]\n      }\n    },\n    \"onFailure\" : \"step:deleteServerUpgradeInstance\",\n    \"isCritical\" : \"true\",\n    \"nextStep\" : \"runSQLServerUpgrade\"\n  }, {\n    \"action\" : \"aws:runCommand\",\n    \"name\" : \"runSQLServerUpgrade\",\n    \"maxAttempts\" : 3,\n    \"inputs\" : {\n      \"DocumentName\" : \"AWS-RunPowerShellScript\",\n      \"InstanceIds\" : [ \"{{ getServerUpgradeInstance.InstanceId }}\" ],\n      \"Parameters\" : {\n        \"commands\" : [ \"function Enable-OfflineDisk {\", \"\\t$culture = Get-Culture   \", \"\\tif ($culture.Name -eq \\\"ja-JP\\\") {\", \"\\t\\t$offlinedisk = \\\"list disk\\\" | diskpart | Where-Object { $_ -match \\\"オフライン\\\" }\", \"\\t} \", \"\\telse {\", \"\\t\\t$offlinedisk = \\\"list disk\\\" | diskpart | Where-Object { $_ -match \\\"offline\\\" }\", \"\\t}\", \"\\tif ($offlinedisk) {\", \"\\t\\tWrite-Host \\\"Following Offline disk(s) found..Trying to bring Online.\\\"\", \"\\t\\t$offlinedisk\", \"\\t\\tforeach ($offdisk in $offlinedisk) {\", \"\\t\\t\\t$offdiskS = $offdisk.Substring(2, 6)\", \"\\t\\t\\tWrite-Host \\\"Enabling $offdiskS\\\"\", \"\\t\\t\\t$OnlineDisk = @\\\"\", \"select $offdiskS\", \"attributes disk clear readonly\", \"online disk\", \"attributes disk clear readonly\", \"\\\"@\", \"\", \"\\t\\t\\t$noOut = $OnlineDisk | diskpart\", \"\\t\\t\\tStart-Sleep 5\", \"\\t\\t}\", \"\\t\\tif ($culture.Name -eq \\\"ja-JP\\\") {\", \"\\t\\t\\t$offlinedisk = \\\"list disk\\\" | diskpart | Where-Object { $_ -match \\\"オフライン\\\" }\", \"\\t\\t} \", \"\\t\\telse {\", \"\\t\\t\\t$offlinedisk = \\\"list disk\\\" | diskpart | Where-Object { $_ -match \\\"offline\\\" }\", \"\\t\\t}\", \"\\t\\tif ($offlinedisk) \", \"\\t\\t{\", \"\\t\\t\\tWrite-Host \\\"Failed to bring the following disk(s) online\\\"\", \"\\t\\t\\t$offlinedisk\", \"\\t\\t}\", \"\\t\\telse {\", \"\\t\\t\\tWrite-Host \\\"Disk(s) are now online.\\\"\", \"\\t\\t}\", \"\\t}\", \"\\telse {\", \"\\t\\tWrite-Host \\\"All disk(s) are online!\\\"\", \"\\t}\", \"}\", \"\", \"try {\", \"\\tEnable-OfflineDisk\", \"\\t$CURRENTDRIVE = ([System.IO.DriveInfo]::getdrives() | Where-Object { $_.DriveType -eq \\\"Fixed\\\" } | select-object -ExpandProperty Name) -join ','\", \"\\t$OLDDRIVES = Get-Content -Path \\\"C:\\\\SQLUpgrade\\\\{{ automation:EXECUTION_ID }}\\\\drive.txt\\\" -TotalCount 1\", \"\\t$oldDriveArray = $OLDDRIVES.split(',')\", \"\\t$newDriveArray = $CURRENTDRIVE.split(',')\", \"\\tforeach ($drive in $newDriveArray) {\", \"\\t\\tif (-not ($oldDriveArray -contains $drive)) {\", \"\\t\\t\\t$NEWDRIVE = $drive\", \"\\t\\t\\tbreak\", \"\\t\\t}\", \"\\t}\", \"\\tif (-not $NEWDRIVE) {\", \"\\t\\tWrite-Log \\\"Can't find the new drive\\\"\", \"\\t\\texit -1\", \"\\t}\", \"\\tWrite-host \\\"Olddrives $OLDDRIVES , Currentdrives $CURRENTDRIVE, Newdrive $NEWDRIVE\\\"\", \"\\tWrite-Host \\\"SQL Server Installed media present in Drive $NEWDRIVE \\\"\", \"\\t$INSTANCENAME = (get-itemproperty \\\"HKLM:\\\\SOFTWARE\\\\Microsoft\\\\Microsoft SQL Server\\\").InstalledInstances\", \"  $targetVersion = {{ TargetSQLVersion }}\", \"  if(($targetVersion -eq '2016') -or ($targetVersion -eq '2014')) {\", \"  Invoke-expression \\\"$NEWDRIVE\\\\setup.exe /q /ACTION=upgrade /INSTANCEID=$INSTANCENAME /INSTANCENAME=$INSTANCENAME\\t/IACCEPTSQLSERVERLICENSETERMS \\\"\", \"  }\", \"  else {\", \"  Invoke-expression \\\"$NEWDRIVE\\\\setup.exe /q /ACTION=upgrade /INSTANCEID=$INSTANCENAME /INSTANCENAME=$INSTANCENAME\\t/IACCEPTSQLSERVERLICENSETERMS /IACCEPTRSUNINSTALL \\\"\", \"  }\", \"}\", \"catch {\", \"\\tWrite-Error $_.Exception.Message\", \"\\texit 1\", \"}\" ]\n      }\n    },\n    \"onFailure\" : \"step:deleteServerUpgradeInstance\",\n    \"isCritical\" : \"true\",\n    \"nextStep\" : \"restartSystemToFinishUpgrade\"\n  }, {\n    \"name\" : \"restartSystemToFinishUpgrade\",\n    \"action\" : \"aws:runCommand\",\n    \"maxAttempts\" : 3,\n    \"inputs\" : {\n      \"DocumentName\" : \"AWS-RunPowerShellScript\",\n      \"InstanceIds\" : [ \"{{getServerUpgradeInstance.InstanceId}}\" ],\n      \"Parameters\" : {\n        \"commands\" : [ \"Restart-Computer -Force\" ]\n      }\n    },\n    \"onFailure\" : \"step:deleteServerUpgradeInstance\",\n    \"isCritical\" : \"true\",\n    \"nextStep\" : \"sleepForSQLUpgradeAndStart\"\n  }, {\n    \"name\" : \"sleepForSQLUpgradeAndStart\",\n    \"action\" : \"aws:sleep\",\n    \"inputs\" : {\n      \"Duration\" : \"PT5M\"\n    },\n    \"onFailure\" : \"step:deleteServerUpgradeInstance\",\n    \"isCritical\" : \"true\",\n    \"nextStep\" : \"waitForSSMAgentOnlineAfterUpgrade\"\n  }, {\n    \"name\" : \"waitForSSMAgentOnlineAfterUpgrade\",\n    \"action\" : \"aws:waitForAwsResourceProperty\",\n    \"maxAttempts\" : 3,\n    \"onFailure\" : \"step:deleteServerUpgradeInstance\",\n    \"inputs\" : {\n      \"Service\" : \"ssm\",\n      \"Api\" : \"DescribeInstanceInformation\",\n      \"InstanceInformationFilterList\" : [ {\n        \"key\" : \"InstanceIds\",\n        \"valueSet\" : [ \"{{ getServerUpgradeInstance.InstanceId }}\" ]\n      } ],\n      \"PropertySelector\" : \"$.InstanceInformationList[0].PingStatus\",\n      \"DesiredValues\" : [ \"Online\" ]\n    },\n    \"isCritical\" : \"true\",\n    \"nextStep\" : \"checkAfterSQLServerUpgrade\"\n  }, {\n    \"name\" : \"checkAfterSQLServerUpgrade\",\n    \"action\" : \"aws:runCommand\",\n    \"maxAttempts\" : 3,\n    \"inputs\" : {\n      \"DocumentName\" : \"AWS-RunPowerShellScript\",\n      \"InstanceIds\" : [ \"{{ getServerUpgradeInstance.InstanceId }}\" ],\n      \"Parameters\" : {\n        \"commands\" : [ \"$instances = (get-itemproperty \\\"HKLM:\\\\SOFTWARE\\\\Microsoft\\\\Microsoft SQL Server\\\").InstalledInstances\", \"$instance = (Get-ItemProperty \\\"HKLM:\\\\SOFTWARE\\\\Microsoft\\\\Microsoft SQL Server\\\\Instance Names\\\\SQL\\\").$instances\", \"$instanceDetails = (Get-ItemProperty \\\"HKLM:\\\\SOFTWARE\\\\Microsoft\\\\Microsoft SQL Server\\\\$instance\\\\Setup\\\")\", \"$v = $instanceDetails.Version.subString(0, $instanceDetails.Version.indexOf(\\\".\\\"))\", \"$targetVersion = {{ TargetSQLVersion }}\", \"if (($targetVersion -eq '2014' -and $v -eq 12) -or ($targetVersion -eq '2016' -and $v -eq 13) -or ($targetVersion -eq '2017' -and $v -eq 14) -or ($targetVersion -eq '2019' -and $v -eq 15))\", \"{\", \"  write-host \\\" SQL Server upgrades successfully\\\"\", \"  exit 0\", \"}\", \"else {\", \"\\texit 1\", \"}\" ]\n      }\n    },\n    \"onFailure\" : \"step:putServerUpgradeFailureMetric\",\n    \"isCritical\" : \"true\",\n    \"nextStep\" : \"branchOnSQLUpgradeSuccess\"\n  }, {\n    \"name\" : \"branchOnSQLUpgradeSuccess\",\n    \"action\" : \"aws:branch\",\n    \"maxAttempts\" : 3,\n    \"onFailure\" : \"step:putServerUpgradeFailureMetric\",\n    \"inputs\" : {\n      \"Choices\" : [ {\n        \"Variable\" : \"{{ checkAfterSQLServerUpgrade.Output }}\",\n        \"Contains\" : \"SQL Server upgrades successfully\",\n        \"NextStep\" : \"putServerUpgradeSuccessMetric\"\n      } ],\n      \"Default\" : \"putServerUpgradeFailureMetric\"\n    },\n    \"isCritical\" : \"true\"\n  }, {\n    \"name\" : \"putServerUpgradeSuccessMetric\",\n    \"action\" : \"aws:putServerUpgradeMetrics\",\n    \"maxAttempts\" : 3,\n    \"onFailure\" : \"step:detachSQLServerMediaVolume\",\n    \"inputs\" : {\n      \"DimensionName\" : \"SSM_METRICS\",\n      \"DimensionValue\" : \"AWSEC2-CloneInstanceAndUpgradeSQLServer\",\n      \"MetricName\" : \"Successful_Upgrades\",\n      \"MetricValue\" : \"1.0\"\n    },\n    \"isCritical\" : \"true\",\n    \"nextStep\" : \"detachSQLServerMediaVolume\"\n  }, {\n    \"name\" : \"putServerUpgradeFailureMetric\",\n    \"action\" : \"aws:putServerUpgradeMetrics\",\n    \"maxAttempts\" : 3,\n    \"onFailure\" : \"step:detachSQLServerMediaVolume\",\n    \"inputs\" : {\n      \"DimensionName\" : \"SSM_METRICS\",\n      \"DimensionValue\" : \"AWSEC2-CloneInstanceAndUpgradeSQLServer\",\n      \"MetricName\" : \"Failed_Upgrades\",\n      \"MetricValue\" : \"1.0\"\n    },\n    \"isCritical\" : \"true\",\n    \"nextStep\" : \"deleteServerUpgradeInstance\"\n  }, {\n    \"name\" : \"detachSQLServerMediaVolume\",\n    \"action\" : \"aws:executeAwsApi\",\n    \"maxAttempts\" : 3,\n    \"inputs\" : {\n      \"Service\" : \"ec2\",\n      \"Api\" : \"DetachVolume\",\n      \"InstanceId\" : \"{{ getServerUpgradeInstance.InstanceId }}\",\n      \"VolumeId\" : \"{{ getSQLServerMediaVolumeId.VolumeId }}\",\n      \"Force\" : true\n    },\n    \"onFailure\" : \"step:deleteServerUpgradeInstance\",\n    \"isCritical\" : \"true\",\n    \"nextStep\" : \"waitTillSQLServerMediaVolumeDetached\"\n  }, {\n    \"name\" : \"waitTillSQLServerMediaVolumeDetached\",\n    \"action\" : \"aws:waitForAwsResourceProperty\",\n    \"maxAttempts\" : 3,\n    \"inputs\" : {\n      \"Service\" : \"ec2\",\n      \"Api\" : \"DescribeVolumes\",\n      \"Filters\" : [ {\n        \"Name\" : \"volume-id\",\n        \"Values\" : [ \"{{ getSQLServerMediaVolumeId.VolumeId }}\" ]\n      } ],\n      \"PropertySelector\" : \"$.Volumes[0].State\",\n      \"DesiredValues\" : [ \"available\" ]\n    },\n    \"onFailure\" : \"step:deleteServerUpgradeInstance\",\n    \"isCritical\" : \"true\",\n    \"nextStep\" : \"deleteSQLServerMediaVolume\"\n  }, {\n    \"name\" : \"deleteSQLServerMediaVolume\",\n    \"action\" : \"aws:executeAwsApi\",\n    \"maxAttempts\" : 3,\n    \"inputs\" : {\n      \"Service\" : \"ec2\",\n      \"Api\" : \"DeleteVolume\",\n      \"VolumeId\" : \"{{ getSQLServerMediaVolumeId.VolumeId }}\"\n    },\n    \"onFailure\" : \"step:deleteServerUpgradeInstance\",\n    \"isCritical\" : \"true\",\n    \"nextStep\" : \"createImageUpgradedInstance\"\n  }, {\n    \"name\" : \"createImageUpgradedInstance\",\n    \"action\" : \"aws:executeAwsApi\",\n    \"maxAttempts\" : 3,\n    \"inputs\" : {\n      \"Service\" : \"ec2\",\n      \"Api\" : \"CreateImage\",\n      \"InstanceId\" : \"{{ getServerUpgradeInstance.InstanceId }}\",\n      \"Name\" : \"AWSEC2-SQLSERVERUPGRADE-{{ getServerUpgradeInstance.InstanceId }}-{{automation:EXECUTION_ID}}\",\n      \"NoReboot\" : false\n    },\n    \"outputs\" : [ {\n      \"Name\" : \"ImageId\",\n      \"Selector\" : \"$.ImageId\",\n      \"Type\" : \"String\"\n    } ],\n    \"onFailure\" : \"step:deleteServerUpgradeInstance\",\n    \"isCritical\" : \"true\",\n    \"nextStep\" : \"waitTillUpgradedInstanceImageReady\"\n  }, {\n    \"name\" : \"waitTillUpgradedInstanceImageReady\",\n    \"action\" : \"aws:waitForAwsResourceProperty\",\n    \"maxAttempts\" : 3,\n    \"inputs\" : {\n      \"Service\" : \"ec2\",\n      \"Api\" : \"DescribeImages\",\n      \"ImageIds\" : [ \"{{ createImageUpgradedInstance.ImageId }}\" ],\n      \"PropertySelector\" : \"$.Images[0].State\",\n      \"DesiredValues\" : [ \"available\" ]\n    },\n    \"onFailure\" : \"step:deleteServerUpgradeInstance\",\n    \"isCritical\" : \"true\",\n    \"nextStep\" : \"deleteServerUpgradeInstance\"\n  }, {\n    \"name\" : \"deleteServerUpgradeInstance\",\n    \"action\" : \"aws:executeAwsApi\",\n    \"inputs\" : {\n      \"Service\" : \"ec2\",\n      \"Api\" : \"TerminateInstances\",\n      \"InstanceIds\" : [ \"{{ getServerUpgradeInstance.InstanceId }}\" ]\n    },\n    \"maxAttempts\" : 3,\n    \"isCritical\" : \"true\",\n    \"onFailure\" : \"Continue\",\n    \"timeoutSeconds\" : 1800,\n    \"nextStep\" : \"branchOnDeletingImageFromOriginalInstance\"\n  }, {\n    \"name\" : \"branchOnDeletingImageFromOriginalInstance\",\n    \"action\" : \"aws:branch\",\n    \"onFailure\" : \"step:describeInstallationMediaVolume\",\n    \"inputs\" : {\n      \"Choices\" : [ {\n        \"NextStep\" : \"deleteImageFromOriginalInstance\",\n        \"Variable\" : \"{{ KeepPreUpgradeImageBackUp }}\",\n        \"EqualsIgnoreCase\" : \"False\"\n      } ],\n      \"Default\" : \"describeInstallationMediaVolume\"\n    },\n    \"isCritical\" : \"true\"\n  }, {\n    \"name\" : \"deleteImageFromOriginalInstance\",\n    \"action\" : \"aws:deleteImage\",\n    \"inputs\" : {\n      \"ImageId\" : \"{{ describeOriginalInstanceImage.ImageId }}\"\n    },\n    \"maxAttempts\" : 3,\n    \"isCritical\" : \"true\",\n    \"onFailure\" : \"Continue\",\n    \"nextStep\" : \"describeInstallationMediaVolume\"\n  }, {\n    \"name\" : \"describeInstallationMediaVolume\",\n    \"action\" : \"aws:executeAwsApi\",\n    \"inputs\" : {\n      \"Service\" : \"ec2\",\n      \"Api\" : \"DescribeVolumes\",\n      \"Filters\" : [ {\n        \"Name\" : \"volume-id\",\n        \"Values\" : [ \"{{ getSQLServerMediaVolumeId.VolumeId }}\" ]\n      } ]\n    },\n    \"outputs\" : [ {\n      \"Name\" : \"State\",\n      \"Selector\" : \"$.Volumes[0].State\",\n      \"Type\" : \"String\"\n    } ],\n    \"maxAttempts\" : 3,\n    \"isCritical\" : \"false\",\n    \"onFailure\" : \"Continue\",\n    \"nextStep\" : \"branchOnInstallationMediaVolumeStatus\"\n  }, {\n    \"name\" : \"branchOnInstallationMediaVolumeStatus\",\n    \"action\" : \"aws:branch\",\n    \"onFailure\" : \"step:getUpgradedImageDetails\",\n    \"inputs\" : {\n      \"Choices\" : [ {\n        \"NextStep\" : \"retryDeletingInstallationMediaVolume\",\n        \"Or\" : [ {\n          \"Variable\" : \"{{ describeInstallationMediaVolume.State }}\",\n          \"EqualsIgnoreCase\" : \"available\"\n        }, {\n          \"Variable\" : \"{{ describeInstallationMediaVolume.State }}\",\n          \"EqualsIgnoreCase\" : \"in-use\"\n        } ]\n      } ],\n      \"Default\" : \"getUpgradedImageDetails\"\n    },\n    \"isCritical\" : \"false\"\n  }, {\n    \"name\" : \"retryDeletingInstallationMediaVolume\",\n    \"action\" : \"aws:executeAwsApi\",\n    \"inputs\" : {\n      \"Service\" : \"ec2\",\n      \"Api\" : \"DeleteVolume\",\n      \"VolumeId\" : \"{{ getSQLServerMediaVolumeId.VolumeId }}\"\n    },\n    \"maxAttempts\" : 3,\n    \"isCritical\" : \"false\",\n    \"onFailure\" : \"step:getUpgradedImageDetails\",\n    \"nextStep\" : \"getUpgradedImageDetails\"\n  }, {\n    \"name\" : \"getUpgradedImageDetails\",\n    \"action\" : \"aws:executeAwsApi\",\n    \"maxAttempts\" : 2,\n    \"inputs\" : {\n      \"Service\" : \"ec2\",\n      \"Api\" : \"DescribeImages\",\n      \"ImageIds\" : [ \"{{ createImageUpgradedInstance.ImageId }}\" ]\n    },\n    \"outputs\" : [ {\n      \"Name\" : \"ImageId\",\n      \"Selector\" : \"$.Images[0].ImageId\",\n      \"Type\" : \"String\"\n    }, {\n      \"Name\" : \"Name\",\n      \"Selector\" : \"$.Images[0].Name\",\n      \"Type\" : \"String\"\n    }, {\n      \"Name\" : \"State\",\n      \"Selector\" : \"$.Images[0].State\",\n      \"Type\" : \"String\"\n    } ],\n    \"isCritical\" : \"true\",\n    \"isEnd\" : \"true\"\n  } ],\n  \"outputs\" : [ \"getUpgradedImageDetails.ImageId\", \"getUpgradedImageDetails.Name\", \"getUpgradedImageDetails.State\" ]\n}",
  "CreatedDate": "2022-06-07T23:57:01.387Z",
  "DisplayName": null,
  "DocumentFormat": {
    "Value": "JSON"
  },
  "DocumentType": {
    "Value": "Automation"
  },
  "DocumentVersion": "24",
  "Name": "AWSEC2-CloneInstanceAndUpgradeSQLServer",
  "Requires": [],
  "ReviewStatus": null,
  "Status": {
    "Value": "Active"
  },
  "StatusInformation": null,
  "VersionName": null,
  "ResponseMetadata": {
    "RequestId": "885dead2-176f-4696-9fc8-c7bb1c7ee421",
    "Metadata": {},
    "ChecksumAlgorithm": 0,
    "ChecksumValidationStatus": 0
  },
  "ContentLength": 73934,
  "HttpStatusCode": 200,
  "LoggedAt": "2022-08-07T07:12:47.4939874+00:00"
}
