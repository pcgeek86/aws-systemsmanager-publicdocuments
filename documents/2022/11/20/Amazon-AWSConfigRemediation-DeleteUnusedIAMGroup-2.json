{
  "AttachmentsContent": [],
  "Content": "{\n  \"schemaVersion\" : \"0.3\",\n  \"description\" : \"### Document name - AWSConfigRemediation-DeleteUnusedIAMGroup\\n\\n## What does this document do?\\nThis runbook deletes an unused AWS IAM Group without users using the [DeleteGroup] (https://docs.aws.amazon.com/IAM/latest/APIReference/API_DeleteGroup.html) API.\\n\\n## Input Parameters\\n* AutomationAssumeRole: (Required) The ARN of the role that allows Automation to perform the actions on your behalf.\\n  * Example: `arn:aws:iam::123456789012:role/PrimaryAutomationAssumeRole`\\n* GroupId: (Required) The stable and unique string identifying the group.\\n  * Example: `AGPAYJAVWZHLDACG63X2Y`\\n\\n## Output Parameters\\n* DeleteUnusedIAMGroupAndVerify.Response: Success message and HTTP response metadata or failure exception.\\n\",\n  \"assumeRole\" : \"{{ AutomationAssumeRole }}\",\n  \"parameters\" : {\n    \"AutomationAssumeRole\" : {\n      \"type\" : \"String\",\n      \"description\" : \"(Required) The ARN of the role that allows Automation to perform the actions on your behalf.\",\n      \"allowedPattern\" : \"^arn:(?:aws|aws-us-gov|aws-cn):iam::\\\\d{12}:role\\\\/[\\\\w+=,.@/-]+$\"\n    },\n    \"GroupId\" : {\n      \"type\" : \"String\",\n      \"description\" : \"(Required) The stable and unique string identifying the group.\",\n      \"allowedPattern\" : \"^AGPA[A-Z0-9]{12,128}$\"\n    }\n  },\n  \"outputs\" : [ \"DeleteUnusedIAMGroupAndVerify.Response\" ],\n  \"mainSteps\" : [ {\n    \"name\" : \"DeleteUnusedIAMGroupAndVerify\",\n    \"action\" : \"aws:executeScript\",\n    \"description\" : \"## DeleteUnusedIAMGroupAndVerify\\nDeletes the specified unused IAM group and verifies it.\\n## Outputs\\n* Response: Success message and HTTP response metadata or failure exception.\\n\",\n    \"timeoutSeconds\" : 600,\n    \"isEnd\" : true,\n    \"inputs\" : {\n      \"Runtime\" : \"python3.7\",\n      \"Handler\" : \"delete_unused_iamgroup_handler\",\n      \"InputPayload\" : {\n        \"GroupId\" : \"{{ GroupId }}\"\n      },\n      \"Script\" : \"import boto3\\nfrom botocore.config import Config\\nfrom time import sleep\\n\\nPAGE_SIZE = 1000\\nTHROTTLE_PERIOD = 0.05\\n\\nconfig = Config(\\n    retries={\\n        \\\"max_attempts\\\": 10,\\n        \\\"mode\\\": \\\"standard\\\"\\n    }\\n)\\n\\niam_client = boto3.client(\\\"iam\\\", config=config)\\n\\ndef get_group_name(iam_group_id):\\n    paginator = iam_client.get_paginator(\\\"list_groups\\\")\\n    page_iterator = paginator.paginate(PaginationConfig={\\\"PageSize\\\": PAGE_SIZE})\\n    for page in page_iterator:\\n        for group in page[\\\"Groups\\\"]:\\n            if group[\\\"GroupId\\\"] == iam_group_id:\\n                return group[\\\"GroupName\\\"]\\n        sleep(THROTTLE_PERIOD)\\n\\ndef get_managed_group_policies(iam_group_name):\\n    managed_group_policies = []\\n    paginator = iam_client.get_paginator(\\\"list_attached_group_policies\\\")\\n    page_iterator = paginator.paginate(GroupName=iam_group_name, PaginationConfig={\\\"PageSize\\\": PAGE_SIZE})\\n    for page in page_iterator:\\n        for policy in page[\\\"AttachedPolicies\\\"]:\\n            policy_arn = policy[\\\"PolicyArn\\\"]\\n            managed_group_policies.append(policy_arn)\\n        sleep(THROTTLE_PERIOD)\\n    return managed_group_policies\\n\\ndef get_inline_group_policies(iam_group_name):\\n    inline_group_policies = []\\n    paginator = iam_client.get_paginator('list_group_policies')\\n    page_iterator = paginator.paginate(GroupName=iam_group_name, PaginationConfig={\\\"PageSize\\\": PAGE_SIZE})\\n    for page in page_iterator:\\n        policy_names = page[\\\"PolicyNames\\\"]\\n        inline_group_policies.extend(policy_names)\\n        sleep(THROTTLE_PERIOD)\\n    return inline_group_policies\\n\\ndef detach_attached_group_policies(group_name, attached_group_policies):\\n    responses = []\\n    for policy_arn in attached_group_policies:\\n        response = iam_client.detach_group_policy(GroupName=group_name, PolicyArn=policy_arn)\\n        responses.append(response)\\n    return responses\\n\\ndef delete_inline_group_policy(group_name, inline_group_policies):\\n    responses = []\\n    for policy_name in inline_group_policies:\\n        response = iam_client.delete_group_policy(GroupName=group_name, PolicyName=policy_name)\\n        responses.append(response)\\n    return responses\\n\\ndef delete_group(group_name):\\n    return iam_client.delete_group(GroupName=group_name)\\n\\ndef is_group_deleted(group_name):\\n    try:\\n        iam_client.get_group(GroupName=group_name)\\n        return False\\n    except iam_client.exceptions.NoSuchEntityException:\\n        return True\\n\\ndef delete_unused_iamgroup_handler(event, context):\\n    iam_group_id = event[\\\"GroupId\\\"]\\n    iam_group_name = get_group_name(iam_group_id)\\n    if iam_group_name is None:\\n        error_message = f\\\"IAM GROUP WITH ID '{iam_group_id}' DOES NOT EXIST.\\\"\\n        raise Exception(error_message)\\n\\n    # Delete inline group policies attached to the IAM group\\n    inline_group_policies = get_inline_group_policies(iam_group_name)\\n    delete_inline_policies_responses = delete_inline_group_policy(iam_group_name, inline_group_policies)\\n\\n    # Detach managed group policies attached to the IAM group\\n    attached_group_policies = get_managed_group_policies(iam_group_name)\\n    detach_managed_policy_responses = detach_attached_group_policies(iam_group_name, attached_group_policies)\\n\\n    # Deletes the IAM group\\n    delete_response = delete_group(iam_group_name)\\n\\n    # Verifies that the IAM group is deleted successfully.\\n    if not is_group_deleted(iam_group_name):\\n        raise Exception(f\\\"VERIFICATION FAILED. IAM GROUP {iam_group_name} NOT DELETED.\\\")\\n    return {\\n        \\\"output\\\": \\\"IAM Group deleted successfully.\\\",\\n        \\\"http_response\\\": {\\n            \\\"delete_group_response\\\": delete_response,\\n            \\\"delete_inline_policies_response\\\": delete_inline_policies_responses,\\n            \\\"detach_managed_policies_response\\\": detach_managed_policy_responses\\n        }\\n    }\"\n    },\n    \"outputs\" : [ {\n      \"Name\" : \"Response\",\n      \"Selector\" : \"$.Payload\",\n      \"Type\" : \"StringMap\"\n    } ]\n  } ]\n}",
  "CreatedDate": "2022-04-15T15:07:37.736Z",
  "DisplayName": null,
  "DocumentFormat": {
    "Value": "JSON"
  },
  "DocumentType": {
    "Value": "Automation"
  },
  "DocumentVersion": "2",
  "Name": "AWSConfigRemediation-DeleteUnusedIAMGroup",
  "Requires": [],
  "ReviewStatus": null,
  "Status": {
    "Value": "Active"
  },
  "StatusInformation": null,
  "VersionName": null,
  "ResponseMetadata": {
    "RequestId": "345e87d2-ece8-4cf8-b3b2-c1d158139161",
    "Metadata": {},
    "ChecksumAlgorithm": 0,
    "ChecksumValidationStatus": 0
  },
  "ContentLength": 6507,
  "HttpStatusCode": 200,
  "LoggedAt": "2022-11-20T07:11:52.4157007+00:00"
}
