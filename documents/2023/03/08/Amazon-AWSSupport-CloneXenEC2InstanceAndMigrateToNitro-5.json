{
  "AttachmentsContent": [
    {
      "Hash": "52f555c5cc6ce07a7f59b9ef76126e411b58fffe1dbe7bdef449a64b5a9f543b",
      "HashType": {
        "Value": "Sha256"
      },
      "Name": "clone-xen-to-nitro-python.zip",
      "Size": 4483,
      "Url": "https://aws-ssm-document-attachments-us-west-2.s3.us-west-2.amazonaws.com/842/190294270367/Automation/AWSSupport-CloneXenEC2InstanceAndMigrateToNitro%2105308c48-4ad9-4b62-9000-238936522bd7/5/clone-xen-to-nitro-python.zip?x-attachment-size=4483&x-requester-accountId=987868780346&X-Amz-Security-Token=IQoJb3JpZ2luX2VjEIf%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLXdlc3QtMiJIMEYCIQCEPc4UfdNx0GvflJDtkGp0M6b1fV4O7gDZ%2F0cpPw7srAIhANZE%2BawBtDVEZxwQAOPz%2FJXk5QJwXfQLgG%2BWDpu4LEHuKrsFCEAQAxoMMjQ5OTI0NTI3NDEwIgzHVzR4sUlUMaDrlj0qmAWVxAGVJCm%2Bb68b0X6MB6iQ3RrMxQlLntUu%2FuUbRNJpLSapBG8F3UM64JCvyFMXGTeawsXxl3sbjF3cESnwTfjwxPHDUFF3gtHCKJTHYGfoKceFjuLsF9fXAV0OvhzwCNIX2HuUDd7NmhsqaVUjm4paO1gb2pW3hKu2lZ4QVhGnXBk24W7zRu0q6c0h2Huojxm3%2BbnvyWPUWCMgB%2F7E6t6dWcpIwyKfkMTX1msqQSj56TzfXRhD1xrHOgyt0wiaxnIQBDD3XS8rSgt4y5eOYf9CmhuhBoI6m4QAO9T1UStyHbDbK2RI3Vz9EgI7ksfdNAeDZ3kesQuT28Ov2bHoGqaZaH2GH0LLoVlH93zcFYq7UrVeyamGhPkyzb6gXN0ONjkAiQ1OI4z4ixvKY0upUAbX8Ym1ArojoB4NGl2Ga7LNMs9%2FArRNIHnMN9zHfav01cndWDB4VfH6YXlGoBUqNUd9wulWCma4LF4GLnU0NiEL3k%2FbuMoXzV4ETVY8wi%2B%2FxC0Qh1sda74Gjpi%2FMlucj%2BQvVrY66SEjjV4EupQ%2BJOTYyWK%2BaIlEIpaR9LfCTco0U5lTsW5jhIvaP6dsVxUFO%2F9uYJKnwLNdPObIKJ69GP%2Faax%2Bjaxf7fnJr8RrfPBCvar0YEpr3phlZ9eiDsfyhF8t1%2BmMUbYat%2F5npGoaZfbruapJk0NvBDEEG2JzTnpQjNhnxoLbQwIKLq5hzR1xpiYT%2FZrDaBeuxW%2ByTuB37AtChYuk9xCCjAG3j73qClZmbqGt729qeYVZx43jDgmCwvCck5Z3nMMLPWx77piJwGoD8h73un1iokwYvjp2TUfHobGTMUv%2FbnIyLjuz0X44sx%2BSPWKiST%2BuXrC5egG0Y06pGGaXIJswPvBbfMMbaoKAGOrAB1N%2BSZWji%2F5YdY7cNlRxq2G52r6wlMyIv%2BfxVpFCSsOxka9L7C9NMM8h0Jhug5Nxfdz7bUgVBcfV4lMF5ABY%2B2YSWRFwc09tLuhhNLnIuMceS1wARcMCyZJYH6C1dV2ATh%2Bl%2BO5N0dIyZQnI2Rp6JIV2kY9%2FOaxv%2F0tzAxDMq%2FqrXsTCuuCysed3qZmtk%2FeoKxl5lx47KoEA2ku4eGBo5fu9C3UPCWW2eNjuyX8%2BJ2i0%3D&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Date=20230308T071247Z&X-Amz-SignedHeaders=host&X-Amz-Expires=86400&X-Amz-Credential=ASIATUMFJUUZBISLVCUZ%2F20230308%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Signature=0174ad96333d3bf082b72ee255e54bfa668a912bb4addfbee446b19d23a76232"
    }
  ],
  "Content": "{\n  \"schemaVersion\": \"0.3\",\n  \"description\": \"# AWSSupport-CloneXenEC2InstanceAndMigrateToNitro\\n\\n----\\n\\nThe *AWSSupport-CloneXenEC2InstanceAndMigrateToNitro* runbook clones, prepares and migrates the cloned EC2 Linux instance, currently running on EC2 Xen platform, to run on [EC2 Nitro platform](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html#ec2-nitro-instances). This automation is divided into three different branches, details of which are as follows:\\n\\n\\n### 1. Preliminary Checks\\n\\nIn this branch, automation evaluates all of the following pre-requisites to proceed with the migration. If any of the steps fails, automation stops.\\n\\n- Checks if the target EC2 instance is already running on Nitro platform\\n- Determines if the [lifecycle](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-purchasing-options.html#check-instance-lifecycle) of the target EC2 instance is Spot\\n- Checks if any [instance-store-volume](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/InstanceStorage.html#instance-store-volumes) is attached with the target EC2 instance\\n- Validates if the Operating System is Linux\\n- Determines if the target EC2 instance is a part of the AWS Auto Scaling. If yes, the EC2 instance should be in the [Standby state](https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-enter-exit-standby.html)\\n- Checks if the target EC2 instance is connected with SSM and configured to use AWS Systems Manager Run Command\\n\\n\\n### 2. Test \\n\\nThe automation uses this phase as sanity test by creating a test Amazon Machine Image(AMI) from the target EC2 instance and launching a test EC2 instance using this AMI. \\n\\nIf the test EC2 instance passes the status checks, automation is temporarily paused and approval from the designated principals is requested via SNS notification. If approval is provided, automation stops the target EC2 instance.\\n\\n*Note:*\\n\\n*- Before providing approval, ensure that all the application(s) running on the target EC2 instance are gracefully closed.*\\n\\n*- If the EC2 does not have an Elastic IP addresses associated, the automatic public IPv4 address will change once the instance is stopped and started.*\\n\\n*- Test AMI & EC2 instance are deleted at the end of this branch*\\n\\n### 3. CloneAndMigrate \\n\\nIn this branch, automation creates a clone of your target EC2 instance in the same subnet and migrates the EC2 instance using the following steps:\\n\\n- Enables the [Enhanced networking (ENA) attribute](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/enhanced-networking-ena.html#enable-enhanced-networking-ena-AL)\\n- Installs the latest version of ENA drivers\\n- Verifies if the NVMe module is installed. If installed, then verifies if the module is loaded in the initramfs\\n- Analyzes */etc/fstab* and replaces entries with block device names(/dev/sd\\\\* or /dev/xvd\\\\*) with their respective UUIDs. Before modifying the configuration, the runbook creates a backup of the file at path */etc/fstab**\\n- Disables [predictable interface naming](https://www.freedesktop.org/wiki/Software/systemd/PredictableNetworkInterfaceNames/) by adding the ``net.ifnames=0`` option to the ``GRUB_CMDLINE_LINUX`` line in */etc/default/grub*, if exists OR to the ``kernel`` in */boot/grub/menu.lst*\\n- Removes */etc/udev/rules.d/70-persistent-net.rules* file, if exists. Before removing, creates a backup at path */etc/udev/rules.d/*\\n\\nAfter validating all the requirements, the cloned EC2 instance type is changed to the desired Nitro type.  Once the cloned instance passes the Status Checks on Nitro platform, automation seeks for designated principal's approval to create an AMI. If approval is denied, automation stops, leaving cloned EC2 instance.\\n\\n\\n\\n### Prerequisites:\\n\\nTarget EC2 instance requires outbound access to the repositories to install drivers and dependencies such as *kernel-devel, gcc,patch, rpm-build. wget,dracut, make, linux-headers,unzip* using package manager if needed.\\n\\n\\n### Supported Operating Systems:\\n  \\n* Red Hat Enterprise Linux (RHEL) 7.x - 8.5\\n* Amazon Linux, Amazon Linux 2\\n* Ubuntu Server 18.04 LTS, 20.04 LTS, and 20.10 STR\\n* SUSE12SP5, SUSE15SP(2,3,4)\\n\\n\\n### Disclaimer:\\n\\n* Executing this runbook, may incur extra charges to your account for the EC2 instance, EBS Volumes & Amazon Machine Images(AMIs). Please refer to the [Amazon EC2 Pricing](https://aws.amazon.com/ec2/pricing/) & [Amazon EBS pricing](https://aws.amazon.com/ebs/pricing/) for more details.\",\n  \"assumeRole\": \"{{AutomationAssumeRole}}\",\n  \"parameters\": {\n    \"AutomationAssumeRole\": {\n      \"default\": \"\",\n      \"type\": \"String\",\n      \"description\": \"(Optional) The Amazon Resource Name (ARN) of the AWS Identity and Access Management (IAM) role that allows Systems Manager Automation to perform the actions on your behalf. If no role is specified, Systems Manager Automation uses the permissions of the user that starts this runbook. For more information, visit - https://docs.aws.amazon.com/systems-manager/latest/userguide/automation-setup.html\",\n      \"allowedPattern\": \"^$|^arn:(aws|aws-cn|aws-us-gov|aws-iso(-[a-z])?):iam::\\\\d{12}:role/[\\\\w+=/,.@-]+$\"\n    },\n    \"TargetInstanceId\": {\n      \"type\": \"String\",\n      \"description\": \"(Required) InstanceId of the target EC2 instance you want to migrate to Nitro platform.\",\n      \"allowedPattern\": \"^(i|mi)-[a-z0-9]{8,17}$\"\n    },\n    \"NitroInstanceType\": {\n      \"type\": \"String\",\n      \"default\": \"m5.xlarge\",\n      \"description\": \"(Required) Enter the destination Nitro instance type. Note: Only Nitro M5, M6, C5, C6, R5, R6 and T3 instances are supported (e.g. t3.small). For more details about the available Nitro instance types, please refer to the link: https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html\",\n      \"allowedPattern\": \"^(m5a?z?d?n?|c5a?d?n?|r5a?d?n?b?|c6(a|i)?d?|m6(a|i)?d?|r6(a|i)?d?)\\\\.(x|2x|4x|8x|12x|16x|24x|32x)?large$|^t3a?\\\\.((x|2x)?large|nano|micro|small|medium)$\"\n    },\n    \"SNSTopicArn\": {\n      \"type\": \"String\",\n      \"description\": \"(Required) Provide the ARN of the SNS Topic for Approval notification. This SNS topic is used to send approval notifications during required during the automation execution.\",\n      \"allowedPattern\": \"^arn:(aws|aws-cn|aws-us-gov|aws-iso(-[a-z])?):sns:(us(-gov|-isob?)?|ap|ca|af|me|cn|eu|sa)-(central|(north|south)?(east|west)?)-\\\\d:\\\\d{12}:.*$\"\n    },\n    \"ApproverIAM\": {\n      \"type\": \"StringList\",\n      \"description\": \"(Required) Provide a list of AWS authenticated principals who are able to either approve or reject the action. The maximum number of approvers is 10. You can specify principals by using any of these formats, 1) An AWS Identity and Access Management (IAM) user name 2) An IAM user ARN 3) An IAM role ARN 4) An IAM assume role user ARN\",\n      \"allowedPattern\": \"^[a-zA-Z0-9_+=,.@\\\\-/]{1,128}$|^arn:(aws|aws-cn|aws-us-gov|aws-iso(-[a-z])?):iam:.*:[0-9]{12}:[a-zA-Z0-9_+=,.@\\\\-/]{1,256}$\"\n    },\n    \"MinimumRequiredApprovals\": {\n      \"type\": \"Integer\",\n      \"default\": 1,\n      \"description\": \"(Optional) The minimum number of approvals required to resume the automation. If you don't specify a value, the system defaults to one. The value for this parameter must be a positive number. The value for this parameter can't exceed the number of approvers defined by the ApproverIAM parameter.\",\n      \"allowedValues\": [\n        1,\n        2,\n        3,\n        4,\n        5,\n        6,\n        7,\n        8,\n        9,\n        10\n      ]\n    },\n    \"DeleteResourcesOnFailure\": {\n      \"type\": \"Boolean\",\n      \"default\": true,\n      \"description\": \"(Optional) Whether to terminate the cloned EC2 instance and Amazon Machine Image(AMI) if the automation fails.\",\n      \"allowedValues\": [\n        false,\n        true\n      ]\n    },\n    \"Acknowledgement\": {\n      \"type\": \"String\",\n      \"description\": \"(Required) Please read the complete details of the actions performed by this automation runbook and write 'Yes, I understand and acknowledge' if you acknowledge the steps.\",\n      \"allowedPattern\": \"^Yes, I understand and acknowledge$\"\n    }\n  },\n  \"mainSteps\": [\n    {\n      \"name\": \"checkConcurrency\",\n      \"action\": \"aws:executeScript\",\n      \"description\": \"Ensures there is only one execution of this runbook targeting the current EC2 instance. If the runbook finds another in progress execution targeting the same instance ID, it returns an error and ends.\",\n      \"timeoutSeconds\": 600,\n      \"onFailure\": \"Abort\",\n      \"inputs\": {\n        \"Runtime\": \"python3.8\",\n        \"Handler\": \"checkConcurrency.check_concurrency_handler\",\n        \"InputPayload\": {\n          \"TargetInstanceId\": \"{{TargetInstanceId}}\"\n        },\n        \"Attachment\": \"clone-xen-to-nitro-python.zip\"\n      },\n      \"outputs\": [\n        {\n          \"Name\": \"NoExecutionFound\",\n          \"Selector\": \"$.Payload.NoExecutionFound\",\n          \"Type\": \"String\"\n        }\n      ],\n      \"nextStep\": \"startOfPreliminaryChecksBranch\"\n    },\n    {\n      \"name\": \"startOfPreliminaryChecksBranch\",\n      \"action\": \"aws:sleep\",\n      \"description\": \"Start of Preliminary checks branch\",\n      \"onFailure\": \"step:getTargetInstanceProperties\",\n      \"nextStep\": \"getTargetInstanceProperties\",\n      \"isCritical\": false,\n      \"inputs\": {\n        \"Duration\": \"PT5S\"\n      }\n    },\n    {\n      \"name\": \"getTargetInstanceProperties\",\n      \"action\": \"aws:executeAwsApi\",\n      \"description\": \"Fetches the details of the target EC2 instance\",\n      \"onFailure\": \"Abort\",\n      \"maxAttempts\": 3,\n      \"nextStep\": \"checkIfNitroInstanceTypeIsSupportedInAZ\",\n      \"inputs\": {\n        \"Service\": \"ec2\",\n        \"Api\": \"DescribeInstances\",\n        \"InstanceIds\": [\n          \"{{TargetInstanceId}}\"\n        ]\n      },\n      \"outputs\": [\n        {\n          \"Name\": \"PlatformType\",\n          \"Selector\": \"$.Reservations[0].Instances[0].Platform\",\n          \"Type\": \"String\"\n        },\n        {\n          \"Name\": \"InstanceSubnetId\",\n          \"Selector\": \"$.Reservations[0].Instances[0].SubnetId\",\n          \"Type\": \"String\"\n        },\n        {\n          \"Name\": \"SecurityGroup\",\n          \"Selector\": \"$.Reservations[0].Instances[0].SecurityGroups[0].GroupId\",\n          \"Type\": \"String\"\n        },\n        {\n          \"Name\": \"InstanceProfileArn\",\n          \"Selector\": \"$.Reservations[0].Instances[0].IamInstanceProfile.Arn\",\n          \"Type\": \"String\"\n        },\n        {\n          \"Name\": \"InstanceProfileName\",\n          \"Selector\": \"$.Reservations[0].Instances[0].IamInstanceProfile.Name\",\n          \"Type\": \"String\"\n        },\n        {\n          \"Name\": \"AvailabilityZone\",\n          \"Selector\": \"$.Reservations[0].Instances[0].Placement.AvailabilityZone\",\n          \"Type\": \"String\"\n        },\n        {\n          \"Name\": \"RootDeviceName\",\n          \"Selector\": \"$.Reservations[0].Instances[0].RootDeviceName\",\n          \"Type\": \"String\"\n        },\n        {\n          \"Name\": \"RootVolumeType\",\n          \"Selector\": \"$.Reservations[0].Instances[0].RootDeviceType\",\n          \"Type\": \"String\"\n        },\n        {\n          \"Name\": \"InstanceType\",\n          \"Selector\": \"$.Reservations[0].Instances[0].InstanceType\",\n          \"Type\": \"String\"\n        },\n        {\n          \"Name\": \"ENAAttrib\",\n          \"Selector\": \"$.Reservations[0].Instances[0].EnaSupport\",\n          \"Type\": \"Boolean\"\n        },\n        {\n          \"Name\": \"InstanceLifecycle\",\n          \"Selector\": \"$.Reservations[0].Instances[0].InstanceLifecycle\",\n          \"Type\": \"String\"\n        },\n        {\n          \"Name\": \"InstanceState\",\n          \"Selector\": \"$.Reservations[0].Instances[0].State.Name\",\n          \"Type\": \"String\"\n        }\n      ]\n    },\n    {\n      \"name\": \"checkIfNitroInstanceTypeIsSupportedInAZ\",\n      \"action\": \"aws:assertAwsResourceProperty\",\n      \"description\": \"Determines if the target Nitro instance type is supported in the same Availability Zone as the Target EC2 instance \",\n      \"onFailure\": \"Abort\",\n      \"isCritical\": \"true\",\n      \"maxAttempts\": 3,\n      \"nextStep\": \"getXenInstanceTypeDetails\",\n      \"inputs\": {\n        \"Service\": \"ec2\",\n        \"Api\": \"DescribeInstanceTypeOfferings\",\n        \"LocationType\": \"availability-zone\",\n        \"Filters\": [\n          {\n            \"Name\": \"instance-type\",\n            \"Values\": [\n              \"{{NitroInstanceType}}\"\n            ]\n          },\n          {\n            \"Name\": \"location\",\n            \"Values\": [\n              \"{{getTargetInstanceProperties.AvailabilityZone}}\"\n            ]\n          }\n        ],\n        \"PropertySelector\": \"$.InstanceTypeOfferings[0].Location\",\n        \"DesiredValues\": [\n          \"{{getTargetInstanceProperties.AvailabilityZone}}\"\n        ]\n      }\n    },\n    {\n      \"name\": \"getXenInstanceTypeDetails\",\n      \"action\": \"aws:executeAwsApi\",\n      \"description\": \"Fetches the details of the the Xen(source) Instance type\",\n      \"onFailure\": \"Abort\",\n      \"maxAttempts\": 3,\n      \"nextStep\": \"checkIfInstanceHypervisorIsNitroAlready\",\n      \"inputs\": {\n        \"Service\": \"ec2\",\n        \"Api\": \"DescribeInstanceTypes\",\n        \"InstanceTypes\": [\n          \"{{getTargetInstanceProperties.InstanceType}}\"\n        ]\n      },\n      \"outputs\": [\n        {\n          \"Name\": \"Hypervisor\",\n          \"Selector\": \"$.InstanceTypes[0].Hypervisor\",\n          \"Type\": \"String\"\n        },\n        {\n          \"Name\": \"NVMeSupport\",\n          \"Selector\": \"$.InstanceTypes[0].InstanceStorageInfo.NvmeSupport\",\n          \"Type\": \"String\"\n        },\n        {\n          \"Name\": \"InstanceStorageSupported\",\n          \"Selector\": \"$.InstanceTypes[0].InstanceStorageSupported\",\n          \"Type\": \"Boolean\"\n        }\n      ]\n    },\n    {\n      \"name\": \"checkIfInstanceHypervisorIsNitroAlready\",\n      \"action\": \"aws:branch\",\n      \"description\": \"Checks if the target EC2 instance is already running on Nitro platform\",\n      \"isEnd\": true,\n      \"isCritical\": true,\n      \"inputs\": {\n        \"Choices\": [\n          {\n            \"NextStep\": \"checkIfTargetInstanceLifecycleIsSpot\",\n            \"Variable\": \"{{getXenInstanceTypeDetails.Hypervisor}}\",\n            \"StringEquals\": \"xen\"\n          }\n        ]\n      }\n    },\n    {\n      \"name\": \"checkIfTargetInstanceLifecycleIsSpot\",\n      \"action\": \"aws:branch\",\n      \"description\": \"Checks if the Lifecycle of the target EC2 instance is Spot\",\n      \"isCritical\": true,\n      \"isEnd\": true,\n      \"onFailure\": \"Abort\",\n      \"inputs\": {\n        \"Choices\": [\n          {\n            \"NextStep\": \"checkIfOperatingSystemIsLinux\",\n            \"Not\": {\n              \"Variable\": \"{{getTargetInstanceProperties.InstanceLifecycle}}\",\n              \"StringEquals\": \"spot\"\n            }\n          }\n        ]\n      }\n    },\n    {\n      \"name\": \"checkIfOperatingSystemIsLinux\",\n      \"action\": \"aws:branch\",\n      \"description\": \"Checks if the target EC2 instance is based on Linux Operating System\",\n      \"isEnd\": true,\n      \"isCritical\": true,\n      \"inputs\": {\n        \"Choices\": [\n          {\n            \"NextStep\": \"verifySSMConnectivityForTargetInstance\",\n            \"Not\": {\n              \"Variable\": \"{{getTargetInstanceProperties.PlatformType}}\",\n              \"StringEquals\": \"windows\"\n            }\n          }\n        ]\n      }\n    },\n    {\n      \"name\": \"verifySSMConnectivityForTargetInstance\",\n      \"action\": \"aws:runCommand\",\n      \"description\": \"Verifies if the target EC2 instance is connected with AWS Systems Manager and configured to use RunCommand\",\n      \"onFailure\": \"Abort\",\n      \"isCritical\": true,\n      \"maxAttempts\": 3,\n      \"timeoutSeconds\": 600,\n      \"nextStep\": \"checkIfEphemeralVolumeAreSupported\",\n      \"inputs\": {\n        \"InstanceIds\": [\n          \"{{TargetInstanceId}}\"\n        ],\n        \"DocumentName\": \"AWS-RunShellScript\",\n        \"TimeoutSeconds\": 300,\n        \"Parameters\": {\n          \"commands\": \"#!/bin/bash\\n\\necho \\\"EC2 instance is connected with AWS Systems Manager and configured to use RunCommand\\\"\\n\"\n        }\n      }\n    },\n    {\n      \"name\": \"checkIfEphemeralVolumeAreSupported\",\n      \"action\": \"aws:branch\",\n      \"description\": \"Checks if the target EC2 instance supports the Instance Store (Ephemeral) volumes\",\n      \"isEnd\": true,\n      \"isCritical\": true,\n      \"inputs\": {\n        \"Choices\": [\n          {\n            \"NextStep\": \"verifyIfTargetInstanceHasEphemeralVolumesAttached\",\n            \"Variable\": \"{{getXenInstanceTypeDetails.InstanceStorageSupported}}\",\n            \"BooleanEquals\": true\n          }\n        ],\n        \"Default\": \"checkIfRootVolumeIsEBS\"\n      }\n    },\n    {\n      \"name\": \"verifyIfTargetInstanceHasEphemeralVolumesAttached\",\n      \"action\": \"aws:runCommand\",\n      \"description\": \"Verifies if the target EC2 instance has Instance Store(Ephemeral) Volumes attached\",\n      \"onFailure\": \"Abort\",\n      \"isCritical\": true,\n      \"maxAttempts\": 3,\n      \"timeoutSeconds\": 600,\n      \"nextStep\": \"checkIfRootVolumeIsEBS\",\n      \"inputs\": {\n        \"InstanceIds\": [\n          \"{{TargetInstanceId}}\"\n        ],\n        \"DocumentName\": \"AWS-RunShellScript\",\n        \"TimeoutSeconds\": 300,\n        \"Parameters\": {\n          \"commands\": \"# Copyright 2022 Amazon.com, Inc. or its affiliates. All Rights Reserved.\\n# SPDX-License-Identifier: LicenseRef-.amazon.com.-AmznSL-1.0\\n# Licensed under the Amazon Software License  http://aws.amazon.com/asl/\\n\\n#!/bin/bash\\n\\n# Check if Instance Storage is supported or not  through API call\\n\\nNVME_SUPPORT='{{getXenInstanceTypeDetails.NVMeSupport}}'\\n\\nif [[ \\\"${AWS_SSM_INSTANCE_ID}\\\" =~ ^[i]-[a-z0-9]{8,17}$ ]]; then\\n    if [ ${NVME_SUPPORT} = \\\"required\\\" ]; then\\n        if [ $(ls -l /dev/disk/by-id/ | grep Amazon_EC2_NVMe_Instance_Storage | grep -wv ns-1 | awk '{ print $11 }' | sed 's/[./]//g' > /dev/null; echo $?) == \\\"0\\\" ]; then\\n                echo -en \\\"\\\\n [ERROR] UnSupported Instance Type:Instance have instance store volumes attached. Exiting the automation... \\\\n\\\"\\n                exit 1\\n        else\\n                echo -en \\\"\\\\n [INFO] No instance store volumes are attached with the EC2 instance  \\\\n\\\"\\n        fi\\n    elif [ $NVME_SUPPORT = \\\"unsupported\\\" ]; then\\n        if [ $(TOKEN=`curl -s -X PUT \\\"http://169.254.169.254/latest/api/token\\\" -H \\\"X-aws-ec2-metadata-token-ttl-seconds: 21600\\\"` && curl -s -H \\\"X-aws-ec2-metadata-token: $TOKEN\\\" http://169.254.169.254/latest/meta-data/block-device-mapping/ | grep -vE 'ami|root|swap' > /dev/null; echo $?) = \\\"0\\\" ]; then\\n                echo -en \\\"\\\\n [ERROR] UnSupported Instance Type: Instance have instance store volumes attached. Exiting the automation...  \\\\n\\\"\\n                exit 1\\n        else\\n                echo -en \\\"\\\\n [INFO] No instance store volumes are attached with the EC2 instance \\\\n\\\"\\n            fi\\n    else\\n        echo -en \\\"\\\\n Unknown Error \\\\n\\\"\\n        exit 1\\n    fi\\nelse\\n    echo -en \\\"\\\\n InstanceID ${AWS_SSM_INSTANCE_ID} doesn't belong to an EC2 instance\\\"\\n    exit 1\\nfi\\n\"\n        }\n      }\n    },\n    {\n      \"name\": \"checkIfRootVolumeIsEBS\",\n      \"action\": \"aws:branch\",\n      \"description\": \"Checks if target EC2 instance's root volume type is EBS\",\n      \"isCritical\": true,\n      \"isEnd\": true,\n      \"onFailure\": \"Abort\",\n      \"inputs\": {\n        \"Choices\": [\n          {\n            \"NextStep\": \"checkIfTargetInstanceIsInASG\",\n            \"Variable\": \"{{getTargetInstanceProperties.RootVolumeType}}\",\n            \"StringEquals\": \"ebs\"\n          }\n        ]\n      }\n    },\n    {\n      \"name\": \"checkIfTargetInstanceIsInASG\",\n      \"action\": \"aws:executeScript\",\n      \"description\": \"Checks if the target EC2 instance is a part of any Amazon AutoScaling Group(ASG)\",\n      \"isCritical\": true,\n      \"maxAttempts\": 1,\n      \"onFailure\": \"Abort\",\n      \"nextStep\": \"endOfPreliminaryChecksBranch\",\n      \"inputs\": {\n        \"Runtime\": \"python3.8\",\n        \"Handler\": \"checkAutoScaling.checkAutoScaling_handler\",\n        \"Attachment\": \"clone-xen-to-nitro-python.zip\",\n        \"InputPayload\": {\n          \"TargetInstanceId\": \"{{TargetInstanceId}}\"\n        }\n      }\n    },\n    {\n      \"name\": \"endOfPreliminaryChecksBranch\",\n      \"action\": \"aws:sleep\",\n      \"description\": \"End of Preliminary checks branch\",\n      \"onFailure\": \"Abort\",\n      \"nextStep\": \"startOfTestBranch\",\n      \"isCritical\": false,\n      \"inputs\": {\n        \"Duration\": \"PT5S\"\n      }\n    },\n    {\n      \"name\": \"startOfTestBranch\",\n      \"action\": \"aws:sleep\",\n      \"description\": \"Start of Testing branch\",\n      \"onFailure\": \"Abort\",\n      \"nextStep\": \"createTestImage\",\n      \"isCritical\": false,\n      \"inputs\": {\n        \"Duration\": \"PT5S\"\n      }\n    },\n    {\n      \"name\": \"createTestImage\",\n      \"action\": \"aws:createImage\",\n      \"description\": \"Creates a test Amazon Machine Image(AMI) from the provided instance\",\n      \"maxAttempts\": 1,\n      \"nextStep\": \"launchTestInstanceInSameSubnet\",\n      \"onFailure\": \"step:failureHandling\",\n      \"inputs\": {\n        \"InstanceId\": \"{{TargetInstanceId}}\",\n        \"ImageName\": \"CloneXenEC2InstanceAndMigrateToNitro_TestImage_{{TargetInstanceId}}_{{global:DATE_TIME}}\",\n        \"NoReboot\": true,\n        \"ImageDescription\": \"SSMAutomationID-{{automation:EXECUTION_ID}}\"\n      }\n    },\n    {\n      \"name\": \"launchTestInstanceInSameSubnet\",\n      \"action\": \"aws:executeScript\",\n      \"description\": \"Launches a test EC2 instance from the test AMI using the same configuration as target EC2 instance\",\n      \"isCritical\": true,\n      \"maxAttempts\": 1,\n      \"onFailure\": \"step:cleanupTestInstance\",\n      \"nextStep\": \"waitForTestInstanceStatusChecks\",\n      \"inputs\": {\n        \"Runtime\": \"python3.8\",\n        \"Handler\": \"launchEC2Instance.launchInstanceInSameSubnet_handler\",\n        \"Attachment\": \"clone-xen-to-nitro-python.zip\",\n        \"InputPayload\": {\n          \"ImageId\": \"{{createTestImage.ImageId}}\",\n          \"InstanceType\": \"{{getTargetInstanceProperties.InstanceType}}\",\n          \"IamInstanceProfileArn\": \"{{getTargetInstanceProperties.InstanceProfileArn}}\",\n          \"SubnetId\": \"{{getTargetInstanceProperties.InstanceSubnetId}}\",\n          \"SecurityGroupIds\": [\n            \"{{getTargetInstanceProperties.SecurityGroup}}\"\n          ],\n          \"TargetInstanceId\": \"{{TargetInstanceId}}\",\n          \"BranchType\": \"Test\"\n        }\n      },\n      \"outputs\": [\n        {\n          \"Name\": \"TestInstanceId\",\n          \"Selector\": \"$.Payload.launchedInstanceId\",\n          \"Type\": \"String\"\n        }\n      ]\n    },\n    {\n      \"name\": \"waitForTestInstanceStatusChecks\",\n      \"action\": \"aws:waitForAwsResourceProperty\",\n      \"description\": \"Waits for the test EC2 instance to pass the 2/2 Status Checks\",\n      \"onFailure\": \"step:cleanupTestInstance\",\n      \"isCritical\": \"true\",\n      \"timeoutSeconds\": 1200,\n      \"nextStep\": \"cleanupTestInstance\",\n      \"inputs\": {\n        \"Service\": \"ec2\",\n        \"Api\": \"DescribeInstanceStatus\",\n        \"InstanceIds\": [\n          \"{{launchTestInstanceInSameSubnet.TestInstanceId}}\"\n        ],\n        \"PropertySelector\": \"$.InstanceStatuses..InstanceStatus.Status\",\n        \"DesiredValues\": [\n          \"ok\"\n        ]\n      }\n    },\n    {\n      \"name\": \"cleanupTestInstance\",\n      \"action\": \"aws:changeInstanceState\",\n      \"description\": \"Terminates the test EC2 instance\",\n      \"maxAttempts\": 3,\n      \"isCritical\": true,\n      \"timeoutSeconds\": 300,\n      \"onFailure\": \"Abort\",\n      \"nextStep\": \"endOfTestBranch\",\n      \"inputs\": {\n        \"InstanceIds\": [\n          \"{{launchTestInstanceInSameSubnet.TestInstanceId}}\"\n        ],\n        \"CheckStateOnly\": false,\n        \"DesiredState\": \"terminated\"\n      }\n    },\n    {\n      \"name\": \"endOfTestBranch\",\n      \"action\": \"aws:sleep\",\n      \"description\": \"End of Testing branch\",\n      \"onFailure\": \"Abort\",\n      \"nextStep\": \"checkIfTestingBranchSucceeded\",\n      \"isCritical\": false,\n      \"inputs\": {\n        \"Duration\": \"PT5S\"\n      }\n    },\n    {\n      \"name\": \"checkIfTestingBranchSucceeded\",\n      \"action\": \"aws:executeScript\",\n      \"description\": \"Checks the status of testing branch\",\n      \"isCritical\": true,\n      \"maxAttempts\": 1,\n      \"onFailure\": \"Abort\",\n      \"nextStep\": \"approvalToStopTargetInstance\",\n      \"inputs\": {\n        \"Runtime\": \"python3.8\",\n        \"Handler\": \"checkStepStatus.checkStepStatus_handler\",\n        \"Attachment\": \"clone-xen-to-nitro-python.zip\",\n        \"InputPayload\": {\n          \"StepName\": \"waitForTestInstanceStatusChecks\"\n        }\n      }\n    },\n    {\n      \"name\": \"approvalToStopTargetInstance\",\n      \"action\": \"aws:approve\",\n      \"description\": \"Waits for designated principals approval to stop the target instance\",\n      \"timeoutSeconds\": 3600,\n      \"onFailure\": \"Abort\",\n      \"nextStep\": \"stopTargetEC2Instance\",\n      \"inputs\": {\n        \"NotificationArn\": \"{{SNSTopicArn}}\",\n        \"Message\": \"Test EC2 instance launched from the target EC2 instance successfully passed the 2/2 status checks. Provide approval to stop the target EC2 instance {{TargetInstanceId}} in order to proceed with the automation. If approved, target EC2 instance will be stopped. Before providing approval, make sure 1) Elastic IP address is assigned to the EC2 instance, if not Public IP will be changed, once the instance is stopped. This step will automatically timeout after 3600s if no action is taken.\",\n        \"MinRequiredApprovals\": \"{{MinimumRequiredApprovals}}\",\n        \"Approvers\": [\n          \"{{ApproverIAM}}\"\n        ]\n      }\n    },\n    {\n      \"name\": \"stopTargetEC2Instance\",\n      \"action\": \"aws:changeInstanceState\",\n      \"description\": \"Stops the target EC2 instance\",\n      \"maxAttempts\": 1,\n      \"timeoutSeconds\": 300,\n      \"onFailure\": \"step:forceStopTargetEC2Instance\",\n      \"inputs\": {\n        \"InstanceIds\": [\n          \"{{TargetInstanceId}}\"\n        ],\n        \"CheckStateOnly\": false,\n        \"DesiredState\": \"stopped\"\n      },\n      \"nextStep\": \"startOfCloneAndMigrateBranch\"\n    },\n    {\n      \"name\": \"forceStopTargetEC2Instance\",\n      \"action\": \"aws:changeInstanceState\",\n      \"description\": \"Force stops the target EC2 instance, only if the step 'stopTargetEC2Instance' fails to stop\",\n      \"maxAttempts\": 1,\n      \"timeoutSeconds\": 300,\n      \"onFailure\": \"step:failureHandling\",\n      \"inputs\": {\n        \"InstanceIds\": [\n          \"{{launchInstanceInSameSubnet.ClonedInstanceId}}\"\n        ],\n        \"CheckStateOnly\": false,\n        \"DesiredState\": \"stopped\",\n        \"Force\": true\n      },\n      \"nextStep\": \"startOfCloneAndMigrateBranch\"\n    },\n    {\n      \"name\": \"startOfCloneAndMigrateBranch\",\n      \"action\": \"aws:sleep\",\n      \"description\": \"Start of Clone and Migrate branch\",\n      \"onFailure\": \"Abort\",\n      \"nextStep\": \"createBackupImage\",\n      \"isCritical\": false,\n      \"inputs\": {\n        \"Duration\": \"PT5S\"\n      }\n    },\n    {\n      \"name\": \"createBackupImage\",\n      \"action\": \"aws:createImage\",\n      \"description\": \"Creates an Amazon Machine Image(AMI) from the provided instance for backup\",\n      \"maxAttempts\": 1,\n      \"nextStep\": \"launchInstanceInSameSubnet\",\n      \"onFailure\": \"step:failureHandling\",\n      \"inputs\": {\n        \"InstanceId\": \"{{TargetInstanceId}}\",\n        \"ImageName\": \"CloneXenEC2InstanceAndMigrateToNitro_BackupImage_{{TargetInstanceId}}_{{global:DATE_TIME}}\",\n        \"NoReboot\": true,\n        \"ImageDescription\": \"SSMAutomationID-{{automation:EXECUTION_ID}}\"\n      }\n    },\n    {\n      \"name\": \"launchInstanceInSameSubnet\",\n      \"action\": \"aws:executeScript\",\n      \"description\": \"Launches a new EC2 instance from the backup AMI using the same configuration as source EC2 instance\",\n      \"isCritical\": true,\n      \"maxAttempts\": 1,\n      \"onFailure\": \"step:failureHandling\",\n      \"nextStep\": \"waitForClonedInstanceToPassStatusChecks\",\n      \"inputs\": {\n        \"Runtime\": \"python3.8\",\n        \"Handler\": \"launchEC2Instance.launchInstanceInSameSubnet_handler\",\n        \"Attachment\": \"clone-xen-to-nitro-python.zip\",\n        \"InputPayload\": {\n          \"ImageId\": \"{{createBackupImage.ImageId}}\",\n          \"InstanceType\": \"{{getTargetInstanceProperties.InstanceType}}\",\n          \"IamInstanceProfileArn\": \"{{getTargetInstanceProperties.InstanceProfileArn}}\",\n          \"SubnetId\": \"{{getTargetInstanceProperties.InstanceSubnetId}}\",\n          \"SecurityGroupIds\": [\n            \"{{getTargetInstanceProperties.SecurityGroup}}\"\n          ],\n          \"TargetInstanceId\": \"{{TargetInstanceId}}\",\n          \"BranchType\": \"CloneAndMigrate\"\n        }\n      },\n      \"outputs\": [\n        {\n          \"Name\": \"ClonedInstanceId\",\n          \"Selector\": \"$.Payload.launchedInstanceId\",\n          \"Type\": \"String\"\n        }\n      ]\n    },\n    {\n      \"name\": \"waitForClonedInstanceToPassStatusChecks\",\n      \"action\": \"aws:waitForAwsResourceProperty\",\n      \"description\": \"Waits for the cloned EC2 instance to pass the 2/2 Status Checks\",\n      \"onFailure\": \"step:failureHandling\",\n      \"isCritical\": \"true\",\n      \"timeoutSeconds\": 1200,\n      \"nextStep\": \"verifySSMConnectivityForClonedInstance\",\n      \"inputs\": {\n        \"Service\": \"ec2\",\n        \"Api\": \"DescribeInstanceStatus\",\n        \"InstanceIds\": [\n          \"{{launchInstanceInSameSubnet.ClonedInstanceId}}\"\n        ],\n        \"PropertySelector\": \"$.InstanceStatuses..InstanceStatus.Status\",\n        \"DesiredValues\": [\n          \"ok\"\n        ]\n      }\n    },\n    {\n      \"name\": \"verifySSMConnectivityForClonedInstance\",\n      \"action\": \"aws:runCommand\",\n      \"description\": \"Verifies if the cloned EC2 instance is connected with AWS Systems Manager and configured to use RunCommand\",\n      \"onFailure\": \"step:failureHandling\",\n      \"isCritical\": \"true\",\n      \"timeoutSeconds\": 300,\n      \"maxAttempts\": 1,\n      \"nextStep\": \"checkAndInstallENADrivers\",\n      \"inputs\": {\n        \"InstanceIds\": [\n          \"{{launchInstanceInSameSubnet.ClonedInstanceId}}\"\n        ],\n        \"DocumentName\": \"AWS-RunShellScript\",\n        \"TimeoutSeconds\": 300,\n        \"Parameters\": {\n          \"commands\": \"#!/bin/bash\\n\\necho \\\"EC2 instance is connected with AWS Systems Manager and configured to use RunCommand\\\"\\n\"\n        }\n      }\n    },\n    {\n      \"name\": \"checkAndInstallENADrivers\",\n      \"action\": \"aws:runCommand\",\n      \"description\": \"Determines the availability of Enhanced Networking Adapter(ENA) drivers on the EC2 instance and installs, if missing\",\n      \"isCritical\": true,\n      \"nextStep\": \"checkAndAddNVMEDrivers\",\n      \"onFailure\": \"step:failureHandling\",\n      \"inputs\": {\n        \"InstanceIds\": [\n          \"{{launchInstanceInSameSubnet.ClonedInstanceId}}\"\n        ],\n        \"DocumentName\": \"AWS-RunShellScript\",\n        \"TimeoutSeconds\": 3600,\n        \"Parameters\": {\n          \"commands\": \"# Copyright 2022 Amazon.com, Inc. or its affiliates. All Rights Reserved.\\n# SPDX-License-Identifier: LicenseRef-.amazon.com.-AmznSL-1.0\\n# Licensed under the Amazon Software License  http://aws.amazon.com/asl/\\n\\n#!/bin/bash\\n\\nNITRO_INSTANCE_TYPE='{{NitroInstanceType}}'\\n\\nerror_exit()\\n{\\n    echo \\\" $1\\\"\\n    echo \\\"\\\\\\\\nThe Execution did not complete successfully.\\\\\\\\n\\\"\\n    exit 1\\n    \\n}\\n\\nunsupported_os() {\\n        error_exit \\\"Unsupported OS for ENA. Stopping installation\\\"\\n}\\n\\ninstallation_ubuntu(){\\n        mkdir /var/lib/amazon/ssm/xen_to_nitro_automation\\n        cd /var/lib/amazon/ssm/xen_to_nitro_automation \\n        sudo apt update\\n        sudo apt-get install make gcc unzip wget linux-headers-\\\"$(uname -r)\\\" -y || error_exit \\\"[ERROR] Error occured while installing required packages via APT\\\"\\n        cd /var/lib/amazon/ssm/xen_to_nitro_automation\\n        rm -rf  amzn-drivers-master\\n        wget https://github.com/amzn/amzn-drivers/archive/master.zip || error_exit \\\"[ERROR] Error occured while downloading ENA drivers\\\"\\n        unzip master.zip\\n        cd amzn-drivers-master/kernel/linux/ena || exit\\n        ABI=$(uname -r | awk -F '[.-]' '{print $4}')\\n        make [UBUNTU_ABI=$ABI]\\n        rm -rf /lib/modules/\\\"$(uname -r)\\\"/ena.ko\\n        sudo mkdir /lib/modules/\\\"$(uname -r)\\\"/ena/\\n        cp -f ena.ko /lib/modules/\\\"$(uname -r)\\\"/ena/\\n        cd /lib/modules/\\\"$(uname -r)\\\"/ena/\\n        if  [ $UBUNTU_MAJOR_VERSION -gt 16 ]; then\\n            ena_version=$(modinfo ena|grep -Eo '^vermagic:.*' | awk -F \\\"[a-z:.-]*\\\" '{gsub(/ /,\\\"\\\"); print $2}')\\n        else\\n            ena_version=$(modinfo ena|grep -Eo '^version:.*' | awk -F \\\"[a-z:.-]*\\\" '{gsub(/ /,\\\"\\\"); print $2}')        \\n        fi\\n        if [ \\\"${ena_version}\\\" -le 1 ]; then\\n               echo \\\"ENA version = $ena_version\\\"\\n               modprobe -r ena\\n               rmmod /lib/modules/\\\"$(uname -r)\\\"/kernel/drivers/net/ethernet/amazon/ena/ena.ko #for safe side, as modprobe -r ena would be sufficient\\n               rm -rf /lib/modules/\\\"$(uname -r)\\\"/kernel/drivers/net/ethernet/amazon/ena/ena.ko\\n        fi  \\n        insmod ena.ko\\n        if depmod -a ; then\\n            if modinfo ena > /dev/null 2>&1 ; then\\n                echo \\\" ENA driver Installation Complete\\\"\\n            else\\n                error_exit \\\"[ERROR] Driver Installation failed\\\"\\n            fi\\n        else\\n            error_exit \\\"[ERROR] Depmod file creation failed\\\"\\n        fi\\n}\\n\\ninstallation_yum() {\\n    mkdir /var/lib/amazon/ssm/xen_to_nitro_automation\\n    cd /var/lib/amazon/ssm/xen_to_nitro_automation\\n    yum install kernel-devel-\\\"$(uname -r)\\\" gcc patch rpm-build wget -y || error_exit \\\"[ERROR] Error occured while installing required packages via YUM\\\"\\n    rm -rf  amzn-drivers-master\\n    wget https://github.com/amzn/amzn-drivers/archive/master.zip || error_exit \\\"[ERROR] Error occured while downloading ENA drivers\\\"\\n    unzip master.zip\\n    cd amzn-drivers-master/kernel/linux/ena\\n    make\\n    rm -rf /lib/modules/\\\"$(uname -r)\\\"/ena.ko\\n    mkdir /lib/modules/\\\"$(uname -r)\\\"/ena/\\n    cp -f ena.ko /lib/modules/\\\"$(uname -r)\\\"/ena/\\n    cd /lib/modules/\\\"$(uname -r)\\\"/ena/\\n    ena_version=$(modinfo ena|grep -Eo '^version:.*' | awk -F \\\"[a-z:.-]*\\\" '{gsub(/ /,\\\"\\\"); print $2}')        \\n    if [[ \\\"${ena_version}\\\" -le 1 ]]\\n        then\\n           modprobe -r ena\\n           rmmod /lib/modules/\\\"$(uname -r)\\\"/kernel/drivers/net/ethernet/amazon/ena/ena.ko.xz #for safe side, as modprobe -r ena would be sufficient\\n           rm -rf /lib/modules/\\\"$(uname -r)\\\"/kernel/drivers/net/ethernet/amazon/ena/ena.ko.xz\\n    fi\\n    insmod ena.ko\\n    depmod -a\\n    echo 'add_drivers+=\\\" ena \\\"' >> /etc/dracut.conf.d/ena.conf   # Appended drivers\\n    if dracut -f -v; then\\n            echo \\\"[INFO] ENA driver Installation Complete.\\\"\\n    else\\n            error_exit \\\"[ERROR] Driver installation failed\\\"\\n    fi\\n}\\n\\nfix_predictable_names(){\\n    echo \\\"[INFO] Fixing predictable interface naming issue\\\"\\n    if [ -f /etc/default/grub ]; then\\n        cp /etc/default/grub \\\"/etc/default/grub.$(date +%F)\\\"\\n        if ! grep -q \\\"net.ifnames\\\" /etc/default/grub ; then `sed -i '/^GRUB\\\\_CMDLINE\\\\_LINUX/s/\\\\\\\"$/\\\\ net\\\\.ifnames\\\\=0\\\\\\\"/' /etc/default/grub`; fi\\n        if ! grep -q \\\"biosdevname\\\" /etc/default/grub; then `sed -i '/^GRUB\\\\_CMDLINE\\\\_LINUX/s/\\\\\\\"$/\\\\ biosdevname\\\\=0\\\\\\\"/' /etc/default/grub`; fi\\n        if [ -f /etc/debian_version ]; then # added if statement as grub2-mkconfig doesn't work on ubuntu to update grub config\\n            update-grub || error_exit \\\"[ERROR] Error occured while updating GRUB\\\"\\n        else\\n            grub2-mkconfig -o /boot/grub2/grub.cfg || error_exit \\\"[ERROR] Error occured while updating GRUB\\\"\\n        fi\\n    elif [ -f /boot/grub/menu.lst ]; then # added this just in case\\n        cp /boot/grub/menu.lst \\\"/boot/grub/menu.lst.$(date +%F)\\\"\\n        if ! grep -q \\\"net.ifnames\\\" /boot/grub/menu.lst ; then `sed -i '/^kernel/s/$/ net\\\\.ifnames\\\\=0/' /boot/grub/menu.lst`; fi    \\n        if ! grep -q \\\"biosdevname\\\" /boot/grub/menu.lst; then `sed -i '/^kernel/s/$/ biosdevname\\\\=0\\\\\\\"/' /boot/grub/menu.lst`; fi        \\n    fi\\n\\n}\\n\\n# To check if this file exists and if it does remove it to prevent booting issues from new AMI\\n# If your instance operating system contains an /etc/udev/rules.d/70-persistent-net.rules file, you must delete it before creating the AMI. This file contains the MAC address for the Ethernet adapter of the original instance. If another instance boots with this file, the operating system will be unable to find the device and eth0 might fail, causing boot issues. This file is regenerated at the next boot cycle, and any instances launched from the AMI create their own version of the file.\\nPersistent_rules(){\\nif [ -f /etc/udev/rules.d/70-persistent-net.rules ]; then  \\n    cp /etc/udev/rules.d/70-persistent-net.rules \\\"/etc/udev/rules.d/70-persistent-net-rules.$(date +%F)\\\"\\n    rm -rf /etc/udev/rules.d/70-persistent-net.rules \\nfi\\n}\\n\\n\\ninstall_ena_redhat() {\\n    printf \\\"[INFO] Installation process for RHEL/CentOS beginning... \\\\n\\\"\\n    installation_yum\\n    if grep -q -i \\\"release 7\\\" /etc/redhat-release; then\\n        fix_predictable_names\\n    else\\n        echo \\\"[OK] No need to fix predictable name issues on this version of OS\\\"\\n    fi\\n}\\n\\ninstall_ena_ubuntu(){\\n    printf \\\"[INFO] Installation process for Ubuntu beginning... \\\\n\\\"\\n    CurrentKernel=\\\"$(uname -r)\\\"\\n    echo \\\"[INFO] Current kernel version is\\\" \\\"$CurrentKernel\\\"\\n    echo \\\"$CurrentKernel\\\" | grep -i aws > /dev/null 2>&1\\n    if  [ $UBUNTU_MAJOR_VERSION -gt 16 ]; then\\n        ena_version=$(modinfo ena|grep -Eo '^vermagic:.*' | awk -F \\\"[a-z:.-]*\\\" '{gsub(/ /,\\\"\\\"); print $2}')\\n    else\\n        ena_version=$(modinfo ena|grep -Eo '^version:.*' | awk -F \\\"[a-z:.-]*\\\" '{gsub(/ /,\\\"\\\"); print $2}')\\n    fi\\n    if [ \\\"${ena_version}\\\" -eq 1 ]; then\\n        installation_ubuntu\\n    elif [ $? -eq 0 ]; then\\n        echo \\\"[WARNING] This kernel should have ENA installed...\\\"\\n    else\\n        installation_ubuntu\\n    fi\\n    if grep -iq 'xenial\\\\|bionic' /etc/lsb-release; then\\n        fix_predictable_names\\n    else\\n        echo \\\"[OK] No need to fix predictable name issues on this version of OS\\\"\\n    fi\\n}\\n\\ninstall_ena_sles() {\\n    printf \\\"[INFO] Installation process for SLES beginning... \\\\n\\\"\\n    echo \\\"[OK] SUSE SLES 12 SP2 and later include ENA 2.02 by default, so you are not required to download and compile the ENA driver\\\"\\n    echo \\\"\\\\n [INFO] Reinstalling the same kernel to fix this\\\"\\n    zypper refresh\\n    CurrentKernel=$(uname -r)\\n    echo \\\"current kernel version is\\\" \\\"$CurrentKernel\\\" \\n    KernelVersion=$(echo \\\"$CurrentKernel\\\" | sed -r 's/-default/.1/g')\\n    if zypper install -f -y kernel-default-\\\"$KernelVersion\\\" || error_exit \\\"[ERROR] Error occured while re-installing kernel via ZYPPER\\\" ; then\\n        echo \\\" [OK] Kernel reinstalled\\\"\\n    else\\n        error_exit \\\"[ERROR] Kernel Installation failed\\\" \\n    fi\\n    if modinfo ena > /dev/null 2>&1; then\\n      ena_version=$(modinfo ena|grep -Eo '^version:.*' | awk '{print $2}')\\n      echo -e \\\"[OK] ENA Module with version $ena_version is installed and available on your instance\\\"\\n    fi\\n    fix_predictable_names\\n}\\n\\ninstall_ena_amzn() {\\n    printf \\\"[INFO] Installation process for Amazon Linux and Amazon Linux 2 beginning... \\\\n\\\"\\n    installation_yum\\n    . /etc/os-release\\n    version=$LINUX_DISTRO_VERSION_ID\\n    a=2018.03\\n    if ! echo \\\"$version == $a\\\" > /dev/null | bc; then\\n        fix_predictable_names\\n    else\\n        echo \\\"[OK] No need to fix predictable name issues on this version of OS\\\"\\n    fi\\n\\n}\\n\\ninstall_ena(){\\nif [ -f /etc/os-release ]; then\\n    LINUX_DISTRO=$(cat /etc/os-release | grep -w \\\"NAME=\\\" | awk -F'=' '{print $2}')\\n    LINUX_DISTRO_VERSION_ID=$(cat /etc/os-release | grep VERSION_ID | awk -F'=' '{print $2}' | tr -d '\\\"')\\n    echo \\\"LINUX_DISTRO >> $LINUX_DISTRO\\\"\\n    echo \\\"LINUX_DISTRO_VERSION_ID >> $LINUX_DISTRO_VERSION_ID\\\"\\nfi\\n\\nif [ -f /etc/redhat-release ] ; then\\n    if grep -qi -e \\\"release 6\\\" -e \\\"release 7\\\" /etc/redhat-release ; then\\n        install_ena_redhat\\n    else\\n        unsupported_os\\n    fi\\n\\nelif grep 'Amazon Linux' /etc/os-release 1>/dev/null 2>/dev/null; then\\n    . /etc/os-release\\n    version=$LINUX_DISTRO_VERSION_ID\\n    a=2018.03\\n    if echo \\\"$version == $a\\\" | bc; then\\n        install_ena_amzn\\n    elif [ \\\"${version}\\\" -eq 2 ]; then\\n        install_ena_amzn\\n    else\\n        unsupported_os\\n    fi\\n\\nelif grep 'SUSE Linux' /etc/os-release 1>/dev/null 2>/dev/null; then\\n    SUSE_MAJOR_VERSION=$(echo $LINUX_DISTRO_VERSION_ID | awk -F'.' '{print $1}')\\n    SUSE_MINOR_VERSION=$(echo $LINUX_DISTRO_VERSION_ID | awk -F'.' '{print $2}')\\n    echo \\\"SUSE_MAJOR_VERSION >> $SUSE_MAJOR_VERSION\\\"\\n    echo \\\"SUSE_MINOR_VERSION >> $SUSE_MINOR_VERSION\\\"\\n    if [ $SUSE_MAJOR_VERSION -lt 15 ] && [ $SUSE_MINOR_VERSION -lt 5 ]; then\\n        unsupported_os\\n    else\\n       install_ena_sles\\n    fi\\n\\nelif grep 'Ubuntu' /etc/os-release 1>/dev/null 2>/dev/null; then\\n    UBUNTU_MAJOR_VERSION=$(echo $LINUX_DISTRO_VERSION_ID | awk -F'.' '{print $1}')\\n    UBUNTU_MINOR_VERSION=$(echo $LINUX_DISTRO_VERSION_ID | awk -F'.' '{print $2}')\\n    if [ \\\"$UBUNTU_MAJOR_VERSION\\\" -lt \\\"14\\\" ]; then\\n        unsupported_os\\n    else \\n        install_ena_ubuntu\\n    fi\\n\\nelif grep 'Debian' /etc/os-release; then\\n    DEBIAN_MAJOR_VERSION=$(echo $LINUX_DISTRO_VERSION_ID | awk -F'.' '{print $1}')\\n    DEBIAN_MINOR_VERSION=$(echo $LINUX_DISTRO_VERSION_ID | awk -F'.' '{print $2}')\\n    if [ \\\"$DEBIAN_MAJOR_VERSION\\\" -lt \\\"9\\\" ]; then\\n            unsupported_os\\n    else \\n        install_ena_ubuntu\\n    fi\\n\\nelse\\n    unsupported_os\\nfi\\n}\\n\\n\\nLINUX_DISTRO_VERSION_ID=$(cat /etc/os-release | grep VERSION_ID | awk -F'=' '{print $2}' | tr -d '\\\"')\\na='2018.03' #AL is EOL and is in maintenance support which will end in mind 2023. 2018.03 is the last AL OS version released, hence not supporting older versions\\n\\nif ! modinfo ena > /dev/null 2>&1;\\n    then\\n    echo \\\"[WARNING] ENA Module is not available on your instance.\\\"\\n    install_ena\\nelif echo \\\"${NITRO_INSTANCE_TYPE}\\\" | grep -qE '^[cmr]6[ia]\\\\.[0-9]{0,2}[x]?large$'; then\\n    if grep 'Ubuntu' /etc/os-release 1>/dev/null 2>/dev/null; then\\n        LINUX_DISTRO_VERSION_ID=$(cat /etc/os-release | grep VERSION_ID | awk -F'=' '{print $2}' | tr -d '\\\"')\\n        UBUNTU_MAJOR_VERSION=$(echo $LINUX_DISTRO_VERSION_ID | awk -F'.' '{print $1}')\\n            if [ $UBUNTU_MAJOR_VERSION -eq 16 ]; then\\n                unsupported_os\\n            elif [ $UBUNTU_MAJOR_VERSION -gt 16 ]; then\\n                ena_version=$(modinfo ena|grep -Eo '^vermagic:.*' | awk -F \\\"[a-z:.-]*\\\" '{gsub(/ /,\\\"\\\"); print $2}')\\n            else\\n                ena_version=$(modinfo ena|grep -Eo '^version:.*' | awk -F \\\"[a-z:.-]*\\\" '{gsub(/ /,\\\"\\\"); print $2}')\\n            fi\\n    elif echo \\\"$LINUX_DISTRO_VERSION_ID == $a\\\" > /dev/null | bc; then\\n        ena_version=$(modinfo ena|grep -Eo '^version:.*' | awk -F \\\"[a-z:.-]*\\\" '{gsub(/ /,\\\"\\\"); print $2}')\\n    elif grep Debian /etc/os-release 1>/dev/null 2>/dev/null; then\\n        ena_version=$(modinfo ena|grep -Eo '^vermagic:.*' | awk -F \\\"[a-z:.-]*\\\" '{gsub(/ /,\\\"\\\"); print $2}')\\n    else\\n        ena_version=$(modinfo ena|grep -Eo '^version:.*' | awk -F \\\"[a-z:.-]*\\\" '{gsub(/ /,\\\"\\\"); print $2}')\\n    fi\\n    if [ $ena_version -eq 1 ]\\n       then\\n        echo \\\"[INFO] Updating ENA version as instance type is 6th generation\\\"\\n        install_ena\\n    else\\n     echo \\\"[INFO] No ena version update needed for 6th generation instance type. Already > 1.2.0\\\"\\n    fi\\n\\nelif grep 'Ubuntu' /etc/os-release 1>/dev/null 2>/dev/null; then\\n    LINUX_DISTRO_VERSION_ID=$(cat /etc/os-release | grep VERSION_ID | awk -F'=' '{print $2}' | tr -d '\\\"')\\n    UBUNTU_MAJOR_VERSION=$(echo $LINUX_DISTRO_VERSION_ID | awk -F'.' '{print $1}')\\n    if  [ $UBUNTU_MAJOR_VERSION -gt 16 ]; then\\n        ena_version=$(modinfo ena|grep -Eo '^vermagic:.*' | awk '{print $2}')\\n        echo \\\"[INFO] ENA Module with version $ena_version is installed and available on your instance\\\"\\n    else\\n        ena_version=$(modinfo ena|grep -Eo '^version:.*' | awk '{print $2}')\\n        echo \\\"[INFO] ENA Module with version $ena_version is installed and available on your instance\\\"\\n    fi\\nelse \\n    ena_version=$(modinfo ena|grep -Eo '^version:.*' | awk '{print $2}')\\n    echo \\\"[INFO] ENA Module with version $ena_version is installed and available on your instance\\\"\\nfi\\n\\nPersistent_rules\\nfix_predictable_names\\n\"\n        }\n      }\n    },\n    {\n      \"name\": \"checkAndAddNVMEDrivers\",\n      \"action\": \"aws:runCommand\",\n      \"description\": \"Determines the availability of NVMe drivers on the cloned EC2 instance and installs, if missing\",\n      \"timeoutSeconds\": 3600,\n      \"nextStep\": \"checkAndModifyFSTABEntries\",\n      \"onFailure\": \"step:failureHandling\",\n      \"inputs\": {\n        \"DocumentName\": \"AWS-RunShellScript\",\n        \"InstanceIds\": [\n          \"{{launchInstanceInSameSubnet.ClonedInstanceId}}\"\n        ],\n        \"Parameters\": {\n          \"commands\": \"# Copyright 2022 Amazon.com, Inc. or its affiliates. All Rights Reserved.\\n# SPDX-License-Identifier: LicenseRef-.amazon.com.-AmznSL-1.0\\n# Licensed under the Amazon Software License  http://aws.amazon.com/asl/\\n\\n#!/bin/bash\\n\\n\\ncheck_NVMe_omitted () {\\n    lsinitrd /boot/initramfs-$(uname -r).img| grep -e \\\"--omit-drivers\\\" -e \\\"-o\\\" | grep nvme > /dev/null 2>&1\\n    if [ $? -eq 0 ]; then \\n        echo \\\"[ERROR] NVME module is ommited in initramfs image using parameter --omit-drivers or -o\\\"\\n        exit 1\\n    else\\n        echo \\\"[INFO] NVME module is not ommited in initramfs image using parameter --omit-drivers or -o\\\"\\n    fi\\n}\\n\\nadd_nvme_driver(){\\n    echo \\\"[ERROR] NVMe Module is not loaded in the initramfs image, recreating initramfs/initrd:\\\"\\n    echo 'add_drivers+=\\\" nvme \\\"' >> /etc/dracut.conf.d/nvme.conf\\n    echo 'add_drivers+=\\\" nvme_core \\\"' >> /etc/dracut.conf.d/nvme_core.conf\\n    dracut -f -v\\n    depmod -a\\n}\\n\\ncheck_NVMe_in_initrd () {\\n\\nif [ -f /etc/redhat-release ] ; then\\n    check_NVMe_omitted\\n    lsinitrd /boot/initramfs-$(uname -r).img | grep -i nvme| grep -v nvmem > /dev/null 2>&1\\n    if [ $? -ne 0 ]; then        \\n        add_nvme_driver\\n        lsinitrd /boot/initramfs-$(uname -r).img | grep nvme | grep -v nvmem > /dev/null 2>&1\\n        if [ $? -ne 0 ]; then\\n            echo \\\"[ERROR] NVMe Module is not loaded in the newly built initramfs image\\\"\\n            exit 1\\n        else\\n            Kernel_version=`uname -r`\\n            echo \\\"[INFO] NVME Module is loaded in initramfs/initrd for Kernel version $Kernel_version\\\"        \\n        fi\\n    else\\n        Kernel_version=`uname -r`\\n        echo \\\"[INFO] NVME Module is loaded in initramfs/initrd for Kernel version $Kernel_version\\\"\\n    fi\\nelif grep 'Amazon Linux' /etc/os-release 1>/dev/null 2>/dev/null; then\\n    check_NVMe_omitted\\n    lsinitrd /boot/initramfs-$(uname -r).img|grep nvme| grep -v nvmem > /dev/null 2>&1\\n    if [ $? -ne 0 ]; then\\n        add_nvme_driver          \\n        lsinitrd /boot/initramfs-$(uname -r).img | grep nvme | grep -v nvmem > /dev/null 2>&1\\n        if [ $? -ne 0 ]; then\\n            echo \\\"[ERROR] NVMe Module is not loaded in the newly built initramfs image\\\"\\n            exit 1\\n        else\\n            Kernel_version=`uname -r`\\n            echo \\\"[INFO] NVME Module is loaded in initramfs/initrd for Kernel version $Kernel_version\\\"        \\n        fi\\n    else\\n        Kernel_version=`uname -r`\\n        echo \\\"[INFO] NVME Module is loaded in initramfs/initrd for Kernel version $Kernel_version\\\"\\n    fi\\nelif grep 'SUSE Linux' /etc/os-release 1>/dev/null 2>/dev/null; then     \\n    check_NVMe_omitted\\n    lsinitrd /boot/initrd|grep nvme| grep -v nvmem > /dev/null 2>&1\\n    if [ $? -ne 0 ]; then\\n        add_nvme_driver        \\n        lsinitrd /boot/initramfs-$(uname -r).img | grep nvme | grep -v nvmem > /dev/null 2>&1\\n        if [ $? -ne 0 ]; then\\n            echo \\\"[ERROR] NVMe Module is not loaded in the newly built initramfs image\\\"\\n            exit 1\\n        else\\n            Kernel_version=`uname -r`\\n            echo \\\"[INFO] NVME Module is loaded in initramfs/initrd for Kernel version $Kernel_version\\\"\\n        fi\\n    else \\n        Kernel_version=`uname -r`\\n        echo \\\"[INFO] NVME Module is loaded in initramfs/initrd for Kernel version $Kernel_version\\\"     \\n    fi\\nelif [ -f /etc/debian_version ] ; then\\n    lsinitramfs /boot/initrd.img-$(uname -r)|grep nvme > /dev/null 2>&1\\n    if [ $? -ne 0 ]; then\\n        echo \\\"[ERROR] NVMe Module is not loaded in the initramfs image, recreating initrd:\\\"\\n        update-initramfs -c -k all\\n        lsinitramfs /boot/initrd.img-$(uname -r)| grep nvme > /dev/null 2>&1\\n        if [ $? -ne 1 ]; then\\n            echo \\\"[OK] NVME Module is installed in newly built initrd\\\"\\n        else \\n            echo \\\"[ERROR] NVME Module cannot be installed\\\"\\n            exit 1\\n        fi\\n    else\\n        Kernel_version=`uname -r`\\n        echo \\\"[OK] NVME Module is loaded in initramfs/initrd for Kernel version $Kernel_version\\\"\\n    fi\\nelse\\n    echo \\\"[ERROR] Unsupported OS for this script.\\\"\\n    exit 1\\nfi\\n}\\n\\n(grep 'nvme' /boot/System.map-$(uname -r)) > /dev/null 2>&1\\nif [ $? -ne 0 ]     # NVMe module is not built into the kernel\\n    then\\n    (modinfo nvme) > /dev/null 2>&1\\n    if [ $? -ne 0 ]\\n        then\\n        # NVMe Module is not installed. \\n        echo \\\"[ERROR] NVMe Module is not available on your instance. \\\\n\\\\t- Please install NVMe module before changing your instance type to Nitro. Look at the following link for further guidance:\\\"\\n        echo \\\"\\\\t> https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/nvme-ebs-volumes.html\\\"\\n        exit 1\\n\\n    else\\n        Kernel_version=`uname -r`\\n        echo \\\"[OK] NVMe module is installed on your instance for Kernel version $Kernel_version\\\"\\n        echo \\\"[INFO] Checking if NVME module is loaded in initramfs/initrd\\\"\\n        check_NVMe_in_initrd                # Calling function to check if NVMe module is loaded in initramfs. \\n    fi\\nelse\\n    Kernel_version=`uname -r`\\n    echo \\\"[OK]  NVMe module is installed and available on your instance for Kernel version $Kernel_version\\\"\\nfi\\n\"\n        }\n      }\n    },\n    {\n      \"name\": \"checkAndModifyFSTABEntries\",\n      \"action\": \"aws:runCommand\",\n      \"description\": \"Determines if the device name are used in /etc/fstab and replaces them with their UUIDs, if found\",\n      \"timeoutSeconds\": 3600,\n      \"onFailure\": \"step:failureHandling\",\n      \"nextStep\": \"stopClonedInstance\",\n      \"inputs\": {\n        \"DocumentName\": \"AWS-RunShellScript\",\n        \"InstanceIds\": [\n          \"{{launchInstanceInSameSubnet.ClonedInstanceId}}\"\n        ],\n        \"Parameters\": {\n          \"commands\": \"# Copyright 2022 Amazon.com, Inc. or its affiliates. All Rights Reserved.\\n# SPDX-License-Identifier: LicenseRef-.amazon.com.-AmznSL-1.0\\n# Licensed under the Amazon Software License  http://aws.amazon.com/asl/\\n\\n#!/bin/bash\\n\\ntime_stamp=$(date +%F-%H:%M:%S)\\ncp -p /etc/fstab /etc/fstab.backup.$time_stamp\\ncp -p /etc/fstab /etc/fstab.modified.$time_stamp\\nmkdir /var/lib/amazon/ssm/xen_to_nitro_automation\\ncat /etc/fstab | grep '^/dev' | grep -E 'sd[a-z]|xvd[a-z]|nvme([0-9]|1[0-9]|2[0-7])n1p?' | awk -F '/' '{print $3}'>/var/lib/amazon/ssm/xen_to_nitro_automation/device_names\\n\\nwhile read LINE; do # For each line in /var/lib/amazon/ssm/xen_to_nitro_automation/device_names\\n        UUID=`ls -l /dev/disk/by-uuid | grep \\\"$LINE\\\" | sed -n 's/^.* \\\\([^ ]*\\\\) -> .*$/\\\\1/p'` # Gets the UUID name for that device\\n        if [ ! -z \\\"$UUID\\\" ]\\n        then\\n            sed -i \\\"s|^/dev/${LINE}|UUID=${UUID}|\\\" /etc/fstab.modified.$time_stamp # Changes the entry in fstab to UUID form\\n        fi\\ndone </var/lib/amazon/ssm/xen_to_nitro_automation/device_names\\n\\nif [ -s /var/lib/amazon/ssm/xen_to_nitro_automation/device_names ]; then\\n    echo -e \\\"[WARNING] Your fstab file contains device names.\\\"\\n    echo -e \\\"[INFO] Replacing device names with UUID in /etc/fstab file to make it compatible for NVMe block device names\\\"\\n    echo -e \\\"[INFO] Writing changes to /etc/fstab\\\"\\n    cp -p /etc/fstab.modified.$time_stamp /etc/fstab\\n    echo -e \\\"[INFO] Device name entries converted to UUIDs\\\"\\n    echo -e \\\"[INFO] Original fstab file is stored as /etc/fstab.backup.$time_stamp\\\"\\n    rm -rf /etc/fstab.modified.$time_stamp\\n    rm -rf /var/lib/amazon/ssm/xen_to_nitro_automation/device_names\\n    rmdir /var/lib/amazon/ssm/xen_to_nitro_automation\\n\\n\\nelse\\n    rm -rf /etc/fstab.backup.$time_stamp\\n    rm -rf /etc/fstab.modified.$time_stamp\\n    rm -rf /var/lib/amazon/ssm/xen_to_nitro_automation/device_names\\n    rmdir /var/lib/amazon/ssm/xen_to_nitro_automation\\n    echo -e \\\"[INFO] fstab file looks fine and does not contain any entry with device names and are with UUID\\\"\\nfi\\n\\n\\n\\n\"\n        }\n      }\n    },\n    {\n      \"name\": \"stopClonedInstance\",\n      \"action\": \"aws:changeInstanceState\",\n      \"description\": \"Stops the cloned EC2 instance\",\n      \"maxAttempts\": 1,\n      \"timeoutSeconds\": 300,\n      \"onFailure\": \"step:forceStopClonedInstance\",\n      \"inputs\": {\n        \"InstanceIds\": [\n          \"{{launchInstanceInSameSubnet.ClonedInstanceId}}\"\n        ],\n        \"CheckStateOnly\": false,\n        \"DesiredState\": \"stopped\"\n      },\n      \"nextStep\": \"checkENAAttributeForClonedInstance\"\n    },\n    {\n      \"name\": \"forceStopClonedInstance\",\n      \"action\": \"aws:changeInstanceState\",\n      \"description\": \"Force stops the cloned EC2 instance, only if the step 'stopClonedInstance' fails to stop\",\n      \"maxAttempts\": 1,\n      \"timeoutSeconds\": 300,\n      \"onFailure\": \"step:failureHandling\",\n      \"inputs\": {\n        \"InstanceIds\": [\n          \"{{launchInstanceInSameSubnet.ClonedInstanceId}}\"\n        ],\n        \"CheckStateOnly\": false,\n        \"DesiredState\": \"stopped\",\n        \"Force\": true\n      },\n      \"nextStep\": \"checkENAAttributeForClonedInstance\"\n    },\n    {\n      \"name\": \"checkENAAttributeForClonedInstance\",\n      \"action\": \"aws:branch\",\n      \"description\": \"Checks if the Enhanced Networking Adapter(ENA) attribute is enabled on the cloned EC2 instance\",\n      \"isCritical\": true,\n      \"onFailure\": \"step:failureHandling\",\n      \"inputs\": {\n        \"Choices\": [\n          {\n            \"NextStep\": \"setNitroInstanceTypeForClonedInstance\",\n            \"Variable\": \"{{getTargetInstanceProperties.ENAAttrib}}\",\n            \"BooleanEquals\": true\n          }\n        ],\n        \"Default\": \"enableENAAttributeForClonedInstance\"\n      }\n    },\n    {\n      \"name\": \"enableENAAttributeForClonedInstance\",\n      \"action\": \"aws:executeAwsApi\",\n      \"description\": \"Enables the Enhanced Networking Adapter(ENA) attribute for the cloned instance, if not enabled already\",\n      \"nextStep\": \"setNitroInstanceTypeForClonedInstance\",\n      \"onFailure\": \"step:failureHandling\",\n      \"maxAttempts\": 1,\n      \"inputs\": {\n        \"Service\": \"ec2\",\n        \"Api\": \"ModifyInstanceAttribute\",\n        \"InstanceId\": \"{{launchInstanceInSameSubnet.ClonedInstanceId}}\",\n        \"EnaSupport\": {\n          \"Value\": true\n        }\n      }\n    },\n    {\n      \"name\": \"setNitroInstanceTypeForClonedInstance\",\n      \"action\": \"aws:executeAwsApi\",\n      \"description\": \"Sets the provided Target EC2 instance type for the cloned EC2 instance\",\n      \"onFailure\": \"step:failureHandling\",\n      \"nextStep\": \"startClonedInstance\",\n      \"maxAttempts\": 1,\n      \"inputs\": {\n        \"Service\": \"ec2\",\n        \"Api\": \"ModifyInstanceAttribute\",\n        \"InstanceId\": \"{{launchInstanceInSameSubnet.ClonedInstanceId}}\",\n        \"InstanceType\": {\n          \"Value\": \"{{NitroInstanceType}}\"\n        }\n      }\n    },\n    {\n      \"name\": \"startClonedInstance\",\n      \"action\": \"aws:changeInstanceState\",\n      \"description\": \"Starts the cloned EC2 instance\",\n      \"maxAttempts\": 1,\n      \"timeoutSeconds\": 900,\n      \"isCritical\": true,\n      \"onFailure\": \"step:failureHandling\",\n      \"inputs\": {\n        \"InstanceIds\": [\n          \"{{launchInstanceInSameSubnet.ClonedInstanceId}}\"\n        ],\n        \"CheckStateOnly\": false,\n        \"DesiredState\": \"running\"\n      },\n      \"nextStep\": \"approvalForCreatingImageAfterDriversInstallation\"\n    },\n    {\n      \"name\": \"approvalForCreatingImageAfterDriversInstallation\",\n      \"action\": \"aws:approve\",\n      \"description\": \"Waits for user approval if the cloned EC2 instance successfully boots on Nitro platform. If provided, creates an Amazon Machine Image(AMI) which can be used as Golden Image to launch Nitro instances\",\n      \"timeoutSeconds\": 3600,\n      \"onFailure\": \"Abort\",\n      \"nextStep\": \"createImageAfterDriversInstallation\",\n      \"inputs\": {\n        \"NotificationArn\": \"{{SNSTopicArn}}\",\n        \"Message\": \"Cloned EC2 Instance {{launchInstanceInSameSubnet.ClonedInstanceId}}, created from target EC2 instance {{TargetInstanceId}}, has been successfully migrated to {{NitroInstanceType}}. Provide approval to create an Amazon Machine Image(AMI) which can be used as a Golden Image to launch EC2 nitro instances. In case of 'Reject/Deny', the Automation will stop with Failed status. This step will automatically timeout after 3600s if no action is taken.\",\n        \"MinRequiredApprovals\": \"{{MinimumRequiredApprovals}}\",\n        \"Approvers\": [\n          \"{{ApproverIAM}}\"\n        ]\n      }\n    },\n    {\n      \"name\": \"createImageAfterDriversInstallation\",\n      \"action\": \"aws:createImage\",\n      \"description\": \"Creates an Image from the new EC2 instance only if the new EC2 instance successfully boots on Nitro Platform\",\n      \"maxAttempts\": 1,\n      \"nextStep\": \"endOfCloneAndMigrateBranch\",\n      \"onFailure\": \"step:failureHandling\",\n      \"isCritical\": true,\n      \"inputs\": {\n        \"InstanceId\": \"{{launchInstanceInSameSubnet.ClonedInstanceId}}\",\n        \"ImageName\": \"CloneXenEC2InstanceAndMigrateToNitro_NitroImage_{{TargetInstanceId}}_{{global:DATE_TIME}}\",\n        \"NoReboot\": true,\n        \"ImageDescription\": \"Image created after driver installation - SSMAutomationID-{{automation:EXECUTION_ID}}\"\n      }\n    },\n    {\n      \"name\": \"endOfCloneAndMigrateBranch\",\n      \"action\": \"aws:sleep\",\n      \"description\": \"End of Clone & Migrate branch\",\n      \"onFailure\": \"Continue\",\n      \"nextStep\": \"cleanupTestImage\",\n      \"isCritical\": false,\n      \"inputs\": {\n        \"Duration\": \"PT5S\"\n      }\n    },\n    {\n      \"name\": \"cleanupTestImage\",\n      \"action\": \"aws:deleteImage\",\n      \"description\": \"De-registers the Image(AMI) created for testing\",\n      \"maxAttempts\": 3,\n      \"isEnd\": true,\n      \"onFailure\": \"Continue\",\n      \"isCritical\": true,\n      \"inputs\": {\n        \"ImageId\": \"{{createTestImage.ImageId}}\"\n      }\n    },\n    {\n      \"name\": \"failureHandling\",\n      \"action\": \"aws:branch\",\n      \"description\": \"Checks if the user has chosen to terminate resources on failure\",\n      \"isEnd\": true,\n      \"isCritical\": true,\n      \"inputs\": {\n        \"Choices\": [\n          {\n            \"NextStep\": \"onFailureTerminateClonedInstance\",\n            \"Variable\": \"{{DeleteResourcesOnFailure}}\",\n            \"BooleanEquals\": true\n          }\n        ]\n      }\n    },\n    {\n      \"name\": \"onFailureTerminateClonedInstance\",\n      \"action\": \"aws:changeInstanceState\",\n      \"description\": \"Terminates the cloned EC2 instance, in case of automation failure\",\n      \"maxAttempts\": 1,\n      \"isCritical\": true,\n      \"timeoutSeconds\": 300,\n      \"nextStep\": \"onFailurecleanupTestImage\",\n      \"onFailure\": \"Continue\",\n      \"inputs\": {\n        \"InstanceIds\": [\n          \"{{launchInstanceInSameSubnet.ClonedInstanceId}}\"\n        ],\n        \"CheckStateOnly\": false,\n        \"DesiredState\": \"terminated\"\n      }\n    },\n    {\n      \"name\": \"onFailurecleanupTestImage\",\n      \"action\": \"aws:deleteImage\",\n      \"description\": \"De-registers the Image(AMI) created for testing\",\n      \"maxAttempts\": 3,\n      \"onFailure\": \"Continue\",\n      \"nextStep\": \"onFailureApprovalToStartTargetInstance\",\n      \"isCritical\": true,\n      \"inputs\": {\n        \"ImageId\": \"{{createTestImage.ImageId}}\"\n      }\n    },\n    {\n      \"name\": \"onFailureApprovalToStartTargetInstance\",\n      \"action\": \"aws:approve\",\n      \"description\": \"If automation fails, waits for designated principal's approval to start the target EC2 instance\",\n      \"timeoutSeconds\": 3600,\n      \"onFailure\": \"Abort\",\n      \"nextStep\": \"onFailureStartTargetInstance\",\n      \"inputs\": {\n        \"NotificationArn\": \"{{SNSTopicArn}}\",\n        \"Message\": \"Automation failed while migrating cloned EC2 Xen based instance to Nitro platform. Provide approval to start the target EC2 instance. In case of 'Reject/Deny', the Automation will stop with Failed status. This step will automatically timeout after 3600s if no action is taken.\",\n        \"MinRequiredApprovals\": \"{{MinimumRequiredApprovals}}\",\n        \"Approvers\": [\n          \"{{ApproverIAM}}\"\n        ]\n      }\n    },\n    {\n      \"name\": \"onFailureStartTargetInstance\",\n      \"action\": \"aws:changeInstanceState\",\n      \"description\": \"If automation fails, starts the target EC2 instance\",\n      \"maxAttempts\": 1,\n      \"timeoutSeconds\": 900,\n      \"isCritical\": true,\n      \"onFailure\": \"Abort\",\n      \"isEnd\": true,\n      \"inputs\": {\n        \"InstanceIds\": [\n          \"{{TargetInstanceId}}\"\n        ],\n        \"CheckStateOnly\": false,\n        \"DesiredState\": \"running\"\n      }\n    }\n  ],\n  \"outputs\": [\n    \"launchInstanceInSameSubnet.ClonedInstanceId\",\n    \"createBackupImage.ImageId\",\n    \"createImageAfterDriversInstallation.ImageId\"\n  ],\n  \"files\": {\n    \"clone-xen-to-nitro-python.zip\": {\n      \"checksums\": {\n        \"sha256\": \"52f555c5cc6ce07a7f59b9ef76126e411b58fffe1dbe7bdef449a64b5a9f543b\"\n      }\n    }\n  }\n}",
  "CreatedDate": "2022-11-01T14:14:49.154Z",
  "DisplayName": null,
  "DocumentFormat": {
    "Value": "JSON"
  },
  "DocumentType": {
    "Value": "Automation"
  },
  "DocumentVersion": "5",
  "Name": "AWSSupport-CloneXenEC2InstanceAndMigrateToNitro",
  "Requires": [],
  "ReviewStatus": null,
  "Status": {
    "Value": "Active"
  },
  "StatusInformation": null,
  "VersionName": null,
  "ResponseMetadata": {
    "RequestId": "be52a360-5c26-4dd1-ba83-2a243dfb2a04",
    "Metadata": {},
    "ChecksumAlgorithm": 0,
    "ChecksumValidationStatus": 0
  },
  "ContentLength": 68453,
  "HttpStatusCode": 200,
  "LoggedAt": "2023-03-08T07:12:47.2164111+00:00"
}
