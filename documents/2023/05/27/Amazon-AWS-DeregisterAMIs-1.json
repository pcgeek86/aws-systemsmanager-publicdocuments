{
  "AttachmentsContent": [],
  "Content": "{\n  \"description\" : \"## Name\\n  AWS-DeregisterAMIs\\n\\n## Intent\\n  Deregister Amazon Machine Images (AMIs) owned by an account for specific region.\",\n  \"schemaVersion\" : \"0.3\",\n  \"assumeRole\" : \"{{ AutomationAssumeRole }}\",\n  \"parameters\" : {\n    \"DryRun\" : {\n      \"type\" : \"String\",\n      \"description\" : \"(Optional) Dry run for the automation without deregistered any AMIs, just printout matching ones\",\n      \"allowedValues\" : [ \"No\", \"Yes\" ],\n      \"default\" : \"No\"\n    },\n    \"TagKey\" : {\n      \"type\" : \"String\",\n      \"description\" : \"(Optional) The key of the tag to select desired AMIs\",\n      \"default\" : \"\",\n      \"allowedPattern\" : \"^[\\\\s+-_a-zA-Z0-9]*$\"\n    },\n    \"TagValue\" : {\n      \"type\" : \"String\",\n      \"description\" : \"(Optional) The value of the tag to select desired AMIs\",\n      \"default\" : \"\",\n      \"allowedPattern\" : \"^[\\\\s+-_a-zA-Z0-9]*$\"\n    },\n    \"Age\" : {\n      \"type\" : \"Integer\",\n      \"description\" : \"(Optional) (You can only enter either Age or RetainNumber) The number of days to deregister after it\",\n      \"default\" : 0,\n      \"allowedPattern\" : \"^[0-9]$\"\n    },\n    \"RetainNumber\" : {\n      \"type\" : \"Integer\",\n      \"description\" : \"(Optional) (You can only enter either Age or RetainNumber) Number of retaining AMIs\",\n      \"default\" : 0,\n      \"allowedPattern\" : \"^[0-9]$\"\n    },\n    \"AutomationAssumeRole\" : {\n      \"type\" : \"AWS::IAM::Role::Arn\",\n      \"description\" : \"(Optional) The ARN of the role that allows the document to perform the actions on your behalf\",\n      \"default\" : \"\",\n      \"allowedPattern\" : \"^$|arn:(aws[a-zA-Z-]*)?:iam::\\\\d{12}:role\\\\/?[a-zA-Z_0-9+=,.@\\\\-_\\\\/]+\"\n    }\n  },\n  \"mainSteps\" : [ {\n    \"name\" : \"ValidateParameters\",\n    \"timeoutSeconds\" : 60,\n    \"description\" : \"Running execute script to Validate Parameters\\n\",\n    \"action\" : \"aws:executeScript\",\n    \"inputs\" : {\n      \"Runtime\" : \"python3.8\",\n      \"Handler\" : \"validate\",\n      \"InputPayload\" : {\n        \"Age\" : \"{{ Age }}\",\n        \"RetainNumber\" : \"{{ RetainNumber }}\"\n      },\n      \"Script\" : \"def validate(events, context):\\n  if events[\\\"Age\\\"] == 0 and events[\\\"RetainNumber\\\"] == 0:\\n    raise Exception(\\\"Either Age or RetainNumber should be entered\\\")\\n  elif events[\\\"Age\\\"] > 0 and events[\\\"RetainNumber\\\"] > 0:\\n    raise Exception(\\n      \\\"You can not enter Age and RetainNumber together, \\\"\\n      \\\"either Age or RetainNumber should be entered\\\"\\n    )\"\n    },\n    \"onFailure\" : \"Abort\"\n  }, {\n    \"name\" : \"FilterAMIs\",\n    \"description\" : \"Filtering AMIs by tag using executeAwsApi.\\n\",\n    \"action\" : \"aws:executeAwsApi\",\n    \"timeoutSeconds\" : 60,\n    \"inputs\" : {\n      \"Service\" : \"ec2\",\n      \"Api\" : \"DescribeImages\",\n      \"Filters\" : [ {\n        \"Name\" : \"tag:{{ TagKey }}\",\n        \"Values\" : [ \"{{ TagValue }}\" ]\n      } ]\n    },\n    \"outputs\" : [ {\n      \"Name\" : \"Images\",\n      \"Selector\" : \"$\",\n      \"Type\" : \"StringMap\"\n    } ]\n  }, {\n    \"name\" : \"DeregisterAMIS\",\n    \"timeoutSeconds\" : 300,\n    \"description\" : \"Deregister AMIs.\\n\",\n    \"action\" : \"aws:executeScript\",\n    \"inputs\" : {\n      \"Runtime\" : \"python3.8\",\n      \"Handler\" : \"deregisterOldAMIs\",\n      \"InputPayload\" : {\n        \"Images\" : \"{{ FilterAMIs.Images }}\",\n        \"Age\" : \"{{ Age }}\",\n        \"RetainNumber\" : \"{{ RetainNumber }}\",\n        \"DryRun\" : \"{{ DryRun }}\"\n      },\n      \"Script\" : \"import datetime\\n\\nimport boto3\\nfrom dateutil.parser import parse\\n\\n\\ndef days_old(date):\\n  get_date_obj = parse(date)\\n  date_obj = get_date_obj.replace(tzinfo=None)\\n  diff = datetime.datetime.now() - date_obj\\n  return diff.days\\n\\n\\ndef defineOldAMIs(data, days):\\n  results = []\\n  for ami in data:\\n    if days_old(ami[\\\"CreationDate\\\"]) > days:\\n      results.append(ami)\\n  return results\\n\\n\\ndef deregisterOldAMIs(events, context):\\n  ec2 = boto3.client(\\\"ec2\\\")\\n  images_ids = []\\n  isDryRun = False\\n  if events[\\\"DryRun\\\"] == \\\"Yes\\\":\\n    isDryRun = True\\n  deregisteredAMIs = []\\n\\n  if events[\\\"Age\\\"] > 0:\\n    deregisteredAMIs = defineOldAMIs(\\n      events[\\\"Images\\\"][\\\"Images\\\"], events[\\\"Age\\\"]\\n    )\\n\\n  if events[\\\"RetainNumber\\\"] > 0:\\n    sortedAMIs = sorted(\\n      events[\\\"Images\\\"][\\\"Images\\\"],\\n      key=lambda k: k[\\\"CreationDate\\\"],\\n      reverse=True\\n    )\\n    deregisteredAMIs = sortedAMIs[events[\\\"RetainNumber\\\"] :]\\n\\n  for ami in deregisteredAMIs:\\n    images_ids.append(\\n      ami[\\\"ImageId\\\"] + \\\"-\\\" + ami[\\\"Name\\\"] + \\\"-\\\" + ami[\\\"CreationDate\\\"]\\n    )\\n    if not isDryRun:\\n      ec2.deregister_image(ImageId=ami[\\\"ImageId\\\"])\\n\\n  if not isDryRun:\\n    out = {\\\"The following AMIs have been deregistered: \\\": images_ids}\\n    return out\\n  else:\\n    out = {\\n      \\\"The following list of AMIs should have been deregistered, \\\"\\n      \\\"if you want to take the action, re-run the automation with \\\"\\n      \\\"same conditions but let DryRun option = No \\\": images_ids\\n    }\\n    return out\"\n    },\n    \"outputs\" : [ {\n      \"Name\" : \"output\",\n      \"Selector\" : \"$.Payload.output\",\n      \"Type\" : \"String\"\n    } ]\n  } ]\n}",
  "CreatedDate": "2023-03-14T16:06:28.688Z",
  "DisplayName": null,
  "DocumentFormat": {
    "Value": "JSON"
  },
  "DocumentType": {
    "Value": "Automation"
  },
  "DocumentVersion": "1",
  "Name": "AWS-DeregisterAMIs",
  "Requires": [],
  "ReviewStatus": null,
  "Status": {
    "Value": "Active"
  },
  "StatusInformation": null,
  "VersionName": null,
  "ResponseMetadata": {
    "RequestId": "f42924a3-b291-4cdd-825a-70f7d83989ee",
    "Metadata": {},
    "ChecksumAlgorithm": 0,
    "ChecksumValidationStatus": 0
  },
  "ContentLength": 5760,
  "HttpStatusCode": 200,
  "LoggedAt": "2023-05-27T07:09:43.5582338+00:00"
}
