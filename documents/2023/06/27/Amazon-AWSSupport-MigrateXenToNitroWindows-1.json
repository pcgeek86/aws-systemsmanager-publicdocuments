{
  "AttachmentsContent": [
    {
      "Hash": "5158fd7811b6b59153ad075e2642a8e8569c3452d3b57175c1b02d4d9e72425f",
      "HashType": {
        "Value": "Sha256"
      },
      "Name": "migrate-xen-to-nitro-python.zip",
      "Size": 5379,
      "Url": "https://aws-ssm-document-attachments-us-west-2.s3.us-west-2.amazonaws.com/be6/190294270367/Automation/AWSSupport-MigrateXenToNitroWindows%216c1b834f-2448-4c0f-bb24-3686c5bc943d/1/migrate-xen-to-nitro-python.zip?x-attachment-size=5379&x-requester-accountId=987868780346&X-Amz-Security-Token=IQoJb3JpZ2luX2VjEO7%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLXdlc3QtMiJIMEYCIQCgaTsLfFJaxAgbOFLV5fyEH0HjaHu7QoqesBXt8H5Y1AIhAKdTeDFMO%2BhRcmBIW6oj0HYj6vwcxEHL7ldcv6i7y81fKroFCFcQAxoMMjQ5OTI0NTI3NDEwIgzk8fEM95UuIYqi9GkqlwUO5yYG4SwkcHP9kEZwr1ro3vIWMVbd9YC2PAF4O6lu17OntmoKAK9366jNbYBf2A2j8N1J%2F%2FTbs455XLfL7Tpb6RV8uT%2Buhq%2BTdnKU5T7Cv3F9Itlnd7IsAbQ4MD8Z1fFBitIW%2FkCLUUJOpYk2p68siW3NwPgRBefUF7vD1%2BHM9JgqyZmU%2BYwcEcZuZFbVCeb%2FZOxe959TVp2elTAf%2Bm%2BMlYLxsjV54%2BSB33z2HlEXKALqyrH9P4nOY%2FHyBn6XG%2Fp6OLOxuJjEub15Pag2gPPuFSBT3p5XJeuM1ZY4UlCgzx7FTb5x48XA8ZB%2Br4xsgbeG9zjve%2BIvspDx6uw8d%2BrpAolVAoXqDxFDtX0rahZFJ4sD30a700pzgiWQh9a9Sa334%2Fz7ARWppmN3IMHdonr%2BbhLzxz2hwDFD0zjnWtw7ufqQflYIfjyaUVLJa3%2BCdWhscg23%2FztTS7Q230dfIwPoKCIyT9pxKQQZjrQEMlJ1%2FTIL60%2Fsd141bGl9LAzUlQC8ZtgvqFcSPWLJuCnvOAFcJph4tLDQ3TVY5s37%2B1Ol9ufXqt2k3ct%2FrMc1sCEx7sNAOpS99871RpuO776QEv8wLEgsHdY4FjyGhyagtUNPT3eT3GNklPSaNfg4%2B4yXzVPu4J0DNPVnBvAI2%2FVFrpdwhVMJDYQtwFiy3LXvNFzasTPtH69y7YC97O97eEqQx8ytYX8zBANUnIAblva%2BLv5ZHvVMwzMinvWbazfjL5tY8r8to80heC%2B0xyMgKFA7B3%2F9%2BxCQmTNy6%2BrG66TxJpwYDV9ahh7ZjI2VDS89SdC7c%2F6Qv05KGvjf95nOKNFvmPigA8DzbFrfn1eOr6UuMiZG98p69z3om60xCk9Ar6bnejBF5BPnkWUwmeXppAY6sAFJ6KiPGzGlG9n%2FaoHmiOCGYV8%2BSDLkYTpGofdOL1e0W9yMQjgUYSsj50iJSuUtQ6fnImmhPixQ5bxfrsLR%2F1AkGoIHSBHXzdNyXzsMbxwXDn%2BMhpU7TRSxptPQYGbOml%2B8yWASKGwKTfJrglC1PRwTB4rz6aB7UgO2smqSgprydttFVoxNPuPWxbnJb0JsDd5WZrVFfgN8MPHbdJbW9lshQo%2BgPk%2BaJliC1I9gP2huBA%3D%3D&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Date=20230627T071335Z&X-Amz-SignedHeaders=host&X-Amz-Expires=86400&X-Amz-Credential=ASIATUMFJUUZHWXZTWHL%2F20230627%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Signature=83c49ef197c1a2a725828359c083e73a4f96f389baf143cef9c93fb5f210aba6"
    }
  ],
  "Content": "{\n  \"schemaVersion\": \"0.3\",\n  \"description\": \"The *AWSSupport-MigrateXenToNitroWindows* runbook prepares, and migrate a clone of your Amazon Elastic Compute Cloud (Amazon EC2) Windows instance, to run on [EC2 Nitro platform](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html#ec2-nitro-instances). This automation runbook provides two different Operation Types as input parameter: ```Clone&Migrate``` and ```FullMigration```. For the ```Clone&Migrate``` option, the automation performs **Preliminary Checks**, **Tests**, and **CloneAndMigrate** while ```FullMigration``` has an additional step **Replace root EBS volumes** section. Details are as follows::\\n\\n### 1. Preliminary Checks\\nIn this section, the automation evaluates all of the following pre-requisites to proceed with the migration. If any of the steps fails, the automation ends.\\n> * Checks if the target EC2 instance is already running on Nitro platform.\\n> * Determines if the [lifecycle](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-purchasing-options.html#check-instance-lifecycle) of the target EC2 instance is Spot.\\n> * Checks if any [instance-store-volumes](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/InstanceStorage.html#instance-store-volumes) with data are attached to the target EC2 instance.\\n> * Validates if the operating system is Windows Server and checks if the edition is compatible.\\n> * Determines if the target EC2 instance is a part of an Amazon EC2 Auto Scaling group. If true, the EC2 instance should be in the [Standby state](https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-enter-exit-standby.html).\\n> * Checks if the target EC2 instance is managed by Systems Manager and configured to use AWS Systems Manager Run Command.\\n\\n### 2. Tests \\nThe automation uses this phase as sanity test by creating a test Amazon Machine Image (AMI) from the target EC2 instance and launching a test EC2 instance using this AMI. If the target instance is domain-joined, an isolated security group is created in the target instance VPC which does not allow outbound traffic to the domain controller(s). This security group is only attached to the Test and Clone instances. The original target instance is not affected.\\n> * If the test EC2 instance passes the status checks, the automation is temporarily paused and approval from the designated principal's is requested via Amazon Simple Notification Service (SNS) notification. If approval is provided, automation stops the target EC2 instance.\\n*Note:* Before providing approval, ensure that all the application(s) running on the target EC2 instance are gracefully closed. If the EC2 does not have an Elastic IP address associated, the automatic public IPv4 address will change once the instance is stopped and started.\\n> * The test AMI and the test EC2 instance are deleted at the end of this section.\\n\\n### 3. CloneAndMigrate \\nIn this section, the automation creates a clone of your target EC2 instance in the same subnet and migrates the EC2 instance using the following steps:\\n> * Enables the [Enhanced networking (ENA) attribute](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/enhanced-networking-ena.html#enable-enhanced-networking-ena-AL).\\n> * Installs the latest version of ENA drivers.\\n> * Installs the latest version of NVMe drivers.\\n> * Verifies the correct Power Management settings are applied for graceful shutdowns on the Nitro system.\\n> * Installs the AWS PCI Serial Port Driver for bare metal instance types on the Nitro system.\\nAfter validating all the requirements, the cloned EC2 instance type is changed to the desired Nitro type. Once the cloned instance passes status checks on Nitro platform, automation seeks for designated principal's approval to create an AMI. If approval is denied, the automation ends, leaving the cloned EC2 instance.\\n\\n### 4. Replace root EBS volumes\\nIf you choose ```FullMigration``` as Operation Type, the automation migrates the target EC2 instance to the required Nitro instance type.\\n > * The automation requests approval from the designated principals to replace the root EBS volume of the target EC2 instance with the cloned EC2 instance.\\n> * Once the migration is successful, the cloned EC2 instance is deleted. In case of failure, the automation re-attaches the original EBS root volume back to the target EC2 instance.\\n> * **Note:** If the root EBS volume attached to the target EC2 instance contains AWS Reserved Tags or tags with the 'aws:' prefix, then ```FullMigration``` **is not supported**.\\n\\n### Prerequisites:\\n> * The target EC2 instance requires outbound access to Amazon Simple Storage Service (Amazon S3) in order to install the drivers.\\n\\n### Supported Operating Systems:\\n> * Windows Server 2022, Windows Server 2019, Windows Server 2016, Windows Server 2012 R2, Windows Server 2012, and Windows Server 2008 R2.\\n\\n### Important:\\n> * Running this runbook, may incur extra charges to your account for the EC2 instance, EBS Volumes, and Amazon Machine Images (AMIs). Please refer to the [Amazon EC2 Pricing](https://aws.amazon.com/ec2/pricing/) and [Amazon EBS pricing](https://aws.amazon.com/ebs/pricing/) for more details.\\n\\nPlease refer to [Migrate to latest generation instance types](https://docs.aws.amazon.com/AWSEC2/latest/WindowsGuide/migrating-latest-types.html) for more information.\",\n  \"assumeRole\": \"{{AutomationAssumeRole}}\",\n  \"parameters\": {\n    \"AutomationAssumeRole\": {\n      \"type\": \"AWS::IAM::Role::Arn\",\n      \"description\": \"(Optional) The Amazon Resource Name (ARN) of the AWS Identity and Access Management (IAM) role that allows Systems Manager Automation to perform the actions on your behalf. If no role is specified, Systems Manager Automation uses the permissions of the user that starts this runbook.\",\n      \"default\": \"\"\n    },\n    \"TargetInstanceId\": {\n      \"type\": \"AWS::EC2::Instance::Id\",\n      \"description\": \"(Required) The ID of the Xen-based Amazon EC2 instance you want to migrate to the Nitro platform.\"\n    },\n    \"NitroInstanceType\": {\n      \"type\": \"String\",\n      \"default\": \"m5.xlarge\",\n      \"description\": \"(Required) Enter the destination Nitro instance type. Note: Only Nitro M5, M6, C5, C6, R5, R6 and T3 instances are supported (e.g. t3.small). For more details about the available Nitro instance types, please refer to the link: https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html\",\n      \"allowedPattern\": \"^(m5a?z?d?n?|c5a?d?n?|r5a?d?n?b?|(c|m|r)6(a|i)?d?)\\\\.(2|4|6|8|9|12|16|18|24|32)?x?large$|^t3a?\\\\.((x|2x)?large|nano|micro|small|medium)$\"\n    },\n    \"OperationType\": {\n      \"type\": \"String\",\n      \"description\": \"(Required) If you choose 'Clone&Migrate', this automation will clone the target EC2 instance & migrate it to the Nitro platform. If you choose 'FullMigration', this automation will clone the target EC2 instance, migrate it to the Nitro platform and replace the root volume of the target EC2 instance with the cloned(New) EC2 instance, only if the root partition is not based on Logical Volume Manager(LVM). \",\n      \"allowedValues\": [\n        \"Clone&Migrate\",\n        \"FullMigration\"\n      ]\n    },\n    \"SNSTopicArn\": {\n      \"type\": \"String\",\n      \"description\": \"(Required) Provide the ARN of the SNS Topic for Approval notification. This SNS topic is used to send approval notifications during required during the automation execution.\",\n      \"allowedPattern\": \"^arn:(aws|aws-cn|aws-us-gov|aws-iso(\\\\-[a-z])?):sns:.*:[0-9]{12}:.*$\"\n    },\n    \"ApproverIAM\": {\n      \"type\": \"StringList\",\n      \"description\": \"(Required) Provide a list of AWS authenticated principals who are able to either approve or reject the action. The maximum number of approvers is 10. You can specify principals by using any of these formats, 1) An AWS Identity and Access Management (IAM) user name 2) An IAM user ARN 3) An IAM role ARN 4) An IAM assume role user ARN\",\n      \"allowedPattern\": \"^[a-zA-Z0-9_+=,.@\\\\-\\\\/]{1,128}$|^arn:(aws|aws-cn|aws-us-gov|aws-iso(\\\\-[a-z])?):(iam|sts):.*:[0-9]{12}:[a-zA-Z0-9_+=,.@\\\\-\\\\/]{1,256}$\"\n    },\n    \"MinimumRequiredApprovals\": {\n      \"type\": \"Integer\",\n      \"default\": 1,\n      \"description\": \"(Optional) The minimum number of approvals required to resume the automation. If you don't specify a value, the system defaults to one. The value for this parameter must be a positive number. The value for this parameter can't exceed the number of approvers defined by the ApproverIAM parameter.\",\n      \"allowedValues\": [\n        1,\n        2,\n        3,\n        4,\n        5,\n        6,\n        7,\n        8,\n        9,\n        10\n      ]\n    },\n    \"DeleteResourcesOnFailure\": {\n      \"type\": \"Boolean\",\n      \"default\": true,\n      \"description\": \"(Required) Whether to terminate the cloned EC2 instance and Amazon Machine Image (AMI) if the automation fails. Not applicable for Test & ReplaceRootVolume branches.\",\n      \"allowedValues\": [\n        false,\n        true\n      ]\n    },\n    \"Acknowledgement\": {\n      \"type\": \"String\",\n      \"description\": \"(Required) Please read the complete details of the actions performed by this automation runbook and write 'Yes, I understand and acknowledge' if you acknowledge the steps.\",\n      \"allowedPattern\": \"^Yes, I understand and acknowledge$\"\n    }\n  },\n  \"mainSteps\": [\n    {\n      \"name\": \"checkConcurrency\",\n      \"action\": \"aws:executeScript\",\n      \"description\": \"Ensures there is only one execution of this runbook targeting the current EC2 instance. If the runbook finds another in progress execution targeting the same instance ID, it returns an error and ends.\",\n      \"timeoutSeconds\": 600,\n      \"onFailure\": \"Abort\",\n      \"inputs\": {\n        \"Runtime\": \"python3.8\",\n        \"Handler\": \"checkConcurrency.check_concurrency_handler\",\n        \"InputPayload\": {\n          \"TargetInstanceId\": \"{{TargetInstanceId}}\"\n        },\n        \"Attachment\": \"migrate-xen-to-nitro-python.zip\"\n      },\n      \"outputs\": [\n        {\n          \"Name\": \"NoExecutionFound\",\n          \"Selector\": \"$.Payload.NoExecutionFound\",\n          \"Type\": \"String\"\n        }\n      ],\n      \"nextStep\": \"getTargetInstanceProperties\"\n    },\n    {\n      \"name\": \"getTargetInstanceProperties\",\n      \"action\": \"aws:executeAwsApi\",\n      \"description\": \"Fetches the details of the target EC2 instance\",\n      \"onFailure\": \"Abort\",\n      \"maxAttempts\": 3,\n      \"nextStep\": \"checkRootVolumeTags\",\n      \"inputs\": {\n        \"Service\": \"ec2\",\n        \"Api\": \"DescribeInstances\",\n        \"InstanceIds\": [\n          \"{{TargetInstanceId}}\"\n        ]\n      },\n      \"outputs\": [\n        {\n          \"Name\": \"PlatformType\",\n          \"Selector\": \"$.Reservations[0].Instances[0].Platform\",\n          \"Type\": \"String\"\n        },\n        {\n          \"Name\": \"InstanceSubnetId\",\n          \"Selector\": \"$.Reservations[0].Instances[0].SubnetId\",\n          \"Type\": \"String\"\n        },\n        {\n          \"Name\": \"SecurityGroup\",\n          \"Selector\": \"$.Reservations[0].Instances[0].SecurityGroups[0].GroupId\",\n          \"Type\": \"String\"\n        },\n        {\n          \"Name\": \"InstanceProfileArn\",\n          \"Selector\": \"$.Reservations[0].Instances[0].IamInstanceProfile.Arn\",\n          \"Type\": \"String\"\n        },\n        {\n          \"Name\": \"InstanceProfileName\",\n          \"Selector\": \"$.Reservations[0].Instances[0].IamInstanceProfile.Name\",\n          \"Type\": \"String\"\n        },\n        {\n          \"Name\": \"AvailabilityZone\",\n          \"Selector\": \"$.Reservations[0].Instances[0].Placement.AvailabilityZone\",\n          \"Type\": \"String\"\n        },\n        {\n          \"Name\": \"RootDeviceName\",\n          \"Selector\": \"$.Reservations[0].Instances[0].RootDeviceName\",\n          \"Type\": \"String\"\n        },\n        {\n          \"Name\": \"RootVolumeType\",\n          \"Selector\": \"$.Reservations[0].Instances[0].RootDeviceType\",\n          \"Type\": \"String\"\n        },\n        {\n          \"Name\": \"InstanceType\",\n          \"Selector\": \"$.Reservations[0].Instances[0].InstanceType\",\n          \"Type\": \"String\"\n        },\n        {\n          \"Name\": \"ENAAttrib\",\n          \"Selector\": \"$.Reservations[0].Instances[0].EnaSupport\",\n          \"Type\": \"Boolean\"\n        },\n        {\n          \"Name\": \"InstanceLifecycle\",\n          \"Selector\": \"$.Reservations[0].Instances[0].InstanceLifecycle\",\n          \"Type\": \"String\"\n        },\n        {\n          \"Name\": \"InstanceState\",\n          \"Selector\": \"$.Reservations[0].Instances[0].State.Name\",\n          \"Type\": \"String\"\n        }\n      ]\n    },\n    {\n      \"name\": \"checkRootVolumeTags\",\n      \"action\": \"aws:executeScript\",\n      \"description\": \"Determines if the root volume of the target EC2 instance contains any AWS reserved tags\",\n      \"isCritical\": true,\n      \"nextStep\": \"cloneTargetInstanceAndMigrateToNitro\",\n      \"onFailure\": \"Abort\",\n      \"inputs\": {\n        \"Runtime\": \"python3.8\",\n        \"Handler\": \"checkRootVolumetags.checkRootVolumetags_handler\",\n        \"Attachment\": \"migrate-xen-to-nitro-python.zip\",\n        \"InputPayload\": {\n          \"TargetInstanceId\": \"{{TargetInstanceId}}\",\n          \"RootDeviceName\": \"{{getTargetInstanceProperties.RootDeviceName}}\",\n          \"OperationType\": \"{{OperationType}}\"\n        }\n      },\n      \"outputs\": [\n        {\n          \"Name\": \"RootVolumeTags\",\n          \"Selector\": \"$.Payload.volume_tags\",\n          \"Type\": \"MapList\"\n        }\n      ]\n    },\n    {\n      \"name\": \"cloneTargetInstanceAndMigrateToNitro\",\n      \"action\": \"aws:executeAutomation\",\n      \"description\": \"Starts child automation execution that clones the Target EC2 instance and migrates it to the Nitro platform by completing all the requirements.\",\n      \"onFailure\": \"Abort\",\n      \"maxAttempts\": 1,\n      \"isCritical\": true,\n      \"nextStep\": \"branchOnTheOperationType\",\n      \"inputs\": {\n        \"DocumentName\": \"AWSSupport-CloneXenEC2WinInstanceAndMigrateToNitro\",\n        \"RuntimeParameters\": {\n          \"TargetInstanceId\": [\n            \"{{ TargetInstanceId }}\"\n          ],\n          \"NitroInstanceType\": [\n            \"{{ NitroInstanceType }}\"\n          ],\n          \"SNSTopicArn\": [\n            \"{{ SNSTopicArn }}\"\n          ],\n          \"ApproverIAM\": [\n            \"{{ ApproverIAM }}\"\n          ],\n          \"Acknowledgement\": [\n            \"{{ Acknowledgement }}\"\n          ],\n          \"AutomationAssumeRole\": [\n            \"{{ AutomationAssumeRole }}\"\n          ],\n          \"MinimumRequiredApprovals\": \"{{MinimumRequiredApprovals}}\",\n          \"DeleteResourcesOnFailure\": \"{{DeleteResourcesOnFailure}}\"\n        }\n      },\n      \"outputs\": [\n        {\n          \"Name\": \"ClonedEC2InstanceId\",\n          \"Selector\": \"$.Output\",\n          \"Type\": \"String\"\n        }\n      ]\n    },\n    {\n      \"name\": \"branchOnTheOperationType\",\n      \"action\": \"aws:branch\",\n      \"description\": \"Branches on the value of Operation Type\",\n      \"isEnd\": true,\n      \"isCritical\": true,\n      \"inputs\": {\n        \"Choices\": [\n          {\n            \"NextStep\": \"getClonedInstanceId\",\n            \"Variable\": \"{{OperationType}}\",\n            \"StringEquals\": \"FullMigration\"\n          }\n        ]\n      }\n    },\n    {\n      \"name\": \"getClonedInstanceId\",\n      \"action\": \"aws:executeScript\",\n      \"description\": \"Retrieves the Cloned EC2 Instance Id from the child Automation\",\n      \"isCritical\": true,\n      \"nextStep\": \"startOfReplaceRootEBSVolumeBranch\",\n      \"onFailure\": \"Abort\",\n      \"inputs\": {\n        \"Runtime\": \"python3.8\",\n        \"Handler\": \"checkStepDetails.checkStepDetails_handler\",\n        \"Attachment\": \"migrate-xen-to-nitro-python.zip\",\n        \"InputPayload\": {\n          \"ChildAutomationId\": \"{{cloneTargetInstanceAndMigrateToNitro.ExecutionId}}\",\n          \"StepName\": \"launchInstanceInSameSubnet\"\n        }\n      },\n      \"outputs\": [\n        {\n          \"Name\": \"ClonedInstanceId\",\n          \"Selector\": \"$.Payload.cloned_instance_id\",\n          \"Type\": \"String\"\n        }\n      ]\n    },\n    {\n      \"name\": \"startOfReplaceRootEBSVolumeBranch\",\n      \"action\": \"aws:sleep\",\n      \"description\": \"Start of Replace Root EBS Volume branch\",\n      \"onFailure\": \"Continue\",\n      \"nextStep\": \"checkIfTargetInstanceIsManagedByCFN\",\n      \"isCritical\": false,\n      \"inputs\": {\n        \"Duration\": \"PT5S\"\n      }\n    },\n    {\n      \"name\": \"checkIfTargetInstanceIsManagedByCFN\",\n      \"action\": \"aws:executeScript\",\n      \"description\": \"Determines if the Target EC2 instance is managed by any AWS CloudFormation Stack\",\n      \"timeoutSeconds\": 600,\n      \"onFailure\": \"Abort\",\n      \"inputs\": {\n        \"Runtime\": \"python3.8\",\n        \"Handler\": \"checkCloudFormationResources.checkCloudFormationResources_handler\",\n        \"InputPayload\": {\n          \"TargetInstanceId\": \"{{TargetInstanceId}}\"\n        },\n        \"Attachment\": \"migrate-xen-to-nitro-python.zip\"\n      },\n      \"outputs\": [\n        {\n          \"Name\": \"Output_Message\",\n          \"Selector\": \"$.Payload.output_message\",\n          \"Type\": \"String\"\n        },\n        {\n          \"Name\": \"IspartOfCFNStack\",\n          \"Selector\": \"$.Payload.is_part_of_cfn_stack\",\n          \"Type\": \"Boolean\"\n        },\n        {\n          \"Name\": \"StackName\",\n          \"Selector\": \"$.Payload.stack_name\",\n          \"Type\": \"String\"\n        }\n      ],\n      \"nextStep\": \"branchOnCFNStackStatus\"\n    },\n    {\n      \"name\": \"branchOnCFNStackStatus\",\n      \"action\": \"aws:branch\",\n      \"description\": \"Decides which approval step to execute based on the AWS CloudFormation Stack status\",\n      \"isEnd\": true,\n      \"isCritical\": true,\n      \"inputs\": {\n        \"Choices\": [\n          {\n            \"NextStep\": \"approvalForRootVolumesReplacementWithCFN\",\n            \"Variable\": \"{{checkIfTargetInstanceIsManagedByCFN.IspartOfCFNStack}}\",\n            \"BooleanEquals\": true\n          }\n        ],\n        \"Default\": \"approvalForRootVolumesReplacement\"\n      }\n    },\n    {\n      \"name\": \"approvalForRootVolumesReplacementWithCFN\",\n      \"action\": \"aws:approve\",\n      \"description\": \"If the target EC2 instance is managed by AWS CloudFormation (CFN), automation waits for user approval if the cloned EC2 instance successfully boots on Nitro platform. If provided, replaces the EBS volumes of the target EC2 instance with the cloned EC2 instance\",\n      \"timeoutSeconds\": 3600,\n      \"nextStep\": \"assertIfTargetEC2InstanceIsStillStopped\",\n      \"inputs\": {\n        \"NotificationArn\": \"{{SNSTopicArn}}\",\n        \"Message\": \"Cloned EC2 Instance {{getClonedInstanceId.ClonedInstanceId}}, created from {{TargetInstanceId}}, has been successfully migrated to {{NitroInstanceType}}. Provide approval to replace the volumes of the target EC2 instance with the cloned EC2 instance. If approved, both of the EC2 instances(Target & Cloned) will be stopped to replace the volumes. Target EC2 instance is a part of AWS CloudFormation Stack {{checkIfTargetInstanceIsManagedByCFN.StackName}}, migrating the Target EC2 instance using this automation may cause a drift from the stack's actual configuration. This step will automatically timeout after 3600s if no action is taken.\",\n        \"MinRequiredApprovals\": \"{{MinimumRequiredApprovals}}\",\n        \"Approvers\": [\n          \"{{ApproverIAM}}\"\n        ]\n      }\n    },\n    {\n      \"name\": \"approvalForRootVolumesReplacement\",\n      \"action\": \"aws:approve\",\n      \"description\": \"Waits for user approval if the cloned EC2 instance successfully boots on Nitro platform. If provided, replaces the EBS volumes of the target EC2 instance with the cloned EC2 instance\",\n      \"timeoutSeconds\": 3600,\n      \"nextStep\": \"assertIfTargetEC2InstanceIsStillStopped\",\n      \"inputs\": {\n        \"NotificationArn\": \"{{SNSTopicArn}}\",\n        \"Message\": \"Cloned EC2 Instance {{getClonedInstanceId.ClonedInstanceId}}, created from {{TargetInstanceId}}, has been successfully migrated to {{NitroInstanceType}}. Provide approval to replace the volumes of the target EC2 instance with the cloned EC2 instance. If approved, both of the EC2 instances(Target & Cloned) will be stopped to replace the volumes.This step will automatically timeout after 3600s if no action is taken.\",\n        \"MinRequiredApprovals\": \"{{MinimumRequiredApprovals}}\",\n        \"Approvers\": [\n          \"{{ApproverIAM}}\"\n        ]\n      }\n    },\n    {\n      \"name\": \"assertIfTargetEC2InstanceIsStillStopped\",\n      \"description\": \"Validates if target EC2 instance is still in Stopped state before proceeding for volume replacement\",\n      \"action\": \"aws:assertAwsResourceProperty\",\n      \"onFailure\": \"step:stopTargetInstanceForRootVolumeReplacement\",\n      \"isCritical\": \"true\",\n      \"maxAttempts\": 3,\n      \"nextStep\": \"stopClonedInstanceForRootVolumeReplacement\",\n      \"inputs\": {\n        \"Service\": \"ec2\",\n        \"Api\": \"DescribeInstanceStatus\",\n        \"InstanceIds\": [\n          \"{{TargetInstanceId}}\"\n        ],\n        \"IncludeAllInstances\": true,\n        \"PropertySelector\": \"$.InstanceStatuses[0].InstanceState.Name\",\n        \"DesiredValues\": [\n          \"stopped\"\n        ]\n      }\n    },\n    {\n      \"name\": \"stopTargetInstanceForRootVolumeReplacement\",\n      \"action\": \"aws:changeInstanceState\",\n      \"description\": \"Stops target (Xen based) EC2 instance before replacing EBS volumes\",\n      \"maxAttempts\": 3,\n      \"timeoutSeconds\": 300,\n      \"onFailure\": \"step:forceStopTargetInstanceForRootVolumeReplacement\",\n      \"inputs\": {\n        \"InstanceIds\": [\n          \"{{TargetInstanceId}}\"\n        ],\n        \"CheckStateOnly\": false,\n        \"DesiredState\": \"stopped\"\n      },\n      \"nextStep\": \"stopClonedInstanceForRootVolumeReplacement\"\n    },\n    {\n      \"name\": \"forceStopTargetInstanceForRootVolumeReplacement\",\n      \"action\": \"aws:changeInstanceState\",\n      \"description\": \"Force stops the target (Xen based) EC2 instance, only if the step 'stopTargetInstanceForRootVolumeReplacement' fails\",\n      \"maxAttempts\": 3,\n      \"timeoutSeconds\": 300,\n      \"onFailure\": \"Abort\",\n      \"inputs\": {\n        \"InstanceIds\": [\n          \"{{TargetInstanceId}}\"\n        ],\n        \"CheckStateOnly\": false,\n        \"DesiredState\": \"stopped\",\n        \"Force\": true\n      },\n      \"nextStep\": \"stopClonedInstanceForRootVolumeReplacement\"\n    },\n    {\n      \"name\": \"stopClonedInstanceForRootVolumeReplacement\",\n      \"action\": \"aws:changeInstanceState\",\n      \"description\": \"Stops the cloned EC2 instance before replacing EBS volumes\",\n      \"maxAttempts\": 3,\n      \"timeoutSeconds\": 300,\n      \"onFailure\": \"step:forceStopClonedInstanceForRootVolumeReplacement\",\n      \"inputs\": {\n        \"InstanceIds\": [\n          \"{{getClonedInstanceId.ClonedInstanceId}}\"\n        ],\n        \"CheckStateOnly\": false,\n        \"DesiredState\": \"stopped\"\n      },\n      \"nextStep\": \"getBlockDeviceMappings\"\n    },\n    {\n      \"name\": \"forceStopClonedInstanceForRootVolumeReplacement\",\n      \"action\": \"aws:changeInstanceState\",\n      \"description\": \"Force stops the cloned EC2 instance, only if the step 'stopClonedInstanceForRootVolumeReplacement' fails\",\n      \"maxAttempts\": 3,\n      \"timeoutSeconds\": 300,\n      \"onFailure\": \"Abort\",\n      \"inputs\": {\n        \"InstanceIds\": [\n          \"{{getClonedInstanceId.ClonedInstanceId}}\"\n        ],\n        \"CheckStateOnly\": false,\n        \"DesiredState\": \"stopped\",\n        \"Force\": true\n      },\n      \"nextStep\": \"getBlockDeviceMappings\"\n    },\n    {\n      \"name\": \"getBlockDeviceMappings\",\n      \"action\": \"aws:executeScript\",\n      \"description\": \"Retrieves the block device mappings for both the EC2 instances\",\n      \"isCritical\": true,\n      \"nextStep\": \"replaceRootEbsVolumes\",\n      \"onFailure\": \"Abort\",\n      \"inputs\": {\n        \"Runtime\": \"python3.8\",\n        \"Handler\": \"getblockdevicemappings.getBlockDeviceMappings_handler\",\n        \"Attachment\": \"migrate-xen-to-nitro-python.zip\",\n        \"InputPayload\": {\n          \"ClonedInstance\": \"{{getClonedInstanceId.ClonedInstanceId}}\",\n          \"TargetInstance\": \"{{TargetInstanceId}}\"\n        }\n      },\n      \"outputs\": [\n        {\n          \"Name\": \"root_device_mapping_target_instance\",\n          \"Selector\": \"$.Payload.root_device_mapping_target_instance\",\n          \"Type\": \"StringMap\"\n        },\n        {\n          \"Name\": \"table_block_dev_mapping_target_instance\",\n          \"Selector\": \"$.Payload.table_block_dev_mapping_target_instance\",\n          \"Type\": \"String\"\n        },\n        {\n          \"Name\": \"root_device_mapping_cloned_instance\",\n          \"Selector\": \"$.Payload.root_device_mapping_cloned_instance\",\n          \"Type\": \"StringMap\"\n        },\n        {\n          \"Name\": \"table_block_dev_mapping_cloned_instance\",\n          \"Selector\": \"$.Payload.table_block_dev_mapping_cloned_instance\",\n          \"Type\": \"String\"\n        }\n      ]\n    },\n    {\n      \"name\": \"replaceRootEbsVolumes\",\n      \"action\": \"aws:executeScript\",\n      \"maxAttempts\": 3,\n      \"description\": \"Replaces the EBS volumes of the Target (Xen-based) EC2 instance with the cloned EC2 instance. Also prints the block device mappings tables for both the instances before EBS volume's replacement\",\n      \"isCritical\": true,\n      \"onFailure\": \"step:onFailureRollbackRootVolumeReplacement\",\n      \"nextStep\": \"EndOfReplaceRootEBSVolumeBranch\",\n      \"inputs\": {\n        \"Runtime\": \"python3.8\",\n        \"Handler\": \"replaceRootVolumes.replaceRootVolumes_handler\",\n        \"Attachment\": \"migrate-xen-to-nitro-python.zip\",\n        \"InputPayload\": {\n          \"clonedInstance\": \"{{getClonedInstanceId.ClonedInstanceId}}\",\n          \"targetInstance\": \"{{TargetInstanceId}}\",\n          \"rootDevMappingTargetInstance\": \"{{getBlockDeviceMappings.root_device_mapping_target_instance}}\",\n          \"rootDevMappingClonedInstance\": \"{{getBlockDeviceMappings.root_device_mapping_cloned_instance}}\"\n        }\n      },\n      \"outputs\": [\n        {\n          \"Name\": \"Disclaimer\",\n          \"Selector\": \"$.Payload.Disclaimer\",\n          \"Type\": \"String\"\n        }\n      ]\n    },\n    {\n      \"name\": \"EndOfReplaceRootEBSVolumeBranch\",\n      \"action\": \"aws:sleep\",\n      \"description\": \"End of Replace Root EBS Volume branch\",\n      \"onFailure\": \"Continue\",\n      \"nextStep\": \"checkENAAttributeForTargetInstance\",\n      \"isCritical\": false,\n      \"inputs\": {\n        \"Duration\": \"PT5S\"\n      }\n    },\n    {\n      \"name\": \"checkENAAttributeForTargetInstance\",\n      \"action\": \"aws:branch\",\n      \"description\": \"Checks if the Enhanced Networking Adapter (ENA) attribute is enabled on the target EC2 instance\",\n      \"isCritical\": true,\n      \"onFailure\": \"step:onFailureRollbackRootVolumeReplacement\",\n      \"inputs\": {\n        \"Choices\": [\n          {\n            \"NextStep\": \"setNitroInstanceTypeForTargetInstance\",\n            \"Variable\": \"{{getTargetInstanceProperties.ENAAttrib}}\",\n            \"BooleanEquals\": true\n          }\n        ],\n        \"Default\": \"enableENAAttributeForTargetInstance\"\n      }\n    },\n    {\n      \"name\": \"enableENAAttributeForTargetInstance\",\n      \"action\": \"aws:executeAwsApi\",\n      \"description\": \"Enables the Enhanced Networking Adapter (ENA) attribute for the target EC2 instance, if not enabled already\",\n      \"nextStep\": \"setNitroInstanceTypeForTargetInstance\",\n      \"onFailure\": \"step:onFailureRollbackRootVolumeReplacement\",\n      \"maxAttempts\": 3,\n      \"inputs\": {\n        \"Service\": \"ec2\",\n        \"Api\": \"ModifyInstanceAttribute\",\n        \"InstanceId\": \"{{TargetInstanceId}}\",\n        \"EnaSupport\": {\n          \"Value\": true\n        }\n      }\n    },\n    {\n      \"name\": \"setNitroInstanceTypeForTargetInstance\",\n      \"action\": \"aws:executeAwsApi\",\n      \"description\": \"Sets the provided Target EC2 instance type for the target EC2 instance\",\n      \"onFailure\": \"step:onFailureRevertOriginalInstanceType\",\n      \"isCritical\": \"true\",\n      \"nextStep\": \"replicateRootVolumeTags\",\n      \"maxAttempts\": 3,\n      \"inputs\": {\n        \"Service\": \"ec2\",\n        \"Api\": \"ModifyInstanceAttribute\",\n        \"InstanceId\": \"{{TargetInstanceId}}\",\n        \"InstanceType\": {\n          \"Value\": \"{{NitroInstanceType}}\"\n        }\n      }\n    },\n    {\n      \"name\": \"replicateRootVolumeTags\",\n      \"action\": \"aws:executeScript\",\n      \"description\": \"Replicates the tags on the root EBS volume from the target EC2 instance\",\n      \"isCritical\": true,\n      \"nextStep\": \"startTargetInstance\",\n      \"onFailure\": \"step:onFailureStopTargetEC2Instance\",\n      \"inputs\": {\n        \"Runtime\": \"python3.8\",\n        \"Handler\": \"replicateRootVolumeTags.replicateRootVolumeTags_handler\",\n        \"Attachment\": \"migrate-xen-to-nitro-python.zip\",\n        \"InputPayload\": {\n          \"rootDevMappingTargetInstance\": \"{{getBlockDeviceMappings.root_device_mapping_target_instance}}\",\n          \"rootDevMappingClonedInstance\": \"{{getBlockDeviceMappings.root_device_mapping_cloned_instance}}\"\n        }\n      }\n    },\n    {\n      \"name\": \"startTargetInstance\",\n      \"action\": \"aws:changeInstanceState\",\n      \"description\": \"Starts target EC2 instance after changing instance type to Nitro\",\n      \"maxAttempts\": 3,\n      \"timeoutSeconds\": 300,\n      \"onFailure\": \"step:onFailureStopTargetEC2Instance\",\n      \"nextStep\": \"terminateClonedEC2Instance\",\n      \"inputs\": {\n        \"InstanceIds\": [\n          \"{{TargetInstanceId}}\"\n        ],\n        \"CheckStateOnly\": false,\n        \"DesiredState\": \"running\"\n      }\n    },\n    {\n      \"name\": \"onFailureStopTargetEC2Instance\",\n      \"action\": \"aws:changeInstanceState\",\n      \"description\": \"Stops target EC2 instance if it fails to start on Nitro platform\",\n      \"maxAttempts\": 3,\n      \"timeoutSeconds\": 300,\n      \"onFailure\": \"step:onFailureForceStopTargetEC2Instance\",\n      \"inputs\": {\n        \"InstanceIds\": [\n          \"{{TargetInstanceId}}\"\n        ],\n        \"CheckStateOnly\": false,\n        \"DesiredState\": \"stopped\"\n      },\n      \"nextStep\": \"onFailureRevertOriginalInstanceType\"\n    },\n    {\n      \"name\": \"onFailureForceStopTargetEC2Instance\",\n      \"action\": \"aws:changeInstanceState\",\n      \"description\": \"Stops target EC2 instance if it fails to start on Nitro platform, only if the step 'onFailureStopTargetEC2Instance' fails\",\n      \"maxAttempts\": 3,\n      \"timeoutSeconds\": 300,\n      \"onFailure\": \"Abort\",\n      \"inputs\": {\n        \"InstanceIds\": [\n          \"{{TargetInstanceId}}\"\n        ],\n        \"CheckStateOnly\": false,\n        \"DesiredState\": \"stopped\",\n        \"Force\": true\n      },\n      \"nextStep\": \"onFailureRevertOriginalInstanceType\"\n    },\n    {\n      \"name\": \"onFailureRevertOriginalInstanceType\",\n      \"action\": \"aws:executeAwsApi\",\n      \"description\": \"Reverts the target EC2 instance to the original instance type, if the target instance fails to start on Nitro platform\",\n      \"onFailure\": \"Abort\",\n      \"isCritical\": \"true\",\n      \"nextStep\": \"onFailureRollbackRootVolumeReplacement\",\n      \"maxAttempts\": 3,\n      \"inputs\": {\n        \"Service\": \"ec2\",\n        \"Api\": \"ModifyInstanceAttribute\",\n        \"InstanceId\": \"{{TargetInstanceId}}\",\n        \"InstanceType\": {\n          \"Value\": \"{{getTargetInstanceProperties.InstanceType}}\"\n        }\n      }\n    },\n    {\n      \"name\": \"onFailureRollbackRootVolumeReplacement\",\n      \"action\": \"aws:executeScript\",\n      \"description\": \"Reverts all the changes made by the 'replaceRootEbsVolumes' step, in case of any failure\",\n      \"isCritical\": true,\n      \"onFailure\": \"Abort\",\n      \"nextStep\": \"onFailureApprovalToStartTargetInstance\",\n      \"inputs\": {\n        \"Runtime\": \"python3.8\",\n        \"Handler\": \"ebsRollback.ebsrollback_handler\",\n        \"Attachment\": \"migrate-xen-to-nitro-python.zip\",\n        \"InputPayload\": {\n          \"clonedInstance\": \"{{getClonedInstanceId.ClonedInstanceId}}\",\n          \"targetInstance\": \"{{TargetInstanceId}}\",\n          \"rootDevMappingTargetInstance\": \"{{getBlockDeviceMappings.root_device_mapping_target_instance}}\",\n          \"rootDevMappingClonedInstance\": \"{{getBlockDeviceMappings.root_device_mapping_cloned_instance}}\"\n        }\n      }\n    },\n    {\n      \"name\": \"onFailureApprovalToStartTargetInstance\",\n      \"action\": \"aws:approve\",\n      \"description\": \"If automation fails, waits for designated principal's approval to start the target EC2 instance\",\n      \"timeoutSeconds\": 3600,\n      \"onFailure\": \"Abort\",\n      \"nextStep\": \"onFailureStartTargetInstance\",\n      \"inputs\": {\n        \"NotificationArn\": \"{{SNSTopicArn}}\",\n        \"Message\": \"Automation failed while migrating the target instance to the Nitro platform. Provide approval to start the target EC2 instance. In case of 'Reject/Deny', the Automation will stop with Failed status. This step will automatically timeout after 3600s if no action is taken.\",\n        \"MinRequiredApprovals\": \"{{MinimumRequiredApprovals}}\",\n        \"Approvers\": [\n          \"{{ApproverIAM}}\"\n        ]\n      }\n    },\n    {\n      \"name\": \"onFailureStartTargetInstance\",\n      \"action\": \"aws:changeInstanceState\",\n      \"description\": \"If automation fails, starts the target EC2 instance\",\n      \"maxAttempts\": 1,\n      \"timeoutSeconds\": 900,\n      \"isCritical\": true,\n      \"onFailure\": \"Abort\",\n      \"isEnd\": true,\n      \"inputs\": {\n        \"InstanceIds\": [\n          \"{{TargetInstanceId}}\"\n        ],\n        \"CheckStateOnly\": false,\n        \"DesiredState\": \"running\"\n      }\n    },\n    {\n      \"name\": \"terminateClonedEC2Instance\",\n      \"action\": \"aws:changeInstanceState\",\n      \"description\": \"Terminates the cloned EC2 instance after replacing root EBS volume\",\n      \"nextStep\": \"cleanupCreatedIsolatedSecurityGroup\",\n      \"maxAttempts\": 3,\n      \"timeoutSeconds\": 300,\n      \"inputs\": {\n        \"InstanceIds\": [\n          \"{{getClonedInstanceId.ClonedInstanceId}}\"\n        ],\n        \"CheckStateOnly\": false,\n        \"DesiredState\": \"terminated\"\n      }\n    },\n    {\n      \"name\": \"cleanupCreatedIsolatedSecurityGroup\",\n      \"action\": \"aws:executeScript\",\n      \"description\": \"Deletes the isolated security group if it was made for handling domain-joined instances\",\n      \"onFailure\": \"Abort\",\n      \"isEnd\": true,\n      \"inputs\": {\n        \"Runtime\": \"python3.8\",\n        \"Handler\": \"checkStepDetails.deleteCreatedSecurityGroup_handler\",\n        \"Attachment\": \"migrate-xen-to-nitro-python.zip\",\n        \"InputPayload\": {\n          \"ChildAutomationId\": \"{{cloneTargetInstanceAndMigrateToNitro.ExecutionId}}\",\n          \"StepName\": \"createIsolatedSecurityGroup\"\n        }\n      },\n      \"outputs\": [\n        {\n          \"Name\": \"Output_Message\",\n          \"Selector\": \"$.Payload.output_message\",\n          \"Type\": \"String\"\n        }\n      ]\n    }\n  ],\n  \"outputs\": [\n    \"replaceRootEbsVolumes.Disclaimer\",\n    \"getClonedInstanceId.ClonedInstanceId\",\n    \"getBlockDeviceMappings.table_block_dev_mapping_cloned_instance\",\n    \"getBlockDeviceMappings.table_block_dev_mapping_target_instance\"\n  ],\n  \"files\": {\n    \"migrate-xen-to-nitro-python.zip\": {\n      \"checksums\": {\n        \"sha256\": \"5158fd7811b6b59153ad075e2642a8e8569c3452d3b57175c1b02d4d9e72425f\"\n      }\n    }\n  }\n}",
  "CreatedDate": "2023-06-26T20:06:41.894Z",
  "DisplayName": null,
  "DocumentFormat": {
    "Value": "JSON"
  },
  "DocumentType": {
    "Value": "Automation"
  },
  "DocumentVersion": "1",
  "Name": "AWSSupport-MigrateXenToNitroWindows",
  "Requires": [],
  "ReviewStatus": null,
  "Status": {
    "Value": "Active"
  },
  "StatusInformation": null,
  "VersionName": null,
  "ResponseMetadata": {
    "RequestId": "82e056ca-37df-4b5f-91aa-3e648d3ffdea",
    "Metadata": {},
    "ChecksumAlgorithm": 0,
    "ChecksumValidationStatus": 0
  },
  "ContentLength": 39701,
  "HttpStatusCode": 200,
  "LoggedAt": "2023-06-27T07:13:35.8336506+00:00"
}
