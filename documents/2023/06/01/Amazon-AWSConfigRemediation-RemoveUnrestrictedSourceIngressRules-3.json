{
  "AttachmentsContent": [],
  "Content": "{\n  \"schemaVersion\" : \"0.3\",\n  \"description\" : \"### Document Name - AWSConfigRemediation-RemoveUnrestrictedSourceIngressRules\\n\\n## What does this document do?\\nThis runbook removes all ingress rules from the security group you specify that allow traffic from all source addresses using the [RevokeSecurityGroupIngress](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_RevokeSecurityGroupIngress.html) API.\\n\\n\\n## Input Parameters\\n* SecurityGroupId: (Required) The ID of the security group that you want to remove ingress rules that allow traffic from all source addresses from.\\n* AutomationAssumeRole: (Required) The Amazon Resource Name (ARN) of the AWS Identity and Access Management (IAM) role that allows Systems Manager Automation to perform the actions on your behalf.\\n\\n## Output Parameters\\n* RemoveUnrestrictedIngressRulesAndVerify.Response - The standard HTTP response from the RevokeSecurityGroupIngress API.\\n\",\n  \"assumeRole\" : \"{{ AutomationAssumeRole }}\",\n  \"parameters\" : {\n    \"AutomationAssumeRole\" : {\n      \"type\" : \"String\",\n      \"description\" : \"(Required) The Amazon Resource Name (ARN) of the AWS Identity and Access Management (IAM) role that allows Systems Manager Automation to perform the actions on your behalf.\",\n      \"allowedPattern\" : \"^arn:aws[a-z0-9-]*:iam::\\\\d{12}:role\\\\/[\\\\w-\\\\/.@+=,]{1,1017}$\"\n    },\n    \"SecurityGroupId\" : {\n      \"type\" : \"String\",\n      \"description\" : \"(Required) The ID of the security group that you want to remove ingress rules that allow traffic from all source addresses from.\",\n      \"allowedPattern\" : \"^sg-[a-z0-9]+$\"\n    }\n  },\n  \"outputs\" : [ \"RemoveUnrestrictedIngressRulesAndVerify.Response\" ],\n  \"mainSteps\" : [ {\n    \"name\" : \"RemoveUnrestrictedIngressRulesAndVerify\",\n    \"action\" : \"aws:executeScript\",\n    \"timeoutSeconds\" : 600,\n    \"isEnd\" : true,\n    \"description\" : \"## RemoveUnrestrictedIngressRulesAndVerify\\nRemoves all ingress rules that allow traffic from all source addresses from the security group you specified in the SecurityGroupId parameter and verifies successful rules removal.\\n## Outputs\\n* Response: The standard HTTP response from the RevokeSecurityGroupIngress API.\\n\",\n    \"inputs\" : {\n      \"Runtime\" : \"python3.7\",\n      \"Handler\" : \"remove_sg_unrestricted_ingress_rules\",\n      \"InputPayload\" : {\n        \"SecurityGroupId\" : \"{{ SecurityGroupId }}\"\n      },\n      \"Script\" : \"import boto3\\ndef remove_unrestricted_ingress_rules_ipv4(ec2, security_group_id):\\n  paginator = ec2.get_paginator('describe_security_groups')\\n  response_iterator = paginator.paginate(\\n  Filters=[ {'Name': 'ip-permission.cidr', 'Values': [ '0.0.0.0/0' ] },],\\n  GroupIds=[security_group_id]\\n  )\\n\\n  ip_permissions = []\\n  for sgs in response_iterator:\\n    for sg in sgs.get('SecurityGroups'):\\n      for ip in sg.get('IpPermissions'):\\n        for rule in ip.get('IpRanges'):\\n          if(rule['CidrIp'] == '0.0.0.0/0'):\\n            permissions_dict = {'IpProtocol': ip['IpProtocol'], 'IpRanges': [{'CidrIp': '0.0.0.0/0'}]}\\n            if not ip.get(\\\"FromPort\\\") is None:\\n              permissions_dict[\\\"FromPort\\\"] = ip[\\\"FromPort\\\"]\\n            if not ip.get(\\\"ToPort\\\") is None:\\n              permissions_dict[\\\"ToPort\\\"] = ip[\\\"ToPort\\\"]\\n            ip_permissions.append(permissions_dict)\\n  if ip_permissions:\\n    return ec2.revoke_security_group_ingress(GroupId=security_group_id, IpPermissions=ip_permissions)\\n\\ndef remove_unrestricted_ingress_rules_ipv6(ec2, security_group_id):\\n    paginator = ec2.get_paginator('describe_security_groups')\\n    response_iterator = paginator.paginate(\\n    Filters=[ {'Name': 'ip-permission.ipv6-cidr', 'Values': [ '::/0' ] },],\\n    GroupIds=[security_group_id]\\n    )\\n\\n    ip_permissions = []\\n    for sgs in response_iterator:\\n      for sg in sgs.get('SecurityGroups'):\\n        for ip in sg.get('IpPermissions'):\\n          for rule in ip.get('Ipv6Ranges'):\\n            if(rule['CidrIpv6'] == '::/0'):\\n              permissions_dict = {'IpProtocol': ip['IpProtocol'], 'Ipv6Ranges': [{'CidrIpv6': '::/0'}]}\\n              if not ip.get(\\\"FromPort\\\") is None:\\n                permissions_dict[\\\"FromPort\\\"] = ip[\\\"FromPort\\\"]\\n              if not ip.get(\\\"ToPort\\\") is None:\\n                permissions_dict[\\\"ToPort\\\"] = ip[\\\"ToPort\\\"]\\n              ip_permissions.append(permissions_dict)\\n    if ip_permissions:\\n        return ec2.revoke_security_group_ingress(GroupId=security_group_id, IpPermissions=ip_permissions)\\n\\ndef verify_sg_unrestricted_rules_removed(ec2, security_group_id):\\n    error_message = f\\\"Verification Failed. Security Group {security_group_id} unrestricted ingress rules not removed \\\"\\n\\n    unrestricted_ingress_rules_ipv4 = ec2.describe_security_groups(GroupIds=[ security_group_id ], Filters=[  {'Name': 'ip-permission.cidr','Values': ['0.0.0.0/0' ]} ])\\n    if unrestricted_ingress_rules_ipv4['SecurityGroups']:\\n      raise Exception(error_message)\\n\\n    unrestricted_ingress_rules_ipv6 = ec2.describe_security_groups(GroupIds=[ security_group_id ], Filters=[ {'Name': 'ip-permission.ipv6-cidr','Values': ['::/0' ]} ])\\n    if unrestricted_ingress_rules_ipv6['SecurityGroups']:\\n      raise Exception(error_message)\\n\\ndef remove_sg_unrestricted_ingress_rules(event, context):\\n    \\n    ec2 = boto3.client('ec2')\\n    security_group_id = event['SecurityGroupId']\\n    ipv4_response = remove_unrestricted_ingress_rules_ipv4(ec2, security_group_id)\\n    ipv6_response = remove_unrestricted_ingress_rules_ipv6(ec2, security_group_id)\\n    \\n    verify_sg_unrestricted_rules_removed(ec2, security_group_id)\\n\\n    response = []\\n    if ipv4_response:\\n      response.append(ipv4_response)\\n    if ipv6_response:\\n      response.append(ipv6_response)\\n    return response\"\n    },\n    \"outputs\" : [ {\n      \"Name\" : \"Response\",\n      \"Selector\" : \"$.Payload\",\n      \"Type\" : \"MapList\"\n    } ]\n  } ]\n}",
  "CreatedDate": "2023-04-17T15:08:33.677Z",
  "DisplayName": null,
  "DocumentFormat": {
    "Value": "JSON"
  },
  "DocumentType": {
    "Value": "Automation"
  },
  "DocumentVersion": "3",
  "Name": "AWSConfigRemediation-RemoveUnrestrictedSourceIngressRules",
  "Requires": [],
  "ReviewStatus": null,
  "Status": {
    "Value": "Active"
  },
  "StatusInformation": null,
  "VersionName": null,
  "ResponseMetadata": {
    "RequestId": "abe727c3-c654-4264-ba21-87f5d3d6817c",
    "Metadata": {},
    "ChecksumAlgorithm": 0,
    "ChecksumValidationStatus": 0
  },
  "ContentLength": 6382,
  "HttpStatusCode": 200,
  "LoggedAt": "2023-06-01T07:11:22.78859+00:00"
}
