{
  "AttachmentsContent": [],
  "Content": "{\n  \"description\" : \"Create Amazon Workspace. By default, only one WorkSpace per user per directory is allowed.\",\n  \"schemaVersion\" : \"0.3\",\n  \"assumeRole\" : \"{{ AutomationAssumeRole }}\",\n  \"parameters\" : {\n    \"DirectoryId\" : {\n      \"type\" : \"String\",\n      \"description\" : \"(Required) The identifier of the Directory Service directory for the WorkSpace.\",\n      \"allowedPattern\" : \"^d-[0-9a-f]{8,63}$\"\n    },\n    \"UserName\" : {\n      \"type\" : \"String\",\n      \"description\" : \"(Required) The user name of the user for the WorkSpace. This user name must exist in the Directory Service directory for the WorkSpace.\",\n      \"allowedPattern\" : \"[\\\\w\\\\-+.]+(@[a-zA-Z0-9.\\\\-]+\\\\.[a-zA-Z]+)?\"\n    },\n    \"BundleId\" : {\n      \"type\" : \"String\",\n      \"description\" : \"(Required) The identifier of the bundle for the WorkSpace.\",\n      \"allowedPattern\" : \"^wsb-[0-9a-z]{8,63}$\"\n    },\n    \"VolumeEncryptionKey\" : {\n      \"type\" : \"String\",\n      \"description\" : \"(Optional) The symmetric KMS key used to encrypt data stored on your WorkSpace.\",\n      \"default\" : \"\",\n      \"allowedPattern\" : \"[a-f0-9-]+$|^$|^arn:aws:kms:([a-zA-Z0-9-]*):\\\\d{12}:key\\\\/[0-9a-z\\\\+\\\\-]{1,64}$|^(.*)alias\\\\/[a-zA-Z0-9\\\\/_-]+$|^alias\\\\/[a-zA-Z0-9\\\\/_-]+$\"\n    },\n    \"UserVolumeEncryptionEnabled\" : {\n      \"type\" : \"Boolean\",\n      \"description\" : \"(Optional) Indicates whether the data stored on the user volume is encrypted.\",\n      \"allowedValues\" : [ true, false ],\n      \"default\" : false\n    },\n    \"RootVolumeEncryptionEnabled\" : {\n      \"type\" : \"Boolean\",\n      \"description\" : \"(Optional) Indicates whether the data stored on the root volume is encrypted.\",\n      \"allowedValues\" : [ true, false ],\n      \"default\" : false\n    },\n    \"RunningMode\" : {\n      \"type\" : \"String\",\n      \"description\" : \"(Optional) (WorkspaceProperties) The running mode of the WorkSpace.\",\n      \"allowedValues\" : [ \"ALWAYS_ON\", \"AUTO_STOP\", \"\" ],\n      \"default\" : \"\"\n    },\n    \"RunningModeAutoStopTimeoutInMinutes\" : {\n      \"type\" : \"Integer\",\n      \"description\" : \"(Optional) (WorkspaceProperties) The time after a user logs off when WorkSpaces are automatically stopped - Configured in 60-minute intervals.\",\n      \"default\" : 0,\n      \"allowedPattern\" : \"^$|[0-9]+$\"\n    },\n    \"RootVolumeSizeGib\" : {\n      \"type\" : \"Integer\",\n      \"description\" : \"(Optional) (WorkspaceProperties) The size of the root volume for the WorkSpace.\",\n      \"default\" : 0,\n      \"allowedPattern\" : \"^$|^\\\\d{1,4}$\"\n    },\n    \"UserVolumeSizeGib\" : {\n      \"type\" : \"Integer\",\n      \"description\" : \"(Optional) (WorkspaceProperties) The size of the user storage for the WorkSpace.\",\n      \"default\" : 0,\n      \"allowedPattern\" : \"^$|^\\\\d{1,4}$\"\n    },\n    \"ComputeTypeName\" : {\n      \"type\" : \"String\",\n      \"description\" : \"(Optional) (WorkspaceProperties) The compute type for the WorkSpace.\",\n      \"allowedValues\" : [ \"VALUE\", \"STANDARD\", \"PERFORMANCE\", \"POWER\", \"GRAPHICS\", \"POWERPRO\", \"GRAPHICSPRO\", \"\" ],\n      \"default\" : \"\"\n    },\n    \"Tags\" : {\n      \"type\" : \"String\",\n      \"description\" : \"(Optional) The tags for the WorkSpace. (Example- [{\\\"Key\\\":\\\"string\\\", \\\"Value\\\":\\\"string\\\"},....])\",\n      \"default\" : \"[]\",\n      \"allowedPattern\" : \"^$|(.+?):(.+?)(?=(?:[^\\\\s]+:)|(?:$))|\\\\[]\"\n    },\n    \"AutomationAssumeRole\" : {\n      \"type\" : \"AWS::IAM::Role::Arn\",\n      \"description\" : \"(Optional) The ARN of the role that allows the document to perform the actions on your behalf\",\n      \"default\" : null,\n      \"allowedPattern\" : \"^$|arn:(aws[a-zA-Z-]*)?:iam::\\\\d{12}:role\\\\/?[a-zA-Z_0-9+=,.@\\\\-_\\\\/]+\"\n    }\n  },\n  \"mainSteps\" : [ {\n    \"name\" : \"CreateWorkspace\",\n    \"timeoutSeconds\" : 600,\n    \"action\" : \"aws:executeScript\",\n    \"description\" : \"Creates the Workspace\",\n    \"onFailure\" : \"Abort\",\n    \"inputs\" : {\n      \"Runtime\" : \"python3.8\",\n      \"Handler\" : \"createWorkspace\",\n      \"InputPayload\" : {\n        \"DirectoryId\" : \"{{ DirectoryId }}\",\n        \"UserName\" : \"{{ UserName }}\",\n        \"BundleId\" : \"{{ BundleId }}\",\n        \"VolumeEncryptionKey\" : \"{{ VolumeEncryptionKey }}\",\n        \"UserVolumeEncryptionEnabled\" : \"{{ UserVolumeEncryptionEnabled }}\",\n        \"RootVolumeEncryptionEnabled\" : \"{{ RootVolumeEncryptionEnabled }}\",\n        \"RunningMode\" : \"{{ RunningMode }}\",\n        \"RunningModeAutoStopTimeoutInMinutes\" : \"{{ RunningModeAutoStopTimeoutInMinutes }}\",\n        \"RootVolumeSizeGib\" : \"{{ RootVolumeSizeGib }}\",\n        \"UserVolumeSizeGib\" : \"{{ UserVolumeSizeGib }}\",\n        \"ComputeTypeName\" : \"{{ ComputeTypeName }}\",\n        \"Tags\" : \"{{ Tags }}\"\n      },\n      \"Script\" : \"import json\\nimport boto3\\nclient_ws = boto3.client(\\\"workspaces\\\")\\ndef defineWorkspacePropField(workspaceJson):\\n  if \\\"WorkspaceProperties\\\" in workspaceJson:\\n    return workspaceJson\\n  else:\\n    workspaceJson[\\\"WorkspaceProperties\\\"] = {}\\n  return workspaceJson\\ndef createWorkspace(events, context):\\n  successful = True\\n  msg = \\\"Success\\\"\\n  errorCode = \\\"\\\"\\n  workspaceId = \\\"\\\"\\n\\n  # Building the request\\n\\n  print(f\\\"Events: {events}\\\")\\n  workspaceJson = {\\n      \\\"DirectoryId\\\": events[\\\"DirectoryId\\\"],\\n      \\\"UserName\\\": events[\\\"UserName\\\"],\\n      \\\"BundleId\\\": events[\\\"BundleId\\\"]\\n  }\\n\\n  if events[\\\"VolumeEncryptionKey\\\"]:\\n    workspaceJson[\\\"VolumeEncryptionKey\\\"] = events[\\\"VolumeEncryptionKey\\\"]\\n\\n  if events[\\\"UserVolumeEncryptionEnabled\\\"]:\\n    workspaceJson[\\\"UserVolumeEncryptionEnabled\\\"] = events[\\n    \\\"UserVolumeEncryptionEnabled\\\"\\n    ]\\n\\n  if events[\\\"RootVolumeEncryptionEnabled\\\"]:\\n    workspaceJson[\\\"RootVolumeEncryptionEnabled\\\"] = events[\\n    \\\"RootVolumeEncryptionEnabled\\\"\\n    ]\\n\\n  if events[\\\"RunningMode\\\"]:\\n    workspaceJson = defineWorkspacePropField(workspaceJson)\\n    workspaceJson[\\\"WorkspaceProperties\\\"][\\\"RunningMode\\\"] = events[\\n    \\\"RunningMode\\\"\\n    ]\\n\\n  if events[\\\"RunningModeAutoStopTimeoutInMinutes\\\"] > 0:\\n    workspaceJson = defineWorkspacePropField(workspaceJson)\\n    workspaceJson[\\\"WorkspaceProperties\\\"][\\n    \\\"RunningModeAutoStopTimeoutInMinutes\\\"\\n    ] = events[\\\"RunningModeAutoStopTimeoutInMinutes\\\"]\\n\\n  if events[\\\"RootVolumeSizeGib\\\"] > 0:\\n    workspaceJson = defineWorkspacePropField(workspaceJson)\\n    workspaceJson[\\\"WorkspaceProperties\\\"][\\\"RootVolumeSizeGib\\\"] = events[\\n    \\\"RootVolumeSizeGib\\\"\\n    ]\\n\\n  if events[\\\"UserVolumeSizeGib\\\"] > 0:\\n    workspaceJson = defineWorkspacePropField(workspaceJson)\\n    workspaceJson[\\\"WorkspaceProperties\\\"][\\\"UserVolumeSizeGib\\\"] = events[\\n    \\\"UserVolumeSizeGib\\\"\\n    ]\\n\\n  if events[\\\"ComputeTypeName\\\"]:\\n    workspaceJson = defineWorkspacePropField(workspaceJson)\\n    workspaceJson[\\\"WorkspaceProperties\\\"][\\\"ComputeTypeName\\\"] = events[\\n    \\\"ComputeTypeName\\\"\\n    ]\\n\\n  tags = json.loads(events[\\\"Tags\\\"])\\n  if tags:\\n    workspaceJson[\\\"Tags\\\"] = tags\\n\\n  try:\\n    response = client_ws.create_workspaces(Workspaces=[workspaceJson])\\n\\n    if response[\\\"PendingRequests\\\"]:\\n      workspaceId = response[\\\"PendingRequests\\\"][0][\\\"WorkspaceId\\\"]\\n\\n    elif response[\\\"FailedRequests\\\"]:\\n      msg = str(response[\\\"FailedRequests\\\"][0][\\\"ErrorMessage\\\"])\\n      errorCode = str(response[\\\"FailedRequests\\\"][0][\\\"ErrorCode\\\"])\\n      successful = False\\n\\n\\n  except Exception as e:\\n    msg = str(e)\\n    successful = False\\n\\n  if not successful:\\n    raise Exception(\\n      \\\"Unable to create the workspace errorCode: '{}', \\\"\\n      \\\"error message: '{}'\\\".format(errorCode, msg)\\n    )\\n  return {\\\"workspace_id\\\": workspaceId}\"\n    },\n    \"outputs\" : [ {\n      \"Name\" : \"WorkspaceId\",\n      \"Selector\" : \"$.Payload.workspace_id\",\n      \"Type\" : \"String\"\n    } ]\n  }, {\n    \"name\" : \"verifyWorkspace\",\n    \"action\" : \"aws:waitForAwsResourceProperty\",\n    \"description\" : \"Verifies availability of the Workspace\",\n    \"onFailure\" : \"Abort\",\n    \"timeoutSeconds\" : 1500,\n    \"inputs\" : {\n      \"Service\" : \"workspaces\",\n      \"Api\" : \"DescribeWorkspaces\",\n      \"WorkspaceIds\" : [ \"{{CreateWorkspace.WorkspaceId}}\" ],\n      \"PropertySelector\" : \"$.Workspaces[0].State\",\n      \"DesiredValues\" : [ \"AVAILABLE\" ]\n    }\n  } ],\n  \"outputs\" : [ \"CreateWorkspace.WorkspaceId\" ]\n}",
  "CreatedDate": "2023-03-14T16:06:00.689Z",
  "DisplayName": null,
  "DocumentFormat": {
    "Value": "JSON"
  },
  "DocumentType": {
    "Value": "Automation"
  },
  "DocumentVersion": "1",
  "Name": "AWS-CreateWorkspace",
  "Requires": [],
  "ReviewStatus": null,
  "Status": {
    "Value": "Active"
  },
  "StatusInformation": null,
  "VersionName": null,
  "ResponseMetadata": {
    "RequestId": "d22118d6-4ffd-4787-95e0-39b3d5321bdf",
    "Metadata": {},
    "ChecksumAlgorithm": 0,
    "ChecksumValidationStatus": 0
  },
  "ContentLength": 9168,
  "HttpStatusCode": 200,
  "LoggedAt": "2023-05-26T07:11:02.6948211+00:00"
}
