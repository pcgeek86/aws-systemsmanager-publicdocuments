{
  "AttachmentsContent": [],
  "Content": "{\n  \"description\" : \"Tutorial: Configuring SSL/TLS with Amazon Linux\\n===\\n\\nThis procedure takes you through the process of setting up TLS on Amazon Linux with a self-signed digital\\ncertificate.\\n\\nNote:  A self-signed certificate is acceptable for testing but not production. If you expose your self-signed\\ncertificate to the internet, visitors to your site are greeted by security warnings.\\n\\nPre-requisites\\n---\\n\\nTo run the following Automation document, you must have permissions to\\n* Run automation workflows,\\n* Call the EC2 ```DescribeSecurityGroups``` and ```AuthorizeSecurityGroupIngress``` API actions\\n\\nThe Automation workflow runs in the context of the current Amazon Identity and Access Management (IAM) user.\\n\\nAdditionally, you must run the Automation document [```AWS-InstallALAMPServer-AL```](https://console.aws.amazon.com/systems-manager/documents/AWS-InstallALAMPServer-AL/description)\\nbefore using this document. If the stack `LAMPStack-AL2` has not been created, it will be automatically created.\\n\\nOutputs\\n---\\n\\nOnce the Automation has completed, you will be able to use HTTPS to connect to your web server by navigating to the public DNS address (or the public IP address) of the launched instance. For example:\\n\\n>https://my.public.dns.amazonaws.com/\\n\\nCleanup\\n---\\n\\nTo remove resources created by this Automation document. Navigate to the [CloudFormation console](https://console.aws.amazon.com/cloudformation/home) and delete the stack created by the preceding Automation document. \\n\\n*Provide feedback [here](https://docs.aws.amazon.com/forms/aws-doc-feedback?feedback_destination_id=fdb9de10-9bb3-4e90-b330-df8c2533c9dd&topic_url=http://docs.aws.amazon.com/AutomatedTutorials/AWSDocs-Configure-SSL-TLS-AL).*\",\n  \"mainSteps\" : [ {\n    \"action\" : \"aws:assertAwsResourceProperty\",\n    \"inputs\" : {\n      \"Api\" : \"DescribeStacks\",\n      \"DesiredValues\" : [ \"CREATE_COMPLETE\" ],\n      \"PropertySelector\" : \"$.Stacks[0].StackStatus\",\n      \"Service\" : \"cloudformation\",\n      \"StackName\" : \"LAMPStack-AL\"\n    },\n    \"name\" : \"checkForCloudFormationStack\",\n    \"nextStep\" : \"outputPublicDNS\",\n    \"onFailure\" : \"step:RunInstallALAMPServerAL\"\n  }, {\n    \"action\" : \"aws:executeAutomation\",\n    \"inputs\" : {\n      \"DocumentName\" : \"AWSDocs-InstallALAMPServer-AL\"\n    },\n    \"maxAttempts\" : 3,\n    \"name\" : \"RunInstallALAMPServerAL\",\n    \"nextStep\" : \"outputPublicDNS\",\n    \"onFailure\" : \"Abort\",\n    \"timeoutSeconds\" : 3600\n  }, {\n    \"action\" : \"aws:runCommand\",\n    \"description\" : \"**Output the public DNS address for the launched EC2 instance**\\n\\nThis step outputs the public DNS address for the EC2 instance launched. You can use this public DNS address to connect to the AL2 instance once the Automation workflow has completed. Select the radio button next to the Step execution ID to display the public DNS address of the EC2 instance.\",\n    \"inputs\" : {\n      \"Comment\" : \"Outputting public DNS address of EC2 instance\",\n      \"DocumentName\" : \"AWS-RunShellScript\",\n      \"Parameters\" : {\n        \"commands\" : [ \"curl -fsq http://169.254.169.254/latest/meta-data/public-hostname\" ],\n        \"executionTimeout\" : \"3600\",\n        \"workingDirectory\" : \"\"\n      },\n      \"Targets\" : [ {\n        \"Key\" : \"tag:Name\",\n        \"Values\" : [ \"Automation-LAMPStack-AL\" ]\n      } ]\n    },\n    \"name\" : \"outputPublicDNS\"\n  }, {\n    \"action\" : \"aws:executeAwsApi\",\n    \"description\" : \"**Determine the EC2 VPC Security Group ID**\\n\\nIn order to add port 443 to the allowed ingress rules in the EC2 instance created by the LAMP stack CloudFormation template,\\nyou must determine the GroupId of the ingress rule since it won't be in the default VPC.\",\n    \"inputs\" : {\n      \"Api\" : \"DescribeSecurityGroups\",\n      \"Filters\" : [ {\n        \"Name\" : \"group-name\",\n        \"Values\" : [ \"Automation-LAMPStack-AL-HTTP\" ]\n      } ],\n      \"Service\" : \"ec2\"\n    },\n    \"name\" : \"GetGroupId\",\n    \"outputs\" : [ {\n      \"Name\" : \"EC2GroupId\",\n      \"Selector\" : \"$.SecurityGroups[0].GroupId\",\n      \"Type\" : \"String\"\n    } ]\n  }, {\n    \"action\" : \"aws:executeAwsApi\",\n    \"description\" : \"** Allow Port 443 ingress**\\n\\nThis step adds port 443 to the allowed ingress rules for the VPC created by the LAMP stack CloudFormation template.\",\n    \"inputs\" : {\n      \"Api\" : \"AuthorizeSecurityGroupIngress\",\n      \"CidrIp\" : \"0.0.0.0/0\",\n      \"FromPort\" : 443,\n      \"GroupId\" : \"{{ GetGroupId.EC2GroupId }}\",\n      \"IpProtocol\" : \"tcp\",\n      \"Service\" : \"ec2\",\n      \"ToPort\" : 443\n    },\n    \"name\" : \"AddIngressRule\"\n  }, {\n    \"action\" : \"aws:runCommand\",\n    \"description\" : \"**Verify that Apache is running and enabled.**\\n\\nThis step verifies that Apache has been enabled on the AL2 stack. \",\n    \"inputs\" : {\n      \"Comment\" : \"Verifying that Apache HTTPd is enabled\",\n      \"DocumentName\" : \"AWS-RunShellScript\",\n      \"Parameters\" : {\n        \"commands\" : [ \"sudo service httpd enable\", \"sudo service httpd start\" ],\n        \"executionTimeout\" : \"3600\",\n        \"workingDirectory\" : \"\"\n      },\n      \"Targets\" : [ {\n        \"Key\" : \"tag:Name\",\n        \"Values\" : [ \"Automation-LAMPStack-AL\" ]\n      } ]\n    },\n    \"name\" : \"verifyHTTPdEnabled\"\n  }, {\n    \"action\" : \"aws:runCommand\",\n    \"description\" : \"**Install mod_ssl**\\n\\nThis step updates any dependencies, installs `mod24_ssl`, and restarts the httpd. \",\n    \"inputs\" : {\n      \"Comment\" : \"Installing dependencies\",\n      \"DocumentName\" : \"AWS-RunShellScript\",\n      \"Parameters\" : {\n        \"commands\" : [ \"echo \\\"Cleaning up house...\\\"\", \"sudo yum-complete-transaction -y\", \"echo \\\"Updating any outstanding packages\\\"\", \"sudo yum update -y\", \"echo \\\"Installing mod_ssl\\\"\", \"sudo yum install -y mod24_ssl\", \"sudo service httpd restart\" ],\n        \"executionTimeout\" : \"3600\",\n        \"workingDirectory\" : \"\"\n      },\n      \"Targets\" : [ {\n        \"Key\" : \"tag:Name\",\n        \"Values\" : [ \"Automation-LAMPStack-AL\" ]\n      } ]\n    },\n    \"name\" : \"InstallDependencies\"\n  }, {\n    \"action\" : \"aws:runCommand\",\n    \"description\" : \"**Verify that HTTPS has been turned on**\\n\\nBecause the HTTPd configuration has been modified, it's important that the result of those modifications\\nbe verified. Using curl, the local configuration is checked to make sure that at least local TLS is turned on\\nand working properly.\\n\\nWhen successful, the output of this step should contain the HTML content of the demonstration page for Apache.\",\n    \"inputs\" : {\n      \"Comment\" : \"Verifying SSL has been enabled.\",\n      \"DocumentName\" : \"AWS-RunShellScript\",\n      \"Parameters\" : {\n        \"commands\" : [ \"curl -k https://localhost/\" ]\n      },\n      \"Targets\" : [ {\n        \"Key\" : \"tag:Name\",\n        \"Values\" : [ \"Automation-LAMPStack-AL\" ]\n      } ]\n    },\n    \"isEnd\" : true,\n    \"name\" : \"VerifyHTTPSLocally\"\n  }, {\n    \"action\" : \"aws:deleteStack\",\n    \"description\" : \"**Remove the CloudFormation Template and Associated Resources**\\n\\nThis step deletes the CloudFormation stack and the associated resources originally launched using the Automation document ```AWS-InstallALAMPServer-AL```.\\n\\n**Note**\\n\\nIf you run this step, the EC2 instance that was launched will be terminated.\",\n    \"inputs\" : {\n      \"StackName\" : \"LAMPStack-AL2\"\n    },\n    \"isEnd\" : true,\n    \"maxAttempts\" : 1,\n    \"name\" : \"deleteStackOnCompletion\"\n  } ],\n  \"schemaVersion\" : \"0.3\"\n}",
  "CreatedDate": "2021-05-07T22:32:50.134Z",
  "DisplayName": null,
  "DocumentFormat": {
    "Value": "JSON"
  },
  "DocumentType": {
    "Value": "Automation"
  },
  "DocumentVersion": "3",
  "Name": "AWSDocs-Configure-SSL-TLS-AL",
  "Requires": [],
  "ReviewStatus": null,
  "Status": {
    "Value": "Active"
  },
  "StatusInformation": null,
  "VersionName": null,
  "ResponseMetadata": {
    "RequestId": "ae39ad2f-27f5-4c5a-acf9-4cac7bb41a55",
    "Metadata": {},
    "ChecksumAlgorithm": 0,
    "ChecksumValidationStatus": 0
  },
  "ContentLength": 8089,
  "HttpStatusCode": 200,
  "LoggedAt": "2022-08-27T07:13:26.9025869+00:00"
}
