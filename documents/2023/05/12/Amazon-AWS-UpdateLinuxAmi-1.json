{
  "AttachmentsContent": [],
  "Content": "{\n  \"schemaVersion\": \"0.3\",\n  \"description\": \"Updates AMI with Linux distribution packages and Amazon software. For details,see https://docs.aws.amazon.com/systems-manager/latest/userguide/automation-awsdocs-linux.html\",\n  \"assumeRole\": \"{{AutomationAssumeRole}}\",\n  \"parameters\": {\n    \"SourceAmiId\": {\n      \"type\": \"String\",\n      \"description\": \"(Required) The source Amazon Machine Image ID.\"\n    },\n    \"IamInstanceProfileName\": {\n      \"type\": \"String\",\n      \"description\": \"(Required) The instance profile that enables Systems Manager (SSM) to manage the instance.\",\n      \"default\": \"ManagedInstanceProfile\"\n    },\n    \"AutomationAssumeRole\": {\n      \"type\": \"String\",\n      \"description\": \"(Required) The ARN of the role that allows Automation to perform the actions on your behalf.\",\n      \"default\": \"arn:aws:iam::{{global:ACCOUNT_ID}}:role/AutomationServiceRole\"\n    },\n    \"TargetAmiName\": {\n      \"type\": \"String\",\n      \"description\": \"(Optional) The name of the new AMI that will be created. Default is a system-generated string including the source AMI id, and the creation time and date.\",\n      \"default\": \"UpdateLinuxAmi_from_{{SourceAmiId}}_on_{{global:DATE_TIME}}\"\n    },\n    \"InstanceType\": {\n      \"type\": \"String\",\n      \"description\": \"(Optional) Type of instance to launch as the workspace host. Instance types vary by region. Default is t3.micro.\",\n      \"default\": \"t3.micro\"\n    },\n    \"SecurityGroupIds\": {\n      \"type\": \"StringList\",\n      \"description\": \"(Optional) A comma separated list of security group IDs with the required Inbound and Outbound connectivity rules.\",\n      \"allowedPattern\": \"^sg-[a-z0-9]{8,17}$\",\n      \"default\": []\n    },\n    \"SubnetId\": {\n      \"type\": \"String\",\n      \"description\": \"(Optional) Specify the SubnetId if you want to launch EC2 instance in a specific subnet.\",\n      \"default\": \"\"\n    },\n    \"PreUpdateScript\": {\n      \"type\": \"String\",\n      \"description\": \"(Optional) URL of a script to run before updates are applied. Default (\\\"none\\\") is to not run a script.\",\n      \"default\": \"none\"\n    },\n    \"PostUpdateScript\": {\n      \"type\": \"String\",\n      \"description\": \"(Optional) URL of a script to run after package updates are applied. Default (\\\"none\\\") is to not run a script.\",\n      \"default\": \"none\"\n    },\n    \"IncludePackages\": {\n      \"type\": \"String\",\n      \"description\": \"(Optional) Only update these named packages. By default (\\\"all\\\"), all available updates are applied.\",\n      \"default\": \"all\"\n    },\n    \"ExcludePackages\": {\n      \"type\": \"String\",\n      \"description\": \"(Optional) Names of packages to hold back from updates, under all conditions. By default (\\\"none\\\"), no package is excluded.\",\n      \"default\": \"none\"\n    }\n  },\n  \"mainSteps\": [\n    {\n      \"name\": \"launchInstance\",\n      \"action\": \"aws:runInstances\",\n      \"maxAttempts\": 3,\n      \"timeoutSeconds\": 1200,\n      \"onFailure\": \"Abort\",\n      \"inputs\": {\n        \"ImageId\": \"{{SourceAmiId}}\",\n        \"InstanceType\": \"{{InstanceType}}\",\n        \"UserData\": \"IyEvYmluL2Jhc2gKCmZ1bmN0aW9uIGdldF9jb250ZW50cygpIHsKICAgIGlmIFsgLXggIiQod2hpY2ggY3VybCkiIF07IHRoZW4KICAgICAgICBjdXJsIC1zIC1mICIkMSIKICAgIGVsaWYgWyAteCAiJCh3aGljaCB3Z2V0KSIgXTsgdGhlbgogICAgICAgIHdnZXQgIiQxIiAtTyAtCiAgICBlbHNlCiAgICAgICAgZGllICJObyBkb3dubG9hZCB1dGlsaXR5IChjdXJsLCB3Z2V0KSIKICAgIGZpCn0KCnJlYWRvbmx5IFRPS0VOX1VSTD0iaHR0cDovLzE2OS4yNTQuMTY5LjI1NC9sYXRlc3QvYXBpL3Rva2VuIgpmdW5jdGlvbiBnZXRfY29udGVudHNfSU1EU3YyKCkgewogICAgaWYgWyAteCAiJCh3aGljaCBjdXJsKSIgXTsgdGhlbgogICAgICAgIHJlYWRvbmx5IFRPS0VOPSQoY3VybCAtcyAtZiAtWCBQVVQgLUggIlgtYXdzLWVjMi1tZXRhZGF0YS10b2tlbi10dGwtc2Vjb25kczogMjE2MDAiICIkVE9LRU5fVVJMIikKICAgICAgICBjdXJsIC1zIC1mIC1IICJYLWF3cy1lYzItbWV0YWRhdGEtdG9rZW46ICRUT0tFTiIgIiQxIgogICAgZWxpZiBbIC14ICIkKHdoaWNoIHdnZXQpIiBdOyB0aGVuCiAgICAgICAgIyB3Z2V0IGRvZXNuJ3Qgc3VwcG9ydCAtLW1ldGhvZCBmbGFnIGluIG1hbnkgY2FzZXMsIHNvIGZhbGwgYmFjayBvbiBJTURTdjEKICAgICAgICB3Z2V0ICIkMSIgLU8gLQogICAgZWxzZQogICAgICAgIGRpZSAiTm8gZG93bmxvYWQgdXRpbGl0eSAoY3VybCwgd2dldCkiCiAgICBmaQp9CgpyZWFkb25seSBJREVOVElUWV9VUkw9Imh0dHA6Ly8xNjkuMjU0LjE2OS4yNTQvMjAxNi0wNi0zMC9keW5hbWljL2luc3RhbmNlLWlkZW50aXR5L2RvY3VtZW50LyIKcmVhZG9ubHkgVFJVRV9SRUdJT049JChnZXRfY29udGVudHNfSU1EU3YyICIkSURFTlRJVFlfVVJMIiB8IGF3ayAtRlwiICcvcmVnaW9uLyB7IHByaW50ICQ0IH0nKQpyZWFkb25seSBERUZBVUxUX1JFR0lPTj0idXMtZWFzdC0xIgpyZWFkb25seSBSRUdJT049IiR7VFJVRV9SRUdJT046LSRERUZBVUxUX1JFR0lPTn0iCgpmdW5jdGlvbiBkaWUoKSB7CiAgICBlY2hvICIkQCwgZXhpdGluZy4iID4mMgogICAgZXhpdCAxCn0KCmZ1bmN0aW9uIGlzc3VlX21hdGNoKCkgewogICAgZ3JlcCAtRSAtaSAtYyAiJDEiIC9ldGMvaXNzdWUgMj4mMSAmPi9kZXYvbnVsbAogICAgWyAkPyAtZXEgMCBdICYmIGVjaG8gInRydWUiIHx8IGVjaG8gImZhbHNlIgp9CgpmdW5jdGlvbiBpc19kZWJ1bnR1KCkgewogICAgZWNobyAiJChpc3N1ZV9tYXRjaCAnRGViaWFufFVidW50dScpIgp9CgpmdW5jdGlvbiBpc19yZWRoYXQoKSB7CiAgICBpZiBbIC1mICIvZXRjL3N5c3RlbS1yZWxlYXNlIiBdIHx8CiAgICAgICAgWyAtZiAiL2V0Yy9yZWRoYXQtcmVsZWFzZSIgXTsgdGhlbgogICAgICAgIGVjaG8gInRydWUiCiAgICBlbHNlCiAgICAgICAgZWNobyAiZmFsc2UiCiAgICBmaQp9CgpmdW5jdGlvbiBpc19zdXNlKCkgewogICAgaWYgWyAtZiAiL2V0Yy9vcy1yZWxlYXNlIiBdOyB0aGVuCiAgICAgICAgeD0kKGdyZXAgLUUgLWkgLWMgInN1c2UiIC9ldGMvb3MtcmVsZWFzZSAyPi9kZXYvbnVsbCkKICAgICAgICBpZiBbICR4IC1ndCAwIF07IHRoZW4KICAgICAgICAgICAgZWNobyAidHJ1ZSIKICAgICAgICBlbHNlCiAgICAgICAgICAgIGVjaG8gImZhbHNlIgogICAgICAgIGZpCiAgICBlbHNlCiAgICAgICAgZWNobyAiZmFsc2UiCiAgICBmaQp9CgpmdW5jdGlvbiBnZXRfYXJjaCgpIHsKICAgIGlmIFsgIiQodW5hbWUgLW0pIiA9PSAieDg2XzY0IiBdOyB0aGVuCiAgICAgICAgZWNobyAiYW1kNjQiCiAgICBlbGlmIFtbICIkKHVuYW1lIC1tKSIgPX4gaVszLTZdODYgXV07IHRoZW4KICAgICAgICBlY2hvICIzODYiCiAgICBlbHNlCiAgICAgICAgZGllICJVbnN1cHBvcnRlZCBhcmNoaXRlY3R1cmUgJCh1bmFtZSAtbSkiCiAgICBmaQp9CgpmdW5jdGlvbiBnZXRfcGFja2FnZV90eXBlKCkgewogICAgaWYgWyAiJChpc19kZWJ1bnR1KSIgPT0gInRydWUiIF07IHRoZW4KICAgICAgICBlY2hvICJkZWIiCiAgICBlbGlmIFsgIiQoaXNfcmVkaGF0KSIgPT0gInRydWUiIF07IHRoZW4KICAgICAgICBlY2hvICJycG0iCiAgICBlbGlmIFsgIiQoaXNfc3VzZSkiID09ICJ0cnVlIiBdOyB0aGVuCiAgICAgICAgZWNobyAicnBtIgogICAgZmkKfQoKCmZ1bmN0aW9uIGdldF9kaXN0KCkgewogICAgaWYgWyAiJChpc19kZWJ1bnR1KSIgPT0gInRydWUiIF07IHRoZW4KICAgICAgICBlY2hvICJkZWJpYW4iCiAgICBlbGlmIFsgIiQoaXNfcmVkaGF0KSIgPT0gInRydWUiIF07IHRoZW4KICAgICAgICBlY2hvICJsaW51eCIKICAgIGVsaWYgW1sgIiQoaXNfc3VzZSkiID09ICJ0cnVlIiBdXTsgdGhlbgogICAgICAgIGVjaG8gImxpbnV4IgogICAgZWxzZQogICAgICAgIGRpZSAiVW5rbm93biBkaXN0cmlidXRpb24iCiAgICBmaQp9CgpmdW5jdGlvbiBnZXRfc3NtX2FnZW50KCkgewogICAgZWNobyAiRmV0Y2hpbmcgU1NNIEFnZW50Li4uIgogICAgZXh0ZW5zaW9uPSIkKGdldF9wYWNrYWdlX3R5cGUpIgogICAgZGlzdD0iJChnZXRfZGlzdCkiCiAgICBhcmNoPSIkKGdldF9hcmNoKSIKCiAgICBwYWNrYWdlPSJhbWF6b24tc3NtLWFnZW50LiRleHRlbnNpb24iCiAgICB1cmxfYmFzZT0iaHR0cHM6Ly9hbWF6b24tc3NtLSRSRUdJT04uczMuYW1hem9uYXdzLmNvbSIKICAgIHVybD0iJHt1cmxfYmFzZX0vbGF0ZXN0LyR7ZGlzdH1fJHthcmNofS8ke3BhY2thZ2V9IgogICAgRklMRV9TSVpFPTAKCiAgICB3aGlsZSBbICRSRVRSWV9DT1VOVCAtbHQgJE1BWF9SRVRSWV9DT1VOVCBdIDsgZG8KICAgICAgZ2V0X2NvbnRlbnRzICIkdXJsIiA+ICIkcGFja2FnZSIKCiAgICAgIGlmIFsgLWYgIiRwYWNrYWdlIiBdOyB0aGVuCiAgICAgICAgRklMRV9TSVpFPSQoZHUgLWsgJHBhY2thZ2UgfCBjdXQgLWYxKQogICAgICAgIGlmIFsgJEZJTEVfU0laRSAtZ3QgMCBdOyB0aGVuCiAgICAgICAgICBicmVhawogICAgICAgIGZpCiAgICAgIGZpCiAgICAgIFJFVFJZX0NPVU5UPSQoKFJFVFJZX0NPVU5UKzEpKTsKICAgICAgZWNobyBBd3MtSW5zdGFsbC1Tc20tQWdlbnQ6IFJldHJ5aW5nIGRvd25sb2FkIHJldHJ5Q291bnQ6ICRSRVRSWV9DT1VOVCwgZmlsZVNpemU6ICRGSUxFX1NJWkUgdXJsOiR1cmwgcGFja2FnZTokcGFja2FnZQogICAgZG9uZQoKICAgIGlmIFsgISAtZiAiJHBhY2thZ2UiIF0gfHwgWyAkRklMRV9TSVpFIC1lcSAwIF07IHRoZW4KICAgICAgICBkaWUgIkNvdWxkIG5vdCBkb3dubG9hZCB0aGUgcGFja2FnZSBmcm9tICR1cmwgYWZ0ZXIgJFJFVFJZX0NPVU5UIHJldHJpZXMiCiAgICBmaQp9CgpmdW5jdGlvbiBzdGFydF9zc21fYWdlbnQoKSB7CiAgICBlY2hvICJTdGFydGluZyBTU00gQWdlbnQuLi4iCiAgICBpZiBbIC14ICIkKHdoaWNoIHN5c3RlbWN0bCkiIF07IHRoZW4KICAgICAgICAgIHN5c3RlbWN0bCBzdGFydCBhbWF6b24tc3NtLWFnZW50CiAgICBlbGlmIFsgLXggIiQod2hpY2ggc3RhcnQpIiBdOyB0aGVuCiAgICAgICAgICBzdGFydCBhbWF6b24tc3NtLWFnZW50CiAgICBlbHNlCiAgICAgICAgICBlY2hvICJDb3VsZCBub3QgZmluZCBjb21tYW5kIHRvIHN0YXJ0IFNTTSBBZ2VudC4gU2tpcHBpbmcgQWdlbnQgc3RhcnQuIgogICAgZmkKfQoKZnVuY3Rpb24gaW5zdGFsbF9zc21fYWdlbnQoKSB7CiAgICBlY2hvICJJbnN0YWxsaW5nIFNTTSBBZ2VudC4uLiIKICAgIHdoaWxlIFsgJFJFVFJZX0NPVU5UIC1sdCAkTUFYX1JFVFJZX0NPVU5UIF0gOyBkbwogICAgICBpZiBbICIkKGlzX2RlYnVudHUpIiA9PSAidHJ1ZSIgXTsgdGhlbgogICAgICAgICMgSWYgYW4gZXhpc3RpbmcgdmVyc2lvbiBpcyBpbnN0YWxsZWQgd2l0aCBzbmFwLCBpdCB3aWxsIGJsb2NrIHVwZ3JhZGUuCiAgICAgICAgc25hcCByZW1vdmUgYW1hem9uLXNzbS1hZ2VudAogICAgICAgIGRwa2cgLWkgYW1hem9uLXNzbS1hZ2VudC5kZWIKICAgICAgZWxpZiBbICIkKGlzX3JlZGhhdCkiID09ICJ0cnVlIiBdOyB0aGVuCiAgICAgICAgeXVtIGluc3RhbGwgLS1ub2dwZ2NoZWNrIC15IGFtYXpvbi1zc20tYWdlbnQucnBtCiAgICAgIGVsaWYgWyAiJChpc19zdXNlKSIgPT0gInRydWUiIF07IHRoZW4KICAgICAgICBycG0gLS1pbnN0YWxsIGFtYXpvbi1zc20tYWdlbnQucnBtCiAgICAgIGVsc2UKICAgICAgICBkaWUgIlVua25vd24gZGlzdHJpYnV0aW9uIgogICAgICBmaQoKICAgICAgaWYgWyAteCAiJCh3aGljaCBhbWF6b24tc3NtLWFnZW50KSIgXTsgdGhlbgogICAgICAgIGJyZWFrCiAgICAgIGZpCiAgICAgIFJFVFJZX0NPVU5UPSQoKFJFVFJZX0NPVU5UKzEpKTsKICAgICAgZWNobyBBd3MtSW5zdGFsbC1Tc20tQWdlbnQ6IFJldHJ5aW5nIGluc3RhbGxhdGlvbiByZXRyeUNvdW50OiAkUkVUUllfQ09VTlQKICAgIGRvbmUKCiAgICBpZiBbICEgLXggIiQod2hpY2ggYW1hem9uLXNzbS1hZ2VudCkiIF07IHRoZW4KICAgICAgZGllICJObyBTU00gYWdlbnQgd2FzIGluc3RhbGxlZCIKICAgIGZpCn0KCmZ1bmN0aW9uIG1haW4oKSB7CiAgICBNQVhfUkVUUllfQ09VTlQ9MwogICAgUkVUUllfQ09VTlQ9MAoKICAgIGNkIC90bXAKCiAgICB3aGlsZSBbICRSRVRSWV9DT1VOVCAtbHQgJE1BWF9SRVRSWV9DT1VOVCBdIDsgZG8KICAgICAgZ2V0X3NzbV9hZ2VudAogICAgICBpbnN0YWxsX3NzbV9hZ2VudAoKICAgICAgaWYgWyAhIC14ICIkKHdoaWNoIGFtYXpvbi1zc20tYWdlbnQpIiBdOyB0aGVuCiAgICAgICAgUkVUUllfQ09VTlQ9JCgoUkVUUllfQ09VTlQrMSkpOwogICAgICAgIGVjaG8gU1NNQWdlbnQgSW5zdGFsbGF0aW9uIGZhaWxlZCAkUkVUUllfQ09VTlQgdGltZXMsIHJldHJ5aW5nLi4uCiAgICAgICAgY29udGludWUKICAgICAgZWxzZQogICAgICAgIHN0YXJ0X3NzbV9hZ2VudAogICAgICAgIGV4aXQgMAogICAgICBmaQoKICAgIGRvbmUKfQoKbWFpbiAkQCAyPiYxIHwgdGVlIC90bXAvYXdzLWluc3RhbGwtc3NtLWFnZW50LmxvZwo=\",\n        \"MinInstanceCount\": 1,\n        \"MaxInstanceCount\": 1,\n        \"IamInstanceProfileName\": \"{{IamInstanceProfileName}}\",\n        \"SubnetId\": \"{{ SubnetId }}\",\n        \"SecurityGroupIds\": \"{{SecurityGroupIds}}\"\n      }\n    },\n    {\n      \"name\": \"verifySsmInstall\",\n      \"action\": \"aws:runCommand\",\n      \"maxAttempts\": 3,\n      \"timeoutSeconds\": 1200,\n      \"onFailure\": \"Abort\",\n      \"inputs\": {\n        \"DocumentName\": \"AWS-RunShellScript\",\n        \"InstanceIds\": [\n          \"{{launchInstance.InstanceIds}}\"\n        ],\n        \"Parameters\": {\n          \"commands\": [\n            \"hostname\"\n          ]\n        }\n      }\n    },\n    {\n      \"name\": \"updateOSSoftware\",\n      \"action\": \"aws:runCommand\",\n      \"maxAttempts\": 3,\n      \"timeoutSeconds\": 3600,\n      \"onFailure\": \"Abort\",\n      \"inputs\": {\n        \"DocumentName\": \"AWS-RunShellScript\",\n        \"InstanceIds\": [\n          \"{{launchInstance.InstanceIds}}\"\n        ],\n        \"Parameters\": {\n          \"commands\": [\n            \"#!/bin/bash\",\n            \"\",\n            \"set -e\",\n            \"\",\n            \"function unhold_deb_packages() {\",\n            \"    for package in $EXCLUDE_PACKAGES; do\",\n            \"        apt-mark unhold $package\",\n            \"    done\",\n            \"}\",\n            \"function removelock_zypper_packages() {\",\n            \"    for package in $EXCLUDE_PACKAGES; do\",\n            \"        zypper removelock $package\",\n            \"    done\",\n            \"}\",\n            \"\",\n            \"function die() {\",\n            \"    if [ \\\"$(get_dist)\\\" == \\\"debian\\\" ]; then\",\n            \"        unhold_deb_packages\",\n            \"    elif [ \\\"$(get_dist)\\\" == \\\"suse\\\" ]; then\",\n            \"        removelock_zypper_packages\",\n            \"    fi\",\n            \"\",\n            \"    echo \\\"$@\\\" >&2\",\n            \"    exit 1\",\n            \"}\",\n            \"\",\n            \"function get_contents() {\",\n            \"    if [ -x \\\"$(which curl)\\\" ]; then\",\n            \"        curl -s -f \\\"$1\\\"\",\n            \"    elif [ -x \\\"$(which wget)\\\" ]; then\",\n            \"        wget \\\"$1\\\" -O -\",\n            \"    else\",\n            \"        die \\\"No download utility (curl, wget)\\\"\",\n            \"    fi\",\n            \"}\",\n            \"\",\n            \"function sanitize_inputs() {\",\n            \"    value=\\\"$(echo $@ | sed 's/,/ /g' | xargs | xargs)\\\"\",\n            \"\",\n            \"    if [ ! -z \\\"$value\\\" ] &&\",\n            \"        [ \\\"$value\\\" != \\\"none\\\" ] &&\",\n            \"        [ \\\"$value\\\" != \\\"all\\\" ]; then\",\n            \"        echo \\\"$value\\\"\",\n            \"    fi\",\n            \"}\",\n            \"\",\n            \"function echo_options() {\",\n            \"    echo \\\\\\\"\\\\$PRE_UPDATE_SCRIPT_URL\\\\\\\" == \\\\\\\"$PRE_UPDATE_SCRIPT_URL\\\\\\\"\",\n            \"    echo \\\\\\\"\\\\$POST_UPDATE_SCRIPT_URL\\\\\\\" == \\\\\\\"$POST_UPDATE_SCRIPT_URL\\\\\\\"\",\n            \"    echo \\\\\\\"\\\\$INCLUDE_PACKAGES\\\\\\\" == \\\\\\\"$INCLUDE_PACKAGES\\\\\\\"\",\n            \"    echo \\\\\\\"\\\\$EXCLUDE_PACKAGES\\\\\\\" == \\\\\\\"$EXCLUDE_PACKAGES\\\\\\\"\",\n            \"}\",\n            \"\",\n            \"function exec_cmd() {\",\n            \"    echo \\\"Invoking $@...\\\"\",\n            \"    eval \\\"$@\\\"\",\n            \"\",\n            \"    if [ $? -ne 0 ]; then\",\n            \"        die \\\"\\\"\",\n            \"    fi\",\n            \"}\",\n            \"\",\n            \"function is_debuntu() {\",\n            \"    grep -E -i -c 'Debian|Ubuntu' /etc/issue 2>&1 &>/dev/null\",\n            \"    [ $? -eq 0 ] && echo \\\"true\\\" || echo \\\"false\\\"\",\n            \"}\",\n            \"\",\n            \"function is_redhat() {\",\n            \"    if [ -f \\\"/etc/system-release\\\" ] ||\",\n            \"        [ -f \\\"/etc/redhat-release\\\" ]; then\",\n            \"        echo \\\"true\\\"\",\n            \"    else\",\n            \"        echo \\\"false\\\"\",\n            \"    fi\",\n            \"}\",\n            \"\",\n            \"function is_suse() {\",\n            \"    if type zypper > /dev/null; then\",\n            \"        echo \\\"true\\\"\",\n            \"    else\",\n            \"        echo \\\"false\\\"\",\n            \"    fi\",\n            \"}\",\n            \"\",\n            \"function get_dist() {\",\n            \"    if [ \\\"$(is_debuntu)\\\" == \\\"true\\\" ]; then\",\n            \"        echo \\\"debian\\\"\",\n            \"    elif [ \\\"$(is_redhat)\\\" == \\\"true\\\" ]; then\",\n            \"        echo \\\"redhat\\\"\",\n            \"    elif [ \\\"$(is_suse)\\\" == \\\"true\\\" ]; then\",\n            \"        echo \\\"suse\\\"\",\n            \"    else\",\n            \"        die \\\"Unknown distribution\\\"\",\n            \"    fi\",\n            \"}\",\n            \"\",\n            \"function run_hook_script() {\",\n            \"    script_url=\\\"$1\\\"\",\n            \"    tmp_file=\\\"$(mktemp)\\\"\",\n            \"\",\n            \"    echo \\\"Downloading hook script from $script_url\\\"\",\n            \"\",\n            \"    get_contents \\\"$script_url\\\" > \\\"$tmp_file\\\"\",\n            \"    chmod +x \\\"$tmp_file\\\"\",\n            \"\",\n            \"    exec_cmd \\\"$tmp_file\\\"\",\n            \"}\",\n            \"\",\n            \"function update_cli() {\",\n            \"    if [ -x \\\"$(which pip 2>/dev/null)\\\" ]; then\",\n            \"        exec_cmd \\\"pip install --upgrade awscli\\\"\",\n            \"    fi\",\n            \"}\",\n            \"\",\n            \"function apt_get_update() {\",\n            \"\",\n            \"    dpkg_flags=\\\"-o Dpkg::Options::=--force-confdef -o Dpkg::Options::=--force-confold\\\"\",\n            \"    apt_noninteractive_cmd=\\\"DEBIAN_FRONTEND=noninteractive apt-get $dpkg_flags\\\"\",\n            \"\",\n            \"    exec_cmd \\\"apt-get clean\\\"\",\n            \"    exec_cmd \\\"apt-get update\\\"\",\n            \"\",\n            \"    for package in $EXCLUDE_PACKAGES; do\",\n            \"        exec_cmd \\\"apt-mark hold $package\\\"\",\n            \"    done\",\n            \"\",\n            \"    if [ -z \\\"$INCLUDE_PACKAGES\\\" ]; then\",\n            \"        exec_cmd \\\"$apt_noninteractive_cmd -y dist-upgrade\\\"\",\n            \"    else\",\n            \"        for package in $INCLUDE_PACKAGES; do\",\n            \"            exec_cmd \\\"$apt_noninteractive_cmd -y install --only-upgrade $package\\\"\",\n            \"        done\",\n            \"    fi\",\n            \"\",\n            \"    unhold_deb_packages\",\n            \"}\",\n            \"\",\n            \"function yum_upgrade() {\",\n            \"    exec_cmd 'yum clean all'\",\n            \"\",\n            \"    yum_cmd='yum -y upgrade'\",\n            \"\",\n            \"    for package in $EXCLUDE_PACKAGES; do\",\n            \"        yum_cmd=\\\"$yum_cmd -x $package\\\"\",\n            \"    done\",\n            \"\",\n            \"    if [ ! -z \\\"$INCLUDE_PACKAGES\\\" ]; then\",\n            \"        yum_cmd=\\\"$yum_cmd $INCLUDE_PACKAGES\\\"\",\n            \"    fi\",\n            \"\",\n            \"    exec_cmd \\\"$yum_cmd\\\"\",\n            \"}\",\n            \"function zypper_upgrade() {\",\n            \"    exec_cmd 'zypper clean'\",\n            \"    zypper_cmd='zypper update -y'\",\n            \"    for package in $EXCLUDE_PACKAGES; do\",\n            \"        exec_cmd \\\"zypper addlock $package\\\"\",\n            \"    done\",\n            \"\",\n            \"    if [ ! -z \\\"$INCLUDE_PACKAGES\\\" ]; then\",\n            \"        zypper_cmd=\\\"$zypper_cmd $INCLUDE_PACKAGES\\\"\",\n            \"    fi\",\n            \"\",\n            \"    exec_cmd \\\"$zypper_cmd\\\"\",\n            \"\",\n            \"    removelock_zypper_packages\",\n            \"}\",\n            \"\",\n            \"function remove_excludes_from_includes() {\",\n            \"    if [ -z \\\"$EXCLUDE_PACKAGES\\\" ] || [ -z \\\"$INCLUDE_PACKAGES\\\" ]; then\",\n            \"        return\",\n            \"    fi\",\n            \"\",\n            \"    declare -A includes\",\n            \"    declare -A excludes\",\n            \"\",\n            \"    for package in $EXCLUDE_PACKAGES; do\",\n            \"        excludes[$package]=\\\"true\\\"\",\n            \"    done\",\n            \"\",\n            \"    for package in $INCLUDE_PACKAGES; do\",\n            \"        if [ \\\"${excludes[$package]}\\\" != \\\"true\\\" ]; then\",\n            \"            includes[$package]=\\\"true\\\"\",\n            \"        fi\",\n            \"    done\",\n            \"\",\n            \"    INCLUDE_PACKAGES=\\\"${!includes[@]}\\\"\",\n            \"}\",\n            \"\",\n            \"function update_packages() {\",\n            \"    remove_excludes_from_includes\",\n            \"\",\n            \"    if [ \\\"$(get_dist)\\\" == \\\"debian\\\" ]; then\",\n            \"        apt_get_update\",\n            \"    elif [ \\\"$(get_dist)\\\" == \\\"redhat\\\" ]; then\",\n            \"        yum_upgrade\",\n            \"    else \",\n            \"        zypper_upgrade\",\n            \"    fi\",\n            \"}\",\n            \"\",\n            \"function main() {\",\n            \"    PRE_UPDATE_SCRIPT_URL=\\\"$(sanitize_inputs {{PreUpdateScript}})\\\"\",\n            \"    POST_UPDATE_SCRIPT_URL=\\\"$(sanitize_inputs {{PostUpdateScript}})\\\"\",\n            \"    INCLUDE_PACKAGES=\\\"$(sanitize_inputs {{IncludePackages}})\\\"\",\n            \"    EXCLUDE_PACKAGES=\\\"$(sanitize_inputs {{ExcludePackages}})\\\"\",\n            \"    echo_options\",\n            \"\",\n            \"    if [ ! -z \\\"$PRE_UPDATE_SCRIPT_URL\\\" ]; then\",\n            \"        run_hook_script \\\"$PRE_UPDATE_SCRIPT_URL\\\"\",\n            \"    fi\",\n            \"\",\n            \"    update_cli\",\n            \"    update_packages\",\n            \"\",\n            \"    if [ ! -z \\\"$POST_UPDATE_SCRIPT_URL\\\" ]; then\",\n            \"        run_hook_script \\\"$POST_UPDATE_SCRIPT_URL\\\"\",\n            \"    fi\",\n            \"\",\n            \"    exit 0\",\n            \"}\",\n            \"\",\n            \"main \\\"$@\\\"\"\n          ]\n        }\n      }\n    },\n    {\n      \"name\": \"stopInstance\",\n      \"action\": \"aws:changeInstanceState\",\n      \"maxAttempts\": 3,\n      \"timeoutSeconds\": 1200,\n      \"onFailure\": \"Abort\",\n      \"inputs\": {\n        \"InstanceIds\": [\n          \"{{launchInstance.InstanceIds}}\"\n        ],\n        \"DesiredState\": \"stopped\"\n      }\n    },\n    {\n      \"name\": \"createImage\",\n      \"action\": \"aws:createImage\",\n      \"maxAttempts\": 3,\n      \"onFailure\": \"Abort\",\n      \"inputs\": {\n        \"InstanceId\": \"{{launchInstance.InstanceIds}}\",\n        \"ImageName\": \"{{TargetAmiName}}\",\n        \"NoReboot\": true,\n        \"ImageDescription\": \"AMI Generated by EC2 Automation on {{global:DATE_TIME}} from {{SourceAmiId}}\"\n      }\n    },\n    {\n      \"name\": \"terminateInstance\",\n      \"action\": \"aws:changeInstanceState\",\n      \"maxAttempts\": 3,\n      \"onFailure\": \"Continue\",\n      \"inputs\": {\n        \"InstanceIds\": [\n          \"{{launchInstance.InstanceIds}}\"\n        ],\n        \"DesiredState\": \"terminated\"\n      }\n    }\n  ],\n  \"outputs\": [\n    \"createImage.ImageId\"\n  ]\n}\n",
  "CreatedDate": "2022-06-21T22:58:41.052Z",
  "DisplayName": null,
  "DocumentFormat": {
    "Value": "JSON"
  },
  "DocumentType": {
    "Value": "Automation"
  },
  "DocumentVersion": "1",
  "Name": "AWS-UpdateLinuxAmi",
  "Requires": [],
  "ReviewStatus": null,
  "Status": {
    "Value": "Active"
  },
  "StatusInformation": null,
  "VersionName": null,
  "ResponseMetadata": {
    "RequestId": "6cd1b794-0033-40fc-9c6b-33f4f9022d05",
    "Metadata": {},
    "ChecksumAlgorithm": 0,
    "ChecksumValidationStatus": 0
  },
  "ContentLength": 21891,
  "HttpStatusCode": 200,
  "LoggedAt": "2023-05-12T07:10:32.7771692+00:00"
}
