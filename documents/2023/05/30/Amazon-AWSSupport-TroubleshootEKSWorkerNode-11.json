{
  "AttachmentsContent": [
    {
      "Hash": "e6382e49aa045ab043b1c40b43cf8eccd41cf160688fc13cf070c64215f59e50",
      "HashType": {
        "Value": "Sha256"
      },
      "Name": "attachment.zip",
      "Size": 41551,
      "Url": "https://aws-ssm-document-attachments-us-west-2.s3.us-west-2.amazonaws.com/d7f/190294270367/Automation/AWSSupport-TroubleshootEKSWorkerNode%210bdd226b-add6-4a91-9c02-5708cf361162/11/attachment.zip?x-attachment-size=41551&x-requester-accountId=987868780346&X-Amz-Security-Token=IQoJb3JpZ2luX2VjEE4aCXVzLXdlc3QtMiJGMEQCIBSGQORNJCDk6fGAuMcyMnq0TIUOFntgMY%2B84M6RGim%2BAiBoQuAWrbeXAWOUDwJt0tvGeJc7VLTxtsG2dQ5aK%2FWaWirCBQiH%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F8BEAMaDDI0OTkyNDUyNzQxMCIMnIvTXU0SLTBp0U%2BQKpYFuqPXmTGzS2tIbPgSPmrs2ix6Pz2qrDaxRE%2FKnKCPFe8kJF1Vv0cNadrSMZ14422LPdaj5l%2F%2F5ckg3PPoJrhbP1WM8Md6ZcPA27gCUVMj83lTRJQwF8ZeHQFPZ4C%2Fh1%2F80xMXNB9OQalwuZciBCe71gQR6cBClZc13EbGfUJi1kT4%2BwlPs7ZCGVo2toxQ6%2F1Inws2NRFTiTfsqkz9UFEIR04r7Ck543fS%2BoeGzyDjrZxR9nf%2FmlKVMoxN1QngpmEBFJmHASJL5%2F0NSE46K6CNRUnySSZ9Hj3KbtiePeK3g6JhmFHZF%2BBnMA72dZ6VI2ahT7CXX6OU1MuV%2FUGvi0wa44BWvgK7ORJFuLHA5Aw3ZTxcPEElY5aWVjsR3aqyF4NO7mcqIBOFJ7O7giHb%2FSDpoOetwIx6GIBcvYaSYy7z6tfhoISD2iOgUJKc5cIYq8MAEFUNb0aJVFvjtoWC8cgN%2B6j31Kl%2BOMunEibRyDijEFAueVMQAfasp%2BIcN%2FD3dWL8kdJ778PgWveB1VWo0y7ky2or350usaTNT6%2FSr5fj1saOFHTsEvotEYVC4swuE5dHsvV8CkjoHu3gTp8oIaV1QwkqfXeFeOJ8CJqAkZwGYlgpgcZ7M25ym6BGRcJwLr%2BrImSOBIbhYJiig9rjFX%2BydffTctun09EPr7MuXRTmGPbdCTxrD3XqCTPahC9Yi0XUnTS6j7pCdAc2tdC9npWhpyoztcgLufi1bdoT4UxTuonzdVQ12IGsKHke4DK0Nk%2FZgotqhGk0%2FHNVjr9kdAYyHHdItd7tE0h6xZjqaLbN1x00WqKoTktF%2BgdsIDDWignGnLWmdACcT3ic%2FZ0GUSsK4wD%2B%2FBm9Xb0HjTqd%2BOiqv7AdOf8VBWowsZbWowY6sgGFJCaZQ%2BVaACl%2Be5U3%2Fxa90cL3c4zdXzrBgDygYhIQ%2BXOnwEonec5JBfTEXXjW2mI%2BS9xKzijeMI8HW%2FXREz0TMeSFzP45m%2Bcwcvq8W3nX0Ra7IUuuJCR5FWtyEggkaSZa1wvSdtGW9HMKLGkU%2BeIrynN8EblBTdtFQDqZBFw9tWdgMEI6IDu2pDfxb%2F6zbrHzmWlqf8uZbaLP%2BJrmoyfuCRz%2B3c%2BrrB8zpeF0Qa2ZHied&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Date=20230530T071209Z&X-Amz-SignedHeaders=host&X-Amz-Expires=86400&X-Amz-Credential=ASIATUMFJUUZFKXWWH34%2F20230530%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Signature=0267258eeb41f3c134a4ff106f0ed1ea264a78040b2d38987ec9ec6d3e483e5c"
    }
  ],
  "Content": "{\n  \"schemaVersion\": \"0.3\",\n  \"description\": \"# AWSSupport-TroubleshootEKSWorkerNode\\n\\n----\\n\\nThe *AWSSupport-TroubleshootEKSWorkerNode* runbook is designed to help troubleshooting EKS worker node that [failed to join an EKS cluster](https://docs.aws.amazon.com/eks/latest/userguide/troubleshooting.html#worker-node-fail). This automation runbook checks both EKS cluster configuration and worker node and validates the following:\\n\\n- Node tags are applied.\\n- Worker node Instance type is supported. \\n- Network communication between worker node and Cluster API server is allowed. \\n- Node [IAM Role and Policies](https://docs.aws.amazon.com/eks/latest/userguide/create-node-role.html).\\n- Cluster [IAM role and Policies](https://docs.aws.amazon.com/eks/latest/userguide/service_IAM_role.html).\\n- VPC Endpoints for [private Clusters](https://docs.aws.amazon.com/eks/latest/userguide/private-clusters.html). \\n- Worker node [AMI version](https://docs.aws.amazon.com/eks/latest/userguide/eks-optimized-ami.html). \\n- VPC DHCP optionset. \\n- Kubelet, container runtime.\\n\\n\\n### Prerequisites:\\n\\n* To check Kubelet status and container runtime, EC2 instance must be an online managed instance(connected with AWS Systems Manager). If your EC2 instance is not an online managed instance, only this step of the test will be skipped, however all other checks will be executed.\\n\\n### Disclaimer:\\n\\n* This runbook doesn't make any changes to your EKS cluster or your worker node.\\n* This runbook doesn't support worker nodes running Windows or Bottlerocket Operating Systems.\\n\\n### Workflow Specifications:\\n\\n This workflow uses AWS Systems Manager Automation and takes in the following parameters:\\n\\n- **ClusterName** - **(Required)**: The EKS cluster name. \\n- **WorkerID** - **(Required)** : Worker node that failed to join the EKS cluster.\\n- **AutomationAssumeRole** - **(Optional)** The IAM role which AWS Systems Manager will assume to execute this automation. This role must allow these IAM actions:\\n\\n        - iam:GetRole\\n        - iam:GetInstanceProfile\\n        - iam:ListAttachedRolePolicies\\n        - ec2:DescribeDhcpOptions\\n        - ec2:DescribeNatGateways\\n        - ec2:DescribeSecurityGroups\\n        - ec2:DescribeImages\\n        - ec2:DescribeNetworkInterfaces\\n        - ec2:DescribeVpcs\\n        - ec2:DescribeVpcEndpoints\\n        - ec2:DescribeSubnets\\n        - ec2:DescribeNetworkAcls\\n        - ec2:DescribeInstanceStatus\\n        - ec2:DescribeInstances\\n        - ec2:DescribeRouteTables\\n        - ec2:DescribeVpcAttribute\\n        - ec2:DescribeInstanceAttribute\\n        - eks:DescribeCluster\\n        - ssm:DescribeInstanceInformation\\n        - ssm:ListCommandInvocations\\n        - ssm:ListCommands\\n        - ssm:SendCommand\\n\\n\\n\\nPlease visit the documentation on [Automation Setup](https://docs.aws.amazon.com/systems-manager/latest/userguide/automation-setup.html) for more information.\",\n  \"assumeRole\": \"{{ AutomationAssumeRole }}\",\n  \"parameters\": {\n    \"AutomationAssumeRole\": {\n      \"type\": \"AWS::IAM::Role::Arn\",\n      \"description\": \"(Optional) The ARN of the role that allows the Automation runbook to perform the actions on your behalf. If no role is specified, Systems Manager Automation uses your current IAM user permissions context to execute this runbook.\",\n      \"default\": \"\"\n    },\n    \"ClusterName\": {\n      \"type\": \"String\",\n      \"description\": \"(Required) The name of the EKS cluster\",\n      \"allowedPattern\": \"^[a-zA-Z0-9][a-zA-Z0-9-_]{0,99}$\"\n    },\n    \"WorkerID\": {\n      \"type\": \"String\",\n      \"description\": \"(Required) The EC2 instance ID for the Worker node which failed to join the cluster\",\n      \"default\": \"\",\n      \"allowedPattern\": \"^i-[a-z0-9]{8,17}$\"\n    }\n  },\n  \"mainSteps\": [\n    {\n      \"name\": \"validateIfClusterExistsAndActive\",\n      \"action\": \"aws:assertAwsResourceProperty\",\n      \"isCritical\": true,\n      \"timeoutSeconds\": 30,\n      \"maxAttempts\": 3,\n      \"inputs\": {\n        \"Service\": \"eks\",\n        \"Api\": \"DescribeCluster\",\n        \"name\": \"{{ClusterName}}\",\n        \"PropertySelector\": \"$.cluster.status\",\n        \"DesiredValues\": [\n          \"ACTIVE\"\n        ]\n      }\n    },\n    {\n      \"name\": \"validateIfInstanceExistsAndRunning\",\n      \"action\": \"aws:assertAwsResourceProperty\",\n      \"isCritical\": true,\n      \"timeoutSeconds\": 30,\n      \"maxAttempts\": 3,\n      \"inputs\": {\n        \"Service\": \"ec2\",\n        \"Api\": \"DescribeInstanceStatus\",\n        \"InstanceIds\": [\n          \"{{WorkerID}}\"\n        ],\n        \"PropertySelector\": \"$.InstanceStatuses[0].InstanceState.Name\",\n        \"DesiredValues\": [\n          \"running\"\n        ]\n      }\n    },\n    {\n      \"name\": \"TroubleshootWorkerNode\",\n      \"action\": \"aws:executeScript\",\n      \"isCritical\": true,\n      \"inputs\": {\n        \"Runtime\": \"python3.8\",\n        \"InputPayload\": {\n          \"ClusterName\": \"{{ClusterName}}\",\n          \"WorkerID\": \"{{WorkerID}}\"\n        },\n        \"Handler\": \"script_handler\",\n        \"Script\": \"# Copyright 2022 Amazon.com, Inc. and its affiliates. All Rights Reserved.\\n# SPDX-License-Identifier: LicenseRef-.amazon.com.-AmznSL-1.0\\n# Licensed under the Amazon Software License (the \\\"License\\\").\\n# You may not use this file except in compliance with the License.\\n# A copy of the License is located at\\n#   http://aws.amazon.com/asl/\\n# or in the \\\"license\\\" file accompanying this file. This file is distributed\\n# on an \\\"AS IS\\\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\\n# express or implied. See the License for the specific language governing\\n# permissions and limitations under the License.\\n\\nfrom base.node import Node\\nfrom base.cluster import Cluster\\nfrom base.messages import Messages\\nfrom case import cluster_enis\\nfrom case import ClusterSec_check\\nfrom case import cp_iam_role\\nfrom case import dhcp_options\\nfrom case import iam_role_check\\nfrom case import node_tags\\nfrom case import node_ami\\nfrom case import cluster_public_endpoint_access\\nfrom case import vpc_dns\\nfrom case import node_cni\\nfrom case import instancetype\\nfrom case import nacls_basic_rules\\nfrom case import sts_endpoint\\nfrom case import node_iam_role\\nfrom case import public_subnet_IP\\nfrom case import s3_endpoint_route\\nfrom case import userdata\\nfrom case import verifyNat\\nfrom case import vpc_endpoint_check\\nfrom case import node_sg_outbound\\nfrom case import outposts_check\\nfrom case import sw_daemons\\nfrom case import imds_check\\n\\ndef script_handler(events, context):\\n\\n    worker_node_id = events['WorkerID']\\n    cluster_name = events['ClusterName']\\n\\n    messages = Messages()\\n\\n    cluster = Cluster(cluster_name)\\n    node = Node(worker_node_id)\\n\\n    if not cluster.isActive:\\n        messages.render('I0',\\n                        'ERROR',\\n                        messages.generalMessages['clusterNotActive'],\\n                        cluster_name=cluster_name)\\n    else:\\n        messages.render('I0',\\n                        'NODASH',\\n                        messages.generalMessages['clusterActive'],\\n                        cluster_name=cluster_name)\\n        if node.IsTerminated:\\n            messages.render('I0',\\n                            'ERROR',\\n                            messages.nodeMessages['terminatedInstance'],\\n                            node_id=worker_node_id)\\n        else:\\n            messages.render('I2',\\n                            'NODASH',\\n                            messages.clusterMessages['checkingClusterSG'])\\n            if ClusterSec_check.ClusterSecuritygroup(node.privateIpAddress,\\n                                                     node.securityGroupIDs,\\n                                                     cluster.clusterSecurityGroup):\\n                messages.render('I3',\\n                                'INFO',\\n                                messages.clusterMessages['clusterSGOK'], cluster_sg=cluster.clusterSecurityGroup)\\n            else:\\n                messages.render('I3',\\n                                'ERROR',\\n                                messages.clusterMessages['clusterSGNOK'], cluster_sg=cluster.clusterSecurityGroup)\\n            messages.render('I2',\\n                            'NODASH',\\n                            messages.networkMessages['checkingDHCP'])\\n            if dhcp_options.dhcp_options_check(node.InstanceVpc):\\n                messages.render('I3',\\n                                'INFO',\\n                                messages.networkMessages['dhcpOK'])\\n            else:\\n                messages.render('I3',\\n                                'ERROR',\\n                                messages.networkMessages['dhcpNOK'])\\n\\n            messages.render('I2',\\n                            'NODASH',\\n                            messages.clusterMessages['checkingServiceRole'],\\n                            cluster_role=cluster.roleArn)\\n            cp_iam_role.check_cluster_role(cluster.roleArn,\\n                                           cluster_name,\\n                                           messages)\\n                \\n            messages.render('I2',\\n                            'NODASH',\\n                            messages.networkMessages['checkingClusterENIs'])\\n            cluster_enis.execute_checks(cluster, messages)\\n            if cluster.isOnlyPublic:\\n                cluster_public_endpoint_access.execute_checks(node, cluster, messages)\\n            \\n            messages.render('I2',\\n                            'NODASH',\\n                            messages.networkMessages['checkingVpcDNS'])\\n            vpc_dns.check_vpc_attributes(cluster.vpcId, messages)\\n\\n##############worker node checks#############\\n            messages.render('I0',\\n                            'NODASH',\\n                            messages.generalMessages['thinSeperator'])\\n            messages.render('I0',\\n                            'NODASH',\\n                            messages.nodeMessages['instanceStateOK'],\\n                            node_id=worker_node_id)\\n            messages.render('I2',\\n                            'NODASH',\\n                            messages.nodeMessages['checkingInstanceFamily'])\\n            if instancetype.validateInstanceType(node.InstanceType):\\n                messages.render('I3',\\n                                'INFO',\\n                                messages.nodeMessages['instanceFamilyOK'],\\n                                instance_family=node.InstanceType)\\n            else:\\n                messages.render('I3',\\n                                'ERROR',\\n                                messages.nodeMessages['instanceFamilyNOK'],\\n                                instance_family=node.InstanceType)\\n            messages.render('I2',\\n                            'NODASH',\\n                            messages.nodeMessages['checkingInstanceNetworking'])\\n            if node.IsPrivate:\\n                messages.render('I3',\\n                                'INFO',\\n                                messages.nodeMessages['privateInstance'],\\n                                nat_gateway=node.NatGatway)\\n                isNatPublic = verifyNat.verify_nat(node.NatGatway, node.InstanceVpc)\\n                if not isNatPublic:\\n                    messages.render('I4',\\n                                    'ERROR',\\n                                    messages.nodeMessages['privateNAT'],\\n                                    nat_gateway=node.NatGatway)\\n                else:\\n                    messages.render('I4',\\n                                    'INFO2',\\n                                    messages.nodeMessages['natOK'],\\n                                    nat_gateway=node.NatGatway)\\n            elif node.IsPublic:\\n                messages.render('I3',\\n                                'INFO',\\n                                messages.nodeMessages['publicInstance'],\\n                                internet_gateway=node.InternetGateway)\\n                if node.PublicIpAddress:\\n                    messages.render('I4',\\n                                    'INFO2',\\n                                    messages.nodeMessages['instanceWithPublicIP'],\\n                                    public_ip=node.PublicIpAddress)\\n                else:\\n                   messages.render('I4',\\n                                    'ERROR',\\n                                    messages.nodeMessages['instanceWithoutPublicIP'])\\n\\n                if public_subnet_IP.is_public_ip_map(node.InstanceSubnet):\\n                    messages.render('I4',\\n                                    'INFO2',\\n                                    messages.nodeMessages['instanceAutoAssignIP'],\\n                                    instance_subnet=node.instance_subnet_id)\\n                else:\\n                    messages.render('I4',\\n                                    'ERROR',\\n                                    messages.nodeMessages['instanceNoAutoAssingIP'],\\n                                    instance_subnet=node.instance_subnet_id)\\n            else:\\n                messages.render('I3',\\n                                'INFO',\\n                                messages.nodeMessages['privateInstanceVPCEndpoint'])\\n                messages.render('I3',\\n                                'INFO',\\n                                messages.networkMessages['checkingVPCE'])\\n                vpc_endpoint_check.vpce_all_checks(node.Region,\\n                                                   node.InstanceVpc,\\n                                                   node.InstanceSubnet,\\n                                                   node.privateIpAddress,\\n                                                   node.securityGroupIDs,\\n                                                   messages)\\n                s3_endpoint_route.check_s3_endpoints(node, messages)\\n            \\n            messages.render('I2',\\n                            'NODASH',\\n                            messages.nodeMessages['checkingInstanceProfile'])\\n            if node.Instanceprofile:\\n                messages.render('I3',\\n                                'INFO',\\n                                messages.nodeMessages['displayInstanceProfile'],\\n                                node_id=node.name,\\n                                instance_profile=node.Instanceprofile)\\n                if iam_role_check.iam_role_check(node.IAMRole):\\n                    messages.render('I4',\\n                                    'INFO2',\\n                                    messages.nodeMessages['instanceProfileOK'],\\n                                    instance_role=node.IAMRole)\\n                else:\\n                    messages.render('I4',\\n                                    'ERROR',\\n                                    messages.nodeMessages['instanceProfilePath'],\\n                                    instance_role= node.IAMRole)\\n                checkTrustRelationship = node_iam_role.check_trust_relationship(\\n                    node.role_name\\n                )\\n                checkIAMPolicy = node_iam_role.check_instance_role(node.role_name)\\n                if not checkIAMPolicy[0]:\\n                    messages.render('I4',\\n                                    'ERROR',\\n                                    messages.nodeMessages['instanceIAMPolicyNOK'],\\n                                    instance_role=node.IAMRole,\\n                                    node=worker_node_id,\\n                                    policy=str(checkIAMPolicy[1]))\\n                else:\\n                    messages.render('I4',\\n                                    'INFO2',\\n                                    messages.nodeMessages['instanceIAMPolicyOK'],\\n                                    instance_role=node.IAMRole)\\n                if checkTrustRelationship:\\n                    messages.render('I4',\\n                                    'INFO2',\\n                                    messages.nodeMessages['instanceProfileThrustOK'],\\n                                    instance_role=node.IAMRole)\\n                else:\\n                    messages.render('I4',\\n                                    'ERROR',\\n                                    messages.nodeMessages['instanceProfileThrustNOK'],\\n                                    instance_role=node.IAMRole)\\n            else:\\n                messages.render('I3',\\n                                'ERROR',\\n                                messages.nodeMessages['instanceProfileNOK'])\\n\\n            messages.render('I2',\\n                            'NODASH',\\n                            messages.nodeMessages['checkingUserData'])\\n            if userdata.check_userdata(node.UserData,\\n                                       cluster_name):\\n                messages.render('I3',\\n                                'INFO',\\n                                messages.nodeMessages['userDataOK'])\\n            else:\\n                messages.render('I3',\\n                                'ERROR',\\n                                messages.nodeMessages['userDataNOK'])\\n\\n            node_tags.execute_checks(node, cluster, messages)\\n            node_ami.execute_checks(node, cluster, messages)\\n            node_cni.execute_checks(node, messages)\\n            node_sg_outbound.execute_checks(node, messages)\\n            outposts_check.execute_checks(node,messages)\\n\\n            messages.render('I2',\\n                            'NODASH',\\n                            messages.networkMessages['checkingNACL'])\\n            nacls_basic_rules.execute_checks(node, cluster, messages)\\n\\n            messages.render('I2',\\n                                'NODASH',\\n                                messages.nodeMessages['CheckingStsEndpoint'])\\n            if sts_endpoint.check_sts_endpoint(node.Region):\\n                messages.render('I3',\\n                                'INFO',\\n                                messages.nodeMessages['CorrectSTSendpoint'], region=node.Region)\\n            else:\\n                messages.render('I3',\\n                                'ERROR',\\n                                messages.nodeMessages['MissingSTSendpoint'], region=node.Region)\\n            messages.render('I2',\\n                            'NODASH',\\n                            messages.nodeMessages['checkingImdsEndpoint'])\\n            if imds_check.imds_check(node):\\n                messages.render('I3',\\n                                'INFO',\\n                                messages.nodeMessages['ImdsEndpointEnabled'])\\n            else:\\n                messages.render('I3',\\n                                'ERROR',\\n                                messages.nodeMessages['ImdsEndpointDisabled'])\\n            messages.render('I2',\\n                            'NODASH',\\n                                messages.nodeMessages['checkingSSMAgent'])\\n            if sw_daemons.ssm_agent_check(node.name):\\n                messages.render('I3',\\n                                'INFO',\\n                                messages.nodeMessages['ssmAgentReachable'])\\n                if sw_daemons.check_containerd(node.name):\\n                    messages.render('I4',\\n                                    'INFO2',\\n                                    messages.nodeMessages['daemonRunning'], daemon_name='containerd')\\n                else:\\n                    messages.render('I4',\\n                                    'ERROR',\\n                                    messages.nodeMessages['daemonNotRunning'], daemon_name='containerd')\\n                if float(cluster.version) < 1.23 :\\n                    if sw_daemons.check_docker(node.name):\\n                        messages.render('I4',\\n                                        'INFO2',\\n                                        messages.nodeMessages['daemonRunning'], daemon_name='docker')\\n                    else:\\n                        messages.render('I4',\\n                                        'ERROR',\\n                                        messages.nodeMessages['daemonNotRunning'], daemon_name='docker')\\n                if sw_daemons.check_kubelet(node.name):\\n                    messages.render('I4',\\n                                    'INFO2',\\n                                    messages.nodeMessages['daemonRunning'], daemon_name='kubelet')\\n                else:\\n                    messages.render('I4',\\n                                    'ERROR',\\n                                    messages.nodeMessages['daemonNotRunning'], daemon_name='kubelet')\\n            else:\\n                messages.render('I3',\\n                                'WARNING',\\n                                messages.nodeMessages['ssmAgentNotReachable'])                  \\n                        \\n            messages.render('I0',\\n                            'NODASH',\\n                            messages.generalMessages['thickSeparator'])\\n    messages.render('I0',\\n                    'NODASH',\\n                    messages.generalMessages['executionComplete'])\\n    \\n    return {\\n        'Message': messages.bufferPrettify()\\n    }\\n\\n\",\n        \"Attachment\": \"attachment.zip\"\n      },\n      \"outputs\": [\n        {\n          \"Name\": \"Message\",\n          \"Selector\": \"$.Payload.Message\",\n          \"Type\": \"String\"\n        }\n      ]\n    }\n  ],\n  \"files\": {\n    \"attachment.zip\": {\n      \"checksums\": {\n        \"sha256\": \"e6382e49aa045ab043b1c40b43cf8eccd41cf160688fc13cf070c64215f59e50\"\n      }\n    }\n  },\n  \"outputs\": [\n    \"TroubleshootWorkerNode.Message\"\n  ]\n}",
  "CreatedDate": "2023-03-31T05:29:42.015Z",
  "DisplayName": null,
  "DocumentFormat": {
    "Value": "JSON"
  },
  "DocumentType": {
    "Value": "Automation"
  },
  "DocumentVersion": "11",
  "Name": "AWSSupport-TroubleshootEKSWorkerNode",
  "Requires": [],
  "ReviewStatus": null,
  "Status": {
    "Value": "Active"
  },
  "StatusInformation": null,
  "VersionName": null,
  "ResponseMetadata": {
    "RequestId": "14dcd5c9-18e0-417f-a0dd-ca4c19d697ec",
    "Metadata": {},
    "ChecksumAlgorithm": 0,
    "ChecksumValidationStatus": 0
  },
  "ContentLength": 24648,
  "HttpStatusCode": 200,
  "LoggedAt": "2023-05-30T07:12:09.7073026+00:00"
}
