{
  "AttachmentsContent": [],
  "Content": "{\n    \"schemaVersion\": \"1.2\",\n    \"description\": \"Scans for or installs patches from a patch baseline.\",\n    \"parameters\": {\n        \"Operation\": {\n            \"type\": \"String\",\n            \"description\": \"(Required) The update or configuration to perform on the instance. The system checks if the baseline patches are installed. The install operation installs all patches in the baseline.\",\n            \"allowedValues\": [\n                \"Scan\",\n                \"Install\"\n            ]\n        },\n        \"SnapshotId\": {\n            \"type\": \"String\",\n            \"description\": \"(Optional) The snapshot Id to retrieve a patch baseline snapshot with.\",\n            \"allowedPattern\": \"(^$)|^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$\",\n            \"default\": \"\"\n        }\n    },\n    \"runtimeConfig\": {\n        \"aws:runPowerShellScript\": {\n            \"properties\": [\n                {\n                    \"id\": \"0.aws:runPowerShellScript\",\n                    \"timeoutSeconds\": 7200,\n                    \"runCommand\": [\n                        \"# Check the OS version\",\n                        \"if ([Environment]::OSVersion.Version.Major -le 5) {\",\n                        \"    Write-Error 'This command is not supported on Windows 2003 or lower.'\",\n                        \"    exit -1\",\n                        \"} elseif ([Environment]::OSVersion.Version.Major -ge 10) {\",\n                        \"    $sku = (Get-CimInstance -ClassName Win32_OperatingSystem).OperatingSystemSKU\",\n                        \"    if ($sku -eq 143 -or $sku -eq 144) {\",\n                        \"        Write-Host 'This command is not supported on Windows 2016 Nano Server.'\",\n                        \"        exit -1\",\n                        \"    }\",\n                        \"}\",\n                        \"# Check the SSM agent version\",\n                        \"$ssmAgentService = Get-ItemProperty 'HKLM:SYSTEM\\\\CurrentControlSet\\\\Services\\\\AmazonSSMAgent\\\\'\",\n                        \"if (-not $ssmAgentService -or $ssmAgentService.Version -lt '2.0.533.0') {\",\n                        \"    Write-Host 'This command is not supported with SSM Agent version less than 2.0.533.0.'\",\n                        \"    exit -1\",\n                        \"}\",\n                        \"\",\n                        \"# Application specific constants\",\n                        \"$appName = 'PatchBaselineOperations'\",\n                        \"$psModuleFileName = 'Amazon.PatchBaselineOperations.dll'\",\n                        \"$s3FileName = 'Amazon.PatchBaselineOperationsDeprecated-1.1.zip'\",\n                        \"$s3LocationUsEast = 'https://s3.amazonaws.com/aws-ssm-{0}/' + $appName.ToLower() + '/' + $s3FileName\",\n                        \"$s3LocationRegular = 'https://s3-{0}.amazonaws.com/aws-ssm-{0}/' + $appName.ToLower() + '/' + $s3FileName\",\n                        \"$s3LocationCn = 'https://s3.{0}.amazonaws.com.cn/aws-ssm-{0}/' + $appName.ToLower() + '/' + $s3FileName\",\n                        \"$s3FileHash = '9B823BEDBA52C94F0BA332E1C024FB7F5F7ED9B7343DDC3B10027380B1E28561'\",\n                        \"$psModuleHashes = @{\",\n                        \"    'Amazon.PatchBaselineOperations.dll' = 'D68C082591D3615BB35F884900F5F7012B336121462C98D395A50D5430672F32';\",\n                        \"    'AWSSDK.Core.dll' = 'F024905CDFE4DE022DCD4D9BCF8EE9F237EE27D73DCC32CCB3A69DFC088EB2B0';\",\n                        \"    'AWSSDK.S3.dll' = 'B24C349EC0ADEB8462B6B24A27D65650873830416FFF8E816852966C21E87267';\",\n                        \"    'AWSSDK.SimpleSystemsManagement.dll' = '627CA33D6B2463C453EEC5F4767C5907D34EB6C1D49D106E5DC9413FADC9DAD9';\",\n                        \"    'Newtonsoft.Json.dll' = '0516D4109263C126C779E4E8F5879349663FA0A5B23D6D44167403E14066E6F9';\",\n                        \"    'THIRD_PARTY_LICENSES.txt' = '9C6EB75247F59B627FAF5F8E25633635DB30593B6C130C191CF3A302C1DC9FAE';\",\n                        \"    'YamlDotNet.dll' = 'D59E777A42A965327FCC18FC0AB7FA6729C0BCF845D239AC2811BD78F73A7F70'\",\n                        \"}\",\n                        \"\",\n                        \"# Folders and Logging\",\n                        \"$tempDirectory = split-path -parent $MyInvocation.MyCommand.Definition\",\n                        \"$downloadPath = [IO.Path]::Combine($tempDirectory, $s3FileName)\",\n                        \"$psModuleInstallLocation = [IO.Path]::Combine([Environment]::GetEnvironmentVariable([Environment+SpecialFolder]::ProgramFiles), 'Amazon', $appName)\",\n                        \"$psModuleInstallFile = [IO.Path]::Combine($psModuleInstallLocation, $psModuleFileName)\",\n                        \"\",\n                        \"function CheckFileHash ($filePath, $fileHash) {\",\n                        \"    if (Test-Path($filePath)) {\",\n                        \"        $fileStream = New-Object System.IO.FileStream($filePath, [System.IO.FileMode]::Open, [System.IO.FileAccess]::Read)\",\n                        \"        $sha256 = [System.Security.Cryptography.HashAlgorithm]::Create('System.Security.Cryptography.SHA256CryptoServiceProvider')\",\n                        \"        $sourceHash = [System.BitConverter]::ToString($sha256.ComputeHash($fileStream), 0).Replace('-', '').ToLowerInvariant()\",\n                        \"        $sha256.Dispose()\",\n                        \"        $fileStream.Dispose()\",\n                        \"\",\n                        \"        if ($sourceHash -ne $fileHash) {\",\n                        \"            return $false\",\n                        \"        }\",\n                        \"        else {\",\n                        \"            return $true\",\n                        \"        }\",\n                        \"    }\",\n                        \"    else {\",\n                        \"        return $false\",\n                        \"    }\",\n                        \"}\",\n                        \"\",\n                        \"function CheckPowerShellModuleInstallation ([bool]$suppressError) {\",\n                        \"    $isInstalled = $false\",\n                        \"    # Path does not exist meaning it has never been downloaded.\",\n                        \"    if (Test-Path($psModuleInstallLocation)) {\",\n                        \"        # Check if the expected number of files and directories are in the folder\",\n                        \"        if (((Get-ChildItem $psModuleInstallLocation -Directory | Measure-Object | %{$_.Count}) -eq 0) -and\",\n                        \"            ((Get-ChildItem $psModuleInstallLocation -File | Measure-Object | %{$_.Count}) -eq $psModuleHashes.Count)) {\",\n                        \"            $validFileHashes = $true\",\n                        \"\",\n                        \"            # Check each file for their expected file hash.\",\n                        \"            Get-ChildItem $psModuleInstallLocation -File | ForEach-Object {\",\n                        \"                if ($psModuleHashes.ContainsKey($_.Name)) {\",\n                        \"                    $installFile = [IO.Path]::Combine($psModuleInstallLocation, $_.Name)\",\n                        \"                    if (-Not (CheckFileHash $installFile $psModuleHashes[$_.Name])) {\",\n                        \"                        if (-Not $suppressError) {\",\n                        \"                            Write-Error ('The SHA hash of the {0} file does not match the expected value.' -f $_.Name)\",\n                        \"                        }\",\n                        \"                        $validFileHashes = $false\",\n                        \"                    }\",\n                        \"                } else {\",\n                        \"                    if (-Not $suppressError) {\",\n                        \"                        Write-Error ('The PowerShellModule installation folder contains an unexpected file with name {0}.' -f $_.Name)\",\n                        \"                    }\",\n                        \"                    $validFileHashes = $false\",\n                        \"                }\",\n                        \"            }\",\n                        \"            $isInstalled = $validFileHashes\",\n                        \"        } else {\",\n                        \"            if (-Not $suppressError) {\",\n                        \"                Write-Error ('An incorrect number of files were present in the PowerShellModule installation folder. The contents will be deleted.')\",\n                        \"            }\",\n                        \"        }\",\n                        \"        if (-Not $isInstalled) {\",\n                        \"            # Remove all files and folders as the folder contains potentially malicious software.\",\n                        \"            Remove-Item $psModuleInstallLocation -Recurse\",\n                        \"        }\",\n                        \"    }\",\n                        \"\",\n                        \"    return $isInstalled\",\n                        \"}\",\n                        \"\",\n                        \"function ExtractZipCoreOs ([string]$zipFilePath, [string]$destPath) {\",\n                        \"    try {\",\n                        \"        [System.Reflection.Assembly]::LoadWithPartialName('System.IO.Compression.FileSystem') | Out-Null\",\n                        \"        $zip = [System.IO.Compression.ZipFile]::OpenRead($zipFilePath)\",\n                        \"        foreach ($item in $zip.Entries) {\",\n                        \"            $extractedPath = Join-Path $destPath $item.FullName\",\n                        \"\",\n                        \"            if ($item.Length -eq 0) {\",\n                        \"                if ((Test-Path $extractedPath) -eq 0) {\",\n                        \"                    mkdir $extractedPath | Out-Null\",\n                        \"                }\",\n                        \"            } else {\",\n                        \"                $fileParent = Split-Path $extractedPath\",\n                        \"\",\n                        \"                if ((Test-Path $fileParent) -eq 0) {\",\n                        \"                    mkdir $fileParent | Out-Null\",\n                        \"                }\",\n                        \"\",\n                        \"                [System.IO.Compression.ZipFileExtensions]::ExtractToFile($item, $extractedPath, $true)\",\n                        \"            }\",\n                        \"        }\",\n                        \"    } catch {\",\n                        \"        throw 'Error encountered when extracting patch management zip file.`n$($_.Exception.Message)'\",\n                        \"    } finally {\",\n                        \"        $zip.Dispose()\",\n                        \"    }\",\n                        \"}\",\n                        \"\",\n                        \"function InstallPowerShellModule {\",\n                        \"    if (-Not (CheckPowerShellModuleInstallation $true)) {\",\n                        \"        Write-Output (\\\"Preparing to download {0} PowerShell module from S3.`r`n\\\" -f $appName)\",\n                        \"\",\n                        \"        #Setup the directories if they do not exist.\",\n                        \"        if (-Not (Test-Path($psModuleInstallLocation))) {\",\n                        \"            $noOp = New-Item $psModuleInstallLocation -ItemType Directory\",\n                        \"        }\",\n                        \"\",\n                        \"        if (-Not (Test-Path($tempDirectory))) {\",\n                        \"            $noOp = New-Item $tempDirectory -ItemType Directory\",\n                        \"        }\",\n                        \"        $region = $env:AWS_SSM_REGION_NAME\",\n                        \"        if ($region -eq 'us-east-1') {\",\n                        \"            $s3Location = $s3LocationUsEast -f $region\",\n                        \"        } elseif (($region -eq 'cn-north-1') -or ($region -eq 'cn-northwest-1')) {\",\n                        \"            $s3Location = $s3LocationCn -f $region\",\n                        \"        } else {\",\n                        \"            $s3Location = $s3LocationRegular -f $region\",\n                        \"        }\",\n                        \"\",\n                        \"        Write-Output (\\\"Downloading {0} PowerShell module from {1} to {2}.`r`n\\\" -f $appName, $s3Location, $downloadPath)\",\n                        \"        # Add Tls 1.2 support\",\n                        \"        [Net.ServicePointManager]::SecurityProtocol = [Net.ServicePointManager]::SecurityProtocol -bOr [Net.SecurityProtocolType]::Tls12\",\n                        \"\",\n                        \"        (New-Object Net.WebClient).DownloadFile($s3Location, $downloadPath)\",\n                        \"\",\n                        \"        if (CheckFileHash $downloadPath $s3FileHash ) {\",\n                        \"            Write-Output (\\\"Extracting {0} zip file contents to temporary folder.`r`n\\\" -f $appName)\",\n                        \"            try {\",\n                        \"               (New-Object -Com Shell.Application).namespace($psModuleInstallLocation).CopyHere((New-Object -Com Shell.Application).namespace($downloadPath).Items(), 16)\",\n                        \"            } catch [Exception] {\",\n                        \"                ExtractZipCoreOs $downloadPath $psModuleInstallLocation\",\n                        \"            }\",\n                        \"        }\",\n                        \"        else {\",\n                        \"            throw ('The SHA hash of the {0} S3 source file does not match the expected value.' -f $appName)\",\n                        \"        }\",\n                        \"\",\n                        \"        Write-Output (\\\"Verifying SHA 256 of the {0} PowerShell module files.`r`n\\\" -f $appName)\",\n                        \"        if (-Not (CheckPowerShellModuleInstallation $false)) {\",\n                        \"            throw ('The verification of the {0} PowerShell module did not pass.' -f $appName)\",\n                        \"        }\",\n                        \"\",\n                        \"        Write-Output (\\\"Successfully downloaded and installed the {0} PowerShell module.`r`n\\\" -f $appName)\",\n                        \"    }\",\n                        \"}\",\n                        \"\",\n                        \"try {\",\n                        \"    InstallPowerShellModule\",\n                        \"} catch [Exception] {\",\n                        \"    $msg = \\\"An error occurred when executing {0}: {1}`r`n\\\" -f $appName, $_.Exception.Message\",\n                        \"    Write-Error $msg\",\n                        \"    exit -1\",\n                        \"}\",\n                        \"finally {\",\n                        \"    if (Test-Path $downloadPath) {\",\n                        \"        rm $downloadPath\",\n                        \"    }\",\n                        \"}\",\n                        \"\",\n                        \"# Setup the command\",\n                        \"Import-Module $psModuleInstallFile\",\n                        \"$response = Invoke-PatchBaselineOperation -Operation {{Operation}} -SnapshotId '{{SnapshotId}}' -InstanceId $env:AWS_SSM_INSTANCE_ID -Region $env:AWS_SSM_REGION_NAME\",\n                        \"\",\n                        \"if ($response.ExitCode -ne 3010)\",\n                        \"{\",\n                        \"    $response.ToString()\",\n                        \"}\",\n                        \"\",\n                        \"exit $response.ExitCode\"\n                    ]\n                }\n            ]\n        }\n    }\n}",
  "CreatedDate": "2021-07-06T14:35:52.878Z",
  "DisplayName": null,
  "DocumentFormat": {
    "Value": "JSON"
  },
  "DocumentType": {
    "Value": "Command"
  },
  "DocumentVersion": "1",
  "Name": "AWS-ApplyPatchBaseline",
  "Requires": [],
  "ReviewStatus": null,
  "Status": {
    "Value": "Active"
  },
  "StatusInformation": null,
  "VersionName": null,
  "ResponseMetadata": {
    "RequestId": "0a233f1d-bec7-42dd-aa97-4f450adbcdf0",
    "Metadata": {},
    "ChecksumAlgorithm": 0,
    "ChecksumValidationStatus": 0
  },
  "ContentLength": 16426,
  "HttpStatusCode": 200,
  "LoggedAt": "2023-01-16T07:11:22.7955156+00:00"
}
