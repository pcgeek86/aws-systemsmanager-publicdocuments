{
  "AttachmentsContent": [],
  "Content": "{\n  \"schemaVersion\" : \"2.2\",\n  \"description\" : \"Command Document YAML Example\",\n  \"mainSteps\" : [ {\n    \"action\" : \"aws:runPowerShellScript\",\n    \"name\" : \"example\",\n    \"precondition\" : {\n      \"StringEquals\" : [ \"platformType\", \"Windows\" ]\n    },\n    \"inputs\" : {\n      \"runCommand\" : [ \"#Get the AWS region and store it as a variable\\n$AWS_REGION = (irm http://169.254.169.254/latest/dynamic/instance-identity/document | % region) \\n#echo $AWS_REGION\\n\\n\\n$webclient = new-object net.webclient\\n$instanceid = $webclient.Downloadstring('http://169.254.169.254/latest/meta-data/instance-id')\\n#$hostname = $webclient.Downloadstring('http://169.254.169.254/latest/meta-data/local-hostname')\\necho \\\"For interacting with aws, our Instance ID is $instanceid\\\"\\n\\n$RegionTag = \\\"\\\"\\n$RegionTag =  Get-EC2Tag | ` Where-Object {$_.ResourceId -eq $instanceid -and $_.Key -eq 'RegionALB'}\\n\\nif ( [string]::IsNullOrEmpty($RegionTag)) {\\n  echo \\\"Region Tag is null, unable to contine exiting...\\\"\\n  exit\\n}\\n\\n$C1ENV = $RegionTag.Value\\n\\n$RoleTag = \\\"\\\"\\n$RoleTag = Get-EC2Tag | ` Where-Object {$_.ResourceId -eq $instanceid -and $_.Key -eq 'Role'}\\n$C1TYPE = $RoleTag.Value\\n\\n$HTTP_TGRP = $C1ENV+'-http'\\n$HTTPS_TGRP = $C1ENV+'-https'\\n$HTTPTMP = & { aws elbv2 describe-target-groups --name $HTTP_TGRP --region $AWS_REGION --output text } \\n$HTTPSTMP = & { aws elbv2 describe-target-groups --name $HTTPS_TGRP --region $AWS_REGION --output text } \\n\\n$HTTPTMP_PARTS = $HTTPTMP.split(\\\"\\t\\\") # Results delimited by tabs\\n$HTTPSTMP_PARTS = $HTTPSTMP.split(\\\"\\t\\\") # Results delimited by tabs\\n$HTTP_ARN = $HTTPTMP_PARTS[9]\\n$HTTPS_ARN = $HTTPSTMP_PARTS[9]\\n\\n$API_TGRP = $C1ENV+'-api'\\n$APIWS_TGRP = $C1ENV+'-apiws'\\n\\n$APITMP = & { aws elbv2 describe-target-groups --name $API_TGRP --region $AWS_REGION --output text } \\n$APIWSTMP = & { aws elbv2 describe-target-groups --name $APIWS_TGRP --region $AWS_REGION --output text } \\n\\n$APITMP_PARTS = $APITMP.split(\\\"\\t\\\") # Results delimited by tabs\\n$APIWSTMP_PARTS = $APIWSTMP.split(\\\"\\t\\\") # Results delimited by tabs\\n#echo $APITMP_PARTS\\n#echo $APIWSTMP_PARTS\\n$API_ARN = $APITMP_PARTS[9]\\n$APIWS_ARN = $APIWSTMP_PARTS[9]\\n$ServiceName = \\\"ciWFOScheduler\\\"\\n$ServiceName1 = \\\"ciWFOForecast\\\" \\n$ServiceName2 = \\\"ciWFOCompile\\\"\\n$ServiceName3 = \\\"ciWFOGrid\\\"\\n$ServiceName4 = \\\"ciWFOBroker\\\"\\n$ServiceName5 = \\\"ciWFOApache\\\"\\n$ServiceName6 = \\\"ciWFOTomcat\\\"\\n$DataServiceName = \\\"ciWFOGathering\\\"\\n$DataServiceName1 = \\\"ciWFOCTISignaling\\\"\\n$DataServiceName2 = \\\"ciDSWFOTomcat\\\"\\n$DataServiceName3 = \\\"ciWFORecording\\\"\\n$DataServiceName4 = \\\"ciWFOSipRec\\\"\\n\\nif ($RoleTag.Value -eq \\\"app\\\") {\\n    $restarttime = $(get-date -f yyyy-MM-dd-HH-mm-ss)\\n    echo \\\"Removing $instanceid from $API_ARN and $APIWS_ARN at $restarttime\\\"\\n    aws elbv2 deregister-targets --target-group-arn $API_ARN --targets Id=$instanceid --region $AWS_REGION --output text\\n    aws elbv2 deregister-targets --target-group-arn $APIWS_ARN --targets Id=$instanceid --region $AWS_REGION --output text\\n    echo \\\"starting 240 sleep\\\"\\n    Start-Sleep -Seconds 240\\n    echo \\\"stopping app server at $restarttime\\\"\\n    Stop-Service $ServiceName6\\n    Set-Service $ServiceName6 -StartupType Disabled\\n}\\n\\nif ($RoleTag.Value -eq \\\"web\\\") {\\n    $restarttime = $(get-date -f yyyy-MM-dd-HH-mm-ss)\\n    echo \\\"Removing $instanceid from $API_ARN and $APIWS_ARN at $restarttime\\\"\\n    aws elbv2 deregister-targets --target-group-arn $HTTP_ARN --targets Id=$instanceid --region $AWS_REGION --output text\\n    aws elbv2 deregister-targets --target-group-arn $HTTPS_ARN --targets Id=$instanceid --region $AWS_REGION --output text\\n    echo \\\"starting 240 sleep\\\"\\n    Start-Sleep -Seconds 240\\n    echo \\\"stopping web server at $restarttime\\\"\\n    Stop-Service $ServiceName5\\n    Set-Service $ServiceName5 -StartupType Disabled\\n}\\nif ($RoleTag.Value -eq \\\"wfm\\\") {\\n    $restarttime = $(get-date -f yyyy-MM-dd-HH-mm-ss)\\n    echo \\\"stopping wfm scheduler server\\\"\\n    Stop-Service $ServiceName\\n    Set-Service $ServiceName -StartupType Disabled\\n    echo \\\"stopping wfm forecast server\\\"\\n    Stop-Service $ServiceName1\\n    Set-Service $ServiceName1 -StartupType Disabled\\n    echo \\\"stopping wfm compiler server\\\"\\n    Stop-Service $ServiceName2\\n    Set-Service $ServiceName2 -StartupType Disabled\\n}\\nif ($RoleTag.Value -eq \\\"grid\\\") {\\n    $restarttime = $(get-date -f yyyy-MM-dd-HH-mm-ss)\\n    echo \\\"stopping wfm scheduler server\\\"\\n    Stop-Service $ServiceName3\\n    Set-Service $ServiceName3 -StartupType Disabled\\n}\\nif ($RoleTag.Value -eq \\\"bro\\\") {\\n    $restarttime = $(get-date -f yyyy-MM-dd-HH-mm-ss)\\n    echo \\\"stopping wfm scheduler server\\\"\\n    Stop-Service $ServiceName4\\n    Set-Service $ServiceName4 -StartupType Disabled\\n}\\nif ($RoleTag.Value -eq \\\"data\\\") {\\n    $restarttime = $(get-date -f yyyy-MM-dd-HH-mm-ss)\\n    Stop-Service $DataServiceName\\n    Set-Service $DataServiceName -StartupType Disabled\\n    echo \\\"Stopping $DataServiceName starting $restarttime\\\"\\n    Start-Sleep -Seconds 3\\n    echo \\\"stopping cti signaling\\\" \\n    Stop-Service $DataServiceName1\\n    Set-Service $DataServiceName1 -StartupType Disabled\\n    echo \\\"stopping data server\\\"\\n    Stop-Service $DataServiceName2\\n    Set-Service $DataServiceName2 -StartupType Disabled\\n    echo \\\"stopping recording\\\"\\n    Stop-Service $DataServiceName3\\n    Set-Service $DataServiceName3 -StartupType Disabled\\n    echo \\\"stopping sip rec\\\"\\n    Stop-Service $DataServiceName4\\n    Set-Service $DataServiceName4 -StartupType Disabled\\n}\" ]\n    }\n  } ]\n}",
  "CreatedDate": "2020-03-06T15:27:50.563Z",
  "DisplayName": null,
  "DocumentFormat": {
    "Value": "JSON"
  },
  "DocumentType": {
    "Value": "Command"
  },
  "DocumentVersion": "1",
  "Name": "arn:aws:ssm:us-west-2:303795061870:document/DrainTG-DisableC1",
  "Requires": [],
  "ReviewStatus": null,
  "Status": {
    "Value": "Active"
  },
  "StatusInformation": null,
  "VersionName": null,
  "ResponseMetadata": {
    "RequestId": "114d910c-d8e3-41f5-93db-b5562d6fa70a",
    "Metadata": {},
    "ChecksumAlgorithm": 0,
    "ChecksumValidationStatus": 0
  },
  "ContentLength": 6107,
  "HttpStatusCode": 200,
  "LoggedAt": "2022-12-29T07:13:13.9088241+00:00"
}
