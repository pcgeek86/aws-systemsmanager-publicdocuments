{
  "AttachmentsContent": [],
  "Content": "{\n  \"description\" : \"## Id\\nefs:test:deny_client_mount:2022-12-22\\n\\n## Intent\\nTest the denial of an EFS Client Mount\\n\\n## Type\\nSoftware Outage Test\\n\\n## Risk\\nHigh\\n\\n## Requirements\\n* An alarm that tracks the number of mount failures for the EFS filesystem.\\n* An EC2 instance which conforms to the guidelines below.\\n* Make sure that the instance is provisioned in one of the EFS filesystem's AZs.\\n* Make sure that there is a mount target in the AZ of the EC2 instance.\\n* Make sure that the mount target security groups allows incoming traffic from the EC2 instance on port 2049.\\n* Make sure Amazon EFS utils are installed.\\n* Make sure cloudwatch logs are enabled in efs-utils.\\n* Make sure that (on the instance) you've configured `log_group_name` in `/etc/amazon/efs/efs-utils.conf`, as the same log group used for the mount_failure alarm which is a dependency of this FIS.\\n\\n## Permissions required for AutomationAssumeRole\\n* elasticfilesystem:DescribeFileSystems\\n* elasticfilesystem:DescribeFileSystemPolicy\\n* elasticfilesystem:PutFileSystemPolicy\\n* elasticfilesystem:DeleteFileSystemPolicy\\n* cloudwatch:DescribeAlarms\\n* ssm:GetAutomationExecution\\n* ssm:StartAutomationExecution\\n* ssm:GetParameters\\n* ssm:DescribeInstanceInformation\\n* ssm:ListCommands\\n* ssm:ListCommandInvocations\\n* ssm:SendCommand\\n* iam:PassRole\\n\\n## Supports Rollback\\nYes. Users can run the script with `IsRollback` and `PreviousExecutionId` to rollback changes from the previous run.\\n\\n## Cancellation behavior\\nRestore the original resource policy for the EFS filesystem.\\n\\n## Inputs\\n### `FileSystemId`:\\n    type: String\\n    description: (Required) The EFS File System ID\\n### `MountFailureAlarmName`:\\n    type: String\\n    description: (Required) The name of the MountFailure Alarm for the specified FileSystemId.\\n### `InstanceId`:\\n    type: String\\n    description: (Required) The ID of the test EC2 Instance on which mounting should fail.\\n### `MountPath`:\\n    type: String\\n    description: (Optional) The path on the filesystem of the instance where the EFS file system should be mounted.\\n### `MountFailureTestRole`:\\n    type: String\\n    description: (Required) The ARN of the role that will be denied mounting of the EFS file system (AKA the principal of the deny statement added to the policy of the EFS). The instance profile role should be used.\\n### `IsRollback`:\\n    type: String\\n    description: (Optional) Run rollback step of the given previous execution parameter (`PreviousExecutionId`). Can be either true or false.\\n    default: \\\"false\\\"\\n### `PreviousExecutionId`:\\n    type: String\\n    description: (Optional) Previous execution ID for which resources need to be cleaned up.\\n    default: \\\"\\\"\\n### `AutomationAssumeRole`:\\n    type: String\\n    description: (Required) The Amazon Resource Name (ARN) of the role that allows Automation to perform the actions on your behalf.\\n\\n## Details\\nThe document updates the policy of an EFS filesystem with an explicit deny statement for mounting the specified EC2 instance (if there's no resource policy on the EFS to begin with, it adds one with the default permissions (elasticfilesystem:ClientMount, elasticfilesystem:ClientWrite and elasticfilesystem:ClientRootAccess granted to all principals, which means unrestricted) and adds the explicit deny statement to that policy). Then, the document tests if an alarm is triggered for the `MountFailures` custom metric. After that, the document rolls back the policy its original state (if there was no resource policy on the EFS to begin with, it gets deleted), and waits for the alarm to return into an \\\"OK\\\" state.\\n\\n## Steps executed in normal flow\\n* CheckIsRollback\\n* AssertAlarmToBeGreenBeforeTest\\n* BackupCurrentExecution\\n* GenerateBadEfsPolicy\\n* InjectFailure\\n* MountEfsOnDeniedInstance\\n* AssertAlarmToBeRed\\n* RollbackCurrentExecution\\n* MountEfsOnNoLongerDeniedInstance\\n* AssertAlarmToBeGreen\\n\\n## Steps executed in rollback flow\\n* CheckIsRollback\\n* GetInputsFromPreviousExecution\\n* AssertFileSystemId\\n* PrepareRollbackOfPreviousExecution\\n* RollbackPreviousExecution\\n\\n## Outputs\\nNone\",\n  \"schemaVersion\" : \"0.3\",\n  \"assumeRole\" : \"{{AutomationAssumeRole}}\",\n  \"parameters\" : {\n    \"FileSystemId\" : {\n      \"type\" : \"String\",\n      \"description\" : \"(Required) The EFS File System ID\"\n    },\n    \"AutomationAssumeRole\" : {\n      \"type\" : \"String\",\n      \"description\" : \"(Required) The ARN of the role that allows Automation to perform the actions on your behalf.\"\n    },\n    \"MountFailureAlarmName\" : {\n      \"type\" : \"String\",\n      \"description\" : \"(Required) The name of the MountFailure Alarm for the specified FileSystemId.\"\n    },\n    \"InstanceId\" : {\n      \"type\" : \"String\",\n      \"description\" : \"(Required) The ID of the test EC2 Instance on which mounting should fail.\"\n    },\n    \"MountPath\" : {\n      \"type\" : \"String\",\n      \"description\" : \"(Optional) The path on the filesystem of the instance where the EFS file system should be mounted.\",\n      \"default\" : \"/mnt/efsMountTest\"\n    },\n    \"MountFailureTestRole\" : {\n      \"type\" : \"String\",\n      \"description\" : \"(Required) The ARN of the role that will be denied mounting of the EFS file system (AKA the principal of the deny statement added to the policy of the EFS). The instance profile role should be used.\"\n    },\n    \"IsRollback\" : {\n      \"type\" : \"String\",\n      \"description\" : \"(Optional) Run rollback step of the given previous execution parameter (`PreviousExecutionId`). Can be set to either true or false.\",\n      \"default\" : \"false\"\n    },\n    \"PreviousExecutionId\" : {\n      \"type\" : \"String\",\n      \"description\" : \"(Optional) Previous execution ID for which resources need to be cleaned up.\",\n      \"default\" : \"\"\n    }\n  },\n  \"mainSteps\" : [ {\n    \"name\" : \"CheckIsRollback\",\n    \"description\" : \"Check if document should be executed in rollback mode.\",\n    \"action\" : \"aws:branch\",\n    \"inputs\" : {\n      \"Choices\" : [ {\n        \"NextStep\" : \"GetInputsFromPreviousExecution\",\n        \"Variable\" : \"{{IsRollback}}\",\n        \"StringEquals\" : \"true\"\n      } ],\n      \"Default\" : \"AssertAlarmToBeGreenBeforeTest\"\n    }\n  }, {\n    \"name\" : \"GetInputsFromPreviousExecution\",\n    \"description\" : \"Get input from previous execution. This will be used to validate that rollback is executed with the same input\",\n    \"action\" : \"aws:executeScript\",\n    \"outputs\" : [ {\n      \"Name\" : \"FileSystemId\",\n      \"Selector\" : \"$.Payload.FileSystemId[0]\",\n      \"Type\" : \"String\"\n    } ],\n    \"inputs\" : {\n      \"Runtime\" : \"python3.8\",\n      \"Handler\" : \"get_inputs_from_ssm_execution\",\n      \"InputPayload\" : {\n        \"ExecutionId\" : \"{{ PreviousExecutionId }}\"\n      },\n      \"Script\" : \"import json\\n\\nimport boto3\\nfrom botocore.config import Config\\n\\n\\n\\n\\ndef get_inputs_from_ssm_execution(events, context):\\n    output = {}\\n    config = Config(retries={'max_attempts': 20, 'mode': 'standard'})\\n    ssm = boto3.client('ssm', config=config)\\n\\n    if 'ExecutionId' not in events:\\n        raise KeyError('Requires ExecutionId')\\n\\n    if not events['ExecutionId']:\\n        raise KeyError('Requires not empty ExecutionId')\\n\\n    response = ssm.get_automation_execution(AutomationExecutionId=events['ExecutionId'])\\n    response_parameters = response['AutomationExecution']['Parameters']\\n    # TODO DIG-853\\n    for parameter in response_parameters:\\n        output[parameter] = response_parameters[parameter]\\n\\n    return output\"\n    }\n  }, {\n    \"name\" : \"AssertFileSystemId\",\n    \"description\" : \"Make sure that the file system id from this execution is equal to the one from the previous execution.\",\n    \"action\" : \"aws:branch\",\n    \"inputs\" : {\n      \"Choices\" : [ {\n        \"NextStep\" : \"PrepareRollbackOfPreviousExecution\",\n        \"Variable\" : \"{{ GetInputsFromPreviousExecution.FileSystemId }}\",\n        \"StringEquals\" : \"{{ FileSystemId }}\"\n      } ]\n    },\n    \"isEnd\" : true\n  }, {\n    \"name\" : \"PrepareRollbackOfPreviousExecution\",\n    \"description\" : \"Get the original EFS policy\",\n    \"action\" : \"aws:executeScript\",\n    \"outputs\" : [ {\n      \"Name\" : \"EfsPolicy\",\n      \"Selector\" : \"$.Payload.EfsPolicy[0]\",\n      \"Type\" : \"String\"\n    } ],\n    \"inputs\" : {\n      \"Runtime\" : \"python3.8\",\n      \"Handler\" : \"get_output_from_ssm_step_execution\",\n      \"InputPayload\" : {\n        \"ExecutionId\" : \"{{ PreviousExecutionId }}\",\n        \"StepName\" : \"BackupCurrentExecution\",\n        \"ResponseField\" : \"EfsPolicy\"\n      },\n      \"Script\" : \"import json\\n\\nimport boto3\\nfrom botocore.config import Config\\n\\n\\n\\ndef get_output_from_ssm_step_execution(events, context):\\n    config = Config(retries={'max_attempts': 20, 'mode': 'standard'})\\n    ssm = boto3.client('ssm', config=config)\\n\\n    if 'ExecutionId' not in events or 'StepName' not in events or 'ResponseField' not in events:\\n        raise KeyError('Requires ExecutionId, StepName and ResponseField in events')\\n\\n    ssm_response = ssm.get_automation_execution(AutomationExecutionId=events['ExecutionId'])\\n    for step in ssm_response['AutomationExecution']['StepExecutions']:\\n        if step['StepName'] == events['StepName']:\\n            response_fields = events['ResponseField'].split(',')\\n            output = {}\\n            for response_field in response_fields:\\n                if response_field in step['Outputs']:\\n                    # Sets values in string type regardless of what is the original value type. In order to set\\n                    # values with original types please use 'get_typed_output_from_ssm_step_execution'.\\n                    output[response_field] = step['Outputs'][response_field]\\n                else:\\n                    \\\"\\\"\\\"\\n                    By default SSM ignores empty values when encodes API outputs to JSON. It may result in\\n                    a situation when an empty value is a valid value but step output completely misses it.\\n                    Usually happens with SQS queue policies, default policy is returned by API as an empty value\\n                    and executeApi step output ignores it. As a result, further steps in rollback execution will fail.\\n                    Instead of ignoring this value we should use a default empty value in rollback, i.e. empty string\\n                    represents a default sqs policy\\n                    \\\"\\\"\\\"\\n                    output[response_field] = ['']\\n            return output\\n\\n    # Could not find step name\\n    raise Exception('Can not find step name % in ssm execution response', events['StepName'])\"\n    }\n  }, {\n    \"name\" : \"RollbackPreviousExecution\",\n    \"description\" : \"Apply the original policy from the previous execution to the EFS.\",\n    \"maxAttempts\" : 5,\n    \"action\" : \"aws:executeScript\",\n    \"inputs\" : {\n      \"Runtime\" : \"python3.8\",\n      \"Handler\" : \"deny_client_mount_rollback_current_execution\",\n      \"InputPayload\" : {\n        \"FileSystemId\" : \"{{ GetInputsFromPreviousExecution.FileSystemId }}\",\n        \"OriginalEfsPolicy\" : \"{{ PrepareRollbackOfPreviousExecution.EfsPolicy }}\"\n      },\n      \"Script\" : \"import logging\\nimport time\\nfrom typing import List\\nimport json\\nimport uuid\\nimport sys\\nimport subprocess\\n\\nimport boto3\\nfrom botocore.exceptions import ClientError\\n\\n\\nlogger = logging.getLogger(__name__)\\nlogger.setLevel(logging.INFO)\\n\\n\\n\\ndef deny_client_mount_rollback_current_execution(events: dict, context: dict):\\n    efs_client = boto3.client(\\\"efs\\\")\\n\\n    file_system_id: str = events.get(\\\"FileSystemId\\\") or \\\"\\\"\\n    original_efs_policy = events.get(\\\"OriginalEfsPolicy\\\") or \\\"\\\"\\n    original_efs_policy = (\\n        None\\n        if type(original_efs_policy) == str and original_efs_policy.startswith(\\\"{{\\\")\\n        else original_efs_policy\\n    )\\n\\n    if not original_efs_policy:\\n        efs_client.delete_file_system_policy(FileSystemId=file_system_id)\\n        return\\n\\n    efs_client.put_file_system_policy(\\n        FileSystemId=file_system_id, Policy=original_efs_policy\\n    )\"\n    },\n    \"isEnd\" : true\n  }, {\n    \"name\" : \"AssertAlarmToBeGreenBeforeTest\",\n    \"description\" : \"Ensure alarm is green before starting test. Fail if alarm is not green within expected time\",\n    \"action\" : \"aws:waitForAwsResourceProperty\",\n    \"onFailure\" : \"Abort\",\n    \"onCancel\" : \"Abort\",\n    \"inputs\" : {\n      \"Service\" : \"cloudwatch\",\n      \"Api\" : \"DescribeAlarms\",\n      \"AlarmNames\" : [ \"{{ MountFailureAlarmName }}\" ],\n      \"PropertySelector\" : \"$.MetricAlarms[0].StateValue\",\n      \"DesiredValues\" : [ \"OK\" ]\n    }\n  }, {\n    \"name\" : \"BackupCurrentExecution\",\n    \"description\" : \"Backup current execution.\",\n    \"action\" : \"aws:executeScript\",\n    \"outputs\" : [ {\n      \"Name\" : \"EfsArn\",\n      \"Selector\" : \"$.Payload.EfsArn\",\n      \"Type\" : \"String\"\n    }, {\n      \"Name\" : \"EfsPolicy\",\n      \"Selector\" : \"$.Payload.EfsPolicy\",\n      \"Type\" : \"String\"\n    } ],\n    \"inputs\" : {\n      \"Runtime\" : \"python3.8\",\n      \"Handler\" : \"get_efs_policy\",\n      \"InputPayload\" : {\n        \"FileSystemId\" : \"{{ FileSystemId }}\"\n      },\n      \"Script\" : \"import logging\\nimport time\\nfrom typing import List\\nimport json\\nimport uuid\\nimport sys\\nimport subprocess\\n\\nimport boto3\\nfrom botocore.exceptions import ClientError\\n\\n\\nlogger = logging.getLogger(__name__)\\nlogger.setLevel(logging.INFO)\\n\\n\\n\\ndef get_efs_policy(events: dict, context: dict) -> dict:\\n    efs_client = boto3.client(\\\"efs\\\")\\n\\n    file_system_id: str = events.get(\\\"FileSystemId\\\") or \\\"\\\"\\n    efs_arn = efs_client.describe_file_systems(FileSystemId=file_system_id)[\\n        \\\"FileSystems\\\"\\n    ][0][\\\"FileSystemArn\\\"]\\n    try:\\n        efs_policy = efs_client.describe_file_system_policy(\\n            FileSystemId=file_system_id\\n        )[\\\"Policy\\\"]\\n    except ClientError as error:\\n        if error.response[\\\"Error\\\"][\\\"Code\\\"] == \\\"PolicyNotFound\\\":\\n            return {\\\"EfsArn\\\": efs_arn, \\\"EfsPolicy\\\": None}\\n        else:\\n            raise error\\n\\n    return {\\\"EfsArn\\\": efs_arn, \\\"EfsPolicy\\\": efs_policy}\"\n    }\n  }, {\n    \"name\" : \"GenerateBadEfsPolicy\",\n    \"description\" : \"Generate an EFS policy that denies client mount.\",\n    \"onFailure\" : \"Abort\",\n    \"onCancel\" : \"Abort\",\n    \"action\" : \"aws:executeScript\",\n    \"inputs\" : {\n      \"Runtime\" : \"python3.8\",\n      \"Handler\" : \"add_deny_in_efs_policy\",\n      \"InputPayload\" : {\n        \"SourcePolicy\" : \"{{ BackupCurrentExecution.EfsPolicy }}\",\n        \"Principal\" : \"{{ MountFailureTestRole }}\",\n        \"ActionsToDeny\" : [ \"elasticfilesystem:ClientMount\" ],\n        \"Resource\" : \"{{ BackupCurrentExecution.EfsArn }}\"\n      },\n      \"Script\" : \"import logging\\nimport time\\nfrom typing import List\\nimport json\\nimport uuid\\nimport sys\\nimport subprocess\\n\\nimport boto3\\nfrom botocore.exceptions import ClientError\\n\\n\\nlogger = logging.getLogger(__name__)\\nlogger.setLevel(logging.INFO)\\n\\n\\n\\ndef add_deny_in_efs_policy(events: dict, context: dict) -> dict:\\n    \\\"\\\"\\\"\\n    Add deny policy statement(-s) to the EFS policy whether it is empty or not\\n    :return: updated EFS policy with deny\\n    \\\"\\\"\\\"\\n    if (\\n        \\\"ActionsToDeny\\\" not in events\\n        or \\\"Resource\\\" not in events\\n        or \\\"SourcePolicy\\\" not in events\\n        or \\\"Principal\\\" not in events\\n    ):\\n        raise KeyError(\\n            \\\"Requires ActionsToDeny and Resource and SourcePolicy and Principal in events\\\"\\n        )\\n\\n    actions_to_deny: List = events.get(\\\"ActionsToDeny\\\") or \\\"\\\"\\n    resource: str = events.get(\\\"Resource\\\") or \\\"\\\"\\n    source_policy = events.get(\\\"SourcePolicy\\\") or None\\n    source_policy = (\\n        None\\n        if type(source_policy) == str and source_policy.startswith(\\\"{{\\\")\\n        else source_policy\\n    )\\n    principal: dict = {\\\"AWS\\\": events.get(\\\"Principal\\\") or \\\"\\\"}\\n\\n    deny_policy_statement_id: str = f\\\"DenyPolicyStatement-{uuid.uuid4()}\\\"\\n    deny_policy_statement: dict = {\\n        \\\"Effect\\\": \\\"Deny\\\",\\n        \\\"Sid\\\": deny_policy_statement_id,\\n        \\\"Principal\\\": principal,\\n        \\\"Action\\\": actions_to_deny,\\n        \\\"Resource\\\": resource,\\n    }\\n\\n    if source_policy is None:\\n        policy_id: str = f\\\"DenyPolicy-{uuid.uuid4()}\\\"\\n        allow_policy_statement_id: str = f\\\"AllowPolicyStatement-{uuid.uuid4()}\\\"\\n        default_policy_statement: dict = {\\n            \\\"Effect\\\": \\\"Allow\\\",\\n            \\\"Sid\\\": allow_policy_statement_id,\\n            \\\"Principal\\\": \\\"*\\\",\\n            \\\"Action\\\": [\\n                \\\"elasticfilesystem:ClientMount\\\",\\n                \\\"elasticfilesystem:ClientWrite\\\",\\n                \\\"elasticfilesystem:ClientRootAccess\\\",\\n            ],\\n            \\\"Resource\\\": resource,\\n            \\\"Condition\\\": {\\\"Bool\\\": {\\\"elasticfilesystem:AccessedViaMountTarget\\\": True}},\\n        }\\n\\n        new_efs_policy: dict = {\\n            \\\"Version\\\": \\\"2012-10-17\\\",\\n            \\\"Id\\\": policy_id,\\n            \\\"Statement\\\": [default_policy_statement, deny_policy_statement],\\n        }\\n        return {\\n            \\\"Policy\\\": json.dumps(new_efs_policy),\\n            \\\"PolicySid\\\": policy_id,\\n            \\\"DenyPolicyStatementSid\\\": deny_policy_statement_id,\\n        }\\n\\n    source_policy: dict = json.loads(source_policy)\\n    statement: List = source_policy.get(\\\"Statement\\\") or None\\n    if not statement:\\n        raise KeyError(\\\"Requires not empty Statement in EFS Policy\\\")\\n    statement.append(deny_policy_statement)\\n    return {\\n        \\\"Policy\\\": json.dumps(source_policy),\\n        \\\"PolicySid\\\": source_policy.get(\\\"Id\\\") or \\\"\\\",\\n        \\\"DenyPolicyStatementSid\\\": deny_policy_statement_id,\\n    }\"\n    },\n    \"outputs\" : [ {\n      \"Name\" : \"Policy\",\n      \"Selector\" : \"$.Payload.Policy\",\n      \"Type\" : \"String\"\n    }, {\n      \"Name\" : \"PolicySid\",\n      \"Selector\" : \"$.Payload.PolicySid\",\n      \"Type\" : \"String\"\n    }, {\n      \"Name\" : \"DenyPolicyStatementSid\",\n      \"Selector\" : \"$.Payload.DenyPolicyStatementSid\",\n      \"Type\" : \"String\"\n    } ]\n  }, {\n    \"name\" : \"InjectFailure\",\n    \"description\" : \"Inject failure by setting the EFS policy to the generated one, which has deny-mount permissions.\",\n    \"action\" : \"aws:executeAwsApi\",\n    \"onFailure\" : \"step:RollbackCurrentExecution\",\n    \"onCancel\" : \"step:TriggerRollback\",\n    \"inputs\" : {\n      \"Service\" : \"efs\",\n      \"Api\" : \"PutFileSystemPolicy\",\n      \"FileSystemId\" : \"{{ FileSystemId }}\",\n      \"Policy\" : \"{{ GenerateBadEfsPolicy.Policy }}\"\n    }\n  }, {\n    \"name\" : \"MountEfsOnDeniedInstance\",\n    \"description\" : \"Try to mount the EFS filesystem on the test EC2 instance which should be denied, for the alarm to trigger.\",\n    \"action\" : \"aws:runCommand\",\n    \"onFailure\" : \"step:RollbackCurrentExecution\",\n    \"onCancel\" : \"step:TriggerRollback\",\n    \"inputs\" : {\n      \"DocumentName\" : \"AWS-RunShellScript\",\n      \"InstanceIds\" : [ \"{{ InstanceId }}\" ],\n      \"Parameters\" : {\n        \"commands\" : [ \"mkdir -p {{ MountPath }}\", \"mount -t efs -o tls,iam {{ FileSystemId }}:/ {{ MountPath }} || true\", \"umount {{ MountPath }} || true\" ]\n      }\n    }\n  }, {\n    \"name\" : \"AssertAlarmToBeRed\",\n    \"description\" : \"Ensure alarm is red after injecting the failure. Fail if alarm is not red within expected time.\",\n    \"action\" : \"aws:waitForAwsResourceProperty\",\n    \"onFailure\" : \"step:RollbackCurrentExecution\",\n    \"onCancel\" : \"step:TriggerRollback\",\n    \"inputs\" : {\n      \"Service\" : \"cloudwatch\",\n      \"Api\" : \"DescribeAlarms\",\n      \"AlarmNames\" : [ \"{{ MountFailureAlarmName }}\" ],\n      \"PropertySelector\" : \"$.MetricAlarms[0].StateValue\",\n      \"DesiredValues\" : [ \"ALARM\" ]\n    }\n  }, {\n    \"name\" : \"RollbackCurrentExecution\",\n    \"description\" : \"Apply the original EFS policy, or delete it if there was none.\",\n    \"maxAttempts\" : 5,\n    \"onCancel\" : \"step:TriggerRollback\",\n    \"action\" : \"aws:executeScript\",\n    \"inputs\" : {\n      \"Runtime\" : \"python3.8\",\n      \"Handler\" : \"deny_client_mount_rollback_current_execution\",\n      \"InputPayload\" : {\n        \"FileSystemId\" : \"{{ FileSystemId }}\",\n        \"OriginalEfsPolicy\" : \"{{ BackupCurrentExecution.EfsPolicy }}\"\n      },\n      \"Script\" : \"import logging\\nimport time\\nfrom typing import List\\nimport json\\nimport uuid\\nimport sys\\nimport subprocess\\n\\nimport boto3\\nfrom botocore.exceptions import ClientError\\n\\n\\nlogger = logging.getLogger(__name__)\\nlogger.setLevel(logging.INFO)\\n\\n\\n\\ndef deny_client_mount_rollback_current_execution(events: dict, context: dict):\\n    efs_client = boto3.client(\\\"efs\\\")\\n\\n    file_system_id: str = events.get(\\\"FileSystemId\\\") or \\\"\\\"\\n    original_efs_policy = events.get(\\\"OriginalEfsPolicy\\\") or \\\"\\\"\\n    original_efs_policy = (\\n        None\\n        if type(original_efs_policy) == str and original_efs_policy.startswith(\\\"{{\\\")\\n        else original_efs_policy\\n    )\\n\\n    if not original_efs_policy:\\n        efs_client.delete_file_system_policy(FileSystemId=file_system_id)\\n        return\\n\\n    efs_client.put_file_system_policy(\\n        FileSystemId=file_system_id, Policy=original_efs_policy\\n    )\"\n    }\n  }, {\n    \"name\" : \"MountEfsOnNoLongerDeniedInstance\",\n    \"description\" : \"Try to mount the EFS filesystem on the test EC2 instance which should succeed.\",\n    \"action\" : \"aws:runCommand\",\n    \"inputs\" : {\n      \"DocumentName\" : \"AWS-RunShellScript\",\n      \"InstanceIds\" : [ \"{{ InstanceId }}\" ],\n      \"Parameters\" : {\n        \"commands\" : [ \"mkdir -p {{ MountPath }}\", \"mount -t efs -o tls,iam {{ FileSystemId }}:/ {{ MountPath }} || true\", \"umount {{ MountPath }} || true\" ]\n      }\n    }\n  }, {\n    \"name\" : \"AssertAlarmToBeGreen\",\n    \"description\" : \"Wait for the alarm to be green after test is complete\",\n    \"action\" : \"aws:waitForAwsResourceProperty\",\n    \"onFailure\" : \"Abort\",\n    \"onCancel\" : \"Abort\",\n    \"inputs\" : {\n      \"Service\" : \"cloudwatch\",\n      \"Api\" : \"DescribeAlarms\",\n      \"AlarmNames\" : [ \"{{ MountFailureAlarmName }}\" ],\n      \"PropertySelector\" : \"$.MetricAlarms[0].StateValue\",\n      \"DesiredValues\" : [ \"OK\" ]\n    },\n    \"isEnd\" : true\n  }, {\n    \"name\" : \"TriggerRollback\",\n    \"description\" : \"This step is executed when ssm document is cancelled while it was in progress. This step starts a new execution of document in rollback mode to rollback the changes made as part of normal execution.\",\n    \"action\" : \"aws:executeScript\",\n    \"onFailure\" : \"Abort\",\n    \"outputs\" : [ {\n      \"Name\" : \"RollbackExecutionId\",\n      \"Selector\" : \"$.Payload.RollbackExecutionId\",\n      \"Type\" : \"String\"\n    } ],\n    \"inputs\" : {\n      \"Runtime\" : \"python3.8\",\n      \"Handler\" : \"start_rollback_execution\",\n      \"InputPayload\" : {\n        \"ExecutionId\" : \"{{automation:EXECUTION_ID}}\"\n      },\n      \"Script\" : \"import json\\n\\nimport boto3\\nfrom botocore.config import Config\\n\\n\\n\\n\\ndef start_rollback_execution(events, context):\\n    output = {}\\n    config = Config(retries={'max_attempts': 20, 'mode': 'standard'})\\n    ssm = boto3.client('ssm', config=config)\\n\\n    if 'ExecutionId' not in events or not events['ExecutionId']:\\n        raise KeyError('Requires not empty ExecutionId')\\n\\n    response = ssm.get_automation_execution(AutomationExecutionId=events['ExecutionId'])\\n\\n    # Get parameters for current execution and add IsRollback and PreviousExecutionId\\n    response_parameters = response['AutomationExecution']['Parameters']\\n    response_parameters['IsRollback'] = ['true']\\n    response_parameters['PreviousExecutionId'] = [events['ExecutionId']]\\n\\n    rollback_execution_response = ssm.start_automation_execution(\\n        DocumentName=response['AutomationExecution']['DocumentName'],\\n        DocumentVersion=response['AutomationExecution']['DocumentVersion'],\\n        Parameters=response_parameters\\n    )\\n    output['RollbackExecutionId'] = rollback_execution_response['AutomationExecutionId']\\n    return output\"\n    },\n    \"isEnd\" : true\n  } ]\n}",
  "CreatedDate": "2023-03-22T12:06:31.497Z",
  "DisplayName": null,
  "DocumentFormat": {
    "Value": "JSON"
  },
  "DocumentType": {
    "Value": "Automation"
  },
  "DocumentVersion": "2",
  "Name": "AWSResilienceHub-DenyEFSClientMountTest_2022-12-22",
  "Requires": [],
  "ReviewStatus": null,
  "Status": {
    "Value": "Active"
  },
  "StatusInformation": null,
  "VersionName": null,
  "ResponseMetadata": {
    "RequestId": "0abf4a57-21af-4dc6-8196-fce6bc4f2c71",
    "Metadata": {},
    "ChecksumAlgorithm": 0,
    "ChecksumValidationStatus": 0
  },
  "ContentLength": 25797,
  "HttpStatusCode": 200,
  "LoggedAt": "2023-06-01T07:11:43.9005902+00:00"
}
