{
  "AttachmentsContent": [],
  "Content": "{\n  \"schemaVersion\": \"2.2\",\n  \"description\": \"Use this document to run Chef recipes on AWS Systems Manager managed instances.\",\n  \"parameters\": {\n    \"SourceType\": {\n      \"description\": \"(Required) The source repository type for your Chef cookbooks.\",\n      \"type\": \"String\",\n      \"allowedValues\": [\n        \"GitHub\",\n        \"S3\"\n      ],\n      \"default\": \"S3\"\n    },\n    \"SourceInfo\": {\n      \"description\": \"(Required) Information about the source repository, such as repository name, owner, branch if on GitHub, or path if Amazon S3. If source type is GitHub, you can specify any of the following: 'owner', 'repository', 'path', 'getOptions', 'tokenInfo'. If source type is S3, you can specify 'path'. Example GitHub parameters: {\\\"owner\\\":\\\"awslabs\\\",\\\"repository\\\":\\\"amazon-ssm\\\",\\\"path\\\":\\\"Compliance/InSpec/PortCheck\\\",\\\"getOptions\\\":\\\"branch:master\\\"}.\",\n      \"type\": \"StringMap\",\n      \"displayType\": \"textarea\",\n      \"default\": {\n        \"path\": \"https://aws-applychefrecipes-examples.s3.amazonaws.com/apply-chef-recipes-example-cookbook.tar.gz\"\n      }\n    },\n    \"RunList\": {\n      \"type\": \"String\",\n      \"description\": \"(Required) The Chef recipes to apply. For example, recipe[cookbook_name1::recipe_name],recipe[cookbook_name2::recipe_name]\",\n      \"allowedPattern\": \"^(recipe\\\\[[^'\\\";&\\\\|><\\\\*\\\\?`\\\\$\\\\(\\\\)\\\\{\\\\}\\\\[\\\\]!#\\\\\\\\]+\\\\])(\\\\,recipe\\\\[[^'\\\";&\\\\|><\\\\*\\\\?`\\\\$\\\\(\\\\)\\\\{\\\\}\\\\[\\\\]!#\\\\\\\\]+\\\\])*$\",\n      \"default\": \"recipe[apply-chef-recipes-example-cookbook::default]\"\n    },\n    \"JsonAttributesContent\": {\n      \"description\": \"(Optional) Attributes JSON to pass to the Chef client that applies your recipes.\",\n      \"type\": \"String\",\n      \"displayType\": \"textarea\",\n      \"default\": \"{\\\"filepath\\\":\\\"/tmp/example.txt\\\", \\\"content\\\":\\\"Hello, World!\\\"}\"\n    },\n    \"ChefClientVersion\": {\n      \"type\": \"String\",\n      \"description\": \"(Optional) The Chef client version to install on instances before recipes are applied. If None is specified, Systems Manager does not install the Chef client before applying your recipes.\",\n      \"default\": \"14\",\n      \"allowedValues\": [\n        \"None\",\n        \"11\",\n        \"12\",\n        \"13\",\n        \"14\"\n      ]\n    },\n    \"ChefClientArguments\": {\n      \"type\": \"String\",\n      \"description\": \"(Optional) Extra arguments to be passed to the Chef client that applies your recipes. For more information about available arguments, run chef-client -h from an instance that has the Chef client installed.\",\n      \"default\": \"\",\n      \"allowedPattern\": \"^[^'\\\";&\\\\|><\\\\*\\\\?`\\\\$\\\\(\\\\)\\\\{\\\\}\\\\[\\\\]!#\\\\\\\\]*$\"\n    },\n    \"WhyRun\": {\n      \"type\": \"String\",\n      \"description\": \"(Optional) When set to true, enables why-run mode, which shows what will happen if the recipes are run, but does not modify target instances.\",\n      \"allowedValues\": [\n        \"True\",\n        \"False\"\n      ],\n      \"default\": \"False\"\n    },\n    \"ComplianceSeverity\": {\n      \"type\": \"String\",\n      \"description\": \"(Optional) The severity of drift between your Chef recipes and instance resources that is shown in Systems Manager compliance reports. To skip compliance reporting, specify None.\",\n      \"allowedValues\": [\n        \"None\",\n        \"Critical\",\n        \"High\",\n        \"Medium\",\n        \"Low\",\n        \"Informational\",\n        \"Unspecified\"\n      ],\n      \"default\": \"None\"\n    },\n    \"ComplianceType\": {\n      \"type\": \"String\",\n      \"description\": \"(Optional) The compliance type that you want reported in compliance results.\",\n      \"default\": \"Custom:Chef\",\n      \"allowedPattern\": \"^$|^Custom\\\\:[a-zA-Z0-9\\\\-_\\\\.]{1,93}$\"\n    },\n    \"ComplianceReportBucket\": {\n      \"type\": \"String\",\n      \"description\": \"(Optional) The name of an existing Amazon S3 bucket in which to store details about every Chef run executed by this document, including resource configuration and compliance results.\",\n      \"default\": \"\",\n      \"allowedPattern\": \"^[^'\\\";&\\\\|><\\\\*\\\\?`\\\\$\\\\(\\\\)\\\\{\\\\}\\\\[\\\\]!#\\\\\\\\]*$\"\n    }\n  },\n  \"mainSteps\": [\n    {\n      \"action\": \"aws:downloadContent\",\n      \"name\": \"downloadCookbooks\",\n      \"inputs\": {\n        \"SourceType\": \"{{ SourceType }}\",\n        \"SourceInfo\": \"{{ SourceInfo }}\",\n        \"destinationPath\": \"customer_cookbooks\"\n      }\n    },\n    {\n      \"action\": \"aws:runShellScript\",\n      \"name\": \"setCustomJson\",\n      \"inputs\": {\n        \"runCommand\": [\n          \"#!/bin/bash\",\n          \"# MIT No Attribution\",\n          \"#\",\n          \"# Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\",\n          \"#\",\n          \"# Permission is hereby granted, free of charge, to any person obtaining a copy of this\",\n          \"# software and associated documentation files (the \\\"Software\\\"), to deal in the Software\",\n          \"# without restriction, including without limitation the rights to use, copy, modify,\",\n          \"# merge, publish, distribute, sublicense, and/or sell copies of the Software, and to\",\n          \"# permit persons to whom the Software is furnished to do so.\",\n          \"#\",\n          \"# THE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,\",\n          \"# INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\",\n          \"# PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\",\n          \"# HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\",\n          \"# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\",\n          \"# SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\",\n          \"#\",\n          \"\",\n          \"set -e\",\n          \"\",\n          \"function report_error() {\",\n          \"    echo \\\"ERROR: $*\\\" 1>&2\",\n          \"}\",\n          \"\",\n          \"function throw_error() {\",\n          \"    report_error \\\"$*\\\"\",\n          \"    exit 1\",\n          \"}\",\n          \"\",\n          \"if [[ -z ${BASH_SOURCE[0]} ]]; then\",\n          \"    throw_error \\\"Bash script source is empty.\\\"\",\n          \"fi\",\n          \"\",\n          \"if [[ ! -x \\\"$(command -v awk)\\\" ]]; then\",\n          \"    throw_error \\\"awk is not installed.\\\"\",\n          \"fi\",\n          \"\",\n          \"< \\\"${BASH_SOURCE[0]}\\\" awk -v RS='^$' -F 'AWSAPPLYCHEF_RECIPES_JSONDELIM' '{print $3}' >json_attributes.json\",\n          \"exit 0\",\n          \"\",\n          \"AWSAPPLYCHEF_RECIPES_JSONDELIM{{ JsonAttributesContent }}\"\n        ]\n      }\n    },\n    {\n      \"action\": \"aws:runShellScript\",\n      \"name\": \"runShellScript\",\n      \"inputs\": {\n        \"runCommand\": [\n          \"#!/bin/bash\",\n          \"# MIT No Attribution\",\n          \"#\",\n          \"# Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\",\n          \"#\",\n          \"# Permission is hereby granted, free of charge, to any person obtaining a copy of this\",\n          \"# software and associated documentation files (the \\\"Software\\\"), to deal in the Software\",\n          \"# without restriction, including without limitation the rights to use, copy, modify,\",\n          \"# merge, publish, distribute, sublicense, and/or sell copies of the Software, and to\",\n          \"# permit persons to whom the Software is furnished to do so.\",\n          \"#\",\n          \"# THE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,\",\n          \"# INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\",\n          \"# PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\",\n          \"# HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\",\n          \"# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\",\n          \"# SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\",\n          \"#\",\n          \"\",\n          \"set -e\",\n          \"\",\n          \"SSM_CHEF_EXECUTION_BASE_DIR=\\\"$(pwd)\\\"\",\n          \"export SSM_CHEF_EXECUTION_BASE_DIR\",\n          \"export SSM_CHEF_SOURCE_TYPE=\\\"{{ SourceType }}\\\"\",\n          \"export SSM_CHEF_RUN_LIST=\\\"{{ RunList }}\\\"\",\n          \"export SSM_CHEF_WHY_RUN=\\\"{{ WhyRun }}\\\"\",\n          \"export SSM_CHEF_CLIENT_ARGUMENTS=({{ ChefClientArguments }})\",\n          \"export SSM_CHEF_CLIENT_VERSION=\\\"{{ ChefClientVersion }}\\\"\",\n          \"export SSM_CHEF_COMPLIANCE_SEVERITY=\\\"{{ ComplianceSeverity }}\\\"\",\n          \"export SSM_CHEF_COMPLIANCE_TYPE=\\\"{{ ComplianceType }}\\\"\",\n          \"export SSM_CHEF_COMPLIANCE_REPORT_BUCKET=\\\"{{ ComplianceReportBucket }}\\\"\",\n          \"\",\n          \"CHEF_RUN_LOCK_DIR=\\\"/tmp/aws/chef_run_locks\\\"\",\n          \"CHEF_RUN_LOCK_FILE=\\\"$CHEF_RUN_LOCK_DIR/aws-apply-chef-recipes.lock\\\"\",\n          \"SSM_CHEF_RUN_ASSETS_BUCKET=\\\"aws-ssm-$AWS_SSM_REGION_NAME\\\"\",\n          \"COMPLIANCE_REPORT_COOKBOOK_SHA_256=\\\"7bd335b078fd8cf68d8b36d164165b5e0d33eb9d53cb6ec8e309abec11181fe4\\\"\",\n          \"\",\n          \"function report_info() {\",\n          \"    echo \\\"INFO: $*\\\"\",\n          \"}\",\n          \"\",\n          \"function report_warning() {\",\n          \"    echo \\\"WARNING: $*\\\"\",\n          \"}\",\n          \"\",\n          \"function report_error() {\",\n          \"    echo \\\"ERROR: $*\\\" 1>&2\",\n          \"}\",\n          \"\",\n          \"function throw_error() {\",\n          \"    report_error \\\"$*\\\"\",\n          \"    exit 1\",\n          \"}\",\n          \"\",\n          \"function get_installed_chef_version() {\",\n          \"    local chef_version\",\n          \"    chef_version=$(chef-client --version) || true\",\n          \"    echo \\\"$chef_version\\\" | grep -E -o '[0-9]+\\\\.[0-9]+\\\\.[0-9]+'\",\n          \"}\",\n          \"\",\n          \"function get_installed_chef_major_version() {\",\n          \"    local chef_version\",\n          \"    chef_version=$(get_installed_chef_version)\",\n          \"    if [[ -z \\\"$chef_version\\\" ]]; then\",\n          \"        throw_error \\\"Chef client is not installed. Install Chef client and then run the command again.\\\"\",\n          \"    fi\",\n          \"\",\n          \"    echo \\\"$chef_version\\\" | grep -E -o '^[0-9]+'\",\n          \"}\",\n          \"\",\n          \"function validate_certificate() {\",\n          \"    if [ -e /opt/chef/embedded/ssl/cert.pem ]; then\",\n          \"        (grep -qxF 'DST Root CA X3' /opt/chef/embedded/ssl/cert.pem && sudo sed -i '/DST Root CA X3/,+19d' /opt/chef/embedded/ssl/cert.pem);\",\n          \"        (grep -qxF 'ISRG Root X1' /opt/chef/embedded/ssl/cert.pem || printf '\\nISRG Root X1\\n============\\n-----BEGIN CERTIFICATE-----\\nMIIFazCCA1OgAwIBAgIRAIIQz7DSQONZRGPgu2OCiwAwDQYJKoZIhvcNAQELBQAwTzELMAkGA1UE\\nBhMCVVMxKTAnBgNVBAoTIEludGVybmV0IFNlY3VyaXR5IFJlc2VhcmNoIEdyb3VwMRUwEwYDVQQD\\nEwxJU1JHIFJvb3QgWDEwHhcNMTUwNjA0MTEwNDM4WhcNMzUwNjA0MTEwNDM4WjBPMQswCQYDVQQG\\nEwJVUzEpMCcGA1UEChMgSW50ZXJuZXQgU2VjdXJpdHkgUmVzZWFyY2ggR3JvdXAxFTATBgNVBAMT\\nDElTUkcgUm9vdCBYMTCCAiIwDQYJKoZIhvcNAQEBBQADggIPADCCAgoCggIBAK3oJHP0FDfzm54r\\nVygch77ct984kIxuPOZXoHj3dcKi/vVqbvYATyjb3miGbESTtrFj/RQSa78f0uoxmyF+0TM8ukj1\\n3Xnfs7j/EvEhmkvBioZxaUpmZmyPfjxwv60pIgbz5MDmgK7iS4+3mX6UA5/TR5d8mUgjU+g4rk8K\\nb4Mu0UlXjIB0ttov0DiNewNwIRt18jA8+o+u3dpjq+sWT8KOEUt+zwvo/7V3LvSye0rgTBIlDHCN\\nAymg4VMk7BPZ7hm/ELNKjD+Jo2FR3qyHB5T0Y3HsLuJvW5iB4YlcNHlsdu87kGJ55tukmi8mxdAQ\\n4Q7e2RCOFvu396j3x+UCB5iPNgiV5+I3lg02dZ77DnKxHZu8A/lJBdiB3QW0KtZB6awBdpUKD9jf\\n1b0SHzUvKBds0pjBqAlkd25HN7rOrFleaJ1/ctaJxQZBKT5ZPt0m9STJEadao0xAH0ahmbWnOlFu\\nhjuefXKnEgV4We0+UXgVCwOPjdAvBbI+e0ocS3MFEvzG6uBQE3xDk3SzynTnjh8BCNAw1FtxNrQH\\nusEwMFxIt4I7mKZ9YIqioymCzLq9gwQbooMDQaHWBfEbwrbwqHyGO0aoSCqI3Haadr8faqU9GY/r\\nOPNk3sgrDQoo//fb4hVC1CLQJ13hef4Y53CIrU7m2Ys6xt0nUW7/vGT1M0NPAgMBAAGjQjBAMA4G\\nA1UdDwEB/wQEAwIBBjAPBgNVHRMBAf8EBTADAQH/MB0GA1UdDgQWBBR5tFnme7bl5AFzgAiIyBpY\\n9umbbjANBgkqhkiG9w0BAQsFAAOCAgEAVR9YqbyyqFDQDLHYGmkgJykIrGF1XIpu+ILlaS/V9lZL\\nubhzEFnTIZd+50xx+7LSYK05qAvqFyFWhfFQDlnrzuBZ6brJFe+GnY+EgPbk6ZGQ3BebYhtF8GaV\\n0nxvwuo77x/Py9auJ/GpsMiu/X1+mvoiBOv/2X/qkSsisRcOj/KKNFtY2PwByVS5uCbMiogziUwt\\nhDyC3+6WVwW6LLv3xLfHTjuCvjHIInNzktHCgKQ5ORAzI4JMPJ+GslWYHb4phowim57iaztXOoJw\\nTdwJx4nLCgdNbOhdjsnvzqvHu7UrTkXWStAmzOVyyghqpZXjFaH3pO3JLF+l+/+sKAIuvtd7u+Nx\\ne5AW0wdeRlN8NwdCjNPElpzVmbUq4JUagEiuTDkHzsxHpFKVK7q4+63SM1N95R1NbdWhscdCb+ZA\\nJzVcoyi3B43njTOQ5yOf+1CceWxG1bQVs5ZufpsMljq4Ui0/1lvh+wjChP4kqKOJ2qxq4RgqsahD\\nYVvTH9w7jXbyLeiNdd8XM2w9U/t7y0Ff/9yi0GE44Za4rF2LN9d11TPAmRGunUHBcnWEvgJBQl9n\\nJEiU0Zsnvgc/ubhPgXRR4Xq37Z0j4r7g1SgEEzwxA57demyPxgcYxn/eR44/KJ4EBs+lVDR3veyJ\\nm+kXQ99b21/+jh5Xos1AnX5iItreGCc=\\n-----END CERTIFICATE-----\\n' | sudo tee -a /opt/chef/embedded/ssl/cert.pem);\",\n          \"        if (! grep -qxF 'DST Root CA X3' /opt/chef/embedded/ssl/cert.pem && grep -qxF 'ISRG Root X1' /opt/chef/embedded/ssl/cert.pem); then\",\n          \"            echo \\\"Lets Encrypt certificate fixed\\\"\",\n          \"        fi\",\n          \"    fi\",\n          \"}\",\n          \"\",\n          \"function validate_compliance_parameters() {\",\n          \"    if [[ -z \\\"$SSM_CHEF_COMPLIANCE_SEVERITY\\\" ]]; then\",\n          \"        throw_error \\\"ComplianceSeverity cannot be empty. Use 'None' to skip compliance reporting.\\\"\",\n          \"    fi\",\n          \"\",\n          \"    if [[ \\\"$SSM_CHEF_COMPLIANCE_SEVERITY\\\" == \\\"None\\\" ]]; then\",\n          \"        if [[ -n \\\"$SSM_CHEF_COMPLIANCE_REPORT_BUCKET\\\" ]]; then\",\n          \"            report_warning \\\"Compliance reports S3 bucket is set, but compliance severity is set to 'None'. No compliance reports will be generated.\\\"\",\n          \"        fi\",\n          \"\",\n          \"        if [[ -n \\\"$SSM_CHEF_COMPLIANCE_TYPE\\\" ]]; then\",\n          \"            report_warning \\\"Compliance type is not empty but compliance severity is set to 'None'. No compliance reports will be generated.\\\"\",\n          \"        fi\",\n          \"    else\",\n          \"        if [[ -z \\\"$SSM_CHEF_COMPLIANCE_REPORT_BUCKET\\\" ]]; then\",\n          \"            report_info \\\"ComplianceReportBucket is not set. Sending the compliance report to S3 will be skipped.\\\"\",\n          \"        fi\",\n          \"\",\n          \"        if [[ -z \\\"$SSM_CHEF_COMPLIANCE_TYPE\\\" ]]; then\",\n          \"            throw_error \\\"ComplianceType is not set. ComplianceType must be set when ComplianceSeverity is not 'None'.\\\"\",\n          \"        fi\",\n          \"\",\n          \"        if [[ \\\"$SSM_CHEF_CLIENT_VERSION\\\" != \\\"None\\\" ]] && [[ \\\"$SSM_CHEF_CLIENT_VERSION\\\" -le 11 ]]; then\",\n          \"            throw_error \\\"Compliance reporting is supported for Chef client versions 12 and newer. Set the compliance severity to 'None'.\\\"\",\n          \"        elif [[ \\\"$SSM_CHEF_CLIENT_VERSION\\\" == \\\"None\\\" ]]; then\",\n          \"            local chef_version\",\n          \"            chef_version=$(get_installed_chef_major_version) || chef_version=\\\"\\\"\",\n          \"\",\n          \"            if [[ -n \\\"$chef_version\\\" ]] && [[ \\\"$chef_version\\\" -le 11 ]]; then\",\n          \"                throw_error \\\"Compliance reporting is supported for Chef client versions 12 and newer. Set the compliance severity to 'None'.\\\"\",\n          \"            fi\",\n          \"        fi\",\n          \"    fi\",\n          \"}\",\n          \"\",\n          \"function validate_folder_checksums() {\",\n          \"    local folder=\\\"$1\\\"\",\n          \"    local sha_256_checksum=\\\"$2\\\"\",\n          \"\",\n          \"    if [[ ! -x \\\"$(command -v sha256sum)\\\" ]]; then\",\n          \"        throw_error \\\"Failed to verify checksum. sha256sum is not installed.\\\"\",\n          \"    fi\",\n          \"\",\n          \"    if [[ ! -x \\\"$(command -v realpath)\\\" ]]; then\",\n          \"        throw_error \\\"Failed to verify checksum. realpath is not installed.\\\"\",\n          \"    fi\",\n          \"\",\n          \"    if [[ ! -x \\\"$(command -v sort)\\\" ]]; then\",\n          \"        throw_error \\\"Failed to verify checksum. sort is not installed.\\\"\",\n          \"    fi\",\n          \"\",\n          \"    (\",\n          \"        local folder_full_path\",\n          \"        folder_full_path=$(realpath \\\"$folder\\\") || throw_error \\\"Failed to get full path for $folder\\\"\",\n          \"\",\n          \"        cd \\\"$folder_full_path\\\"\",\n          \"\",\n          \"        local dir_check_sum\",\n          \"        dir_check_sum=$(find \\\"$folder_full_path\\\" -type f -exec realpath --relative-to \\\"$folder_full_path\\\" {} \\\\; |\",\n          \"            sort -s -f | xargs -n1 sha256sum | sha256sum) || throw_error \\\"An error has occurred during checksum calculation.\\\"\",\n          \"        if [[ \\\"$dir_check_sum\\\" != \\\"$sha_256_checksum  -\\\" ]]; then\",\n          \"            throw_error \\\"Checksum verification for $folder_full_path failed.\\\"\",\n          \"        fi\",\n          \"    ) || throw_error \\\"Failed to validate checksum for $folder.\\\"\",\n          \"}\",\n          \"\",\n          \"function download_file() {\",\n          \"    local url=\\\"$1\\\"\",\n          \"    local destination=\\\"$2\\\"\",\n          \"\",\n          \"    if [[ -x \\\"$(command -v curl)\\\" ]]; then\",\n          \"        curl -L -o \\\"$destination\\\" \\\"$url\\\" || throw_error \\\"Failed to download file. curl exited with $?.\\\"\",\n          \"        return\",\n          \"    fi\",\n          \"\",\n          \"    if [[ -x \\\"$(command -v wget)\\\" ]]; then\",\n          \"        wget -O \\\"$destination\\\" \\\"$url\\\" || throw_error \\\"Failed to download file. wget exited with $?.\\\"\",\n          \"        return\",\n          \"    fi\",\n          \"\",\n          \"    throw_error \\\"Failed to download file. Neither curl nor wget are installed.\\\"\",\n          \"}\",\n          \"\",\n          \"function download_from_s3() {\",\n          \"    local bucket_name=\\\"$1\\\"\",\n          \"    local keyname=\\\"$2\\\"\",\n          \"    local destination=\\\"$3\\\"\",\n          \"    local url=\\\"\\\"\",\n          \"\",\n          \"    if [[ \\\"$AWS_SSM_REGION_NAME\\\" == cn-* ]]; then\",\n          \"        url=\\\"https://s3.$AWS_SSM_REGION_NAME.amazonaws.com.cn/$bucket_name/$keyname\\\"\",\n          \"    elif [[ \\\"$AWS_SSM_REGION_NAME\\\" == us-gov-* ]]; then\",\n          \"        url=\\\"https://s3-fips-$AWS_SSM_REGION_NAME.amazonaws.com/$bucket_name/$keyname\\\"\",\n          \"    elif [[ \\\"$AWS_SSM_REGION_NAME\\\" == \\\"us-east-1\\\" ]]; then\",\n          \"        url=\\\"https://s3.amazonaws.com/$bucket_name/$keyname\\\"\",\n          \"    else\",\n          \"        url=\\\"https://s3-$AWS_SSM_REGION_NAME.amazonaws.com/$bucket_name/$keyname\\\"\",\n          \"    fi\",\n          \"\",\n          \"    download_file \\\"$url\\\" \\\"$destination\\\"\",\n          \"}\",\n          \"\",\n          \"function should_install_chef() {\",\n          \"    if [[ \\\"$SSM_CHEF_CLIENT_VERSION\\\" == \\\"None\\\" ]] || [[ -z \\\"$SSM_CHEF_CLIENT_VERSION\\\" ]]; then\",\n          \"        return 1\",\n          \"    fi\",\n          \"\",\n          \"    if [[ -z \\\"$(command -V chef-client 2>/dev/null)\\\" ]] || different_chef_version_installed; then\",\n          \"        return 0\",\n          \"    else\",\n          \"        return 1\",\n          \"    fi\",\n          \"}\",\n          \"\",\n          \"function get_fully_qualified_chef_version() {\",\n          \"    if [[ \\\"$SSM_CHEF_CLIENT_VERSION\\\" == \\\"11\\\" ]]; then\",\n          \"        echo \\\"11.18.12\\\"\",\n          \"    elif [[ \\\"$SSM_CHEF_CLIENT_VERSION\\\" == \\\"12\\\" ]]; then\",\n          \"        echo \\\"12.22.5\\\"\",\n          \"    elif [[ \\\"$SSM_CHEF_CLIENT_VERSION\\\" == \\\"13\\\" ]]; then\",\n          \"        echo \\\"13.12.14\\\"\",\n          \"    elif [[ \\\"$SSM_CHEF_CLIENT_VERSION\\\" == \\\"14\\\" ]]; then\",\n          \"        echo \\\"14.14.29\\\"\",\n          \"    fi\",\n          \"}\",\n          \"\",\n          \"function different_chef_version_installed() {\",\n          \"    local installed_chef_version\",\n          \"    installed_chef_version=$(get_installed_chef_version)\",\n          \"\",\n          \"    local user_requested_version\",\n          \"    user_requested_version=\\\"$(get_fully_qualified_chef_version)\\\"\",\n          \"\",\n          \"    if [[ \\\"$installed_chef_version\\\" == \\\"$user_requested_version\\\" ]]; then\",\n          \"        return 1\",\n          \"    else\",\n          \"        return 0\",\n          \"    fi\",\n          \"}\",\n          \"\",\n          \"function install_chef() {\",\n          \"    if should_install_chef; then\",\n          \"        download_file \\\"https://omnitruck.chef.io/install.sh\\\" \\\"$SSM_CHEF_EXECUTION_BASE_DIR/install-chef.sh\\\"\",\n          \"        sudo bash \\\"$SSM_CHEF_EXECUTION_BASE_DIR/install-chef.sh\\\" -d \\\"/opt/aws/chef-binaries-cache\\\" -v \\\"$(get_fully_qualified_chef_version)\\\"\",\n          \"\",\n          \"        if [[ ! -x \\\"$(command -v chef-client)\\\" ]]; then\",\n          \"            # On SUSE Enterprise Linux the installation sometimes succeeds but fails internally. The following performs a reinstallation in this case\",\n          \"            sudo bash \\\"$SSM_CHEF_EXECUTION_BASE_DIR/install-chef.sh\\\" -d \\\"/opt/aws/chef-binaries-cache\\\" -v \\\"$(get_fully_qualified_chef_version)\\\"\",\n          \"        fi\",\n          \"    fi\",\n          \"}\",\n          \"\",\n          \"function validate_installed_chef_version() {\",\n          \"    local chef_version\",\n          \"    chef_version=$(get_installed_chef_major_version) || throw_error \\\"Failed to get the Chef client version.\\\"\",\n          \"\",\n          \"    if [[ \\\"$chef_version\\\" -gt \\\"14\\\" ]]; then\",\n          \"        throw_error \\\"Chef client version $(get_installed_chef_version) is not supported. Only versions 14 and older are supported.\\\"\",\n          \"    fi\",\n          \"}\",\n          \"\",\n          \"function validate_run_list() {\",\n          \"    if [[ -z \\\"$SSM_CHEF_RUN_LIST\\\" ]]; then\",\n          \"        throw_error \\\"Run list is empty. The Chef client cannot run. Use the RunList parameter to specify recipes to run. For example: \\\\\\\"recipe[cb1::recipe_name],recipe[cb2::recipe]\\\\\\\"\\\"\",\n          \"    fi\",\n          \"}\",\n          \"\",\n          \"function obtain_compliance_reporter_cookbook() {\",\n          \"    if [[ \\\"$SSM_CHEF_COMPLIANCE_SEVERITY\\\" == \\\"None\\\" ]]; then\",\n          \"        return\",\n          \"    fi\",\n          \"\",\n          \"    (\",\n          \"        cd \\\"$SSM_CHEF_EXECUTION_BASE_DIR\\\"\",\n          \"        download_from_s3 \\\"$SSM_CHEF_RUN_ASSETS_BUCKET\\\" \\\"statemanagerdocumentspayload/AWS-ApplyChefRecipes/aws-ssm-cookbooks-v0.1.tar.gz\\\" \\\"aws-ssm-cookbooks.tar.gz\\\"\",\n          \"        mkdir -p \\\"aws-ssm-cookbooks\\\"\",\n          \"        tar xf \\\"aws-ssm-cookbooks.tar.gz\\\" --strip-components=1 -C \\\"aws-ssm-cookbooks\\\"\",\n          \"        validate_folder_checksums \\\"aws-ssm-cookbooks\\\" \\\"$COMPLIANCE_REPORT_COOKBOOK_SHA_256\\\"\",\n          \"    ) || exit $?\",\n          \"\",\n          \"    echo \\\"$SSM_CHEF_EXECUTION_BASE_DIR/aws-ssm-cookbooks/cookbooks/\\\"\",\n          \"    return\",\n          \"}\",\n          \"\",\n          \"function extract_cookbooks() {\",\n          \"    local archive=\\\"$1\\\"\",\n          \"    local destination=\\\"$2\\\"\",\n          \"\",\n          \"    mkdir -p \\\"$destination\\\"\",\n          \"\",\n          \"    if (tar xf \\\"$archive\\\" -C \\\"$destination\\\" >/dev/null); then\",\n          \"        return\",\n          \"    fi\",\n          \"\",\n          \"    report_error \\\"Cookbooks could not be extracted with tar. Trying with unzip...\\\"\",\n          \"\",\n          \"    if [[ ! -x \\\"$(command -v unzip)\\\" ]]; then\",\n          \"        throw_error \\\"'unzip' is not installed. Failed to extract cookbooks.\\\"\",\n          \"    fi\",\n          \"\",\n          \"    if (unzip -o \\\"$archive\\\" -d \\\"$destination\\\" >/dev/null); then\",\n          \"        return\",\n          \"    fi\",\n          \"\",\n          \"    throw_error \\\"Failed to extract the cookbooks with 'unzip'. The file should be a compressed tarball (.tar.gz) or a zip file (.zip).\\\"\",\n          \"}\",\n          \"\",\n          \"function extract_downloaded_customer_cookbooks() {\",\n          \"    if [[ -z \\\"$SSM_CHEF_SOURCE_TYPE\\\" ]]; then\",\n          \"        throw_error \\\"Cookbook source type must not be empty.\\\"\",\n          \"    fi\",\n          \"\",\n          \"    if [[ -f \\\"$SSM_CHEF_EXECUTION_BASE_DIR/customer_cookbooks\\\" ]]; then\",\n          \"        extract_cookbooks \\\"$SSM_CHEF_EXECUTION_BASE_DIR/customer_cookbooks\\\" \\\"$SSM_CHEF_EXECUTION_BASE_DIR/customer_cookbooks_extracted\\\"\",\n          \"    elif [[ -d \\\"$SSM_CHEF_EXECUTION_BASE_DIR/customer_cookbooks\\\" ]]; then\",\n          \"        mv \\\"$SSM_CHEF_EXECUTION_BASE_DIR/customer_cookbooks\\\" \\\"$SSM_CHEF_EXECUTION_BASE_DIR/customer_cookbooks_extracted/\\\" >/dev/null\",\n          \"    fi\",\n          \"\",\n          \"    if [[ -d \\\"$SSM_CHEF_EXECUTION_BASE_DIR/customer_cookbooks_extracted/cookbooks/\\\" ]]; then\",\n          \"        echo \\\"$SSM_CHEF_EXECUTION_BASE_DIR/customer_cookbooks_extracted/cookbooks/\\\"\",\n          \"    else\",\n          \"        echo \\\"$SSM_CHEF_EXECUTION_BASE_DIR/customer_cookbooks_extracted/\\\"\",\n          \"    fi\",\n          \"}\",\n          \"\",\n          \"function generate_config_rb() {\",\n          \"    local customer_cookbooks_location=\\\"$1\\\"\",\n          \"    local compliance_report_cookbooks_location=\\\"$2\\\"\",\n          \"\",\n          \"    (\",\n          \"        cd \\\"$SSM_CHEF_EXECUTION_BASE_DIR\\\"\",\n          \"        {\",\n          \"            echo \\\"cookbook_path [\\\"\",\n          \"            if [[ \\\"$SSM_CHEF_COMPLIANCE_SEVERITY\\\" != \\\"None\\\" ]]; then\",\n          \"\",\n          \"                # Sanity check\",\n          \"                if [[ ! -d \\\"$compliance_report_cookbooks_location/aws-ssm-report-handler\\\" ]]; then\",\n          \"                    throw_error \\\"Compliance reporting cookbook is not present.\\\"\",\n          \"                fi\",\n          \"\",\n          \"                if [[ \\\"$(get_installed_chef_major_version)\\\" -ge \\\"12\\\" ]] && [[ \\\"$(get_installed_chef_major_version)\\\" -le \\\"13\\\" ]]; then\",\n          \"                    echo \\\"  '$compliance_report_cookbooks_location/3rd-party-cookbooks/chef12-13',\\\"\",\n          \"                fi\",\n          \"\",\n          \"                echo \\\"  '$compliance_report_cookbooks_location',\\\"\",\n          \"            fi\",\n          \"\",\n          \"            echo \\\"  '$customer_cookbooks_location'\\\"\",\n          \"            echo \\\"]\\\"\",\n          \"\",\n          \"            echo \\\"local_mode true\\\"\",\n          \"        } >>config.rb\",\n          \"\",\n          \"    ) || exit $?\",\n          \"}\",\n          \"\",\n          \"function execute_chef() {\",\n          \"    local customer_cookbooks_location=\\\"$1\\\"\",\n          \"    local compliance_report_cookbooks_location=\\\"$2\\\"\",\n          \"\",\n          \"    validate_installed_chef_version\",\n          \"    local json_attributes_argument=()\",\n          \"\",\n          \"    # Chef 14.11 and above needs the HOME variable to be set:\",\n          \"    if [[ -z $HOME ]]; then\",\n          \"        export HOME=\\\"$SSM_CHEF_EXECUTION_BASE_DIR\\\"\",\n          \"    fi\",\n          \"\",\n          \"    if [[ -f \\\"$SSM_CHEF_EXECUTION_BASE_DIR/json_attributes.json\\\" ]]; then\",\n          \"        if (grep -q '[^[:space:]]' \\\"$SSM_CHEF_EXECUTION_BASE_DIR/json_attributes.json\\\"); then\",\n          \"            json_attributes_argument=(--json-attributes \\\"$SSM_CHEF_EXECUTION_BASE_DIR/json_attributes.json\\\")\",\n          \"        fi\",\n          \"    fi\",\n          \"    generate_config_rb \\\"$customer_cookbooks_location\\\" \\\"$compliance_report_cookbooks_location\\\"\",\n          \"\",\n          \"    local chef_command_exit_code=0\",\n          \"    local install_compliance_gems_exit_code=0\",\n          \"    local why_run_exit_code=0\",\n          \"    # Make mutating run when why-run is not requested\",\n          \"    if [[ \\\"$SSM_CHEF_WHY_RUN\\\" != \\\"True\\\" ]]; then\",\n          \"        chef-client -c \\\"$SSM_CHEF_EXECUTION_BASE_DIR/config.rb\\\" \\\"${SSM_CHEF_CLIENT_ARGUMENTS[@]}\\\" \\\"${json_attributes_argument[@]}\\\" -o \\\"$SSM_CHEF_RUN_LIST\\\" || chef_command_exit_code=$?\",\n          \"        if [[ \\\"$chef_command_exit_code\\\" != \\\"0\\\" ]]; then\",\n          \"            report_error \\\"User-specified recipes could not be run.\\\"\",\n          \"        else\",\n          \"            report_info \\\"User-specified recipes ran successfully.\\\"\",\n          \"        fi\",\n          \"    else\",\n          \"        report_info \\\"Skipping a mutating run because only 'why-run' was requested.\\\"\",\n          \"    fi\",\n          \"\",\n          \"    # Make why-run if requested or if compliance should be reported\",\n          \"    if [[ \\\"$SSM_CHEF_WHY_RUN\\\" == \\\"True\\\" ]] || [[ \\\"$SSM_CHEF_COMPLIANCE_SEVERITY\\\" != \\\"None\\\" ]]; then\",\n          \"        WHYRUN_CHEF_RUN_LIST=\\\"$SSM_CHEF_RUN_LIST\\\"\",\n          \"        if [[ \\\"$SSM_CHEF_COMPLIANCE_SEVERITY\\\" != \\\"None\\\" ]]; then\",\n          \"            report_info \\\"Installing required gems for compliance reporting...\\\"\",\n          \"\",\n          \"            # A mutating run is used to install required gems for compliance reporting\",\n          \"            chef-client -c \\\"$SSM_CHEF_EXECUTION_BASE_DIR/config.rb\\\" \\\"${SSM_CHEF_CLIENT_ARGUMENTS[@]}\\\" -o \\\"aws-ssm-report-handler::compliance-gems\\\" || install_compliance_gems_exit_code=$?\",\n          \"            if [[ \\\"$install_compliance_gems_exit_code\\\" != \\\"0\\\" ]]; then\",\n          \"                report_error \\\"Failed to install compliance reporting gems. Compliance won't be reported.\\\"\",\n          \"            else\",\n          \"                report_info \\\"Performing compliance check with severity '$SSM_CHEF_COMPLIANCE_SEVERITY' in a why-run.\\\"\",\n          \"                WHYRUN_CHEF_RUN_LIST=\\\"aws-ssm-report-handler::compliance-handler,$WHYRUN_CHEF_RUN_LIST\\\"\",\n          \"            fi\",\n          \"        fi\",\n          \"\",\n          \"        # Performing the actual why-run\",\n          \"        SSM_CHEF_WHY_RUN=True chef-client -W -c \\\"$SSM_CHEF_EXECUTION_BASE_DIR/config.rb\\\" \\\"${SSM_CHEF_CLIENT_ARGUMENTS[@]}\\\" \\\"${json_attributes_argument[@]}\\\" -o \\\"$WHYRUN_CHEF_RUN_LIST\\\" || why_run_exit_code=$?\",\n          \"        if [[ \\\"$why_run_exit_code\\\" != \\\"0\\\" ]]; then\",\n          \"            report_error \\\"Chef client execution failed.\\\"\",\n          \"        else\",\n          \"            report_info \\\"Chef client execution succeeded.\\\"\",\n          \"        fi\",\n          \"    fi\",\n          \"\",\n          \"    return $((chef_command_exit_code || why_run_exit_code || install_compliance_gems_exit_code))\",\n          \"}\",\n          \"\",\n          \"function main() {\",\n          \"\",\n          \"    validate_run_list\",\n          \"    validate_compliance_parameters\",\n          \"\",\n          \"    local compliance_report_cookbooks_location\",\n          \"    compliance_report_cookbooks_location=$(obtain_compliance_reporter_cookbook) || throw_error \\\"Failed to obtain compliance reporting cookbook.\\\"\",\n          \"\",\n          \"    local customer_cookbooks_location\",\n          \"    customer_cookbooks_location=$(extract_downloaded_customer_cookbooks) || throw_error \\\"Failed to extract or copy the user cookbook.\\\"\",\n          \"\",\n          \"    if should_install_chef; then\",\n          \"        report_info \\\"The requested Chef client version is not installed. Installing Chef client.\\\"\",\n          \"        install_chef || exit $?\",\n          \"    fi\",\n          \"\",\n          \"    validate_certificate\",\n          \"\",\n          \"    report_info \\\"Executing chef client...\\\"\",\n          \"    execute_chef \\\"$customer_cookbooks_location\\\" \\\"$compliance_report_cookbooks_location\\\" || exit $?\",\n          \"}\",\n          \"\",\n          \"mkdir -p \\\"$CHEF_RUN_LOCK_DIR\\\"\",\n          \"(\",\n          \"    set -e\",\n          \"    flock -e 200\",\n          \"    main || exit $?\",\n          \"\",\n          \") 200>\\\"$CHEF_RUN_LOCK_FILE\\\" || exit $?\"\n        ]\n      }\n    }\n  ]\n}",
  "CreatedDate": "2022-01-20T18:08:06.483Z",
  "DisplayName": null,
  "DocumentFormat": {
    "Value": "JSON"
  },
  "DocumentType": {
    "Value": "Command"
  },
  "DocumentVersion": "1",
  "Name": "AWS-ApplyChefRecipes",
  "Requires": [],
  "ReviewStatus": null,
  "Status": {
    "Value": "Active"
  },
  "StatusInformation": null,
  "VersionName": null,
  "ResponseMetadata": {
    "RequestId": "777bc061-24e0-467e-ad01-508f8324c3e9",
    "Metadata": {},
    "ChecksumAlgorithm": 0,
    "ChecksumValidationStatus": 0
  },
  "ContentLength": 34234,
  "HttpStatusCode": 200,
  "LoggedAt": "2022-05-18T07:13:35.3123885+00:00"
}
