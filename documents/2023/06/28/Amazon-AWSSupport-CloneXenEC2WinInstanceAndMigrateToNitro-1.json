{
  "AttachmentsContent": [
    {
      "Hash": "5de16a952408bfded5d07045b8ddddd5ef41d2aab7986448c715ddf57a06f76d",
      "HashType": {
        "Value": "Sha256"
      },
      "Name": "clone-xen-to-nitro-python.zip",
      "Size": 3908,
      "Url": "https://aws-ssm-document-attachments-us-west-2.s3.us-west-2.amazonaws.com/54d/190294270367/Automation/AWSSupport-CloneXenEC2WinInstanceAndMigrateToNitro%2198cec875-7ed9-4d89-8c58-6ed7123fe807/1/clone-xen-to-nitro-python.zip?x-attachment-size=3908&x-requester-accountId=987868780346&X-Amz-Security-Token=IQoJb3JpZ2luX2VjEAYaCXVzLXdlc3QtMiJGMEQCIBCWl%2FdYhDlwKuf%2B76UJKb6AoUZ9PZUCL%2BC1OQTPRkD6AiBysCXFuAT5tFv36827%2F4YbDxcKsl5za28S9CgxBwc2CCq7BQhvEAMaDDI0OTkyNDUyNzQxMCIMG%2B1Uu1uVsjGL3nZrKpgF0JIV0EtJLsRwb9zRNJRdLVgP01U56KCEaCS1d%2BRgTnt1xene7Cmls68re916eMx2mJtIE1QZRnco1T3Eq4wPx0Q%2BBv%2FO7GwEtnlv%2F94heWW1FgaDkV%2F6aopb%2FEHxekM2DbsoqpwP%2BAFdMkHaYvVObdgrKPqCqFlxbAxWfAeoI8kNn7qO%2BWuakL%2FO4lw5hc5ySSbb%2BUXx2kkWuvfGhM8yOiwTJZhRTRSnBJXQyg0vDdEvxF2UNhoHb6e9oR5hYKJV%2FLgvUS2RsnRytGeqfQ52IYsiMLMFytx2owZrH6lwfM%2BGlG%2Bz3UcHkLi0ApbEfbsxmsiavWVcZ7pbmx8EOyB87LuNI2%2FXbsbCxd5v2WiMsuVpu0F%2F5X%2B6U3G%2FpNh08PW%2BV18MVFzooENuV%2Bhj8mvzP5VVhPmVpKEustRhhTvMbCp11ZSKEuy%2FHXledwbJolcJKVu0CePgxNQWfYCkrwd4gzt3lk0ObLaI6TVyJFnYCd5V%2BZtabPjdffqIHuGx16fRaeJQOZZHC7sVo%2FTG%2F%2BoRrEz0E7xCKuoESCd1LEuAItf40RRzBlh%2BGF8yDGV5lEYc4cRw6hnHaPTaKH5x4l7q8NSn0IzywCYOVoMh7hemh0msXDLm%2BswVVOx4qTOv4hdiEqYqHVaDCAQiJksuIyloFLTLYuLBJg8t2wlAqPZzKmA5feGt1F0nN3OBJSAKZlx%2Bnw83cMP3ScGxNdOcr%2BbECzd%2F4NlnozsdqA8j5K%2F3aqUDjIAewRhgL2sPiJWTiiYmyV5n%2By03nYMFRctb9lKkSrDu1vdS%2BG4Nb31NS82I6foEw5NkdfCf21ElHZ1VFSlbz7xveqVYviR6WEwMJ2%2BPEuYk1uiXybsoLpiCF5PQI%2B5%2F2HToBsgBzzCAkO%2BkBjqyAat489e5cmO%2FjA2QVwh5eeCkpngYjMJz9VT7odm7bxZ8W8bvhtt3qVKdojmzTffJcajvN%2BbOwRUZZiNRRT2QFmC9TxFCPFX5z1%2FuuoXzL7SLRMUvDOnjaqdHVwJAPo4tV6UX1XfxqtbgMyOjBMwqBkpdd8ORaULAYObyWxDJwXXGEgvMCjVRAh4D6mHgzU6Kv78JSw3og0Ii4w6gTN1ASGvV%2FECJ42hgNjjlHDW9uFsV3%2F4%3D&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Date=20230628T071245Z&X-Amz-SignedHeaders=host&X-Amz-Expires=86400&X-Amz-Credential=ASIATUMFJUUZAP5K64C5%2F20230628%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Signature=b2f68dbaea33fb53209b02f79900540aea1d4b4e2819a9aa44806e59e22652e0"
    }
  ],
  "Content": "{\n  \"schemaVersion\": \"0.3\",\n  \"description\": \"The **AWSSupport-CloneXenEC2WinInstanceAndMigrateToNitro** runbook prepares, and migrate a clone of your Amazon Elastic Compute Cloud (Amazon EC2) Windows instance, currently running on EC2 Xen platform, to run on [EC2 Nitro platform](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html#ec2-nitro-instances). This automation performs the following actions:\\n\\n### 1. Preliminary Checks\\nIn this section, the automation evaluates all of the following pre-requisites to proceed with the migration. If any of the steps fails, the automation ends.\\n> * Checks if the target EC2 instance is already running on Nitro platform.\\n> * Determines if the [lifecycle](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-purchasing-options.html#check-instance-lifecycle) of the target EC2 instance is Spot.\\n> * Checks if any [instance-store-volumes](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/InstanceStorage.html#instance-store-volumes) with data are attached to the target EC2 instance.\\n> * Validates if the operating system is Windows Server and checks if the edition is compatible.\\n> * Determines if the target EC2 instance is a part of an Amazon EC2 Auto Scaling group. If true, the EC2 instance should be in the [Standby state](https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-enter-exit-standby.html).\\n> * Checks if the target EC2 instance is managed by Systems Manager and configured to use AWS Systems Manager Run Command.\\n\\n### 2. Tests \\nThe automation uses this phase as sanity test by creating a test Amazon Machine Image (AMI) from the target EC2 instance and launching a test EC2 instance using this AMI. If the target instance is domain-joined, an isolated security group is created in the target instance VPC which does not allow outbound traffic to the domain controller(s). This security group is only attached to the Test and Clone instances. The original target instance is not affected.\\n> * If the test EC2 instance passes the status checks, the automation is temporarily paused and approval from the designated principal's is requested via Amazon Simple Notification Service (SNS) notification. If approval is provided, automation stops the target EC2 instance.\\n*Note:* Before providing approval, ensure that all the application(s) running on the target EC2 instance are gracefully closed. If the EC2 does not have an Elastic IP address associated, the automatic public IPv4 address will change once the instance is stopped and started.\\n> * The test AMI and the test EC2 instance are deleted at the end of this section.\\n\\n### 3. CloneAndMigrate \\nIn this section, the automation creates a clone of your target EC2 instance in the same subnet and migrates the EC2 instance using the following steps:\\n> * Enables the [Enhanced networking (ENA) attribute](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/enhanced-networking-ena.html#enable-enhanced-networking-ena-AL).\\n> * Installs the latest version of ENA drivers.\\n> * Installs the latest version of NVMe drivers.\\n> * Verifies the correct Power Management settings are applied for graceful shutdowns on the Nitro system.\\n> * Installs the AWS PCI Serial Port Driver for bare metal instance types on the Nitro system.\\nAfter validating all the requirements, the cloned EC2 instance type is changed to the desired Nitro type. Once the cloned instance passes status checks on Nitro platform, automation seeks for designated principal's approval to create an AMI. If approval is denied, the automation ends, leaving the cloned EC2 instance.\\n\\n### Prerequisites:\\n> * The target EC2 instance requires outbound access to Amazon Simple Storage Service (Amazon S3) in order to install the drivers.\\n\\n### Supported Operating Systems:\\n> * Windows Server 2022, Windows Server 2019, Windows Server 2016, Windows Server 2012 R2, Windows Server 2012, and Windows Server 2008 R2.\\n\\n### Important:\\n> * Running this runbook, may incur extra charges to your account for the EC2 instance, EBS Volumes, and Amazon Machine Images (AMIs). Please refer to the [Amazon EC2 Pricing](https://aws.amazon.com/ec2/pricing/) and [Amazon EBS pricing](https://aws.amazon.com/ebs/pricing/) for more details.\\n\\nPlease refer to [Migrate to latest generation instance types](https://docs.aws.amazon.com/AWSEC2/latest/WindowsGuide/migrating-latest-types.html) for more information.\",\n  \"assumeRole\": \"{{AutomationAssumeRole}}\",\n  \"parameters\": {\n    \"AutomationAssumeRole\": {\n      \"type\": \"AWS::IAM::Role::Arn\",\n      \"description\": \"(Optional) The Amazon Resource Name (ARN) of the AWS Identity and Access Management (IAM) role that allows Systems Manager Automation to perform the actions on your behalf. If no role is specified, Systems Manager Automation uses the permissions of the user that starts this runbook.\",\n      \"default\": \"\"\n    },\n    \"TargetInstanceId\": {\n      \"type\": \"AWS::EC2::Instance::Id\",\n      \"description\": \"(Required) The ID of the Xen-based Amazon EC2 instance you want to migrate to the Nitro platform.\"\n    },\n    \"NitroInstanceType\": {\n      \"type\": \"String\",\n      \"default\": \"m5.xlarge\",\n      \"description\": \"(Required) Enter the destination Nitro instance type. Note: Only Nitro M5, M6, C5, C6, R5, R6 and T3 instances are supported (e.g. t3.small). For more details about the available Nitro instance types, please refer to the link: https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html\",\n      \"allowedPattern\": \"^(m5a?z?d?n?|c5a?d?n?|r5a?d?n?b?|(c|m|r)6(a|i)?d?)\\\\.(2|4|6|8|9|12|16|18|24|32)?x?large$|^t3a?\\\\.((x|2x)?large|nano|micro|small|medium)$\"\n    },\n    \"SNSTopicArn\": {\n      \"type\": \"String\",\n      \"description\": \"(Required) Provide the ARN of the SNS Topic for Approval notification. This SNS topic is used to send approval notifications during required during the automation execution.\",\n      \"allowedPattern\": \"^arn:(aws|aws-cn|aws-us-gov|aws-iso(\\\\-[a-z])?):sns:.*:[0-9]{12}:.*$\"\n    },\n    \"ApproverIAM\": {\n      \"type\": \"StringList\",\n      \"description\": \"(Required) Provide a list of AWS authenticated principals who are able to either approve or reject the action. The maximum number of approvers is 10. You can specify principals by using any of these formats, 1) An AWS Identity and Access Management (IAM) user name 2) An IAM user ARN 3) An IAM role ARN 4) An IAM assume role user ARN\",\n      \"allowedPattern\": \"^[a-zA-Z0-9_+=,.@\\\\-\\\\/]{1,128}$|^arn:(aws|aws-cn|aws-us-gov|aws-iso(\\\\-[a-z])?):(iam|sts):.*:[0-9]{12}:[a-zA-Z0-9_+=,.@\\\\-\\\\/]{1,256}$\"\n    },\n    \"MinimumRequiredApprovals\": {\n      \"type\": \"Integer\",\n      \"default\": 1,\n      \"description\": \"(Optional) The minimum number of approvals required to resume the automation. If you don't specify a value, the system defaults to one. The value for this parameter must be a positive number. The value for this parameter can't exceed the number of approvers defined by the ApproverIAM parameter.\",\n      \"allowedValues\": [\n        1,\n        2,\n        3,\n        4,\n        5,\n        6,\n        7,\n        8,\n        9,\n        10\n      ]\n    },\n    \"DeleteResourcesOnFailure\": {\n      \"type\": \"Boolean\",\n      \"default\": true,\n      \"description\": \"(Optional) Whether to terminate the cloned EC2 instance and Amazon Machine Image (AMI) if the automation fails.\",\n      \"allowedValues\": [\n        false,\n        true\n      ]\n    },\n    \"Acknowledgement\": {\n      \"type\": \"String\",\n      \"description\": \"(Required) Please read the complete details of the actions performed by this automation runbook and write 'Yes, I understand and acknowledge' if you acknowledge the steps.\",\n      \"allowedPattern\": \"^Yes, I understand and acknowledge$\"\n    }\n  },\n  \"mainSteps\": [\n    {\n      \"name\": \"checkConcurrency\",\n      \"action\": \"aws:executeScript\",\n      \"description\": \"Ensures there is only one execution of this runbook targeting the current EC2 instance. If the runbook finds another in progress execution targeting the same instance ID, it returns an error and ends.\",\n      \"timeoutSeconds\": 600,\n      \"onFailure\": \"Abort\",\n      \"inputs\": {\n        \"Runtime\": \"python3.8\",\n        \"Handler\": \"checkConcurrency.check_concurrency_handler\",\n        \"InputPayload\": {\n          \"TargetInstanceId\": \"{{TargetInstanceId}}\"\n        },\n        \"Attachment\": \"clone-xen-to-nitro-python.zip\"\n      },\n      \"outputs\": [\n        {\n          \"Name\": \"NoExecutionFound\",\n          \"Selector\": \"$.Payload.NoExecutionFound\",\n          \"Type\": \"String\"\n        }\n      ],\n      \"nextStep\": \"getTargetInstanceProperties\"\n    },\n    {\n      \"name\": \"getTargetInstanceProperties\",\n      \"action\": \"aws:executeAwsApi\",\n      \"description\": \"Fetches the details of the target EC2 instance\",\n      \"onFailure\": \"Abort\",\n      \"maxAttempts\": 3,\n      \"nextStep\": \"checkIfNitroInstanceTypeIsSupportedInAZ\",\n      \"inputs\": {\n        \"Service\": \"ec2\",\n        \"Api\": \"DescribeInstances\",\n        \"InstanceIds\": [\n          \"{{TargetInstanceId}}\"\n        ]\n      },\n      \"outputs\": [\n        {\n          \"Name\": \"PlatformType\",\n          \"Selector\": \"$.Reservations[0].Instances[0].Platform\",\n          \"Type\": \"String\"\n        },\n        {\n          \"Name\": \"InstanceVPCID\",\n          \"Selector\": \"$.Reservations[0].Instances[0].VpcId\",\n          \"Type\": \"String\"\n        },\n        {\n          \"Name\": \"InstanceSubnetID\",\n          \"Selector\": \"$.Reservations[0].Instances[0].SubnetId\",\n          \"Type\": \"String\"\n        },\n        {\n          \"Name\": \"InstancePrivateIP\",\n          \"Selector\": \"$.Reservations[0].Instances[0].PrivateIpAddress\",\n          \"Type\": \"String\"\n        },\n        {\n          \"Name\": \"SecurityGroup\",\n          \"Selector\": \"$.Reservations[0].Instances[0].SecurityGroups[0].GroupId\",\n          \"Type\": \"String\"\n        },\n        {\n          \"Name\": \"InstanceProfileArn\",\n          \"Selector\": \"$.Reservations[0].Instances[0].IamInstanceProfile.Arn\",\n          \"Type\": \"String\"\n        },\n        {\n          \"Name\": \"InstanceProfileName\",\n          \"Selector\": \"$.Reservations[0].Instances[0].IamInstanceProfile.Name\",\n          \"Type\": \"String\"\n        },\n        {\n          \"Name\": \"AvailabilityZone\",\n          \"Selector\": \"$.Reservations[0].Instances[0].Placement.AvailabilityZone\",\n          \"Type\": \"String\"\n        },\n        {\n          \"Name\": \"RootDeviceName\",\n          \"Selector\": \"$.Reservations[0].Instances[0].RootDeviceName\",\n          \"Type\": \"String\"\n        },\n        {\n          \"Name\": \"RootVolumeType\",\n          \"Selector\": \"$.Reservations[0].Instances[0].RootDeviceType\",\n          \"Type\": \"String\"\n        },\n        {\n          \"Name\": \"InstanceType\",\n          \"Selector\": \"$.Reservations[0].Instances[0].InstanceType\",\n          \"Type\": \"String\"\n        },\n        {\n          \"Name\": \"ENAAttrib\",\n          \"Selector\": \"$.Reservations[0].Instances[0].EnaSupport\",\n          \"Type\": \"Boolean\"\n        },\n        {\n          \"Name\": \"InstanceLifecycle\",\n          \"Selector\": \"$.Reservations[0].Instances[0].InstanceLifecycle\",\n          \"Type\": \"String\"\n        },\n        {\n          \"Name\": \"InstanceState\",\n          \"Selector\": \"$.Reservations[0].Instances[0].State.Name\",\n          \"Type\": \"String\"\n        }\n      ]\n    },\n    {\n      \"name\": \"checkIfNitroInstanceTypeIsSupportedInAZ\",\n      \"action\": \"aws:assertAwsResourceProperty\",\n      \"description\": \"Determines if the target Nitro instance type is supported in the same Availability Zone as the Target EC2 instance \",\n      \"onFailure\": \"Abort\",\n      \"isCritical\": \"true\",\n      \"maxAttempts\": 3,\n      \"nextStep\": \"getXenInstanceTypeDetails\",\n      \"inputs\": {\n        \"Service\": \"ec2\",\n        \"Api\": \"DescribeInstanceTypeOfferings\",\n        \"LocationType\": \"availability-zone\",\n        \"Filters\": [\n          {\n            \"Name\": \"instance-type\",\n            \"Values\": [\n              \"{{NitroInstanceType}}\"\n            ]\n          },\n          {\n            \"Name\": \"location\",\n            \"Values\": [\n              \"{{getTargetInstanceProperties.AvailabilityZone}}\"\n            ]\n          }\n        ],\n        \"PropertySelector\": \"$.InstanceTypeOfferings[0].Location\",\n        \"DesiredValues\": [\n          \"{{getTargetInstanceProperties.AvailabilityZone}}\"\n        ]\n      }\n    },\n    {\n      \"name\": \"getXenInstanceTypeDetails\",\n      \"action\": \"aws:executeAwsApi\",\n      \"description\": \"Fetches the details of the Xen (source) instance type\",\n      \"onFailure\": \"Abort\",\n      \"maxAttempts\": 3,\n      \"nextStep\": \"checkIfInstanceHypervisorIsNitroAlready\",\n      \"inputs\": {\n        \"Service\": \"ec2\",\n        \"Api\": \"DescribeInstanceTypes\",\n        \"InstanceTypes\": [\n          \"{{getTargetInstanceProperties.InstanceType}}\"\n        ]\n      },\n      \"outputs\": [\n        {\n          \"Name\": \"Hypervisor\",\n          \"Selector\": \"$.InstanceTypes[0].Hypervisor\",\n          \"Type\": \"String\"\n        },\n        {\n          \"Name\": \"NVMeSupport\",\n          \"Selector\": \"$.InstanceTypes[0].InstanceStorageInfo.NvmeSupport\",\n          \"Type\": \"String\"\n        },\n        {\n          \"Name\": \"InstanceStorageSupported\",\n          \"Selector\": \"$.InstanceTypes[0].InstanceStorageSupported\",\n          \"Type\": \"Boolean\"\n        }\n      ]\n    },\n    {\n      \"name\": \"checkIfInstanceHypervisorIsNitroAlready\",\n      \"action\": \"aws:branch\",\n      \"description\": \"Checks if the target EC2 instance is already running on Nitro platform\",\n      \"isEnd\": true,\n      \"isCritical\": true,\n      \"inputs\": {\n        \"Choices\": [\n          {\n            \"NextStep\": \"checkIfTargetInstanceLifecycleIsSpot\",\n            \"Variable\": \"{{getXenInstanceTypeDetails.Hypervisor}}\",\n            \"StringEquals\": \"xen\"\n          }\n        ]\n      }\n    },\n    {\n      \"name\": \"checkIfTargetInstanceLifecycleIsSpot\",\n      \"action\": \"aws:branch\",\n      \"description\": \"Checks if the Lifecycle of the target EC2 instance is Spot\",\n      \"isCritical\": true,\n      \"isEnd\": true,\n      \"onFailure\": \"Abort\",\n      \"inputs\": {\n        \"Choices\": [\n          {\n            \"NextStep\": \"checkIfOperatingSystemIsWindows\",\n            \"Not\": {\n              \"Variable\": \"{{getTargetInstanceProperties.InstanceLifecycle}}\",\n              \"StringEquals\": \"spot\"\n            }\n          }\n        ]\n      }\n    },\n    {\n      \"name\": \"checkIfOperatingSystemIsWindows\",\n      \"action\": \"aws:branch\",\n      \"description\": \"Checks if the target EC2 instance is based on the Windows Operating System\",\n      \"isEnd\": true,\n      \"isCritical\": true,\n      \"inputs\": {\n        \"Choices\": [\n          {\n            \"NextStep\": \"verifySSMConnectivityForTargetInstance\",\n            \"Variable\": \"{{getTargetInstanceProperties.PlatformType}}\",\n            \"StringEquals\": \"windows\"\n          }\n        ]\n      }\n    },\n    {\n      \"name\": \"verifySSMConnectivityForTargetInstance\",\n      \"action\": \"aws:runCommand\",\n      \"description\": \"Verifies if the target EC2 instance is connected with AWS Systems Manager and configured to use RunCommand\",\n      \"onFailure\": \"Abort\",\n      \"isCritical\": true,\n      \"maxAttempts\": 3,\n      \"timeoutSeconds\": 600,\n      \"nextStep\": \"checkOSVersion\",\n      \"inputs\": {\n        \"InstanceIds\": [\n          \"{{TargetInstanceId}}\"\n        ],\n        \"DocumentName\": \"AWS-RunPowerShellScript\",\n        \"TimeoutSeconds\": 300,\n        \"Parameters\": {\n          \"commands\": \"Write-Host \\\"EC2 instance is connected with AWS Systems Manager and configured to use RunCommand\\\"\\n\"\n        }\n      }\n    },\n    {\n      \"name\": \"checkOSVersion\",\n      \"action\": \"aws:runCommand\",\n      \"description\": \"Verifies if the target instance OS version is supported for migration\",\n      \"onFailure\": \"Abort\",\n      \"isCritical\": true,\n      \"maxAttempts\": 3,\n      \"timeoutSeconds\": 600,\n      \"nextStep\": \"checkIfEphemeralVolumeAreSupported\",\n      \"inputs\": {\n        \"InstanceIds\": [\n          \"{{TargetInstanceId}}\"\n        ],\n        \"DocumentName\": \"AWS-RunPowerShellScript\",\n        \"TimeoutSeconds\": 300,\n        \"Parameters\": {\n          \"commands\": \"# Copyright 2023 Amazon.com, Inc. or its affiliates. All Rights Reserved.\\n# SPDX-License-Identifier: LicenseRef-.amazon.com.-AmznSL-1.0\\n# Licensed under the Amazon Software License  http://aws.amazon.com/asl/\\n\\n[Version]$OSVersion = [System.Environment]::OSVersion.Version\\n$NtOsKernelVer = (Get-Item $env:systemroot\\\\system32\\\\ntoskrnl.exe).VersionInfo.ProductVersion\\n[Version]$ExpectedVersion = \\\"6.1\\\"\\n$OsInfo = (Get-WmiObject -class Win32_OperatingSystem)\\n\\nWrite-Output \\\"Windows Version: $OSVersion - $($OsInfo.Caption)\\\"\\nWrite-Output \\\"Kernel Version: $NtOsKernelVer\\\"\\n\\n$NetFrameworkList = Get-ChildItem 'HKLM:\\\\SOFTWARE\\\\Microsoft\\\\NET Framework Setup\\\\NDP\\\\v4\\\\Full' -Recurse -ErrorAction SilentlyContinue |\\nGet-ItemProperty -Name Version, Release -ErrorAction SilentlyContinue |\\nSelect-Object @{ Name = \\\"Name\\\"; expression = { $_.PSChildName } }, Version, Release\\n$NetFrameworkStatus = $false\\nForEach ($Item in $NetFrameworkList)\\n{\\n    Write-Output \\\".NET Framework Installed $([Version]$Item.Version)\\\"\\n}\\n\\n[Version]$PSrequiredVersion = \\\"3.0\\\"\\n$PSVersion = $PSVersionTable.PSVersion\\n\\nWrite-Output \\\"Microsoft PowerShell Installed $PSVersion\\\"\\n\\n# https://learn.microsoft.com/en-us/dotnet/api/microsoft.powershell.commands.producttype?view=powershellsdk-1.1.0\\n# DomainController (2) System is a domain controller\\n# Server (3) System is a server\\n# Uknown (0\\t) Product type is unknown\\n# WorkStation (1) System is a workstation\\n\\nif ($OsInfo.ProductType -ne 3) {\\n    Write-Host \\\"`n[FAILED] This automation does not supported Domain Controllers or Windows client versions.\\\"\\n    exit 1\\n}\\n\\nif ($OSVersion -ge $ExpectedVersion) {\\n    Write-Output \\\"`n[PASSED] $($OsInfo.Caption)\\\"\\n    exit 0\\n}\\nelse\\n{\\n    Write-Output \\\"`n[FAILED] This automation only supports Windows Server 2008 R2 or newer Windows versions.\\\"\\n    exit 1\\n}\\n\"\n        }\n      }\n    },\n    {\n      \"name\": \"checkIfEphemeralVolumeAreSupported\",\n      \"action\": \"aws:branch\",\n      \"description\": \"Checks if the target EC2 instance supports the Instance Store (Ephemeral) volumes\",\n      \"isEnd\": true,\n      \"isCritical\": true,\n      \"inputs\": {\n        \"Choices\": [\n          {\n            \"NextStep\": \"verifyIfTargetInstanceHasEphemeralVolumesAttached\",\n            \"Variable\": \"{{getXenInstanceTypeDetails.InstanceStorageSupported}}\",\n            \"BooleanEquals\": true\n          }\n        ],\n        \"Default\": \"checkIfRootVolumeIsEBS\"\n      }\n    },\n    {\n      \"name\": \"verifyIfTargetInstanceHasEphemeralVolumesAttached\",\n      \"action\": \"aws:runCommand\",\n      \"description\": \"Verifies if the target EC2 instance has Instance Store (Ephemeral) Volumes attached\",\n      \"onFailure\": \"Abort\",\n      \"isCritical\": true,\n      \"maxAttempts\": 3,\n      \"timeoutSeconds\": 600,\n      \"nextStep\": \"checkIfRootVolumeIsEBS\",\n      \"inputs\": {\n        \"InstanceIds\": [\n          \"{{TargetInstanceId}}\"\n        ],\n        \"DocumentName\": \"AWS-RunPowerShellScript\",\n        \"TimeoutSeconds\": 300,\n        \"Parameters\": {\n          \"commands\": \"# Copyright 2022 Amazon.com, Inc. or its affiliates. All Rights Reserved.\\n# SPDX-License-Identifier: LicenseRef-.amazon.com.-AmznSL-1.0\\n# Licensed under the Amazon Software License  http://aws.amazon.com/asl/\\n\\n# Check if Instance Storage is attached or not through known instance store physical disk locations from AWS documentation\\n# Note that EC2Config will configure Instance Store disks automatically on Windows 2012 R2 and below\\n# https://docs.aws.amazon.com/AWSEC2/latest/WindowsGuide/ec2-windows-volumes.html#instance-store-volume-map\\n\\n[String[]]$instance_store_target_ids = \\\"78\\\",\\\"79\\\",\\\"80\\\",\\\"81\\\",\\\"82\\\",\\\"83\\\",\\\"84\\\",\\\"85\\\",\\\"86\\\",\\\"87\\\",\\\"88\\\",\\\"89\\\"\\n\\n$INSTANCE_STORE_FOUND_ERROR=\\\"[FAILED] Unsupported Instance: Instance has Instance Store with data. Please delete all data from instance store volumes and retry. Exiting the automation...\\\"\\n$INSTANCE_STORE_NOT_FOUND_INFO=\\\"[INFO] No Online instance store volumes with data are attached to the EC2 instance\\\"\\n$INSTANCE_STORE_FOUND = $false\\n#$WINDOWS_VERSION_LTE_2012R2 = [Environment]::OSVersion.Version -lt (new-object 'Version' 6,3)\\n\\n[Int[]]$INSTANCE_STORE_DISK_NUMBERS = @()\\n\\n\\n#Check for attached Instance Storage and created partitions\\nforeach ($disk in Get-WmiObject -Class Win32_DiskDrive)\\n{\\n    if($instance_store_target_ids.Contains($disk.SCSITargetId.ToString()) -and $disk.Partitions -gt 0){\\n        $INSTANCE_STORE_DISK_NUMBERS += $disk.Index\\n        #$INSTANCE_STORE_FOUND = $true\\n        \\\"Disk ID #\\\" + $disk.Index + \\\", number of partitions: \\\" + $disk.Partitions        \\n    }\\n}\\n\\n#Check partitions in Instance Store disks for any files (ignore default Important.txt file in 2012R2 and below)\\nforeach($partition in Get-CimInstance Win32_DiskPartition | Where-Object {$_.DiskIndex -In $INSTANCE_STORE_DISK_NUMBERS})\\n{\\n    $driveLetter= ($partition | Get-CimAssociatedInstance -ResultClassName Win32_LogicalDisk).DeviceID\\n    if(((Get-Childitem ($driveLetter) -Name -Exclude Important.txt) | Measure-Object).Count -gt 0)\\n    {\\n        $accessPaths= \\\"${driveletter} \\\" + (Get-CimInstance Win32_Volume | Where-Object {$_.DriveLetter -match $driveLetter}).DeviceId\\n        Write-Host (((Get-Childitem ($driveLetter) -Name -Exclude Important.txt) | Measure-Object).Count).ToString() \\\"File(s) found on Online Instance Store\\\" $accessPaths\\n        $INSTANCE_STORE_FOUND = $true\\n    }\\n}\\n\\nif ($INSTANCE_STORE_FOUND)\\n{\\n    Write-Host $INSTANCE_STORE_FOUND_ERROR\\n    exit 1\\n}\\nelse\\n{\\n    $INSTANCE_STORE_NOT_FOUND_INFO\\n}\\n\"\n        }\n      }\n    },\n    {\n      \"name\": \"checkIfRootVolumeIsEBS\",\n      \"action\": \"aws:branch\",\n      \"description\": \"Checks if target EC2 instance's root volume type is EBS\",\n      \"isCritical\": true,\n      \"isEnd\": true,\n      \"onFailure\": \"Abort\",\n      \"inputs\": {\n        \"Choices\": [\n          {\n            \"NextStep\": \"checkIfTargetInstanceIsInASG\",\n            \"Variable\": \"{{getTargetInstanceProperties.RootVolumeType}}\",\n            \"StringEquals\": \"ebs\"\n          }\n        ]\n      }\n    },\n    {\n      \"name\": \"checkIfTargetInstanceIsInASG\",\n      \"action\": \"aws:executeScript\",\n      \"description\": \"Checks if the target EC2 instance is a part of any Amazon AutoScaling Group (ASG)\",\n      \"isCritical\": true,\n      \"maxAttempts\": 1,\n      \"onFailure\": \"Abort\",\n      \"nextStep\": \"createTestImage\",\n      \"inputs\": {\n        \"Runtime\": \"python3.8\",\n        \"Handler\": \"checkAutoScaling.checkAutoScaling_handler\",\n        \"Attachment\": \"clone-xen-to-nitro-python.zip\",\n        \"InputPayload\": {\n          \"TargetInstanceId\": \"{{TargetInstanceId}}\"\n        }\n      }\n    },\n    {\n      \"name\": \"createTestImage\",\n      \"action\": \"aws:createImage\",\n      \"description\": \"Creates a test Amazon Machine Image (AMI) from the provided instance\",\n      \"maxAttempts\": 1,\n      \"nextStep\": \"checkIfInstanceIsDomainJoined\",\n      \"onFailure\": \"step:failureHandling\",\n      \"inputs\": {\n        \"InstanceId\": \"{{TargetInstanceId}}\",\n        \"ImageName\": \"CloneXenEC2WindowsInstanceAndMigrateToNitro_TestImage_{{TargetInstanceId}}_{{global:DATE_TIME}}\",\n        \"NoReboot\": false,\n        \"ImageDescription\": \"SSMAutomationID-{{automation:EXECUTION_ID}}\"\n      }\n    },\n    {\n      \"name\": \"checkIfInstanceIsDomainJoined\",\n      \"action\": \"aws:runCommand\",\n      \"description\": \"Checks if the target EC2 instance is domain joined\",\n      \"onFailure\": \"Abort\",\n      \"isCritical\": true,\n      \"maxAttempts\": 3,\n      \"timeoutSeconds\": 600,\n      \"nextStep\": \"branchOnDomainJoinStatus\",\n      \"inputs\": {\n        \"InstanceIds\": [\n          \"{{TargetInstanceId}}\"\n        ],\n        \"DocumentName\": \"AWS-RunPowerShellScript\",\n        \"TimeoutSeconds\": 300,\n        \"Parameters\": {\n          \"commands\": \"# Copyright 2023 Amazon.com, Inc. or its affiliates. All Rights Reserved.\\n# SPDX-License-Identifier: LicenseRef-.amazon.com.-AmznSL-1.0\\n# Licensed under the Amazon Software License  http://aws.amazon.com/asl/\\n\\n$domainInfo = (Get-WmiObject -Class Win32_ComputerSystem)\\n\\nif ($domainInfo.PartOfDomain){\\n    Write-Host \\\"This server is part of domain $($domainInfo.Domain)\\\"\\n    return @{DomainJoined=$true}\\n}\\nelse {\\n    Write-Host \\\"This server is not joined to a domain\\\"\\n    return @{DomainJoined=$false}\\n}\\n\"\n        }\n      },\n      \"outputs\": [\n        {\n          \"Name\": \"DomainJoined\",\n          \"Selector\": \"$.Payload.DomainJoined\",\n          \"Type\": \"Boolean\"\n        }\n      ]\n    },\n    {\n      \"name\": \"branchOnDomainJoinStatus\",\n      \"action\": \"aws:branch\",\n      \"description\": \"If the target EC2 instance is joined to a domain, use an isolated VPC to avoid SID conflict in Active Directory\",\n      \"isEnd\": true,\n      \"isCritical\": true,\n      \"inputs\": {\n        \"Choices\": [\n          {\n            \"NextStep\": \"createIsolatedSecurityGroup\",\n            \"Variable\": \"{{checkIfInstanceIsDomainJoined.DomainJoined}}\",\n            \"BooleanEquals\": true\n          },\n          {\n            \"NextStep\": \"launchTestInstanceInSameSubnet\",\n            \"Variable\": \"{{checkIfInstanceIsDomainJoined.DomainJoined}}\",\n            \"BooleanEquals\": false\n          }\n        ]\n      }\n    },\n    {\n      \"name\": \"createIsolatedSecurityGroup\",\n      \"action\": \"aws:executeScript\",\n      \"description\": \"Creates a security group which allows only outbound TCP 443 and TCP 53 access for access to Systems Manager for a domain-joined scenario. Only used for domain-joined scenarios and only attached to the cloned EC2 instance.\",\n      \"isCritical\": true,\n      \"maxAttempts\": 1,\n      \"onFailure\": \"Abort\",\n      \"nextStep\": \"launchTestInstanceInSameSubnet\",\n      \"inputs\": {\n        \"Runtime\": \"python3.8\",\n        \"Handler\": \"createIsolatedSecurityGroup.createIsolatedSecurityGroup_handler\",\n        \"Attachment\": \"clone-xen-to-nitro-python.zip\",\n        \"InputPayload\": {\n          \"InstanceVPCID\": \"{{getTargetInstanceProperties.InstanceVPCID}}\",\n          \"InstanceSubnetID\": \"{{getTargetInstanceProperties.InstanceSubnetID}}\",\n          \"InstancePrivateIP\": \"{{getTargetInstanceProperties.InstancePrivateIP}}\"\n        }\n      },\n      \"outputs\": [\n        {\n          \"Name\": \"SecurityGroupID\",\n          \"Selector\": \"$.Payload.securityGroupID\",\n          \"Type\": \"String\"\n        }\n      ]\n    },\n    {\n      \"name\": \"launchTestInstanceInSameSubnet\",\n      \"action\": \"aws:executeScript\",\n      \"description\": \"Launches a test EC2 instance from the test AMI using the same configuration as target EC2 instance\",\n      \"isCritical\": true,\n      \"maxAttempts\": 1,\n      \"onFailure\": \"step:cleanupTestInstance\",\n      \"nextStep\": \"waitForTestInstanceStatusChecks\",\n      \"inputs\": {\n        \"Runtime\": \"python3.8\",\n        \"Handler\": \"launchEC2Instance.launchInstanceInSameSubnet_handler\",\n        \"Attachment\": \"clone-xen-to-nitro-python.zip\",\n        \"InputPayload\": {\n          \"ImageId\": \"{{createTestImage.ImageId}}\",\n          \"InstanceType\": \"{{getTargetInstanceProperties.InstanceType}}\",\n          \"IamInstanceProfileArn\": \"{{getTargetInstanceProperties.InstanceProfileArn}}\",\n          \"SubnetId\": \"{{getTargetInstanceProperties.InstanceSubnetID}}\",\n          \"SecurityGroupIds\": [\n            \"{{getTargetInstanceProperties.SecurityGroup}}\"\n          ],\n          \"TargetInstanceId\": \"{{TargetInstanceId}}\",\n          \"DomainJoinedStatus\": \"{{checkIfInstanceIsDomainJoined.Output}}\",\n          \"IsolatedSecurityGroupID\": [\n            \"{{createIsolatedSecurityGroup.SecurityGroupID}}\"\n          ],\n          \"BranchType\": \"Test\"\n        }\n      },\n      \"outputs\": [\n        {\n          \"Name\": \"TestInstanceId\",\n          \"Selector\": \"$.Payload.launchedInstanceId\",\n          \"Type\": \"String\"\n        }\n      ]\n    },\n    {\n      \"name\": \"waitForTestInstanceStatusChecks\",\n      \"action\": \"aws:waitForAwsResourceProperty\",\n      \"description\": \"Waits for the test EC2 instance to pass the 2/2 Status Checks\",\n      \"onFailure\": \"step:cleanupTestInstance\",\n      \"isCritical\": \"true\",\n      \"timeoutSeconds\": 1200,\n      \"nextStep\": \"cleanupTestInstance\",\n      \"inputs\": {\n        \"Service\": \"ec2\",\n        \"Api\": \"DescribeInstanceStatus\",\n        \"InstanceIds\": [\n          \"{{launchTestInstanceInSameSubnet.TestInstanceId}}\"\n        ],\n        \"PropertySelector\": \"$.InstanceStatuses..InstanceStatus.Status\",\n        \"DesiredValues\": [\n          \"ok\"\n        ]\n      }\n    },\n    {\n      \"name\": \"cleanupTestInstance\",\n      \"action\": \"aws:changeInstanceState\",\n      \"description\": \"Terminates the test EC2 instance\",\n      \"maxAttempts\": 3,\n      \"isCritical\": true,\n      \"timeoutSeconds\": 300,\n      \"onFailure\": \"step:onFailureCleanupIsolatedSecurityGroup\",\n      \"nextStep\": \"checkIfTestingBranchSucceeded\",\n      \"inputs\": {\n        \"InstanceIds\": [\n          \"{{launchTestInstanceInSameSubnet.TestInstanceId}}\"\n        ],\n        \"CheckStateOnly\": false,\n        \"DesiredState\": \"terminated\"\n      }\n    },\n    {\n      \"name\": \"checkIfTestingBranchSucceeded\",\n      \"action\": \"aws:executeScript\",\n      \"description\": \"Checks the status of testing branch\",\n      \"isCritical\": true,\n      \"maxAttempts\": 1,\n      \"onFailure\": \"Abort\",\n      \"nextStep\": \"approvalToStopTargetInstance\",\n      \"inputs\": {\n        \"Runtime\": \"python3.8\",\n        \"Handler\": \"checkStepStatus.checkStepStatus_handler\",\n        \"Attachment\": \"clone-xen-to-nitro-python.zip\",\n        \"InputPayload\": {\n          \"StepName\": \"waitForTestInstanceStatusChecks\"\n        }\n      }\n    },\n    {\n      \"name\": \"approvalToStopTargetInstance\",\n      \"action\": \"aws:approve\",\n      \"description\": \"Waits for designated principals approval to stop the target instance\",\n      \"timeoutSeconds\": 3600,\n      \"onFailure\": \"Abort\",\n      \"nextStep\": \"stopTargetEC2Instance\",\n      \"inputs\": {\n        \"NotificationArn\": \"{{SNSTopicArn}}\",\n        \"Message\": \"Test EC2 instance launched from the target EC2 instance successfully passed the 2/2 status checks. Provide approval to stop the target EC2 instance {{TargetInstanceId}} in order to proceed with the automation. If approved, target EC2 instance will be stopped. Before providing approval, make sure 1) Elastic IP address is assigned to the EC2 instance, if not Public IP will be changed, once the instance is stopped. This step will automatically timeout after 3600s if no action is taken.\",\n        \"MinRequiredApprovals\": \"{{MinimumRequiredApprovals}}\",\n        \"Approvers\": [\n          \"{{ApproverIAM}}\"\n        ]\n      }\n    },\n    {\n      \"name\": \"stopTargetEC2Instance\",\n      \"action\": \"aws:changeInstanceState\",\n      \"description\": \"Stops the target EC2 instance\",\n      \"maxAttempts\": 1,\n      \"timeoutSeconds\": 300,\n      \"onFailure\": \"step:forceStopTargetEC2Instance\",\n      \"inputs\": {\n        \"InstanceIds\": [\n          \"{{TargetInstanceId}}\"\n        ],\n        \"CheckStateOnly\": false,\n        \"DesiredState\": \"stopped\"\n      },\n      \"nextStep\": \"createBackupImage\"\n    },\n    {\n      \"name\": \"forceStopTargetEC2Instance\",\n      \"action\": \"aws:changeInstanceState\",\n      \"description\": \"Force stops the target EC2 instance, only if the step 'stopTargetEC2Instance' fails to stop\",\n      \"maxAttempts\": 1,\n      \"timeoutSeconds\": 300,\n      \"onFailure\": \"step:failureHandling\",\n      \"inputs\": {\n        \"InstanceIds\": [\n          \"{{launchInstanceInSameSubnet.ClonedInstanceId}}\"\n        ],\n        \"CheckStateOnly\": false,\n        \"DesiredState\": \"stopped\",\n        \"Force\": true\n      },\n      \"nextStep\": \"createBackupImage\"\n    },\n    {\n      \"name\": \"createBackupImage\",\n      \"action\": \"aws:createImage\",\n      \"description\": \"Creates an Amazon Machine Image (AMI) from the provided instance for backup\",\n      \"maxAttempts\": 1,\n      \"nextStep\": \"launchInstanceInSameSubnet\",\n      \"onFailure\": \"step:failureHandling\",\n      \"inputs\": {\n        \"InstanceId\": \"{{TargetInstanceId}}\",\n        \"ImageName\": \"CloneXenEC2WindowsInstanceAndMigrateToNitro_BackupImage_{{TargetInstanceId}}_{{global:DATE_TIME}}\",\n        \"NoReboot\": true,\n        \"ImageDescription\": \"SSMAutomationID-{{automation:EXECUTION_ID}}\"\n      }\n    },\n    {\n      \"name\": \"launchInstanceInSameSubnet\",\n      \"action\": \"aws:executeScript\",\n      \"description\": \"Launches a new EC2 instance from the backup AMI using the same configuration as source EC2 instance\",\n      \"isCritical\": true,\n      \"maxAttempts\": 1,\n      \"onFailure\": \"step:failureHandling\",\n      \"nextStep\": \"waitForClonedInstanceToPassStatusChecks\",\n      \"inputs\": {\n        \"Runtime\": \"python3.8\",\n        \"Handler\": \"launchEC2Instance.launchInstanceInSameSubnet_handler\",\n        \"Attachment\": \"clone-xen-to-nitro-python.zip\",\n        \"InputPayload\": {\n          \"ImageId\": \"{{createBackupImage.ImageId}}\",\n          \"InstanceType\": \"{{getTargetInstanceProperties.InstanceType}}\",\n          \"IamInstanceProfileArn\": \"{{getTargetInstanceProperties.InstanceProfileArn}}\",\n          \"SubnetId\": \"{{getTargetInstanceProperties.InstanceSubnetID}}\",\n          \"SecurityGroupIds\": [\n            \"{{getTargetInstanceProperties.SecurityGroup}}\"\n          ],\n          \"TargetInstanceId\": \"{{TargetInstanceId}}\",\n          \"DomainJoinedStatus\": \"{{checkIfInstanceIsDomainJoined.Output}}\",\n          \"IsolatedSecurityGroupID\": [\n            \"{{createIsolatedSecurityGroup.SecurityGroupID}}\"\n          ],\n          \"BranchType\": \"CloneAndMigrate\"\n        }\n      },\n      \"outputs\": [\n        {\n          \"Name\": \"ClonedInstanceId\",\n          \"Selector\": \"$.Payload.launchedInstanceId\",\n          \"Type\": \"String\"\n        }\n      ]\n    },\n    {\n      \"name\": \"waitForClonedInstanceToPassStatusChecks\",\n      \"action\": \"aws:waitForAwsResourceProperty\",\n      \"description\": \"Waits for the cloned EC2 instance to pass the 2/2 Status Checks\",\n      \"onFailure\": \"step:failureHandling\",\n      \"isCritical\": \"true\",\n      \"timeoutSeconds\": 1200,\n      \"nextStep\": \"verifySSMConnectivityForClonedInstance\",\n      \"inputs\": {\n        \"Service\": \"ec2\",\n        \"Api\": \"DescribeInstanceStatus\",\n        \"InstanceIds\": [\n          \"{{launchInstanceInSameSubnet.ClonedInstanceId}}\"\n        ],\n        \"PropertySelector\": \"$.InstanceStatuses..InstanceStatus.Status\",\n        \"DesiredValues\": [\n          \"ok\"\n        ]\n      }\n    },\n    {\n      \"name\": \"verifySSMConnectivityForClonedInstance\",\n      \"action\": \"aws:runCommand\",\n      \"description\": \"Verifies if the cloned EC2 instance is connected with AWS Systems Manager and configured to use RunCommand\",\n      \"onFailure\": \"step:failureHandling\",\n      \"isCritical\": \"true\",\n      \"timeoutSeconds\": 600,\n      \"maxAttempts\": 3,\n      \"nextStep\": \"checkAndInstallENADrivers\",\n      \"inputs\": {\n        \"InstanceIds\": [\n          \"{{launchInstanceInSameSubnet.ClonedInstanceId}}\"\n        ],\n        \"DocumentName\": \"AWS-RunPowerShellScript\",\n        \"TimeoutSeconds\": 300,\n        \"Parameters\": {\n          \"commands\": [\n            \"%WINDOWSSCRIPT%\"\n          ]\n        }\n      }\n    },\n    {\n      \"name\": \"checkAndInstallENADrivers\",\n      \"action\": \"aws:runCommand\",\n      \"description\": \"Determines the availability of Enhanced Networking Adapter (ENA) drivers on the EC2 instance and installs, if missing\",\n      \"isCritical\": true,\n      \"nextStep\": \"checkAndAddNVMEDrivers\",\n      \"onFailure\": \"step:failureHandling\",\n      \"inputs\": {\n        \"InstanceIds\": [\n          \"{{launchInstanceInSameSubnet.ClonedInstanceId}}\"\n        ],\n        \"DocumentName\": \"AWS-RunPowerShellScript\",\n        \"TimeoutSeconds\": 3600,\n        \"Parameters\": {\n          \"commands\": \"# Copyright 2022 Amazon.com, Inc. or its affiliates. All Rights Reserved.\\n# SPDX-License-Identifier: LicenseRef-.amazon.com.-AmznSL-1.0\\n# Licensed under the Amazon Software License  http://aws.amazon.com/asl/\\n\\ntry {\\n    if (Test-Path -Path \\\"ena-state-{{ automation:EXECUTION_ID }}\\\") {\\n        if (Select-String -Path \\\"ena-state-{{ automation:EXECUTION_ID }}\\\" -Pattern \\\"success\\\") {\\n            Write-Host \\\"Installer has already run. Skipping installation\\\"\\n            exit 0\\n        }\\n        else {\\n            Write-Host \\\"Previous run of installer marked as failure. Skipping installation\\\"\\n            exit 1\\n        }\\n    }\\n    else {\\n        $OSVersion = [System.Environment]::OSVersion.Version\\n        $version = $OSVersion.Major.ToString() + \\\".\\\" + $OSVersion.Minor.ToString()\\n        # Get Version of ntoskernel.exe to check for KB3033929\\n        $ntoskrnlver = (Get-Item $env:systemroot\\\\system32\\\\ntoskrnl.exe).VersionInfo.ProductVersion\\n        $KB3033929 = [System.Version]\\\"6.1.7601.22948\\\"\\n        switch -regex ($version) {\\n            \\\"6.1\\\" {\\n                if ([System.Version]$ntoskrnlver -lt $KB3033929) {\\n                    # 2.1.4 is the highest version that supports Windows Server 2008 R2 without KB3033929\\n                    $url = \\\"https://s3.amazonaws.com/ec2-windows-drivers-downloads/ENA/2.1.4/AwsEnaNetworkDriver.zip\\\"\\n                }\\n                else {\\n                    # 2.2.3 is the latest version that supports Windows Server 2008 R2\\n                    $url = \\\"https://s3.amazonaws.com/ec2-windows-drivers-downloads/ENA/2.2.3/AwsEnaNetworkDriver.zip\\\"\\n                }\\n            } \\n            \\\"6.2|6.3|10.*\\\" {\\n                $url = \\\"https://s3.amazonaws.com/ec2-windows-drivers-downloads/ENA/Latest/AwsEnaNetworkDriver.zip\\\"\\n            }\\n        }\\n        $tempPath = (Resolve-Path ${env:temp}).Path\\n        $tempFile = \\\"${tempPath}\\\\AwsEnaNetworkDriver.zip\\\"\\n        $tempDir = \\\"${tempPath}\\\\AwsEnaNetworkDriver\\\"\\n\\n        [System.Net.ServicePointManager]::SecurityProtocol = ([int][system.net.SecurityProtocolType]::Tls13 -bor [int][system.net.SecurityProtocolType]::Tls12)\\n        $wc = New-Object System.Net.WebClient\\n        $attemptCount = 1\\n        $attemptMax = 5\\n        Do {\\n        Write-Host \\\"Downloading AWS ENA drivers, attempt: $attemptCount/5...\\\"\\n        $attemptCount++\\n        $wc.DownloadFile($url, $tempFile)\\n        Start-Sleep -Seconds (1 * $attemptCount)\\n        } While (((Test-Path $tempFile) -eq $false) -and ($attemptCount -le 6))\\n        \\n        if (Test-Path $tempDir) {\\n            Remove-Item -Path $tempDir -Recurse -Force\\n        }\\n\\n        # Extract drivers\\n        try {\\n            # Unpacking the file this way is not supported in PowerShell 2\\n            Add-Type -AssemblyName System.IO.Compression.FileSystem -ErrorAction SilentlyContinue\\n            [System.IO.Compression.ZipFile]::ExtractToDirectory($tempFile, $tempDir)\\n        }\\n        catch [System.InvalidOperationException] {\\n            # Legacy unpacking method using COM Object\\n            # Works with PowerShell 2\\n            New-Item -Path $tempDir -ItemType \\\"directory\\\" -Force | Out-Null\\n            ((New-Object -com shell.application).NameSpace($tempDir)).CopyHere(((New-Object -com shell.application).NameSpace($tempFile)).Items())\\n        }\\n\\n        # Run install.ps1\\n        Write-Host \\\"Running install script\\\"\\n        $output = & \\\"${tempDir}\\\\install.ps1\\\" -NoReboot\\n        Write-Host $output\\n\\n        # Evaluate output\\n        New-Item \\\"ena-state-{{ automation:EXECUTION_ID }}\\\" -ItemType file | Out-Null\\n        if ($output -match \\\"successful\\\") {\\n            if ($output -match \\\"reboot\\\") {\\n                Write-Host \\\"Rebooting to complete installation\\\"\\n                Write-Output \\\"success\\\" | Set-Content -Path \\\"ena-state-{{ automation:EXECUTION_ID }}\\\"\\n                exit 3010\\n            }\\n            Write-Output \\\"success\\\" | Set-Content -Path \\\"ena-state-{{ automation:EXECUTION_ID }}\\\"\\n            exit 0\\n        }\\n        else {\\n            Write-Output \\\"failure\\\" | Set-Content -Path \\\"ena-state-{{ automation:EXECUTION_ID }}\\\"\\n            exit 1\\n        }\\n    }\\n}\\ncatch {\\n    Write-Host $_.Exception.Message\\n    exit 255\\n}\\n\"\n        }\n      }\n    },\n    {\n      \"name\": \"checkAndAddNVMEDrivers\",\n      \"action\": \"aws:runCommand\",\n      \"description\": \"Determines the availability of NVMe drivers on the cloned EC2 instance and installs, if missing\",\n      \"timeoutSeconds\": 3600,\n      \"nextStep\": \"checkAndAddSerialPortDriver\",\n      \"onFailure\": \"step:failureHandling\",\n      \"inputs\": {\n        \"DocumentName\": \"AWS-RunPowerShellScript\",\n        \"InstanceIds\": [\n          \"{{launchInstanceInSameSubnet.ClonedInstanceId}}\"\n        ],\n        \"Parameters\": {\n          \"commands\": \"# Copyright 2022 Amazon.com, Inc. or its affiliates. All Rights Reserved.\\n# SPDX-License-Identifier: LicenseRef-.amazon.com.-AmznSL-1.0\\n# Licensed under the Amazon Software License  http://aws.amazon.com/asl/\\n\\ntry {\\n    if (Test-Path -Path \\\"nvme-state-{{ automation:EXECUTION_ID }}\\\") {\\n        if (Select-String -Path \\\"nvme-state-{{ automation:EXECUTION_ID }}\\\" -Pattern \\\"success\\\") {\\n            Write-Host \\\"Installer has already run. Skipping installation\\\"\\n            exit 0\\n        }\\n        else {\\n            Write-Host \\\"Previous run of installer marked as failure. Skipping installation\\\"\\n            exit 1\\n        }\\n    }\\n    else {\\n        $OSVersion = [System.Environment]::OSVersion.Version\\n        $version = $OSVersion.Major.ToString() + \\\".\\\" + $OSVersion.Minor.ToString()\\n        switch -regex ($version) {\\n            \\\"6.1\\\" {\\n                # 1.3.2 is the latest version that supports Windows Server 2008 R2\\n                $url = \\\"https://s3.amazonaws.com/ec2-windows-drivers-downloads/NVMe/1.3.2/AWSNVMe.zip\\\"\\n            } \\n            \\\"6.2|6.3|10.*\\\" {\\n                $url = \\\"https://s3.amazonaws.com/ec2-windows-drivers-downloads/NVMe/Latest/AWSNVMe.zip\\\"\\n            }\\n        }\\n        $tempPath = (Resolve-Path ${env:temp}).Path\\n        $tempFile = \\\"${tempPath}\\\\AWSNVMe.zip\\\"\\n        $tempDir = \\\"${tempPath}\\\\AWSNVMe\\\"\\n        \\n        [System.Net.ServicePointManager]::SecurityProtocol = ([int][system.net.SecurityProtocolType]::Tls13 -bor [int][system.net.SecurityProtocolType]::Tls12)\\n        $wc = New-Object System.Net.WebClient\\n        $attemptCount = 1\\n        \\n        Do {\\n        Write-Host \\\"Downloading AWS NVMe drivers, attempt: $attemptCount/5...\\\"\\n        $attemptCount++\\n        $wc.DownloadFile($url, $tempFile)\\n        Start-Sleep -Seconds (1 * $attemptCount)\\n        } While (((Test-Path $tempFile) -eq $false) -and ($attemptCount -le 6))\\n        \\n        if (Test-Path $tempDir) {\\n            Remove-Item -Path $tempDir -Recurse -Force\\n        }\\n\\n        # Extract drivers\\n        try {\\n            # Unpacking the file this way is not supported in PowerShell 2\\n            Add-Type -AssemblyName System.IO.Compression.FileSystem -ErrorAction SilentlyContinue\\n            [System.IO.Compression.ZipFile]::ExtractToDirectory($tempFile, $tempDir)\\n        }\\n        catch [System.InvalidOperationException] {\\n            # Legacy unpacking method using COM Object\\n            # Works with PowerShell 2\\n            New-Item -Path $tempDir -ItemType \\\"directory\\\" -Force | Out-Null\\n            ((New-Object -com shell.application).NameSpace($tempDir)).CopyHere(((New-Object -com shell.application).NameSpace($tempFile)).Items())\\n        }\\n\\n        # Run install.ps1\\n        Write-Host \\\"Running install script\\\"\\n        $output = & \\\"${tempDir}\\\\install.ps1\\\" -NoReboot\\n        Write-Host $output\\n\\n        # Handling drivers reflection: https://docs.aws.amazon.com/AWSEC2/latest/WindowsGuide/migrating-latest-types.html#upgrade-nvme\\n        # Driver reflection is required only for Windows Server 2008 R2 and Windows Server 2012 instances\\n        $allowedWinVer = $false\\n        $osVer = [System.Environment]::OSVersion.Version\\n        if ($osVer.Major -eq 6) {\\n            $allowedMinor = @(1, 2)\\n            if ($allowedMinor -contains $osVer.Minor) {\\n                $allowedWinVer = $true\\n            }\\n        }\\n        if ($allowedWinVer) {\\n            # Checking instance type architecture to ensure it is not a Nitro instance type\\n            $allowedInstanceType = $false\\n            $ErrorActionPreference = \\\"stop\\\"\\n            try {\\n                $systemVersion = (Get-ItemProperty -Path \\\"HKLM:\\\\HARDWARE\\\\DESCRIPTION\\\\System\\\\BIOS\\\" -Name SystemVersion).SystemVersion\\n                $systemManufacturer = (Get-ItemProperty -Path \\\"HKLM:\\\\HARDWARE\\\\DESCRIPTION\\\\System\\\\BIOS\\\" -Name SystemManufacturer).SystemManufacturer\\n            }\\n            catch [System.Management.Automation.PSArgumentException] {}\\n            finally { $ErrorActionPreference = \\\"Continue\\\" }\\n            if (($systemVersion -match \\\"amazon\\\") -and ($systemManufacturer -match \\\"Xen\\\")) {\\n                $allowedInstanceType = $true\\n            }\\n            if ($allowedInstanceType) {\\n                Write-Host \\\"Reflecting Boot Critical drivers\\\"\\n                Start-Process -PassThru -Wait -FilePath \\\"$env:systemroot\\\\System32\\\\rundll32.exe\\\" -ArgumentList \\\"sppnp.dll,Sysprep_Generalize_Pnp\\\" | Out-Null\\n            }\\n        }\\n\\n        # Evaluate output\\n        [System.Int32]$retSuccess = 0\\n        [System.Int32]$retSuccessRebootRequired = 3010\\n        \\n        New-Item \\\"nvme-state-{{ automation:EXECUTION_ID }}\\\" -ItemType file | Out-Null\\n\\n        if ($output -eq $retSuccess) {\\n            Write-Output \\\"success\\\" | Set-Content -Path \\\"nvme-state-{{ automation:EXECUTION_ID }}\\\"\\n            exit 0\\n        }\\n        elseif ($output -eq $retSuccessRebootRequired) {\\n            Write-Host \\\"Rebooting to complete installation\\\"\\n            Write-Output \\\"success\\\" | Set-Content -Path \\\"nvme-state-{{ automation:EXECUTION_ID }}\\\"\\n            exit 3010\\n        }\\n        else {\\n            Write-Output \\\"failure\\\" | Set-Content -Path \\\"nvme-state-{{ automation:EXECUTION_ID }}\\\"\\n            exit 1\\n        }\\n    }\\n}\\ncatch {\\n    Write-Host $_.Exception.Message\\n    exit 255\\n}\\n\"\n        }\n      }\n    },\n    {\n      \"name\": \"checkAndAddSerialPortDriver\",\n      \"action\": \"aws:runCommand\",\n      \"description\": \"Installs the Serial Port driver required for bare metal instance types to use serial console features such as Console Output\",\n      \"timeoutSeconds\": 3600,\n      \"nextStep\": \"updatePowerManagementSettings\",\n      \"onFailure\": \"step:failureHandling\",\n      \"inputs\": {\n        \"DocumentName\": \"AWS-RunPowerShellScript\",\n        \"InstanceIds\": [\n          \"{{launchInstanceInSameSubnet.ClonedInstanceId}}\"\n        ],\n        \"Parameters\": {\n          \"commands\": \"# Copyright 2022 Amazon.com, Inc. or its affiliates. All Rights Reserved.\\n# SPDX-License-Identifier: LicenseRef-.amazon.com.-AmznSL-1.0\\n# Licensed under the Amazon Software License  http://aws.amazon.com/asl/\\n#\\n\\ntry {\\n    $successOutput = \\\"Successfully installed the driver\\\"\\n    if (Test-Path -Path \\\"serial-driver-state-{{ automation:EXECUTION_ID }}\\\") {\\n        if (Select-String -Path \\\"serial-driver-state-{{ automation:EXECUTION_ID }}\\\" -Pattern $successOutput) {\\n            Write-Host \\\"Installer has already run. Skipping installation\\\"\\n            exit 0\\n        }\\n        else {\\n            Write-Host \\\"Previous run of installer marked as failure. Skipping installation\\\"\\n            exit 1\\n        }\\n    }\\n    else {\\n\\n        $driverMapping = @{\\n            \\\"aws_ser.inf\\\" = [PSCustomObject ]@{Name=\\\"AWS PCI Serial Driver\\\";Required=$false;Link=\\\"https://docs.aws.amazon.com/AWSEC2/latest/WindowsGuide/migrating-latest-types.html#install-serial-port-bare-metal\\\"}\\n       }\\n\\n        # Get the list of installed drivers using DSIM where ProviderName like Amazon Web Services, Inc. or Amazon Inc*\\n        $driversQueryResults = ((dism /online /get-drivers /format:table | Select-Object -Skip 14 | Select-Object -Last 9999 -Skip 1 |\\n        ConvertFrom-Csv -Header \\\"PublishedName\\\", \\\"OriginalFileName\\\", \\\"Inbox\\\", \\\"ClassName\\\", \\\"ProviderName\\\", \\\"Date\\\", \\\"Version\\\" -Delimiter \\\"|\\\" |\\n        Where-Object { $_.ProviderName -like \\\"Amazon Web Services, Inc.*\\\" -or $_.ProviderName -like \\\"Amazon Inc*\\\"  } |\\n        Select-Object \\\"PublishedName\\\", \\\"OriginalFileName\\\", \\\"Inbox\\\", \\\"ClassName\\\", \\\"ProviderName\\\", \\\"Date\\\", @{ Name = \\\"Version\\\"; Expression = { $_.Version -as [version] } }))\\n\\n        $driverMissing = $false\\n        foreach ($driver in $driverMapping.Keys) {\\n             \\n             $driverFound = ($driversQueryResults | Where-Object { $_.OriginalFileName -like \\\"$driver*\\\" })\\n        \\n             if ($driverFound) {\\n                  Write-Host \\\"[PASSED] $($driverMapping.$driver.Name) with version(s): $($driverFound.Version), installed and available on your EC2 instance`n\\\"\\n             }\\n             else\\n             {\\n                Write-Host \\\"[INFO] $($driverMapping.$driver.Name) is not installed on your EC2 instance.\\\"\\n\\n                $tempPath = (Resolve-Path ${env:temp}).Path\\n                $tempFile = \\\"${tempPath}\\\\AWSPCISerialDriver.zip\\\"\\n                $tempDir = \\\"${tempPath}\\\\AWSPCISerialDriver\\\"\\n                $url = \\\"https://s3.amazonaws.com/ec2-windows-drivers-downloads/AWSPCISerialDriver/Latest/AWSPCISerialDriver.zip\\\"\\n\\n                [System.Net.ServicePointManager]::SecurityProtocol = ([int][system.net.SecurityProtocolType]::Tls13 -bor [int][system.net.SecurityProtocolType]::Tls12)\\n                $wc = New-Object System.Net.WebClient\\n                $attemptCount = 1\\n                \\n                Do {\\n                Write-Host \\\"Downloading AWS PCI Serial Port Driver, attempt: $attemptCount/5...\\\"\\n                $attemptCount++\\n                $wc.DownloadFile($url, $tempFile)\\n                Start-Sleep -Seconds (1 * $attemptCount)\\n                } While (((Test-Path $tempFile) -eq $false) -and ($attemptCount -le 6))\\n\\n                if (Test-Path $tempDir) {\\n                    Remove-Item -Path $tempDir -Recurse -Force\\n                }\\n        \\n                # Extract drivers\\n                try {\\n                    # Unpacking the file this way is not supported in PowerShell 2\\n                    Add-Type -AssemblyName System.IO.Compression.FileSystem -ErrorAction SilentlyContinue\\n                    [System.IO.Compression.ZipFile]::ExtractToDirectory($tempFile, $tempDir)\\n                }\\n                catch [System.InvalidOperationException] {\\n                    # Legacy unpacking method using COM Object\\n                    # Works with PowerShell 2\\n                    New-Item -Path $tempDir -ItemType \\\"directory\\\" -Force | Out-Null\\n                    ((New-Object -com shell.application).NameSpace($tempDir)).CopyHere(((New-Object -com shell.application).NameSpace($tempFile)).Items())\\n                }\\n        \\n                # Install the inf file\\n                Write-Host \\\"Installing serial port driver\\\"\\n                $output = Get-ChildItem $tempDir -Recurse -Filter \\\"*inf\\\" | ForEach-Object {PNPUtil.exe -a $_.FullName; PNPUtil.exe -i -a $_.FullName}\\n                Write-Host $output\\n        \\n                # Evaluate output\\n                New-Item \\\"serial-driver-state-{{ automation:EXECUTION_ID }}\\\" -ItemType file | Out-Null\\n                if ($output -match $successOutput) {\\n                    Write-Output $output | Set-Content -Path \\\"serial-driver-state-{{ automation:EXECUTION_ID }}\\\"\\n                    Write-Host \\\"Success\\\"            \\n                    exit 0\\n                }\\n                else {\\n                    exit 1\\n                }\\n             }\\n        }\\n\\n\\n\\n\\n    }\\n}\\ncatch {\\n    Write-Host $_.Exception.Message\\n    exit 255\\n}\\n\"\n        }\n      }\n    },\n    {\n      \"name\": \"updatePowerManagementSettings\",\n      \"action\": \"aws:runCommand\",\n      \"description\": \"Updates the power management display settings to ensure graceful shutdowns on the nitro hypervisor\",\n      \"timeoutSeconds\": 3600,\n      \"nextStep\": \"stopClonedInstance\",\n      \"onFailure\": \"step:failureHandling\",\n      \"inputs\": {\n        \"DocumentName\": \"AWS-RunPowerShellScript\",\n        \"InstanceIds\": [\n          \"{{launchInstanceInSameSubnet.ClonedInstanceId}}\"\n        ],\n        \"Parameters\": {\n          \"commands\": \"# Copyright 2023 Amazon.com, Inc. or its affiliates. All Rights Reserved.\\n# SPDX-License-Identifier: LicenseRef-.amazon.com.-AmznSL-1.0\\n# Licensed under the Amazon Software License  http://aws.amazon.com/asl/\\n\\n# Power Plans schemes\\n$SCHEME_BALANCED = \\\"381b4222-f694-41f0-9685-ff5bb260df2e\\\"\\n$SCHEME_POWER_SAVER = \\\"381b4222-f694-41f0-9685-ff5bb260df2e\\\"\\n$SCHEME_HIGH_PERFORMANCE = \\\"8c5e7fda-e8bf-4a96-9a85-a6e23a8c635c\\\"\\n\\n$DISPLAY_SETTING = \\\"7516b95f-f776-4464-8c53-06167f40cc99\\\"\\n$TURN_OFF_DISPLAY = \\\"3c0bc021-c8a8-4e07-a973-6b14cbcb2b7e\\\"\\n$VALUE = 0\\n\\n#Need to apply the following power management settings to ensure a graceful shutdown on the nitro hypervisor\\ntry {\\n    Write-Host \\\"[INFO] Updating Power Management settings for graceful shutdown on the Nitro hypervisor..\\\"\\n    powercfg /SETDCVALUEINDEX $SCHEME_BALANCED $DISPLAY_SETTING $TURN_OFF_DISPLAY $VALUE\\n    powercfg /SETDCVALUEINDEX $SCHEME_POWER_SAVER $DISPLAY_SETTING $TURN_OFF_DISPLAY $VALUE\\n    powercfg /SETDCVALUEINDEX $SCHEME_HIGH_PERFORMANCE $DISPLAY_SETTING $TURN_OFF_DISPLAY $VALUE\\n    Write-Host \\\"Complete\\\"\\n} catch {\\n    Write-Host \\\"[FAILED] Unable to update power management settings\\\"\\n    Write-Host $_\\n    exit 1\\n}\\n\"\n        }\n      }\n    },\n    {\n      \"name\": \"stopClonedInstance\",\n      \"action\": \"aws:changeInstanceState\",\n      \"description\": \"Stops the cloned EC2 instance\",\n      \"maxAttempts\": 1,\n      \"timeoutSeconds\": 300,\n      \"onFailure\": \"step:forceStopClonedInstance\",\n      \"inputs\": {\n        \"InstanceIds\": [\n          \"{{launchInstanceInSameSubnet.ClonedInstanceId}}\"\n        ],\n        \"CheckStateOnly\": false,\n        \"DesiredState\": \"stopped\"\n      },\n      \"nextStep\": \"checkENAAttributeForClonedInstance\"\n    },\n    {\n      \"name\": \"forceStopClonedInstance\",\n      \"action\": \"aws:changeInstanceState\",\n      \"description\": \"Force stops the cloned EC2 instance, only if the step 'stopClonedInstance' fails to stop\",\n      \"maxAttempts\": 1,\n      \"timeoutSeconds\": 300,\n      \"onFailure\": \"step:failureHandling\",\n      \"inputs\": {\n        \"InstanceIds\": [\n          \"{{launchInstanceInSameSubnet.ClonedInstanceId}}\"\n        ],\n        \"CheckStateOnly\": false,\n        \"DesiredState\": \"stopped\",\n        \"Force\": true\n      },\n      \"nextStep\": \"checkENAAttributeForClonedInstance\"\n    },\n    {\n      \"name\": \"checkENAAttributeForClonedInstance\",\n      \"action\": \"aws:branch\",\n      \"description\": \"Checks if the Enhanced Networking Adapter (ENA) attribute is enabled on the cloned EC2 instance\",\n      \"isCritical\": true,\n      \"onFailure\": \"step:failureHandling\",\n      \"inputs\": {\n        \"Choices\": [\n          {\n            \"NextStep\": \"setNitroInstanceTypeForClonedInstance\",\n            \"Variable\": \"{{getTargetInstanceProperties.ENAAttrib}}\",\n            \"BooleanEquals\": true\n          }\n        ],\n        \"Default\": \"enableENAAttributeForClonedInstance\"\n      }\n    },\n    {\n      \"name\": \"enableENAAttributeForClonedInstance\",\n      \"action\": \"aws:executeAwsApi\",\n      \"description\": \"Enables the Enhanced Networking Adapter (ENA) attribute for the cloned instance, if not enabled already\",\n      \"nextStep\": \"setNitroInstanceTypeForClonedInstance\",\n      \"onFailure\": \"step:failureHandling\",\n      \"maxAttempts\": 1,\n      \"inputs\": {\n        \"Service\": \"ec2\",\n        \"Api\": \"ModifyInstanceAttribute\",\n        \"InstanceId\": \"{{launchInstanceInSameSubnet.ClonedInstanceId}}\",\n        \"EnaSupport\": {\n          \"Value\": true\n        }\n      }\n    },\n    {\n      \"name\": \"setNitroInstanceTypeForClonedInstance\",\n      \"action\": \"aws:executeAwsApi\",\n      \"description\": \"Sets the provided Target EC2 instance type for the cloned EC2 instance\",\n      \"onFailure\": \"step:failureHandling\",\n      \"nextStep\": \"startClonedInstance\",\n      \"maxAttempts\": 1,\n      \"inputs\": {\n        \"Service\": \"ec2\",\n        \"Api\": \"ModifyInstanceAttribute\",\n        \"InstanceId\": \"{{launchInstanceInSameSubnet.ClonedInstanceId}}\",\n        \"InstanceType\": {\n          \"Value\": \"{{NitroInstanceType}}\"\n        }\n      }\n    },\n    {\n      \"name\": \"startClonedInstance\",\n      \"action\": \"aws:changeInstanceState\",\n      \"description\": \"Starts the cloned EC2 instance\",\n      \"maxAttempts\": 1,\n      \"timeoutSeconds\": 900,\n      \"isCritical\": true,\n      \"onFailure\": \"step:failureHandling\",\n      \"inputs\": {\n        \"InstanceIds\": [\n          \"{{launchInstanceInSameSubnet.ClonedInstanceId}}\"\n        ],\n        \"CheckStateOnly\": false,\n        \"DesiredState\": \"running\"\n      },\n      \"nextStep\": \"approvalForCreatingImageAfterDriversInstallation\"\n    },\n    {\n      \"name\": \"approvalForCreatingImageAfterDriversInstallation\",\n      \"action\": \"aws:approve\",\n      \"description\": \"Waits for user approval if the cloned EC2 instance successfully boots on Nitro platform. If provided, creates an Amazon Machine Image (AMI) taken after the required drivers have been installed for the Nitro system\",\n      \"timeoutSeconds\": 3600,\n      \"onFailure\": \"Abort\",\n      \"nextStep\": \"createImageAfterDriversInstallation\",\n      \"inputs\": {\n        \"NotificationArn\": \"{{SNSTopicArn}}\",\n        \"Message\": \"Cloned EC2 Instance {{launchInstanceInSameSubnet.ClonedInstanceId}}, created from target EC2 instance {{TargetInstanceId}}, has been successfully migrated to {{NitroInstanceType}}. Provide approval to create an Amazon Machine Image (AMI) which can be used as a backup taken after driver installation. In case of 'Reject/Deny', the Automation will stop with Failed status. This step will automatically timeout after 3600s if no action is taken.\",\n        \"MinRequiredApprovals\": \"{{MinimumRequiredApprovals}}\",\n        \"Approvers\": [\n          \"{{ApproverIAM}}\"\n        ]\n      }\n    },\n    {\n      \"name\": \"createImageAfterDriversInstallation\",\n      \"action\": \"aws:createImage\",\n      \"description\": \"Creates an Amazon Machine Image (AMI) from the new EC2 instance only if the new EC2 instance successfully boots on Nitro Platform\",\n      \"maxAttempts\": 1,\n      \"nextStep\": \"cleanupTestImage\",\n      \"onFailure\": \"step:failureHandling\",\n      \"isCritical\": true,\n      \"inputs\": {\n        \"InstanceId\": \"{{launchInstanceInSameSubnet.ClonedInstanceId}}\",\n        \"ImageName\": \"CloneXenEC2WindowsInstanceAndMigrateToNitro_NitroImage_{{TargetInstanceId}}_{{global:DATE_TIME}}\",\n        \"NoReboot\": true,\n        \"ImageDescription\": \"Image created after driver installation - SSMAutomationID-{{automation:EXECUTION_ID}}\"\n      }\n    },\n    {\n      \"name\": \"cleanupTestImage\",\n      \"action\": \"aws:deleteImage\",\n      \"description\": \"De-registers the Amazon Machine Image (AMI) created for testing\",\n      \"maxAttempts\": 3,\n      \"isEnd\": true,\n      \"onFailure\": \"Continue\",\n      \"isCritical\": true,\n      \"inputs\": {\n        \"ImageId\": \"{{createTestImage.ImageId}}\"\n      }\n    },\n    {\n      \"name\": \"failureHandling\",\n      \"action\": \"aws:branch\",\n      \"description\": \"Checks if the user has chosen to terminate resources on failure\",\n      \"isEnd\": true,\n      \"isCritical\": true,\n      \"inputs\": {\n        \"Choices\": [\n          {\n            \"NextStep\": \"onFailureTerminateClonedInstance\",\n            \"Variable\": \"{{DeleteResourcesOnFailure}}\",\n            \"BooleanEquals\": true\n          }\n        ]\n      }\n    },\n    {\n      \"name\": \"onFailureTerminateClonedInstance\",\n      \"action\": \"aws:changeInstanceState\",\n      \"description\": \"Terminates the cloned EC2 instance, in case of automation failure\",\n      \"maxAttempts\": 1,\n      \"isCritical\": true,\n      \"timeoutSeconds\": 300,\n      \"nextStep\": \"onFailurecleanupTestImage\",\n      \"onFailure\": \"Continue\",\n      \"inputs\": {\n        \"InstanceIds\": [\n          \"{{launchInstanceInSameSubnet.ClonedInstanceId}}\"\n        ],\n        \"CheckStateOnly\": false,\n        \"DesiredState\": \"terminated\"\n      }\n    },\n    {\n      \"name\": \"onFailurecleanupTestImage\",\n      \"action\": \"aws:deleteImage\",\n      \"description\": \"De-registers the Amazon Machine Image (AMI) created for testing\",\n      \"maxAttempts\": 3,\n      \"onFailure\": \"Continue\",\n      \"nextStep\": \"onFailureCleanupIsolatedSecurityGroup\",\n      \"isCritical\": true,\n      \"inputs\": {\n        \"ImageId\": \"{{createTestImage.ImageId}}\"\n      }\n    },\n    {\n      \"name\": \"onFailureCleanupIsolatedSecurityGroup\",\n      \"action\": \"aws:executeScript\",\n      \"description\": \"Deletes the isolated security group if it was made for handling domain-joined instances\",\n      \"onFailure\": \"Continue\",\n      \"nextStep\": \"onFailureApprovalToStartTargetInstance\",\n      \"inputs\": {\n        \"Runtime\": \"python3.8\",\n        \"Handler\": \"createIsolatedSecurityGroup.deleteCreatedSecurityGroup_handler\",\n        \"Attachment\": \"clone-xen-to-nitro-python.zip\",\n        \"InputPayload\": {\n          \"StepName\": \"createIsolatedSecurityGroup\"\n        }\n      },\n      \"outputs\": [\n        {\n          \"Name\": \"Output_Message\",\n          \"Selector\": \"$.Payload.output_message\",\n          \"Type\": \"String\"\n        }\n      ]\n    },\n    {\n      \"name\": \"onFailureApprovalToStartTargetInstance\",\n      \"action\": \"aws:approve\",\n      \"description\": \"If automation fails, waits for designated principal's approval to start the target EC2 instance\",\n      \"timeoutSeconds\": 3600,\n      \"onFailure\": \"Abort\",\n      \"nextStep\": \"onFailureStartTargetInstance\",\n      \"inputs\": {\n        \"NotificationArn\": \"{{SNSTopicArn}}\",\n        \"Message\": \"Automation failed while migrating cloned EC2 Xen based instance to Nitro platform. Provide approval to start the target EC2 instance. In case of 'Reject/Deny', the Automation will stop with Failed status. This step will automatically timeout after 3600s if no action is taken.\",\n        \"MinRequiredApprovals\": \"{{MinimumRequiredApprovals}}\",\n        \"Approvers\": [\n          \"{{ApproverIAM}}\"\n        ]\n      }\n    },\n    {\n      \"name\": \"onFailureStartTargetInstance\",\n      \"action\": \"aws:changeInstanceState\",\n      \"description\": \"If automation fails, starts the target EC2 instance\",\n      \"maxAttempts\": 1,\n      \"timeoutSeconds\": 900,\n      \"isCritical\": true,\n      \"onFailure\": \"Abort\",\n      \"isEnd\": true,\n      \"inputs\": {\n        \"InstanceIds\": [\n          \"{{TargetInstanceId}}\"\n        ],\n        \"CheckStateOnly\": false,\n        \"DesiredState\": \"running\"\n      }\n    }\n  ],\n  \"outputs\": [\n    \"launchInstanceInSameSubnet.ClonedInstanceId\",\n    \"createBackupImage.ImageId\",\n    \"createImageAfterDriversInstallation.ImageId\"\n  ],\n  \"files\": {\n    \"clone-xen-to-nitro-python.zip\": {\n      \"checksums\": {\n        \"sha256\": \"5de16a952408bfded5d07045b8ddddd5ef41d2aab7986448c715ddf57a06f76d\"\n      }\n    }\n  }\n}",
  "CreatedDate": "2023-06-26T20:06:19.725Z",
  "DisplayName": null,
  "DocumentFormat": {
    "Value": "JSON"
  },
  "DocumentType": {
    "Value": "Automation"
  },
  "DocumentVersion": "1",
  "Name": "AWSSupport-CloneXenEC2WinInstanceAndMigrateToNitro",
  "Requires": [],
  "ReviewStatus": null,
  "Status": {
    "Value": "Active"
  },
  "StatusInformation": null,
  "VersionName": null,
  "ResponseMetadata": {
    "RequestId": "f84e0a7e-b8f4-4cab-9b4d-9145fa4b1a21",
    "Metadata": {},
    "ChecksumAlgorithm": 0,
    "ChecksumValidationStatus": 0
  },
  "ContentLength": 69603,
  "HttpStatusCode": 200,
  "LoggedAt": "2023-06-28T07:12:45.3695451+00:00"
}
