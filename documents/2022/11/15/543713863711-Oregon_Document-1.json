{
  "AttachmentsContent": [],
  "Content": "{\n    \"schemaVersion\": \"1.2\",\n    \"description\": \"Scans for or installs patches from a patch baseline.\",\n    \"parameters\": {\n        \"Operation\": {\n            \"type\": \"String\",\n            \"description\": \"(Required) The update or configuration to perform on the instance. The system checks if the baseline patches are installed. The install operation installs all patches in the baseline.\",\n            \"allowedValues\": [\n                \"Scan\",\n                \"Install\"\n            ]\n        },\n        \"SnapshotId\": {\n            \"type\": \"String\",\n            \"description\": \"(Optional) The snapshot Id to retrieve a patch baseline snapshot with.\",\n            \"allowedPattern\": \"(^$)|^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$\",\n            \"default\" : \"\"\n        }\n    },\n    \"runtimeConfig\": {\n        \"aws:runPowerShellScript\": {\n            \"properties\": [{\n                \"id\": \"0.aws:runPowerShellScript\",\n                \"timeoutSeconds\": 7200,\n                \"runCommand\": [\n                    \"# Check the OS version\",\n                    \"if ([Environment]::OSVersion.Version.Major -le 5) {\",\n                    \"    Write-Error 'This command is not supported on Windows 2003 or lower.'\",\n                    \"    exit -1\",\n                    \"} elseif ([Environment]::OSVersion.Version.Major -ge 10) {\",\n                    \"    $sku = (Get-CimInstance -ClassName Win32_OperatingSystem).OperatingSystemSKU\",\n                    \"    if ($sku -eq 143 -or $sku -eq 144) {\",\n                    \"        Write-Host 'This command is not supported on Windows 2016 Nano Server.'\",\n                    \"        exit -1\",\n                    \"    }\",\n                    \"}\",\n                    \"# Check the SSM agent version\",\n                    \"$ssmAgentService = Get-ItemProperty 'HKLM:SYSTEM\\\\CurrentControlSet\\\\Services\\\\AmazonSSMAgent\\\\'\",\n                    \"if (-not $ssmAgentService -or $ssmAgentService.Version -lt '2.0.533.0') {\",\n                    \"    Write-Host 'This command is not supported with SSM Agent version less than 2.0.533.0.'\",\n                    \"    exit -1\",\n                    \"}\",\n                    \"\",\n                    \"# Application specific constants\",\n                    \"$appName = 'PatchBaselineOperations'\",\n                    \"$psModuleFileName = 'Amazon.PatchBaselineOperations.dll'\",\n                    \"$s3FileName = 'Amazon.PatchBaselineOperations-1.4.zip'\",\n                    \"$s3LocationUsEast = 'https://s3.amazonaws.com/aws-ssm-{0}/' + $appName.ToLower() + '/' + $s3FileName\",\n                    \"$s3LocationRegular = 'https://s3-{0}.amazonaws.com/aws-ssm-{0}/' + $appName.ToLower() + '/' + $s3FileName\",\n                    \"$s3LocationCn = 'https://s3.{0}.amazonaws.com.cn/aws-ssm-{0}/' + $appName.ToLower() + '/' + $s3FileName\",\n                    \"$s3FileHash = 'ABC46B498805EB47F668C097C171FDD4445CD18C4AD4BC9C1E5EBD33572F3569'\",\n                    \"$psModuleHashes = @{ \",\n                    \"    'Amazon.PatchBaselineOperations.dll' = '55F2EA5200F9824D9B03C45A0FB041322AE2F71AF7C64A74870EEF057383D9C7';\",\n                    \"    'AWSSDK.Core.dll' = '8B97F15D68A85AAB7AB0B0BF30C32992B24244E258D78E2C7ED7F572922CEB56';\",\n                    \"    'AWSSDK.SimpleSystemsManagement.dll' = '9A868136F071DA2907A9A15B0696EFFA253EBCECD8A73D65B85C8DF8B9730720';\",\n                    \"    'Newtonsoft.Json.dll' = '0516D4109263C126C779E4E8F5879349663FA0A5B23D6D44167403E14066E6F9';\",\n                    \"    'THIRD_PARTY_LICENSES.txt' = '4C9B3A1C7C3E27676DD31AFC89FAC6584CA49FB850C9E62DDCF9E5E78F50640C'\",\n                    \"}\",\n                    \"\",\n                    \"# Folders and Logging\",\n                    \"$tempDirectory = $env:TEMP\",\n                    \"$downloadPath = [IO.Path]::Combine($tempDirectory, $s3FileName)\",\n                    \"$psModuleInstallLocation = [IO.Path]::Combine([Environment]::GetEnvironmentVariable([Environment+SpecialFolder]::ProgramFiles), 'Amazon', $appName)\",\n                    \"$psModuleInstallFile = [IO.Path]::Combine($psModuleInstallLocation, $psModuleFileName)\",\n                    \"$log = @()\",\n                    \"\",\n                    \"function CheckFileHash ($filePath, $fileHash) {\",\n                    \"    if (Test-Path($filePath)) {\",\n                    \"        $fileStream = New-Object System.IO.FileStream($filePath, [System.IO.FileMode]::Open, [System.IO.FileAccess]::Read)\",\n                    \"        $sha256 = [System.Security.Cryptography.HashAlgorithm]::Create('System.Security.Cryptography.SHA256CryptoServiceProvider')\",\n                    \"        $sourceHash = [System.BitConverter]::ToString($sha256.ComputeHash($fileStream), 0).Replace('-', '').ToLowerInvariant()\",\n                    \"        $sha256.Dispose()\",\n                    \"        $fileStream.Dispose()\",\n                    \"        \",\n                    \"        if ($sourceHash -ne $fileHash) {\",\n                    \"            return $false\",\n                    \"        }\",\n                    \"        else {\",\n                    \"            return $true\",\n                    \"        }\",\n                    \"    }\",\n                    \"    else {\",\n                    \"        return $false\",\n                    \"    }\",\n                    \"}\",\n                    \"\",\n                    \"function CheckPowerShellModuleInstallation {\",\n                    \"    $isInstalled = $false \",\n                    \"    # Path does not exist meaning it has never been downloaded.\",\n                    \"    if (Test-Path($psModuleInstallLocation)) {\",\n                    \"        # Check if the expected number of files and directories are in the folder\",\n                    \"        if (((Get-ChildItem $psModuleInstallLocation -Directory | Measure-Object | %{$_.Count}) -eq 0) -and \",\n                    \"            ((Get-ChildItem $psModuleInstallLocation -File | Measure-Object | %{$_.Count}) -eq $psModuleHashes.Count)) {\",\n                    \"            $validFileHashes = $true\",\n                    \"\",\n                    \"            # Check each file for their expected file hash.\",\n                    \"            Get-ChildItem $psModuleInstallLocation -File | ForEach-Object {\",\n                    \"                if ($psModuleHashes.ContainsKey($_.Name)) {\",\n                    \"                    $installFile = [IO.Path]::Combine($psModuleInstallLocation, $_.Name)\",\n                    \"                    if (-Not (CheckFileHash $installFile $psModuleHashes[$_.Name])) {\",\n                    \"                        $log += ('The SHA hash of the {0} file does not match the expected value.' -f $_.Name)\",\n                    \"                        $validFileHashes = $false\",\n                    \"                    }\",\n                    \"                } else {\",\n                    \"                    $log += ('The PowerShellModule installation folder contains an unexpected file with name {0}.' -f $_.Name)\",\n                    \"                    $validFileHashes = $false\",\n                    \"                }\",\n                    \"            }\",\n                    \"\",\n                    \"            $isInstalled = $validFileHashes\",\n                    \"        } else {\",\n                    \"            $log += ('An incorrect number of files were present in the PowerShellModule installation folder. The contents will be deleted.')\",\n                    \"        }\",\n                    \"\",\n                    \"        if (-Not $isInstalled) {\",\n                    \"            # Remove all files and folders as the folder contains potentially malicious software.\",\n                    \"            Remove-Item $psModuleInstallLocation -Recurse\",\n                    \"        }\",\n                    \"    }\",\n                    \"   \",\n                    \"    return $isInstalled\",\n                    \"}\",\n                    \"\",\n                    \"function ExtractZipCoreOs ([string]$zipFilePath, [string]$destPath) {\",\n                    \"    try {\",\n                    \"        [System.Reflection.Assembly]::LoadWithPartialName('System.IO.Compression.FileSystem') | Out-Null\",\n                    \"        $zip = [System.IO.Compression.ZipFile]::OpenRead($zipFilePath)\",\n                    \"        foreach ($item in $zip.Entries) {\",\n                    \"            $extractedPath = Join-Path $destPath $item.FullName\",\n                    \"\",\n                    \"            if ($item.Length -eq 0) {\",\n                    \"                if ((Test-Path $extractedPath) -eq 0) {\",\n                    \"                    mkdir $extractedPath | Out-Null\",\n                    \"                }\",\n                    \"            } else {\",\n                    \"                $fileParent = Split-Path $extractedPath\",\n                    \"\",\n                    \"                if ((Test-Path $fileParent) -eq 0) {\",\n                    \"                    mkdir $fileParent | Out-Null\",\n                    \"                }\",\n                    \"\",\n                    \"                [System.IO.Compression.ZipFileExtensions]::ExtractToFile($item, $extractedPath, $true)\",\n                    \"            }\",\n                    \"        }\",\n                    \"    } catch {\",\n                    \"        throw 'Error encountered when extracting patch management zip file.`n$($_.Exception.Message)'\",\n                    \"    } finally {\",\n                    \"        $zip.Dispose()\",\n                    \"    }\",\n                    \"}\",\n                    \"\",\n                    \"function InstallPowerShellModule {\",\n                    \"    if (-Not (CheckPowerShellModuleInstallation)) {\",\n                    \"        $log += (\\\"Preparing to download {0} PowerShell module from S3.`r`n\\\" -f $appName)\",\n                    \"\",\n                    \"        #Setup the directories if they do not exist.\",\n                    \"        if (-Not (Test-Path($psModuleInstallLocation))) {\",\n                    \"            $noOp = New-Item $psModuleInstallLocation -ItemType Directory\",\n                    \"        } \",\n                    \"\",\n                    \"        if (-Not (Test-Path($tempDirectory))) {\",\n                    \"            $noOp = New-Item $tempDirectory -ItemType Directory\",\n                    \"        }\",\n                    \"        $region = $env:AWS_SSM_REGION_NAME \",\n                    \"        if ($region -eq 'us-east-1') {\",\n                    \"            $s3Location = $s3LocationUsEast -f $region\",\n                    \"        } elseif ($region -eq 'cn-north-1') {\",\n                    \"            $s3Location = $s3LocationCn -f $region\",\n                    \"        } else {\",\n                    \"            $s3Location = $s3LocationRegular -f $region\",\n                    \"        }\",\n                    \"\",\n                    \"        $log += (\\\"Downloading {0} PowerShell module from {1} to {2}.`r`n\\\" -f $appName, $s3Location, $downloadPath)\",\n                    \"        (New-Object Net.WebClient).DownloadFile($s3Location, $downloadPath)\",\n                    \"\",\n                    \"        if (CheckFileHash $downloadPath $s3FileHash ) {\",\n                    \"            $log += (\\\"Extracting {0} zip file contents to temporary folder.`r`n\\\" -f $appName)\",\n                    \"            try {\",\n                    \"               (New-Object -Com Shell.Application).namespace($psModuleInstallLocation).CopyHere((New-Object -Com Shell.Application).namespace($downloadPath).Items(), 16)\",\n                    \"            } catch [Exception] {\",\n                    \"                ExtractZipCoreOs $downloadPath $psModuleInstallLocation\",\n                    \"            }\",\n                    \"        }\",\n                    \"        else {\",\n                    \"            throw ('The SHA hash of the {0} S3 source file does not match the expected value.' -f $appName)\",\n                    \"        }\",\n                    \"\",\n                    \"        $log += (\\\"Verifying SHA 256 of the {0} PowerShell module files.`r`n\\\" -f $appName)\",\n                    \"        if (-Not (CheckPowerShellModuleInstallation)) {\",\n                    \"            throw ('The verification of the {0} PowerShell module did not pass.' -f $appName)\",\n                    \"        }\",\n                    \"\",\n                    \"        $log += (\\\"Successfully downloaded and installed the {0} PowerShell module.`r`n\\\" -f $appName)\",\n                    \"    }\",\n                    \"}\",\n                    \"\",\n                    \"try {\",\n                    \"    InstallPowerShellModule\",\n                    \"} catch [Exception] {\",\n                    \"    $msg = \\\"An error occurred when executing {0}: {1}`r`nDetails:`r`n{2}\\\" -f $appName, $_.Exception.Message, $log\",\n                    \"    Write-Error $msg\",\n                    \"    exit -1\",\n                    \"}\",\n                    \"finally {\",\n                    \"    if (Test-Path $downloadPath) {\",\n                    \"        rm $downloadPath\",\n                    \"    }\",\n                    \"}\",\n                    \"\",\n                    \"# Setup the command\",\n                    \"Import-Module $psModuleInstallFile\",\n                    \"$response = Invoke-PatchBaselineOperation -Operation {{Operation}} -SnapshotId '{{SnapshotId}}' -InstanceId $env:AWS_SSM_INSTANCE_ID -Region $env:AWS_SSM_REGION_NAME\",\n                    \"\",\n                    \"if ($response.ExitCode -ne 3010)\",\n                    \"{\",\n                    \"    $response.ToString()\",\n                    \"}\",\n                    \"\",\n                    \"exit $response.ExitCode\"\n                ]\n            }]\n        }\n    }\n}",
  "CreatedDate": "2017-12-01T21:32:25.832Z",
  "DisplayName": null,
  "DocumentFormat": {
    "Value": "JSON"
  },
  "DocumentType": {
    "Value": "Command"
  },
  "DocumentVersion": "1",
  "Name": "arn:aws:ssm:us-west-2:543713863711:document/Oregon_Document",
  "Requires": [],
  "ReviewStatus": null,
  "Status": {
    "Value": "Active"
  },
  "StatusInformation": null,
  "VersionName": null,
  "ResponseMetadata": {
    "RequestId": "2ccf9a30-53d2-492c-b9fa-462765b0b997",
    "Metadata": {},
    "ChecksumAlgorithm": 0,
    "ChecksumValidationStatus": 0
  },
  "ContentLength": 14722,
  "HttpStatusCode": 200,
  "LoggedAt": "2022-11-15T07:14:47.3647655+00:00"
}
