{
  "AttachmentsContent": [],
  "Content": "{\n  \"description\" : \"## Intent\\n'Test that the application automatically recovers in case of a maz failover'\\n\\n## Type\\nTest\\n\\n## Risk\\nSmall\\n\\n## Requirements\\n  * RDS aurora cluster\\n  * There is a canary alarm setup for application\\n\\n## Permissions required for AutomationAssumeRole\\n  * rds:DescribeDBClusters\\n  * rds:FailoverDBCluster\\n  * cloudwatch:DescribeAlarms\\n\\n## Supports Rollback\\nNo.\\n\\n## Cancellation behavior\\nAbort.\\n\\n## Inputs\\n### (Required) AutomationAssumeRole:\\n  * type: String\\n  * description: (Required) The ARN of the role that allows Automation to perform the actions on your behalf\\n\\n### (Required) ClusterId:\\n  * type: String\\n  * description: (Required) Identifies the aurora db cluster subject to action.\\n\\n### (Required) CanaryAlarmName:\\n  * type: String\\n  * description: (Required) Canary Alarm which should be green within recovery time.\\n\\n### (Optional) InstanceId:\\n  * type: String\\n  * description: (Optional) The DB instance to promote to the primary instance.\\n\\n## Details\\n  * Failover rds cluster.\\n  * Assert canary alarm to be green within expected recovery time.\\n\\n## Steps executed when Instance Id is provided flow\\n  * AssertAlarmToBeGreenBeforeTest\\n  * WaitForAvailableStateBeforeFailover\\n  * GetClusterWriterId\\n  * PrimaryInstanceSelector\\n  * FailoverClusterWithPrimary\\n  * WaitClusterFailoverCompleted\\n  * AssertAlarmToBeGreen\\n\\n## Steps executed when Instance Id is not provided flow\\n  * AssertAlarmToBeGreenBeforeTest\\n  * WaitForAvailableStateBeforeFailover\\n  * GetClusterWriterId\\n  * PrimaryInstanceSelector\\n  * FailoverClusterDefault\\n  * WaitClusterFailoverCompleted\\n  * AssertAlarmToBeGreen\\n\\n## Outputs\\nNone\",\n  \"schemaVersion\" : \"0.3\",\n  \"assumeRole\" : \"{{ AutomationAssumeRole }}\",\n  \"parameters\" : {\n    \"ClusterId\" : {\n      \"type\" : \"String\",\n      \"description\" : \"(Required) Identifies the Aurora cluster subject to action.\"\n    },\n    \"InstanceId\" : {\n      \"type\" : \"String\",\n      \"description\" : \"(Optional) The DB instance to promote to the primary instance.\",\n      \"default\" : \"\"\n    },\n    \"CanaryAlarmName\" : {\n      \"type\" : \"String\",\n      \"description\" : \"(Required) Alarm which should be green after test.\"\n    },\n    \"AutomationAssumeRole\" : {\n      \"type\" : \"String\",\n      \"description\" : \"(Required) The ARN of the role that allows Automation to perform the actions on your behalf.\"\n    }\n  },\n  \"mainSteps\" : [ {\n    \"name\" : \"AssertAlarmToBeGreenBeforeTest\",\n    \"description\" : \"Ensure alarm is green before starting test. Fail if alarm is not green within expected time.\",\n    \"action\" : \"aws:waitForAwsResourceProperty\",\n    \"maxAttempts\" : 1,\n    \"timeoutSeconds\" : 300,\n    \"inputs\" : {\n      \"Service\" : \"cloudwatch\",\n      \"Api\" : \"DescribeAlarms\",\n      \"AlarmNames\" : [ \"{{CanaryAlarmName}}\" ],\n      \"PropertySelector\" : \"$.MetricAlarms[0].StateValue\",\n      \"DesiredValues\" : [ \"OK\" ]\n    }\n  }, {\n    \"name\" : \"WaitForAvailableStateBeforeFailover\",\n    \"description\" : \"Wait for cluster to be in available state before test.\",\n    \"action\" : \"aws:waitForAwsResourceProperty\",\n    \"maxAttempts\" : 10,\n    \"timeoutSeconds\" : 600,\n    \"onFailure\" : \"Abort\",\n    \"inputs\" : {\n      \"Service\" : \"rds\",\n      \"Api\" : \"DescribeDBClusters\",\n      \"DBClusterIdentifier\" : \"{{ClusterId}}\",\n      \"PropertySelector\" : \"$.DBClusters[0].Status\",\n      \"DesiredValues\" : [ \"available\" ]\n    }\n  }, {\n    \"name\" : \"GetClusterWriterId\",\n    \"description\" : \"Get cluster writer id.\",\n    \"action\" : \"aws:executeScript\",\n    \"onFailure\" : \"Abort\",\n    \"outputs\" : [ {\n      \"Name\" : \"WriterId\",\n      \"Selector\" : \"$.Payload.WriterId\",\n      \"Type\" : \"String\"\n    } ],\n    \"inputs\" : {\n      \"Runtime\" : \"python3.6\",\n      \"Handler\" : \"get_cluster_writer_id\",\n      \"InputPayload\" : {\n        \"ClusterId\" : \"{{ClusterId}}\"\n      },\n      \"Script\" : \"import logging\\nfrom datetime import datetime, timezone\\nimport boto3\\nimport time\\nimport random\\nimport botocore\\nfrom botocore.config import Config\\nfrom botocore.exceptions import ClientError\\n\\nlogger = logging.getLogger(__name__)\\nlogger.setLevel(logging.INFO)\\n\\nvalid_capacity_PostgreSQL = [2, 4, 8, 16, 32, 64]\\n\\n\\n\\n\\ndef get_cluster_writer_id(events, context):\\n    if 'ClusterId' not in events:\\n        raise KeyError('Requires ClusterId in events')\\n    config = Config(retries={'max_attempts': 20, 'mode': 'standard'})\\n    rds = boto3.client('rds', config=config)\\n    clusters = rds.describe_db_clusters(DBClusterIdentifier=events['ClusterId'])\\n    return {'WriterId': _parse_writer_id(clusters)}\\n\\n\\n\\ndef _parse_writer_id(clusters):\\n    for member in clusters['DBClusters'][0]['DBClusterMembers']:\\n        if member['IsClusterWriter'] is True:\\n            return member['DBInstanceIdentifier']\"\n    }\n  }, {\n    \"name\" : \"PrimaryInstanceSelector\",\n    \"description\" : \"Select primary instance branch based on InstanceId parameter.\",\n    \"action\" : \"aws:branch\",\n    \"inputs\" : {\n      \"Choices\" : [ {\n        \"NextStep\" : \"FailoverClusterDefault\",\n        \"Variable\" : \"{{InstanceId}}\",\n        \"StringEquals\" : \"\"\n      } ],\n      \"Default\" : \"FailoverClusterWithPrimary\"\n    }\n  }, {\n    \"name\" : \"FailoverClusterWithPrimary\",\n    \"description\" : \"Failover cluster specifying which instance to promote to primary.\",\n    \"action\" : \"aws:executeAwsApi\",\n    \"inputs\" : {\n      \"Service\" : \"rds\",\n      \"Api\" : \"FailoverDBCluster\",\n      \"DBClusterIdentifier\" : \"{{ClusterId}}\",\n      \"TargetDBInstanceIdentifier\" : \"{{InstanceId}}\"\n    },\n    \"nextStep\" : \"WaitClusterFailoverCompleted\"\n  }, {\n    \"name\" : \"FailoverClusterDefault\",\n    \"description\" : \"Failover cluster without specifying primary instance id.\",\n    \"action\" : \"aws:executeAwsApi\",\n    \"inputs\" : {\n      \"Service\" : \"rds\",\n      \"Api\" : \"FailoverDBCluster\",\n      \"DBClusterIdentifier\" : \"{{ClusterId}}\"\n    }\n  }, {\n    \"name\" : \"WaitClusterFailoverCompleted\",\n    \"description\" : \"Wait for cluster failover to be completed\",\n    \"action\" : \"aws:executeScript\",\n    \"onFailure\" : \"Abort\",\n    \"maxAttempts\" : 10,\n    \"timeoutSeconds\" : 600,\n    \"inputs\" : {\n      \"Runtime\" : \"python3.6\",\n      \"Handler\" : \"wait_cluster_failover_completed\",\n      \"InputPayload\" : {\n        \"ClusterId\" : \"{{ClusterId}}\",\n        \"WriterId\" : \"{{GetClusterWriterId.WriterId}}\"\n      },\n      \"Script\" : \"import logging\\nfrom datetime import datetime, timezone\\nimport boto3\\nimport time\\nimport random\\nimport botocore\\nfrom botocore.config import Config\\nfrom botocore.exceptions import ClientError\\n\\nlogger = logging.getLogger(__name__)\\nlogger.setLevel(logging.INFO)\\n\\nvalid_capacity_PostgreSQL = [2, 4, 8, 16, 32, 64]\\n\\n\\n\\n\\ndef wait_cluster_failover_completed(events, context):\\n    '''\\n    Failover times are typically 60â€“120 seconds, should not be a problem for lambda\\n    (Lambda is used for execution SSM scripts):\\n    https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.MultiAZ.html\\n    '''\\n    if 'ClusterId' not in events or 'WriterId' not in events:\\n        raise KeyError('Requires ClusterId, WriterId in events')\\n    config = Config(retries={'max_attempts': 20, 'mode': 'standard'})\\n    rds = boto3.client('rds', config=config)\\n    clusters = rds.describe_db_clusters(DBClusterIdentifier=events['ClusterId'])\\n    current_writer_id = _parse_writer_id(clusters)\\n    status = clusters['DBClusters'][0]['Status']\\n    while current_writer_id == events['WriterId'] or status != 'available':\\n        time.sleep(5)\\n        clusters = rds.describe_db_clusters(DBClusterIdentifier=events['ClusterId'])\\n        current_writer_id = _parse_writer_id(clusters)\\n        status = clusters['DBClusters'][0]['Status']\\n\\n\\n\\ndef _parse_writer_id(clusters):\\n    for member in clusters['DBClusters'][0]['DBClusterMembers']:\\n        if member['IsClusterWriter'] is True:\\n            return member['DBInstanceIdentifier']\"\n    }\n  }, {\n    \"name\" : \"AssertAlarmToBeGreen\",\n    \"description\" : \"Wait for the alarm to be green after test is complete.\",\n    \"action\" : \"aws:waitForAwsResourceProperty\",\n    \"maxAttempts\" : 10,\n    \"timeoutSeconds\" : 600,\n    \"onFailure\" : \"Abort\",\n    \"inputs\" : {\n      \"Service\" : \"cloudwatch\",\n      \"Api\" : \"DescribeAlarms\",\n      \"AlarmNames\" : [ \"{{CanaryAlarmName}}\" ],\n      \"PropertySelector\" : \"$.MetricAlarms[0].StateValue\",\n      \"DesiredValues\" : [ \"OK\" ]\n    },\n    \"isEnd\" : true\n  } ]\n}",
  "CreatedDate": "2022-01-18T14:35:47.011Z",
  "DisplayName": null,
  "DocumentFormat": {
    "Value": "JSON"
  },
  "DocumentType": {
    "Value": "Automation"
  },
  "DocumentVersion": "4",
  "Name": "AWSResilienceHub-FailoverRdsAuroraClusterTest_2020-04-01",
  "Requires": [],
  "ReviewStatus": null,
  "Status": {
    "Value": "Active"
  },
  "StatusInformation": null,
  "VersionName": null,
  "ResponseMetadata": {
    "RequestId": "2ff2346d-def0-4edf-9109-6a9d5a7a7fea",
    "Metadata": {},
    "ChecksumAlgorithm": 0,
    "ChecksumValidationStatus": 0
  },
  "ContentLength": 9242,
  "HttpStatusCode": 200,
  "LoggedAt": "2022-03-05T07:12:41.1864453+00:00"
}
