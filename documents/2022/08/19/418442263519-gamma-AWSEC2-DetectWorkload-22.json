{
  "AttachmentsContent": [],
  "Content": "{\n  \"schemaVersion\": \"2.2\",\n  \"description\": \"Detect the workload that installed on the host\",\n  \"parameters\": {\n    \"returnProcesses\": {\n      \"description\": \"(Optional) Select True to return running processes associated with each workload.\",\n      \"type\": \"String\",\n      \"allowedValues\": [\n        \"True\",\n        \"False\"\n      ],\n      \"default\": \"False\"\n    }\n  },\n  \"mainSteps\": [\n    {\n      \"name\": \"WINDOWS\",\n      \"action\": \"aws:runPowerShellScript\",\n      \"precondition\": {\n        \"StringEquals\": [\n          \"platformType\",\n          \"Windows\"\n        ]\n      },\n      \"inputs\": {\n        \"runCommand\": [\n          \"[boolean]$returnProcesses = [System.Convert]::ToBoolean(\\\"{{returnProcesses}}\\\")\",\n          \"$runningProcesses=$null\",\n          \"if ($returnProcesses) {\",\n          \"  $runningProcesses = Get-Process | Foreach {\\\"$($_.ProcessName)\\\"}\",\n          \"}\",\n          \"Function ConvertTo-Json20 {\",\n          \"[CmdletBinding()]\",\n          \"param(\",\n          \"[Parameter(Mandatory=$True,\",\n          \"ValueFromPipeline=$True)]\",\n          \"$inputObject)\",\n          \"add-type -assembly system.web.extensions;\",\n          \"$serializer=new-object system.web.script.serialization.javascriptSerializer;\",\n          \"return $serializer.Serialize($inputObject)}\",\n          \"Function getIISLogPath{\",\n          \"foreach($WebSite in $(get-website)){\",\n          \"return \\\"$($Website.logFile.directory)\\\\**\\\".replace(\\\"%SystemDrive%\\\",$env:SystemDrive)\",\n          \"}\",\n          \"}\",\n          \"Function getRunningProcesses {\",\n          \"param(\",\n          \"$processes\",\n          \")\",\n          \"return ($processes | Foreach {If ($($runningProcesses.contains($_))) {$($_)}}) -join ','\",\n          \"}\",\n          \"Function getSQLServerLogPath{\",\n          \"$instanceName = Get-ItemProperty -Path HKLM:\\\"SOFTWARE\\\\Microsoft\\\\Microsoft SQL Server\\\\Instance Names\\\\SQL\\\" -ErrorAction SilentlyContinue | Get-Member -MemberType NoteProperty | Select -ExpandProperty Name | Where-Object { (-not($_ -match 'PSChildName|PSDrive|PSParentPath|PSPath|PSProvider')) }\",\n          \"$directoryName = (Get-ItemProperty -Path HKLM:\\\"SOFTWARE\\\\Microsoft\\\\Microsoft SQL Server\\\\Instance Names\\\\SQL\\\").$instanceName\",\n          \"return \\\"C:\\\\Program Files\\\\Microsoft SQL Server\\\\%DIRECTORY%\\\\MSSQL\\\\Log\\\\ERRORLOG\\\".replace(\\\"%DIRECTORY%\\\", $directoryName)\",\n          \"}\",\n          \"Function getPostgreLogPath{\",\n          \"$dataDirectory = (Get-ItemProperty -Path HKLM:\\\"SOFTWARE\\\\PostgreSQL\\\\Services\\\\*\\\").\\\"Data Directory\\\"\",\n          \"return \\\"$dataDirectory\\\\log\\\\*.log\\\"\",\n          \"}\",\n          \"Function getOracleLogPath{\",\n          \"$oracle_base = (Get-ItemProperty -Path HKLM:\\\\SOFTWARE\\\\ORACLE\\\\*).ORACLE_BASE\",\n          \"$oracle_sid = (Get-ItemProperty -Path HKLM:\\\\SOFTWARE\\\\ORACLE\\\\*).ORACLE_SID\",\n          \"$path_builder = \\\"%oracle_base%\\\\diag\\\\rdbms\\\\%sid%\\\\%sid%\\\\trace\\\\alert_%sid%.log\\\".replace(\\\"%oracle_base%\\\",$oracle_base)\",\n          \"$path_builder = $path_builder.replace(\\\"%sid%\\\",$oracle_sid)\",\n          \"$alert_path = $path_builder.replace(\\\" \\\",\\\"\\\")\",\n          \"$lstn_builder = \\\"%oracle_base%\\\\diag\\\\tnslsnr\\\\**\\\\**\\\\trace\\\\*.log\\\".replace(\\\"%oracle_base%\\\",$oracle_base).replace(\\\" \\\", \\\"\\\")\",\n          \"$listener_path = (Get-ChildItem $lstn_builder | Select-Object -ExpandProperty Fullname)\",\n          \"$log_paths = @($alert_path, $listener_path)\",\n          \"return $log_paths\",\n          \"}\",\n          \"Function checkADWorkload{\",\n          \"try{\",\n          \"$adPresent = Get-Service | Where-Object {$_.Name -eq 'NTDS' -and $_.Status -eq 'Running'}\",\n          \"if($adPresent){\",\n          \"return $jsonResult = @{\",\n          \"ACTIVE_DIRECTORY= @{\",\n          \"Priority= \\\"8\\\"\",\n          \"LogPath= \\\"\\\"\",\n          \"}\",\n          \"}\",\n          \"}\",\n          \"}\",\n          \"Catch { \",\n          \"return @{}\",\n          \"}\",\n          \"return @{}\",\n          \"}\",\n          \"Function checkIISWorkload{\",\n          \"$workload = Get-ItemProperty -Path registry::HKEY_LOCAL_MACHINE\\\\SOFTWARE\\\\Microsoft\\\\InetStp\\\\ | Select-Object\",\n          \"if($workload){\",\n          \"$logPath = getIISLogPath\",\n          \"$processes = \\\"w3wp\\\"\",\n          \"$jsonWorkload = @{\",\n          \"Priority= \\\"4\\\"\",\n          \"LogPath= \\\"$logPath\\\"\",\n          \"}\",\n          \"if ($returnProcesses) { $jsonWorkload += @{ Processes=getRunningProcesses($processes) } }\",\n          \"return $jsonResult = @{ DOT_NET_WEB_TIER=$jsonWorkload }\",\n          \"}\",\n          \"}\",\n          \"Function checkMySQLWorkload{\",\n          \"$mysql = net start | Out-String -stream | Select-String \\\"MySQL\\\"\",\n          \"if($mysql){\",\n          \"return $jsonResult = @{\",\n          \"MYSQL= @{\",\n          \"Priority= \\\"3\\\"\",\n          \"LogPath= \\\"\\\"\",\n          \"}\",\n          \"}\",\n          \"}else{\",\n          \"return @{}\",\n          \"}\",\n          \"}\",\n          \"Function checkSQLServerWorkload{\",\n          \"$inst = (get-itemproperty \\\"HKLM:\\\\SOFTWARE\\\\Microsoft\\\\Microsoft SQL Server\\\").InstalledInstances\",\n          \"if($inst){\",\n          \"foreach ($i in $inst) {\",\n          \"$p = (Get-ItemProperty \\\"HKLM:\\\\SOFTWARE\\\\Microsoft\\\\Microsoft SQL Server\\\\Instance Names\\\\SQL\\\").$i\",\n          \"$v = (Get-ItemProperty \\\"HKLM:\\\\SOFTWARE\\\\Microsoft\\\\Microsoft SQL Server\\\\\\\\$p\\\\Setup\\\").Version\",\n          \"if ($v) {\",\n          \"$logPath = getSQLServerLogPath\",\n          \"$processes = \\\"SQLAGENT\\\",\\\"sqlservr\\\",\\\"sqlwriter\\\",\\\"ReportingServicesService\\\",\\\"MsDtsSrvr\\\",\\\"Msmdsrv\\\"\",\n          \"$jsonWorkload = @{\",\n          \"Priority= \\\"3\\\"\",\n          \"LogPath= \\\"$logPath\\\"\",\n          \"}\",\n          \"if ($returnProcesses) { $jsonWorkload += @{ Processes=getRunningProcesses($processes) } }\",\n          \"return $jsonResult = @{ SQL_SERVER=$jsonWorkload }\",\n          \"}\",\n          \"}\",\n          \"}else{\",\n          \"return @{}\",\n          \"}\",\n          \"}\",\n          \"Function checkSQLFCIWorkload{\",\n          \"$inst = (get-itemproperty \\\"HKLM:\\\\SOFTWARE\\\\Microsoft\\\\Microsoft SQL Server\\\").InstalledInstances\",\n          \"if($inst){\",\n          \"foreach ($i in $inst) {\",\n          \"$instanceName = (Get-ItemProperty \\\"HKLM:\\\\SOFTWARE\\\\Microsoft\\\\Microsoft SQL Server\\\\Instance Names\\\\SQL\\\").$i\",\n          \"$clusterExists = Test-Path \\\"HKLM:\\\\SOFTWARE\\\\Microsoft\\\\Microsoft SQL Server\\\\\\\\$instanceName\\\\Cluster\\\"\",\n          \"if($clusterExists){\",\n          \"$clusterName = (Get-ItemProperty \\\"HKLM:\\\\SOFTWARE\\\\Microsoft\\\\Microsoft SQL Server\\\\\\\\$instanceName\\\\Cluster\\\").ClusterName\",\n          \"$root = (Get-ItemProperty \\\"HKLM:\\\\SOFTWARE\\\\Microsoft\\\\Microsoft SQL Server\\\\\\\\$instanceName\\\\Setup\\\").SQLDataRoot\",\n          \"$logPath = $root + \\\"\\\\Log\\\\ERRORLOG\\\"\",\n          \"$dnsName = $root.split(\\\"\\\\\\\")[2]\",\n          \"return $jsonResult = @{\",\n          \"SQL_SERVER_FAILOVER_CLUSTER_INSTANCE= @{\",\n          \"Priority= \\\"4\\\"\",\n          \"ClusterName= \\\"$clusterName\\\"\",\n          \"LogPath= \\\"$logPath\\\"\",\n          \"DNSName= \\\"$dnsName\\\"\",\n          \"}\",\n          \"}\",\n          \"}\",\n          \"}\",\n          \"return @{}\",\n          \"}else{\",\n          \"return @{}\",\n          \"}\",\n          \"}\",\n          \"Function checkPostgreWorkload{\",\n          \"$version = (Get-ItemProperty -Path HKLM:\\\"SOFTWARE\\\\PostgreSQL\\\\Services\\\\*\\\").\\\"Product Code\\\"\",\n          \"if($version){\",\n          \"$logPath = getPostgreLogPath\",\n          \"return $jsonResult = @{\",\n          \"POSTGRESQL= @{\",\n          \"Priority= \\\"3\\\"\",\n          \"LogPath= \\\"$logPath\\\"\",\n          \"}\",\n          \"}\",\n          \"}else{\",\n          \"return @{}\",\n          \"}\",\n          \"}\",\n          \"Function checkOracleWorkload {\",\n          \"$ora = (Get-ChildItem -Path \\\"C:\\\\Program Files\\\\Oracle\\\" -Filter inventory.xml -Recurse -ErrorAction SilentlyContinue -Force | Select-Object -ExpandProperty FullName)\",\n          \"$version = (Get-Content $ora ) -match \\\".*OraDB.*\\\"\",\n          \"if($version){\",\n          \"$log_path = getOracleLogPath\",\n          \"return $jsonResult = @{\",\n          \"ORACLE= @{\",\n          \"Priority= \\\"3\\\"\",\n          \"LogPath1= $log_path[0]\",\n          \"LogPath2= $log_path[1]\",\n          \"}\",\n          \"}\",\n          \"}else{\",\n          \"return @{}\",\n          \"}\",\n          \"}\",\n          \"Function checkDotNetWorkload{\",\n          \"try{\",\n          \"$dotnet = (dotnet --info 2>&1 | Select-String 'Version:\\\\s*.*\\\\..*\\\\..*')\",\n          \"}catch{\",\n          \"$dotnet = Get-WindowsFeature NET*Framework* | Where-Object {$_.InstallState -eq 'Installed'} | foreach {$_.DisplayName}\",\n          \"}\",\n          \"if($dotnet){\",\n          \"$processes = \\\"w3wp\\\"\",\n          \"$jsonWorkload = @{\",\n          \"Priority= \\\"2\\\"\",\n          \"LogPath= \\\"\\\"\",\n          \"}\",\n          \"if ($returnProcesses) { $jsonWorkload += @{ Processes=getRunningProcesses($processes) } }\",\n          \"return $jsonResult = @{ DOT_NET_CORE=$jsonWorkload }\",\n          \"}else{\",\n          \"return @{}\",\n          \"}\",\n          \"}\",\n          \"Function checkJavaWorkload{\",\n          \"try{\",\n          \"$version = (Get-ItemProperty -Path HKLM:\\\"SOFTWARE\\\\JavaSoft\\\\JDK\\\").\\\"CurrentVersion\\\"\",\n          \"} catch {\",\n          \"$version = (Get-ItemProperty -Path HKLM:\\\"SOFTWARE\\\\JavaSoft\\\\Java Runtime Environment\\\").\\\"CurrentVersion\\\"\",\n          \"}\",\n          \"if($version){\",\n          \"return $jsonResult = @{\",\n          \"JAVA_JMX= @{\",\n          \"Priority= \\\"2\\\"\",\n          \"LogPath= \\\"\\\"\",\n          \"}\",\n          \"}\",\n          \"}else{\",\n          \"return @{}\",\n          \"}\",\n          \"}\",\n          \"Function checkSharePointWorkload{\",\n          \"try{\",\n          \"$sharepoint=wmic product get Name | findstr /bi /c:'Microsoft SharePoint Server'\",\n          \"if($sharepoint){\",\n          \"return $jsonResult = @{\",\n          \"SHAREPOINT= @{\",\n          \"Priority= \\\"7\\\"\" ,\n          \"LogPath= '' \",\n          \"}\",\n          \"}\",\n          \"}\",\n          \"}\",\n          \"Catch { \",\n          \"return @{}\",\n          \"}\",\n          \"return @{}\",\n          \"}\",\n          \"$ErrorActionPreference = 'Stop'\",\n          \"try{\",\n          \"$iis = checkIISWorkload\",\n          \"} Catch {\",\n          \"$iis = @{}\",\n          \"}\",\n          \"try{\",\n          \"$ad = checkADWorkload\",\n          \"} Catch {\",\n          \"$ad = @{}\",\n          \"}\",\n          \"try{\",\n          \"$mysql = checkMySQLWorkload\",\n          \"} Catch {\",\n          \"$mysql = @{}\",\n          \"}\",\n          \"try{\",\n          \"$sqlserver = checkSQLServerWorkload\",\n          \"} Catch {\",\n          \"$sqlserver = @{}\",\n          \"}\",\n          \"try{\",\n          \"$sqlfci = checkSQLFCIWorkload\",\n          \"} Catch {\",\n          \"$sqlfci = @{}\",\n          \"}\",\n          \"try{\",\n          \"$postgresql = checkPostgreWorkload\",\n          \"} Catch {\",\n          \"$postgresql = @{}\",\n          \"}\",\n          \"try{\",\n          \"$dotnet = checkDotNetWorkload\",\n          \"} Catch {\",\n          \"$dotnet = @{}\",\n          \"}\",\n          \"try{\",\n          \"$java = checkJavaWorkload\",\n          \"} Catch {\",\n          \"$java = @{}\",\n          \"}\",\n          \"try{\",\n          \"$oracle = checkOracleWorkload\",\n          \"} Catch {\",\n          \"$oracle = @{}\",\n          \"}\",\n          \"try{ \",\n          \"$sp = checkSharePointWorkload\",\n          \"} Catch { \",\n          \"$sp = @{} \",\n          \"}\",\n          \"if($host.Version.Major -lt 3){\",\n          \"$iis + $mysql + $sqlserver + $sqlfci + $postgresql + $dotnet + $java  + $oracle + $ad + $sp | ConvertTo-Json20\",\n          \"}else{\",\n          \"$iis + $mysql + $sqlserver + $sqlfci + $postgresql + $dotnet + $java  + $oracle + $ad + $sp | ConvertTo-Json\",\n          \"}\"\n        ]\n      }\n    },\n    {\n      \"name\": \"LINUX\",\n      \"action\": \"aws:runShellScript\",\n      \"precondition\": {\n        \"StringEquals\": [\n          \"platformType\",\n          \"Linux\"\n        ]\n      },\n      \"inputs\": {\n        \"runCommand\": [\n          \"#!/bin/bash\",\n          \"function getContainerWorkload {\",\n          \"CLUSTER=$(sudo kubectl config view 2>&1 | sed -n ';6s/name: \\\\(.*\\\\)/\\\\1/p;')\",\n          \"if [ ! -z \\\"$CLUSTER\\\" ]; then\",\n          \"IFS=$' \\\\n' read -r -d '' -a NODES < <( sudo kubectl get nodes && printf '\\\\0' )\",\n          \"echo $(cat <<EOF\",\n          \"\\\"Kubernetes\\\": {\",\n          \"\\\"CLUSTER_NAME\\\": \\\"$CLUSTER\\\",\",\n          \"\\\"CLUSTER_NODES\\\": \\\"${NODES[@]}\\\"\",\n          \"},\",\n          \"EOF\",\n          \")\",\n          \"fi\",\n          \"}\",\n          \"function getJavaWorkload {\",\n          \"VER=$(java -version 2>&1 | sed -n ';s/.* version \\\"\\\\(.*\\\\)\\\\.\\\\(.*\\\\)\\\\..*\\\"/\\\\1\\\\2/p;')\",\n          \"if [ ! -z \\\"$VER\\\" ]; then\",\n          \"echo $(cat <<EOF\",\n          \"\\\"JAVA_JMX\\\": {\",\n          \"\\\"Priority\\\": \\\"2\\\",\",\n          \"\\\"LogPath\\\": \\\"\\\"\",\n          \"},\",\n          \"EOF\",\n          \")\",\n          \"fi\",\n          \"}\",\n          \"function getDotNetWorkload {\",\n          \"VER=$(dotnet --info 2>&1 | sed -n ';s/Version: \\\\(.*\\\\)\\\\..*\\\\..*/\\\\1/p;')\",\n          \"if [ ! -z \\\"$VER\\\" ]; then\",\n          \"echo $(cat <<EOF\",\n          \"\\\"DOT_NET_CORE\\\": {\",\n          \"\\\"Priority\\\": \\\"2\\\",\",\n          \"\\\"LogPath\\\": \\\"\\\"\",\n          \"},\",\n          \"EOF\",\n          \")\",\n          \"fi\",\n          \"}\",\n          \"function getSqlServerWorkload {\",\n          \"STATUS=$(systemctl status mssql-server 2>&1 | sed -n ';s/Active: \\\\(.*\\\\)/\\\\1/p;')\",\n          \"if [ ! -z \\\"$STATUS\\\" ]; then\",\n          \"echo $(cat <<EOF\",\n          \"\\\"SQL_SERVER\\\": {\",\n          \"\\\"Priority\\\": \\\"3\\\",\",\n          \"\\\"LogPath\\\": \\\"/var/opt/mssql/log/errorlog\\\"\",\n          \"},\",\n          \"EOF\",\n          \")\",\n          \"fi\",\n          \"}\",\n          \"function getMySqlWorkload {\",\n          \"LOC=$(type mysql 2>&1 | sed -n ';s/mysql is \\\\(.*\\\\)/\\\\1/p;')\",\n          \"if [ ! -z \\\"$LOC\\\" ]; then\",\n          \"echo $(cat <<EOF\",\n          \"\\\"MYSQL\\\": {\",\n          \"\\\"Priority\\\": \\\"3\\\",\",\n          \"\\\"LogPath\\\": \\\"/var/log/mysql\\\"\",\n          \"},\",\n          \"EOF\",\n          \")\",\n          \"fi\",\n          \"}\",\n          \"function getPostgreSqlWorkload {\",\n          \"LOC=$(type psql 2>&1 | sed -n ';s/psql is \\\\(.*\\\\)/\\\\1/p;')\",\n          \"if [ ! -z \\\"$LOC\\\" ]; then\",\n          \"echo $(cat <<EOF\",\n          \"\\\"POSTGRESQL\\\": {\",\n          \"\\\"Priority\\\": \\\"3\\\",\",\n          \"\\\"LogPath\\\": \\\"/var/lib/pgsql/data/log\\\"\",\n          \"},\",\n          \"EOF\",\n          \")\",\n          \"fi\",\n          \"}\",\n          \"function getSqlServerWorkload {\",\n          \"STATUS=$(systemctl status mssql-server 2>&1 | sed -n ';s/Active: \\\\(.*\\\\)/\\\\1/p;')\",\n          \"if [ -n \\\"$STATUS\\\" ]; then\",\n          \"echo $(cat <<EOF\",\n          \"\\\"SQL_SERVER\\\": {\",\n          \"\\\"Priority\\\": \\\"3\\\",\",\n          \"\\\"LogPath\\\": \\\"/var/opt/mssql/log/errorlog\\\"\",\n          \"},\",\n          \"EOF\",\n          \")\",\n          \"fi\",\n          \"}\",\n          \"function getOracleWorkload {\",\n          \"sid=$(pgrep  -lf _pmon_ | cut -d '_' -f3 | sed 's/[^a-zA-Z0-9]*//g')\",\n          \"sid_case_sensative=$(cat /etc/oratab 2>/dev/null | grep -i $sid 2> /dev/null| cut -d ':' -f1)\",\n          \"ORACLE_HOME=$(cat /etc/oratab 2>/dev/null | grep -i $sid 2> /dev/null| cut -d ':' -f2)\",\n          \"lsnrctl=$ORACLE_HOME'/bin/lsnrctl'\",\n          \"if [ -d \\\"$ORACLE_HOME\\\" ]; then\",\n          \"export ORACLE_HOME=$ORACLE_HOME\",\n          \"ORACLE_BASE=$($ORACLE_HOME/bin/orabase)\",\n          \"cd $ORACLE_BASE/diag/rdbms/\",\n          \"dbname=$(ls -ltar | tail -1| awk '{print $9}')\",\n          \"listener_log=$($lsnrctl status | awk '/Listener Parameter File/ {print $NF}')\",\n          \"listener_name=$(basename $listener_log 2>/dev/null | cut -d '.' -f1)\",\n          \"lsnr=$(ps aux | grep tnslsnr | grep inherit |  awk '/tnslsnr/ {print $(NF-1)}')\",\n          \"lsnr_lower=$(echo $lsnr | tr '[:upper:]' '[:lower:]' 2> /dev/null)\",\n          \"log1_test1=$($procdir/lsnrctl show trc_directory 2>/dev/null | awk '/set to / {print $NF}')\\\"/\\\"$lsnr\\\".log\\\"\",\n          \"log1_test2=$($procdir/lsnrctl show trc_directory 2>/dev/null | awk '/set to / {print $NF}')\\\"/\\\"$lsnr_lower\\\".log\\\"\",\n          \"if [ -f \\\"$log1_test1\\\" ]; then\",\n          \"log1=$log1_test1\",\n          \"fi\",\n          \"if [ -f \\\"$log1_test2\\\" ]; then\",\n          \"log1=$log1_test2\",\n          \"fi\",\n          \"log2=$($lsnrctl status | awk '/Listener Log File/ {print $NF}'  | awk -F 'oracle' '{print $1 FS \\\"\\\"}')\\\"/diag/rdbms/$dbname/$sid_case_sensative/trace/alert_$sid_case_sensative.log\\\"\",\n          \"echo $(cat <<EOF\",\n          \"\\\"ORACLE\\\": {\",\n          \"\\\"Priority\\\": \\\"3\\\",\",\n          \"\\\"LogPath1\\\": \\\"$log1\\\",\",\n          \"\\\"LogPath2\\\": \\\"$log2\\\"\",\n          \"},\",\n          \"EOF\",\n          \")\",\n          \"fi\",\n          \"}\",\n          \"function getHanaWorkload {\",\n          \"HANAPATH=$(find /usr/sap/*/HDB* 2>/dev/null)\",\n          \"if [ -n \\\"$HANAPATH\\\" ]; then\",\n          \"SID=$(find /usr/sap/*/HDB* | cut -c 10-12)\",\n          \"INSTANCENR=$(find /usr/sap/*/HDB* | cut -c 17-18)\",\n          \"PRIORITY=5\",\n          \"HANAPORT=$\\\"3${INSTANCENR}13\\\"\",\n          \"HOSTNAME=$(hostname)\",\n          \"HOSTS=$(/usr/sap/hostctrl/exe/sapcontrol -nr $INSTANCENR -function GetSystemInstanceList | tail -n +6 | awk '{ print $1 }' | tr -d \\\"\\\\n\\\" | sed 's/.$//')\",\n          \"HANALOGPATH=$\\\"/usr/sap/$SID/HDB$INSTANCENR/$HOSTNAME/trace\\\"\",\n          \"HA_SIMPLE_STATUS=$(eval \\\"crm_mon -s | grep 'CLUSTER OK'\\\")\",\n          \"ISHAPRIMARY=\\\"\\\"\",\n          \"VOLUMEMETADATA=$(lsblk --json -o name,serial,mountpoint | sed \\\"s,\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\",g\\\")\",\n          \"NODES=\\\"\\\"\",\n          \"if [ -z \\\"$HA_SIMPLE_STATUS\\\" ]; then IS_HA=\\\"false\\\"; else IS_HA=\\\"true\\\"; fi\",\n          \"if [ \\\"$IS_HA\\\" = \\\"true\\\" ]; then\",\n          \"    PRIORITY=6\",\n          \"    NODES=\\\"$HOSTNAME\\\"\",\n          \"    isPri=$(eval \\\"crm_mon -1 | grep 'Master' | grep $HOSTNAME\\\")\",\n          \"    if [ -z \\\"$isPri\\\" ]; then ISHAPRIMARY=\\\"false\\\"; else ISHAPRIMARY=\\\"true\\\"; fi ;\",\n          \"fi\",\n          \"echo $(cat <<EOF\",\n          \"\\\"SAP_HANA\\\": [{\",\n          \"\\\"Priority\\\": \\\"$PRIORITY\\\",\",\n          \"\\\"Host\\\": \\\"$HOSTNAME\\\",\",\n          \"\\\"SID\\\": \\\"$SID\\\",\",\n          \"\\\"HanaPort\\\": \\\"$HANAPORT\\\",\",\n          \"\\\"InstanceNumber\\\": \\\"$INSTANCENR\\\",\",\n          \"\\\"LogPath\\\" : \\\"$HANALOGPATH\\\",\",\n          \"\\\"Hosts\\\": \\\"$HOSTS\\\",\",\n          \"\\\"IsHA\\\": \\\"$IS_HA\\\",\",\n          \"\\\"IsHAPrimary\\\": \\\"$ISHAPRIMARY\\\",\",\n          \"\\\"VolumeMetadata\\\": \\\"$VOLUMEMETADATA\\\",\",\n          \"\\\"Nodes\\\": \\\"$NODES\\\"\",\n          \"}]\",\n          \"EOF\",\n          \")\",\n          \"fi\",\n          \"}\",\n          \"echo \\\"{$(getContainerWorkload)$(getJavaWorkload)$(getDotNetWorkload)$(getMySqlWorkload)$(getSqlServerWorkload)$(getPostgreSqlWorkload)$(getOracleWorkload)$(getHanaWorkload)}\\\" | sed 's/,\\\\(.\\\\)$/\\\\1/'\"\n        ]\n      }\n    }\n  ]\n}\n",
  "CreatedDate": "2022-07-26T18:12:49.508Z",
  "DisplayName": null,
  "DocumentFormat": {
    "Value": "JSON"
  },
  "DocumentType": {
    "Value": "Command"
  },
  "DocumentVersion": "22",
  "Name": "arn:aws:ssm:us-west-2:418442263519:document/gamma-AWSEC2-DetectWorkload",
  "Requires": [],
  "ReviewStatus": null,
  "Status": {
    "Value": "Active"
  },
  "StatusInformation": null,
  "VersionName": null,
  "ResponseMetadata": {
    "RequestId": "c75091f0-2311-47f6-9b94-152f9fb51042",
    "Metadata": {},
    "ChecksumAlgorithm": 0,
    "ChecksumValidationStatus": 0
  },
  "ContentLength": 21213,
  "HttpStatusCode": 200,
  "LoggedAt": "2022-08-19T07:13:29.576223+00:00"
}
