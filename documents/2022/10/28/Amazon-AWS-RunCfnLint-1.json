{
  "AttachmentsContent": [
    {
      "Hash": "d7862f459f4b261c106c4af784d50ddb7a2b6340869b51f87e3a293943fe2106",
      "HashType": {
        "Value": "Sha256"
      },
      "Name": "cfnlint_attachment.zip",
      "Size": 13961311,
      "Url": "https://aws-ssm-document-attachments-us-west-2.s3.us-west-2.amazonaws.com/76f/123784938132/Automation/AWS-RunCfnLint%2175299c67-6543-46e9-86d7-f123b090a462/2/cfnlint_attachment.zip?x-attachment-size=13961311&x-requester-accountId=987868780346&X-Amz-Security-Token=IQoJb3JpZ2luX2VjED4aCXVzLXdlc3QtMiJGMEQCIBo2KQvSmLaKDoMvLe8KV0R%2FtVianCeAtZxwm%2FeANN8YAiAegvZobKTFgyiC7mXKR5tdRI67YR2n0TAxHewBmDSBGyrMBAgnEAMaDDI0OTkyNDUyNzQxMCIMK%2BBRRSNn0AxLWseGKqkEUpN5e54HMgKiIQ4%2FSdyV36Mm5Tx3qvDjRpzCphFaG6RNrThPGQTtUgPbMpJ4OgPHabWlT3Aeo41KZqiXVA69nW7D2aKnSPJSMT89Qm2vpmV%2F62XiUGphDujYLiqLJw%2BtP%2Fok5I8jp3QJ9%2BM8Rf1wn6pTzdHj0abCLNqg7Bm6aWCS31Ky75%2BYB4z2BEL8QKLPOMK%2BWEdGmRRhNyap1RgOj4xoImXo54uRIzqrOU15%2FUQh1JuxVAmI5VrCDhnMWH21L5FXDb1LpkLM6KfWxDx9qkvn%2FtVSD5aU3jW0%2FaxiDB%2B%2BQEcTlcsEa5rpFGnYmTGpzDIMmwqxFSaEZ10EPFv1gXzU9Zm1P2k6PAYYTtbOWlqRNgD0HbhbgMPQWtZCcUV9al6T3rdTR1rv6Ox6MHdReU1sAORIg134R6cvT%2BgcPVloLBmEBCxfmxQ5LqBDTPGdQQxg%2BK7uNSinNOBHYAD%2BGcW0BIpgiAOw0hQLB%2B7xHDgpHih513fpxHoZRqcU5z%2B8Ps4cVqSI5TMoETtJMA3ZgnmnHrKMD31uN2XJjAbbd6Y6EoRm87ngKzMI0rV0FgfvdYMqgXvE%2FI6KzF0bXxhk%2B8BDKFekjPiQdytaGZRrs2ExOXUuGe9SiCL4VNmgBwEpNVrQc%2BQWUts6NaBxD0MCJjEkDQlc7uor5V6U7rWuwm5XdUromRUYX6rBZGRnNcAJEl6UBkq7ozLgrK%2F0rb0HWlIUEKHMVZTbHDDLzu2aBjqqAVaZ5H73NUyAAwd%2FzYA1AJS6uAfLDnsJiNXwC0Qy%2B5bzYYo2a41VPz1rvkw6DedcRM8tRpAiy90XU20Ga9a4TnRu2IgGUuWp32ZewqmuPaqAV%2FCJyQmPXCwbvFpNz6t4IHTVUmelS57d9%2Bu4skLNw3eoE%2Fj7tY4X7xVm%2BJjjbYI%2FwE%2FM%2Fq28zm1fEz0PqgKLo2TSD5ZJCjfq%2FlRypkuZWTeRJD8R8%2FuiT1Mc&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Date=20221028T071357Z&X-Amz-SignedHeaders=host&X-Amz-Expires=86400&X-Amz-Credential=ASIATUMFJUUZCE45BIED%2F20221028%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Signature=d4e24ae5d87e878b2f8901efb5bec019df152dc4ae765f30c1ac4587e3c078ef"
    }
  ],
  "Content": "{\n  \"description\" : \"### Document name - AWS-RunCfnLint\\n\\n## What does this document do?\\nThis document uses a [CloudFormation Linter](https://github.com/aws-cloudformation/cfn-python-lint) (cfn-python-lint) to validate YAML and JSON templates against the AWS CloudFormation resource specification. The AWS-RunCfnLint document performs additional checks, such as ensuring that valid values have been entered for resource properties. If validation is not successful, the RunCfnLintAgainstTemplate step fails and the linter tool's output is provided in an error message. This Document is using cfn-lint 0.24.4.\\n\\n## Input Parameters\\n* TemplateS3BucketName: (Required) The name of the Amazon S3 bucket that contains the CloudFormation template.\\n* TemplateFileName: (Required) The name, or key, of the template file in the S3 bucket.\\n* FormatFlag: (Optional) Value to pass to the --format parameter to specify the output format.\\n  * Allowed Values: Default | quiet | parseable | json\\n  * Default: Default\\n* RegionsFlag: (Optional) Values to pass to the for --regions parameter to test the template against specified AWS Regions.\\n  * Example: us-east-1,us-west-1\\n* IgnoreChecksFlag: (Optional) IDs of rules to pass to the --ignore-checks parameter. These rules are not checked.\\n  * Example: E1001,E1003,W7001\\n* IncludeChecksFlag: (Optional) IDs of rules to pass to the --include-checks parameter. These rules are checked.\\n  * Example: E1001,E1003,W7001\\n* ConfigureRuleFlag: (Optional) Configuration options for a rule to pass to the --configure-rule parameter.\\n  * Example: E2001:strict=false,E3012:strict=false\\n* InfoFlag: (Optional) Option for the --info parameter. Include the option to enable additional logging information about the template processing.\\n  * Default: False\\n* AutomationAssumeRole: (Optional) The ARN of the role that allows Automation to perform the actions on your behalf.\\n\\n## Output parameters\\n* RunCfnLintAgainstTemplate.output: The stdout from the cfn-python-lint tool.\\n\",\n  \"schemaVersion\" : \"0.3\",\n  \"assumeRole\" : \"{{AutomationAssumeRole}}\",\n  \"parameters\" : {\n    \"TemplateS3BucketName\" : {\n      \"type\" : \"String\",\n      \"description\" : \"(Required) The name of the Amazon S3 bucket that contains the CloudFormation template.\"\n    },\n    \"TemplateFileName\" : {\n      \"type\" : \"String\",\n      \"description\" : \"(Required) The name, or key, of the template file in the S3 bucket.\"\n    },\n    \"FormatFlag\" : {\n      \"type\" : \"String\",\n      \"description\" : \"(Optional) Value to pass to the --format parameter to specify the output format.\",\n      \"default\" : \"Default\",\n      \"allowedValues\" : [ \"Default\", \"quiet\", \"parseable\", \"json\" ]\n    },\n    \"RegionsFlag\" : {\n      \"type\" : \"StringList\",\n      \"description\" : \"(Optional) Values to pass to the for --regions parameter to test the template against specified AWS Regions. e.g. us-east-1,us-west-1\",\n      \"default\" : [ ]\n    },\n    \"IgnoreChecksFlag\" : {\n      \"type\" : \"StringList\",\n      \"description\" : \"(Optional) IDs of rules to pass to the --ignore-checks parameter. These rules are not checked. e.g. E1001,E1003,W7001\",\n      \"default\" : [ ]\n    },\n    \"IncludeChecksFlag\" : {\n      \"type\" : \"StringList\",\n      \"description\" : \"(Optional) IDs of rules to pass to the --include-checks parameter. These rules are checked. e.g. E1001,E1003,W7001\",\n      \"default\" : [ ]\n    },\n    \"ConfigureRuleFlag\" : {\n      \"type\" : \"StringList\",\n      \"description\" : \"(Optional) Configuration options for a rule to pass to the --configure-rule parameter. e.g. E2001:strict=false,E3012:strict=false\",\n      \"default\" : [ ]\n    },\n    \"InfoFlag\" : {\n      \"type\" : \"Boolean\",\n      \"description\" : \"(Optional) Option for the --info parameter. Include the option to enable additional logging information about the template processing.\",\n      \"default\" : false\n    },\n    \"AutomationAssumeRole\" : {\n      \"type\" : \"String\",\n      \"description\" : \"(Optional) The ARN of the role that allows Automation to perform the actions on your behalf.\",\n      \"default\" : \"\"\n    }\n  },\n  \"outputs\" : [ \"RunCfnLintAgainstTemplate.output\" ],\n  \"mainSteps\" : [ {\n    \"name\" : \"RunCfnLintAgainstTemplate\",\n    \"action\" : \"aws:executeScript\",\n    \"onFailure\" : \"Abort\",\n    \"isCritical\" : true,\n    \"timeoutSeconds\" : 500,\n    \"description\" : \"## RunCfnLintAgainstTemplate\\nRuns the cfn-python-lint tool against the provided CloudFormation template.\\n## Outputs\\n* output: The stdout from the cfn-python-lint tool.\\n\",\n    \"inputs\" : {\n      \"Runtime\" : \"python3.8\",\n      \"Handler\" : \"cfnlint_handler\",\n      \"Attachment\" : \"cfnlint_attachment.zip\",\n      \"InputPayload\" : {\n        \"s3Bucket\" : \"{{TemplateS3BucketName}}\",\n        \"templateFileName\" : \"{{TemplateFileName}}\",\n        \"FormatFlag\" : \"{{FormatFlag}}\",\n        \"RegionsFlag\" : \"{{RegionsFlag}}\",\n        \"IgnoreChecksFlag\" : \"{{IgnoreChecksFlag}}\",\n        \"IncludeChecksFlag\" : \"{{IncludeChecksFlag}}\",\n        \"ConfigureRuleFlag\" : \"{{ConfigureRuleFlag}}\",\n        \"InfoFlag\" : \"{{InfoFlag}}\"\n      },\n      \"Script\" : \"import json\\nimport os\\nimport boto3\\nimport sys\\nimport subprocess\\n\\ndef execute_command(command, shell=False):\\n  if not shell:\\n      cmd = command.split(\\\" \\\")\\n  else:\\n      cmd = command\\n  p = subprocess.Popen(cmd, shell, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\\n  out, err = p.communicate()\\n  return out.decode(\\\"utf-8\\\"), err.decode(\\\"utf-8\\\")\\n\\ndef get_download_folder():\\n  return os.getcwd()\\n\\ndef download_template(s3_bucket, s3_key):\\n  s3_path_head, file_name = os.path.split(s3_key)\\n  download_path = os.path.join(\\\"/tmp/\\\",file_name)\\n  s3 = boto3.client('s3')\\n  s3.download_file(s3_bucket, s3_key, download_path)\\n  return download_path\\n\\ndef get_flag_options(event):\\n  flags = ''\\n  if event['FormatFlag'] != 'Default':\\n    flags += ' -f ' + event['FormatFlag']\\n  if event['RegionsFlag']:\\n    flags += ' -r ' + ','.join(event['RegionsFlag'])\\n  if event['IgnoreChecksFlag']:\\n    flags += ' -i ' + ','.join(event['IgnoreChecksFlag'])\\n  if event['IncludeChecksFlag']:\\n    flags += ' -c ' + ','.join(event['IncludeChecksFlag'])\\n  if event['ConfigureRuleFlag']:\\n    flags += ' -x ' + ','.join(event['ConfigureRuleFlag'])\\n  if event['InfoFlag']:\\n    flags += ' -I'\\n  return flags\\n\\ndef cfnlint_handler(event, context):\\n  s3_bucket = event['s3Bucket']\\n  s3_key = event['templateFileName']\\n\\n  attachment_path = get_download_folder()\\n  cfn_lint_path = os.path.join(attachment_path, \\\"bin/cfn-lint\\\")\\n\\n  template_path = download_template(s3_bucket, s3_key)\\n\\n  cmd = \\\"python3 \\\" + cfn_lint_path + \\\" -t \\\" + template_path\\n  flags = get_flag_options(event)\\n  cmd += flags\\n  out, err = execute_command(cmd, False)\\n  if err != \\\"\\\":\\n    raise Exception('ERROR IN EXECUTION CFN-PYTHON-LINT', err)\\n  if len(out)<5:\\n    out = \\\"VALID TEMPLATE\\\"\\n  else:\\n    raise Exception('INVALID TEMPLATE', out)\\n  return {\\n    'output': json.dumps(out)\\n  }\\n\"\n    },\n    \"outputs\" : [ {\n      \"Name\" : \"output\",\n      \"Selector\" : \"$.Payload.output\",\n      \"Type\" : \"String\"\n    } ]\n  } ],\n  \"files\" : {\n    \"cfnlint_attachment.zip\" : {\n      \"checksums\" : {\n        \"sha256\" : \"d7862f459f4b261c106c4af784d50ddb7a2b6340869b51f87e3a293943fe2106\"\n      },\n      \"size\" : 13961311\n    }\n  }\n}",
  "CreatedDate": "2022-06-21T21:21:27.919Z",
  "DisplayName": null,
  "DocumentFormat": {
    "Value": "JSON"
  },
  "DocumentType": {
    "Value": "Automation"
  },
  "DocumentVersion": "1",
  "Name": "AWS-RunCfnLint",
  "Requires": [],
  "ReviewStatus": null,
  "Status": {
    "Value": "Active"
  },
  "StatusInformation": null,
  "VersionName": null,
  "ResponseMetadata": {
    "RequestId": "d5eb74c0-7d7b-4606-a5c3-c80c8d590ffa",
    "Metadata": {},
    "ChecksumAlgorithm": 0,
    "ChecksumValidationStatus": 0
  },
  "ContentLength": 9836,
  "HttpStatusCode": 200,
  "LoggedAt": "2022-10-28T07:13:57.2601656+00:00"
}
