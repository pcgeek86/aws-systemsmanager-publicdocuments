{
  "AttachmentsContent": [],
  "Content": "{\n  \"description\": \"This document will collect EKS specific logs from the specified EC2 instance and upload it to a specified S3 bucket.\\n\",\n  \"schemaVersion\": \"0.3\",\n  \"assumeRole\": \"{{ AutomationAssumeRole }}\",\n  \"parameters\": {\n    \"EKSInstanceId\": {\n      \"type\": \"String\",\n      \"allowedPattern\": \"^[i|mi]-[a-z0-9]{8,17}$\",\n      \"description\": \"(Required) ID of your EKS EC2 instance where you want to collect the log bundle from.\"\n    },\n    \"LogDestination\": {\n      \"type\": \"String\",\n      \"description\": \"(Optional) S3 bucket name in your account where you want to upload the troubleshooting logs. Make sure the bucket policy does not grant unnecessary read/write permissions to parties that do not need access to the collected logs.\",\n      \"allowedPattern\": \"^$|^[_a-zA-Z0-9][-._a-zA-Z0-9]{2,62}$\",\n      \"default\": \"\"\n    },\n    \"AutomationAssumeRole\": {\n      \"type\": \"String\",\n      \"description\": \"(Optional) The ARN of the role that allows Automation to perform the actions on your behalf\",\n      \"default\": \"\"\n    }\n  },\n  \"mainSteps\": [\n    {\n      \"name\": \"assertInstanceIsManagedLinux\",\n      \"action\": \"aws:assertAwsResourceProperty\",\n      \"description\": \"\",\n      \"onFailure\": \"Abort\",\n      \"inputs\": {\n        \"Service\": \"ssm\",\n        \"Api\": \"DescribeInstanceInformation\",\n        \"InstanceInformationFilterList\": [\n          {\n            \"key\": \"InstanceIds\",\n            \"valueSet\": [\n              \"{{ EKSInstanceId }}\"\n            ]\n          }\n        ],\n        \"PropertySelector\": \"$.InstanceInformationList[0].PlatformType\",\n        \"DesiredValues\": [\n          \"Linux\"\n        ]\n      },\n      \"isCritical\": \"true\",\n      \"nextStep\": \"runLogCollectionScript\"\n    },\n    {\n      \"name\": \"runLogCollectionScript\",\n      \"action\": \"aws:runCommand\",\n      \"inputs\": {\n        \"DocumentName\": \"AWS-RunShellScript\",\n        \"InstanceIds\": [\n          \"{{EKSInstanceId}}\"\n        ],\n        \"Parameters\": {\n          \"commands\": [\n            \"#!/usr/bin/env bash\",\n            \"# Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.\",\n            \"#\",\n            \"# Licensed under the Apache License, Version 2.0 (the \\\"License\\\"). You may\",\n            \"# not use this file except in compliance with the License. A copy of the\",\n            \"# License is located at\",\n            \"#\",\n            \"#       http://aws.amazon.com/apache2.0/\",\n            \"#\",\n            \"# or in the \\\"license\\\" file accompanying this file. This file is distributed\",\n            \"# on an \\\"AS IS\\\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\",\n            \"# express or implied. See the License for the specific language governing\",\n            \"# permissions and limitations under the License.\",\n            \"#\",\n            \"# This script generates a file in go with the license contents as a constant\",\n            \"\",\n            \"# Set language to C to make sorting consistent among different environments.\",\n            \"\",\n            \"export LANG=\\\"C\\\"\",\n            \"export LC_ALL=\\\"C\\\"\",\n            \"export LVM_SUPPRESS_FD_WARNINGS=1\",\n            \"\",\n            \"# Global options\",\n            \"readonly PROGRAM_NAME=\\\"$(basename \\\"$0\\\" .sh)\\\"\",\n            \"readonly PROGRAM_DIR=\\\"/opt/log-collector\\\"\",\n            \"readonly LOG_DIR=\\\"/var/log\\\"\",\n            \"readonly COLLECT_DIR=\\\"/tmp/eks-log-collector\\\"\",\n            \"readonly CURRENT_TIME=$(date --utc +%Y-%m-%d_%H%M-%Z)\",\n            \"readonly DAYS_10=$(date -d \\\"-10 days\\\" '+%Y-%m-%d %H:%M')\",\n            \"readonly TOKEN=$(curl -X PUT -H \\\"X-aws-ec2-metadata-token-ttl-seconds: 600\\\" \\\"http://169.254.169.254/latest/api/token\\\")\",\n            \"INSTANCE_ID=\\\"\\\"\",\n            \"INIT_TYPE=\\\"\\\"\",\n            \"PACKAGE_TYPE=\\\"\\\"\",\n            \"\",\n            \"# Script run defaults\",\n            \"ignore_introspection='false'\",\n            \"ignore_metrics='false'\",\n            \"\",\n            \"REQUIRED_UTILS=(\",\n            \"  timeout\",\n            \"  curl\",\n            \"  tar\",\n            \"  date\",\n            \"  mkdir\",\n            \"  iptables\",\n            \"  iptables-save\",\n            \"  grep\",\n            \"  awk\",\n            \"  df\",\n            \"  sysctl\",\n            \")\",\n            \"\",\n            \"COMMON_DIRECTORIES=(\",\n            \"  kernel\",\n            \"  system\",\n            \"  docker\",\n            \"  storage\",\n            \"  var_log\",\n            \"  networking\",\n            \"  ipamd # eks\",\n            \"  sysctls # eks\",\n            \"  kubelet # eks\",\n            \"  cni # eks\",\n            \")\",\n            \"\",\n            \"COMMON_LOGS=(\",\n            \"  syslog\",\n            \"  messages\",\n            \"  aws-routed-eni # eks\",\n            \"  containers # eks\",\n            \"  pods # eks\",\n            \"  cloud-init.log\",\n            \"  cloud-init-output.log\",\n            \"  kube-proxy.log\",\n            \")\",\n            \"\",\n            \"# L-IPAMD introspection data points\",\n            \"IPAMD_DATA=(\",\n            \"  enis\",\n            \"  pods\",\n            \"  networkutils-env-settings\",\n            \"  ipamd-env-settings\",\n            \"  eni-configs\",\n            \")\",\n            \"\",\n            \"help() {\",\n            \"  echo \\\"\\\"\",\n            \"  echo \\\"USAGE: ${PROGRAM_NAME} --help [ --ignore_introspection=true|false --ignore_metrics=true|false ]\\\"\",\n            \"  echo \\\"\\\"\",\n            \"  echo \\\"OPTIONS:\\\"\",\n            \"  echo \\\"\\\"\",\n            \"  echo \\\"   --ignore_introspection To ignore introspection of IPAMD; Pass this flag if DISABLE_INTROSPECTION is enabled on CNI\\\"\",\n            \"  echo \\\"\\\"\",\n            \"  echo \\\"   --ignore_metrics Variable To ignore prometheus metrics collection; Pass this flag if DISABLE_METRICS enabled on CNI\\\"\",\n            \"  echo \\\"\\\"\",\n            \"  echo \\\"   --help  Show this help message.\\\"\",\n            \"  echo \\\"\\\"\",\n            \"}\",\n            \"\",\n            \"parse_options() {\",\n            \"  local count=\\\"$#\\\"\",\n            \"\",\n            \"  for i in $(seq \\\"${count}\\\"); do\",\n            \"    eval arg=\\\"\\\\$$i\\\"\",\n            \"    param=\\\"$(echo \\\"${arg}\\\" | awk -F '=' '{print $1}' | sed -e 's|--||')\\\"\",\n            \"    val=\\\"$(echo \\\"${arg}\\\" | awk -F '=' '{print $2}')\\\"\",\n            \"\",\n            \"    case \\\"${param}\\\" in\",\n            \"      ignore_introspection)\",\n            \"        eval \\\"${param}\\\"=\\\"${val}\\\"\",\n            \"        ;;\",\n            \"      ignore_metrics)\",\n            \"        eval \\\"${param}\\\"=\\\"${val}\\\"\",\n            \"        ;;\",\n            \"      help)\",\n            \"        help && exit 0\",\n            \"        ;;\",\n            \"      *)\",\n            \"        echo \\\"Parameter not found: '$param'\\\"\",\n            \"        help && exit 1\",\n            \"        ;;\",\n            \"    esac\",\n            \"  done\",\n            \"}\",\n            \"\",\n            \"ok() {\",\n            \"  echo\",\n            \"}\",\n            \"\",\n            \"try() {\",\n            \"  local action=$*\",\n            \"  echo -n \\\"Trying to $action... \\\"\",\n            \"}\",\n            \"\",\n            \"warning() {\",\n            \"  local reason=$*\",\n            \"  echo -e \\\"\\\\n\\\\n\\\\tWarning: $reason \\\"\",\n            \"}\",\n            \"\",\n            \"die() {\",\n            \"  echo -e \\\"\\\\n\\\\tFatal Error! $* Exiting!\\\\n\\\"\",\n            \"  exit 1\",\n            \"}\",\n            \"\",\n            \"is_root() {\",\n            \"  if [[ \\\"$(id -u)\\\" -ne 0 ]]; then\",\n            \"    die \\\"This script must be run as root!\\\"\",\n            \"  fi\",\n            \"}\",\n            \"\",\n            \"check_required_utils() {\",\n            \"  for utils in ${REQUIRED_UTILS[*]}; do\",\n            \"    # If exit code of \\\"command -v\\\" not equal to 0, fail\",\n            \"    if ! command -v \\\"${utils}\\\" >/dev/null 2>&1; then\",\n            \"      die \\\"Application \\\\\\\"${utils}\\\\\\\" is missing, please install \\\\\\\"${utils}\\\\\\\" as this script requires it, and will not function without it.\\\"\",\n            \"    fi\",\n            \"  done\",\n            \"}\",\n            \"\",\n            \"log_parameters() {\",\n            \"  echo ignore_introspection: \\\"${ignore_introspection}\\\" >> \\\"${COLLECT_DIR}\\\"/system/script-params.txt\",\n            \"  echo ignore_metrics: \\\"${ignore_metrics}\\\" >> \\\"${COLLECT_DIR}\\\"/system/script-params.txt\",\n            \"}\",\n            \"\",\n            \"systemd_check() {\",\n            \"  if  command -v systemctl >/dev/null 2>&1; then\",\n            \"      INIT_TYPE=\\\"systemd\\\"\",\n            \"    if command -v snap >/dev/null 2>&1; then\",\n            \"      INIT_TYPE=\\\"snap\\\"\",\n            \"    fi\",\n            \"  else\",\n            \"      INIT_TYPE=\\\"other\\\"\",\n            \"  fi\",\n            \"}\",\n            \"\",\n            \"create_directories() {\",\n            \"  # Make sure the directory the script lives in is there. Not an issue if\",\n            \"  # the EKS AMI is used, as it will have it.\",\n            \"  mkdir -p \\\"${PROGRAM_DIR}\\\"\",\n            \"\",\n            \"  # Common directories creation\",\n            \"  for directory in ${COMMON_DIRECTORIES[*]}; do\",\n            \"    mkdir -p \\\"${COLLECT_DIR}\\\"/\\\"${directory}\\\"\",\n            \"  done\",\n            \"}\",\n            \"\",\n            \"get_instance_metadata() {\",\n            \"  # Validate EC2 Instance before querying IMDS\",\n            \"  if [[ \\\"${AWS_SSM_INSTANCE_ID}\\\" =~ ^[i]-[a-z0-9]{8,17}$ ]]; then\",\n            \"    readonly INSTANCE_ID=$(curl --max-time 3 -H \\\"X-aws-ec2-metadata-token: $TOKEN\\\" --silent http://169.254.169.254/latest/meta-data/instance-id 2>/dev/null)\",\n            \"    echo \\\"${INSTANCE_ID}\\\" > \\\"${COLLECT_DIR}\\\"/system/instance-id.txt\",\n            \"  fi\",\n            \"}\",\n            \"\",\n            \"is_diskfull() {\",\n            \"  local threshold\",\n            \"  local result\",\n            \"\",\n            \"  threshold=90\",\n            \"  result=$(df / | grep --invert-match \\\"Filesystem\\\" | awk '{ print $5 }' | tr -d '%')\",\n            \"\",\n            \"  # If \\\"result\\\" is greater than or equal to \\\"threshold %\\\", fail.\",\n            \"  if [[ \\\"${result}\\\" -ge \\\"${threshold}\\\" ]]; then\",\n            \"    die \\\"Free space on root volume is less than or equal to 10%, please free up additional disk space to collect and store the log files.\\\"\",\n            \"  fi\",\n            \"}\",\n            \"\",\n            \"cleanup() {\",\n            \"  #guard rails to avoid accidental deletion of unknown data\",\n            \"  if [[ \\\"${COLLECT_DIR}\\\" == \\\"/tmp/eks-log-collector\\\" ]]; then\",\n            \"    rm --recursive --force \\\"${COLLECT_DIR}\\\" >/dev/null 2>&1\",\n            \"  else\",\n            \"    echo \\\"Unable to Cleanup as {COLLECT_DIR} variable is modified. Please cleanup manually!\\\"\",\n            \"  fi\",\n            \"}\",\n            \"\",\n            \"init() {\",\n            \"  check_required_utils\",\n            \"  create_directories\",\n            \"  # Log parameters passed when this script is invoked\",\n            \"  log_parameters\",\n            \"  is_root\",\n            \"  systemd_check\",\n            \"  get_pkgtype\",\n            \"}\",\n            \"\",\n            \"collect() {\",\n            \"  init\",\n            \"  is_diskfull\",\n            \"  get_instance_metadata\",\n            \"  get_common_logs\",\n            \"  get_kernel_info\",\n            \"  get_mounts_info\",\n            \"  get_selinux_info\",\n            \"  get_iptables_info\",\n            \"  get_pkglist\",\n            \"  get_system_services\",\n            \"  get_docker_info\",\n            \"  get_k8s_info\",\n            \"  get_ipamd_info\",\n            \"  get_sysctls_info\",\n            \"  get_networking_info\",\n            \"  get_cni_config\",\n            \"  get_docker_logs\",\n            \"}\",\n            \"\",\n            \"pack() {\",\n            \"  try \\\"archive gathered information\\\"\",\n            \"\",\n            \"  tar --create --verbose --gzip --file \\\"${LOG_DIR}\\\"/eks_\\\"${INSTANCE_ID}\\\"_{{automation:EXECUTION_ID}}.tar.gz --directory=\\\"${COLLECT_DIR}\\\" . > /dev/null 2>&1\",\n            \"\",\n            \"  ok\",\n            \"}\",\n            \"\",\n            \"finished() {\",\n            \"  cleanup\",\n            \"  echo -e \\\"\\\\n\\\\tDone... your bundled logs are located in ${LOG_DIR}/eks_${INSTANCE_ID}_{{automation:EXECUTION_ID}}.tar.gz\\\\n\\\"\",\n            \"}\",\n            \"\",\n            \"get_mounts_info() {\",\n            \"  try \\\"collect mount points and volume information\\\"\",\n            \"  mount > \\\"${COLLECT_DIR}\\\"/storage/mounts.txt\",\n            \"  echo >> \\\"${COLLECT_DIR}\\\"/storage/mounts.txt\",\n            \"  df --human-readable >> \\\"${COLLECT_DIR}\\\"/storage/mounts.txt\",\n            \"  lsblk > \\\"${COLLECT_DIR}\\\"/storage/lsblk.txt\",\n            \"  lvs > \\\"${COLLECT_DIR}\\\"/storage/lvs.txt\",\n            \"  pvs > \\\"${COLLECT_DIR}\\\"/storage/pvs.txt\",\n            \"  vgs > \\\"${COLLECT_DIR}\\\"/storage/vgs.txt\",\n            \"\",\n            \"  ok\",\n            \"}\",\n            \"\",\n            \"get_selinux_info() {\",\n            \"  try \\\"collect SELinux status\\\"\",\n            \"\",\n            \"  if ! command -v getenforce >/dev/null 2>&1; then\",\n            \"      echo -e \\\"SELinux mode:\\\\n\\\\t Not installed\\\" > \\\"${COLLECT_DIR}\\\"/system/selinux.txt\",\n            \"    else\",\n            \"      echo -e \\\"SELinux mode:\\\\n\\\\t $(getenforce)\\\" > \\\"${COLLECT_DIR}\\\"/system/selinux.txt\",\n            \"  fi\",\n            \"\",\n            \"  ok\",\n            \"}\",\n            \"\",\n            \"get_iptables_info() {\",\n            \"  try \\\"collect iptables information\\\"\",\n            \"\",\n            \"  iptables --wait 1 --numeric --verbose --list --table mangle > \\\"${COLLECT_DIR}\\\"/networking/iptables-mangle.txt\",\n            \"  iptables --wait 1 --numeric --verbose --list --table filter > \\\"${COLLECT_DIR}\\\"/networking/iptables-filter.txt\",\n            \"  iptables --wait 1 --numeric --verbose --list --table nat > \\\"${COLLECT_DIR}\\\"/networking/iptables-nat.txt\",\n            \"  iptables --wait 1 --numeric --verbose --list > \\\"${COLLECT_DIR}\\\"/networking/iptables.txt\",\n            \"  iptables-save > \\\"${COLLECT_DIR}\\\"/networking/iptables-save.txt\",\n            \"\",\n            \"  ok\",\n            \"}\",\n            \"\",\n            \"get_common_logs() {\",\n            \"  try \\\"collect common operating system logs\\\"\",\n            \"\",\n            \"  for entry in ${COMMON_LOGS[*]}; do\",\n            \"    if [[ -e \\\"/var/log/${entry}\\\" ]]; then\",\n            \"        if [[ \\\"${entry}\\\" == \\\"messages\\\" ]]; then\",\n            \"          tail -c 10M /var/log/messages > \\\"${COLLECT_DIR}\\\"/var_log/messages\",\n            \"          continue\",\n            \"        fi\",\n            \"        if [[ \\\"${entry}\\\" == \\\"containers\\\" ]]; then\",\n            \"          cp --force --dereference --recursive /var/log/containers/aws-node* \\\"${COLLECT_DIR}\\\"/var_log/ 2>/dev/null\",\n            \"          cp --force --dereference --recursive /var/log/containers/kube-system_cni-metrics-helper* \\\"${COLLECT_DIR}\\\"/var_log/ 2>/dev/null\",\n            \"          cp --force --dereference --recursive /var/log/containers/coredns-* \\\"${COLLECT_DIR}\\\"/var_log/ 2>/dev/null\",\n            \"          cp --force --dereference --recursive /var/log/containers/kube-proxy* \\\"${COLLECT_DIR}\\\"/var_log/ 2>/dev/null\",\n            \"          continue\",\n            \"        fi\",\n            \"        if [[ \\\"${entry}\\\" == \\\"pods\\\" ]]; then\",\n            \"          cp --force --dereference --recursive /var/log/pods/kube-system_aws-node* \\\"${COLLECT_DIR}\\\"/var_log/ 2>/dev/null\",\n            \"          cp --force --dereference --recursive /var/log/pods/kube-system_cni-metrics-helper* \\\"${COLLECT_DIR}\\\"/var_log/ 2>/dev/null\",\n            \"          cp --force --dereference --recursive /var/log/pods/kube-system_coredns* \\\"${COLLECT_DIR}\\\"/var_log/ 2>/dev/null\",\n            \"          cp --force --dereference --recursive /var/log/pods/kube-system_kube-proxy* \\\"${COLLECT_DIR}\\\"/var_log/ 2>/dev/null\",\n            \"          continue\",\n            \"        fi\",\n            \"      cp --force --recursive --dereference /var/log/\\\"${entry}\\\" \\\"${COLLECT_DIR}\\\"/var_log/ 2>/dev/null\",\n            \"    fi\",\n            \"  done\",\n            \"\",\n            \"  ok\",\n            \"}\",\n            \"\",\n            \"get_kernel_info() {\",\n            \"  try \\\"collect kernel logs\\\"\",\n            \"\",\n            \"  if [[ -e \\\"/var/log/dmesg\\\" ]]; then\",\n            \"      cp --force /var/log/dmesg \\\"${COLLECT_DIR}/kernel/dmesg.boot\\\"\",\n            \"  fi\",\n            \"  dmesg > \\\"${COLLECT_DIR}/kernel/dmesg.current\\\"\",\n            \"  dmesg --ctime > \\\"${COLLECT_DIR}/kernel/dmesg.human.current\\\"\",\n            \"  uname -a > \\\"${COLLECT_DIR}/kernel/uname.txt\\\"\",\n            \"\",\n            \"  ok\",\n            \"}\",\n            \"\",\n            \"get_docker_logs() {\",\n            \"  try \\\"collect Docker daemon logs\\\"\",\n            \"\",\n            \"  case \\\"${INIT_TYPE}\\\" in\",\n            \"    systemd|snap)\",\n            \"      journalctl --unit=docker --since \\\"${DAYS_10}\\\" > \\\"${COLLECT_DIR}\\\"/docker/docker.log\",\n            \"      ;;\",\n            \"    other)\",\n            \"      for entry in docker upstart/docker; do\",\n            \"        if [[ -e \\\"/var/log/${entry}\\\" ]]; then\",\n            \"          cp --force --recursive --dereference /var/log/\\\"${entry}\\\" \\\"${COLLECT_DIR}\\\"/docker/\",\n            \"        fi\",\n            \"      done\",\n            \"      ;;\",\n            \"    *)\",\n            \"      warning \\\"The current operating system is not supported.\\\"\",\n            \"      ;;\",\n            \"  esac\",\n            \"\",\n            \"  ok\",\n            \"}\",\n            \"\",\n            \"get_k8s_info() {\",\n            \"  try \\\"collect kubelet information\\\"\",\n            \"\",\n            \"  if [[ -n \\\"${KUBECONFIG:-}\\\" ]]; then\",\n            \"    command -v kubectl > /dev/null && kubectl get --kubeconfig=\\\"${KUBECONFIG}\\\" svc > \\\"${COLLECT_DIR}\\\"/kubelet/svc.log\",\n            \"    command -v kubectl > /dev/null && kubectl --kubeconfig=\\\"${KUBECONFIG}\\\" config view  --output yaml > \\\"${COLLECT_DIR}\\\"/kubelet/kubeconfig.yaml\",\n            \"\",\n            \"  elif [[ -f /etc/eksctl/kubeconfig.yaml ]]; then\",\n            \"    KUBECONFIG=\\\"/etc/eksctl/kubeconfig.yaml\\\"\",\n            \"    command -v kubectl > /dev/null && kubectl get --kubeconfig=\\\"${KUBECONFIG}\\\" svc > \\\"${COLLECT_DIR}\\\"/kubelet/svc.log\",\n            \"    command -v kubectl > /dev/null && kubectl --kubeconfig=\\\"${KUBECONFIG}\\\" config view  --output yaml > \\\"${COLLECT_DIR}\\\"/kubelet/kubeconfig.yaml\",\n            \"\",\n            \"  elif [[ -f /etc/systemd/system/kubelet.service ]]; then\",\n            \"    KUBECONFIG=$(grep kubeconfig /etc/systemd/system/kubelet.service | awk '{print $2}')\",\n            \"    command -v kubectl > /dev/null && kubectl get --kubeconfig=\\\"${KUBECONFIG}\\\" svc > \\\"${COLLECT_DIR}\\\"/kubelet/svc.log\",\n            \"    command -v kubectl > /dev/null && kubectl --kubeconfig=\\\"${KUBECONFIG}\\\" config view  --output yaml > \\\"${COLLECT_DIR}\\\"/kubelet/kubeconfig.yaml\",\n            \"\",\n            \"  elif [[ -f /var/lib/kubelet/kubeconfig ]]; then\",\n            \"    KUBECONFIG=\\\"/var/lib/kubelet/kubeconfig\\\"\",\n            \"    command -v kubectl > /dev/null && kubectl get --kubeconfig=${KUBECONFIG} svc > \\\"${COLLECT_DIR}\\\"/kubelet/svc.log\",\n            \"    command -v kubectl > /dev/null && kubectl --kubeconfig=${KUBECONFIG} config view  --output yaml > \\\"${COLLECT_DIR}\\\"/kubelet/kubeconfig.yaml\",\n            \"\",\n            \"  else\",\n            \"    echo \\\"======== Unable to find KUBECONFIG, IGNORING POD DATA =========\\\" >> \\\"${COLLECT_DIR}\\\"/kubelet/svc.log\",\n            \"  fi\",\n            \"\",\n            \"  # Try to copy the kubeconfig file if kubectl command doesn't exist\",\n            \"  [[ (! -f \\\"${COLLECT_DIR}/kubelet/kubeconfig.yaml\\\") && ( -n ${KUBECONFIG}) ]] && cp ${KUBECONFIG} \\\"${COLLECT_DIR}\\\"/kubelet/kubeconfig.yaml\",\n            \"\",\n            \"  case \\\"${INIT_TYPE}\\\" in\",\n            \"    systemd)\",\n            \"      timeout 75 journalctl --unit=kubelet --since \\\"${DAYS_10}\\\" > \\\"${COLLECT_DIR}\\\"/kubelet/kubelet.log\",\n            \"\",\n            \"      systemctl cat kubelet > \\\"${COLLECT_DIR}\\\"/kubelet/kubelet_service.txt 2>&1\",\n            \"      ;;\",\n            \"    snap)\",\n            \"      timeout 75 snap logs kubelet-eks -n all > \\\"${COLLECT_DIR}\\\"/kubelet/kubelet.log\",\n            \"\",\n            \"      timeout 75 snap get kubelet-eks > \\\"${COLLECT_DIR}\\\"/kubelet/kubelet-eks_service.txt 2>&1\",\n            \"      ;;\",\n            \"    *)\",\n            \"      warning \\\"The current operating system is not supported.\\\"\",\n            \"      ;;\",\n            \"  esac\",\n            \"\",\n            \"  ok\",\n            \"}\",\n            \"\",\n            \"get_ipamd_info() {\",\n            \"  if [[ \\\"${ignore_introspection}\\\" == \\\"false\\\" ]]; then\",\n            \"    try \\\"collect L-IPAMD introspection information\\\"\",\n            \"    for entry in ${IPAMD_DATA[*]}; do\",\n            \"      curl --max-time 3 --silent http://localhost:61679/v1/\\\"${entry}\\\" >> \\\"${COLLECT_DIR}\\\"/ipamd/\\\"${entry}\\\".json\",\n            \"    done\",\n            \"  else\",\n            \"    echo \\\"Ignoring IPAM introspection stats as mentioned\\\"| tee -a \\\"${COLLECT_DIR}\\\"/ipamd/ipam_introspection_ignore.txt\",\n            \"  fi\",\n            \"\",\n            \"  if [[ \\\"${ignore_metrics}\\\" == \\\"false\\\" ]]; then\",\n            \"    try \\\"collect L-IPAMD prometheus metrics\\\"\",\n            \"    curl --max-time 3 --silent http://localhost:61678/metrics > \\\"${COLLECT_DIR}\\\"/ipamd/metrics.json 2>&1\",\n            \"  else\",\n            \"    echo \\\"Ignoring Prometheus Metrics collection as mentioned\\\"| tee -a \\\"${COLLECT_DIR}\\\"/ipamd/ipam_metrics_ignore.txt\",\n            \"  fi\",\n            \"\",\n            \"  try \\\"collect L-IPAMD checkpoint\\\"\",\n            \"  cp /var/run/aws-node/ipam.json \\\"${COLLECT_DIR}\\\"/ipamd/ipam.json\",\n            \"\",\n            \"  ok\",\n            \"}\",\n            \"\",\n            \"get_sysctls_info() {\",\n            \"  try \\\"collect sysctls information\\\"\",\n            \"  # dump all sysctls\",\n            \"  sysctl --all >> \\\"${COLLECT_DIR}\\\"/sysctls/sysctl_all.txt 2>/dev/null\",\n            \"\",\n            \"  ok\",\n            \"}\",\n            \"\",\n            \"get_networking_info() {\",\n            \"  try \\\"collect networking infomation\\\"\",\n            \"\",\n            \"  # conntrack info\",\n            \"  echo \\\"*** Output of conntrack -S *** \\\" >> \\\"${COLLECT_DIR}\\\"/networking/conntrack.txt\",\n            \"  timeout 75 conntrack -S >> \\\"${COLLECT_DIR}\\\"/networking/conntrack.txt\",\n            \"  echo \\\"*** Output of conntrack -L ***\\\" >> \\\"${COLLECT_DIR}\\\"/networking/conntrack.txt\",\n            \"  timeout 75 conntrack -L >> \\\"${COLLECT_DIR}\\\"/networking/conntrack.txt\",\n            \"\",\n            \"  # ifconfig\",\n            \"  timeout 75 ifconfig > \\\"${COLLECT_DIR}\\\"/networking/ifconfig.txt\",\n            \"\",\n            \"  # ip rule show\",\n            \"  timeout 75 ip rule show > \\\"${COLLECT_DIR}\\\"/networking/iprule.txt\",\n            \"  timeout 75 ip route show table all >> \\\"${COLLECT_DIR}\\\"/networking/iproute.txt\",\n            \"\",\n            \"  ok\",\n            \"}\",\n            \"\",\n            \"get_cni_config() {\",\n            \"  try \\\"collect CNI configuration information\\\"\",\n            \"\",\n            \"    if [[ -e \\\"/etc/cni/net.d/\\\" ]]; then\",\n            \"        cp --force --recursive --dereference /etc/cni/net.d/* \\\"${COLLECT_DIR}\\\"/cni/\",\n            \"    fi\",\n            \"\",\n            \"  ok\",\n            \"}\",\n            \"\",\n            \"get_pkgtype() {\",\n            \"  if [[ \\\"$(command -v rpm )\\\" ]]; then\",\n            \"    PACKAGE_TYPE=rpm\",\n            \"  elif [[ \\\"$(command -v dpkg )\\\" ]]; then\",\n            \"    PACKAGE_TYPE=deb\",\n            \"  else\",\n            \"    PACKAGE_TYPE='unknown'\",\n            \"  fi\",\n            \"}\",\n            \"\",\n            \"get_pkglist() {\",\n            \"  try \\\"collect installed packages\\\"\",\n            \"\",\n            \"  case \\\"${PACKAGE_TYPE}\\\" in\",\n            \"    rpm)\",\n            \"      rpm -qa > \\\"${COLLECT_DIR}\\\"/system/pkglist.txt 2>&1\",\n            \"      ;;\",\n            \"    deb)\",\n            \"      dpkg --list > \\\"${COLLECT_DIR}\\\"/system/pkglist.txt 2>&1\",\n            \"      ;;\",\n            \"    *)\",\n            \"      warning \\\"Unknown package type.\\\"\",\n            \"      ;;\",\n            \"  esac\",\n            \"\",\n            \"  ok\",\n            \"}\",\n            \"\",\n            \"get_system_services() {\",\n            \"  try \\\"collect active system services\\\"\",\n            \"\",\n            \"  case \\\"${INIT_TYPE}\\\" in\",\n            \"    systemd|snap)\",\n            \"      systemctl list-units > \\\"${COLLECT_DIR}\\\"/system/services.txt 2>&1\",\n            \"      ;;\",\n            \"    other)\",\n            \"      initctl list | awk '{ print $1 }' | xargs -n1 initctl show-config > \\\"${COLLECT_DIR}\\\"/system/services.txt 2>&1\",\n            \"      printf \\\"\\\\n\\\\n\\\\n\\\\n\\\" >> \\\"${COLLECT_DIR}\\\"/system/services.txt 2>&1\",\n            \"      service --status-all >> \\\"${COLLECT_DIR}\\\"/system/services.txt 2>&1\",\n            \"      ;;\",\n            \"    *)\",\n            \"      warning \\\"Unable to determine active services.\\\"\",\n            \"      ;;\",\n            \"  esac\",\n            \"\",\n            \"  timeout 75 top -b -n 1 > \\\"${COLLECT_DIR}\\\"/system/top.txt 2>&1\",\n            \"  timeout 75 ps fauxwww > \\\"${COLLECT_DIR}\\\"/system/ps.txt 2>&1\",\n            \"  timeout 75 netstat -plant > \\\"${COLLECT_DIR}\\\"/system/netstat.txt 2>&1\",\n            \"\",\n            \"  ok\",\n            \"}\",\n            \"\",\n            \"get_docker_info() {\",\n            \"  try \\\"collect Docker daemon information\\\"\",\n            \"\",\n            \"  if [[ \\\"$(pgrep -o dockerd)\\\" -ne 0 ]]; then\",\n            \"    timeout 75 docker info > \\\"${COLLECT_DIR}\\\"/docker/docker-info.txt 2>&1 || echo -e \\\"\\\\tTimed out, ignoring \\\\\\\"docker info output \\\\\\\" \\\"\",\n            \"    timeout 75 docker ps --all --no-trunc > \\\"${COLLECT_DIR}\\\"/docker/docker-ps.txt 2>&1 || echo -e \\\"\\\\tTimed out, ignoring \\\\\\\"docker ps --all --no-truc output \\\\\\\" \\\"\",\n            \"    timeout 75 docker images > \\\"${COLLECT_DIR}\\\"/docker/docker-images.txt 2>&1 || echo -e \\\"\\\\tTimed out, ignoring \\\\\\\"docker images output \\\\\\\" \\\"\",\n            \"    timeout 75 docker version > \\\"${COLLECT_DIR}\\\"/docker/docker-version.txt 2>&1 || echo -e \\\"\\\\tTimed out, ignoring \\\\\\\"docker version output \\\\\\\" \\\"\",\n            \"  else\",\n            \"    warning \\\"The Docker daemon is not running.\\\"\",\n            \"  fi\",\n            \"\",\n            \"  ok\",\n            \"}\",\n            \"\",\n            \"# -----------------------------------------------------------------------------\",\n            \"# Entrypoint\",\n            \"parse_options \\\"$@\\\"\",\n            \"\",\n            \"collect\",\n            \"pack\",\n            \"finished\"\n          ]\n        }\n      },\n      \"description\": \"Run the Log collection script on the provided EKS instance ID\"\n    },\n    {\n      \"name\": \"branchIfS3BucketProvided\",\n      \"action\": \"aws:branch\",\n      \"inputs\": {\n        \"Choices\": [\n          {\n            \"Not\": {\n              \"Variable\": \"{{LogDestination}}\",\n              \"StringEquals\": \"\"\n            },\n            \"NextStep\": \"runUploadScript\"\n          }\n        ]\n      },\n      \"description\": \"Checks if S3 bucket was provided in the invocation to upload the logs\",\n      \"onFailure\": \"Abort\",\n      \"isCritical\": true,\n      \"isEnd\": true\n    },\n    {\n      \"name\": \"runUploadScript\",\n      \"action\": \"aws:runCommand\",\n      \"inputs\": {\n        \"DocumentName\": \"AWS-RunShellScript\",\n        \"InstanceIds\": [\n          \"{{EKSInstanceId}}\"\n        ],\n        \"Parameters\": {\n          \"commands\": [\n            \"echo \\\"Uploading EKS logs collected. Checking if AWS CLI is installed.\\\"\",\n            \"region=$(curl -s http://169.254.169.254/latest/meta-data/placement/availability-zone | sed 's/\\\\(.*\\\\)[a-z]/\\\\1/')\",\n            \"echo \\\"current region $region\\\"\",\n            \"\",\n            \"if command -v aws &> /dev/null\",\n            \"then\",\n            \"    echo \\\"AWS CLI Installed. Checking if bucket {{LogDestination}} is public or not.\\\"\",\n            \"    awspath=$(command -v aws)\",\n            \"    IsPublic=False\",\n            \"    function get_bucket_policy_status(){\",\n            \"        policy_status=`$awspath s3api get-bucket-policy-status --bucket {{LogDestination}} --output text --region $region |cut -f2 2> /dev/null`\",\n            \"        command_status=$?\",\n            \"        if [ $command_status -eq 0 ] ; then\",\n            \"            if [ \\\"$policy_status\\\" = \\\"True\\\" ] ; then\",\n            \"                IsPublic=True\",\n            \"            fi\",\n            \"        fi\",\n            \"    }\",\n            \"    function is_bucket_public(){\",\n            \"        PUBLIC_ACL_INDICATOR='http://acs.amazonaws.com/groups/global/AllUsers'\",\n            \"        if echo `$awspath s3api get-bucket-acl --output text --bucket {{LogDestination}} --region $region | grep -A1 'READ\\\\|WRITE'`| grep -q \\\"${PUBLIC_ACL_INDICATOR}\\\"\",\n            \"        then\",\n            \"            IsPublic=True\",\n            \"        fi\",\n            \"    }\",\n            \"    get_bucket_policy_status {{LogDestination}}\",\n            \"    is_bucket_public {{LogDestination}}\",\n            \"    if [ \\\"$IsPublic\\\" = \\\"False\\\" ]\",\n            \"    then \",\n            \"        echo \\\"Bucket {{LogDestination}} is not public. Starting Upload..\\\"\",\n            \"        ${awspath} s3 cp /var/log/eks_{{EKSInstanceId}}_{{automation:EXECUTION_ID}}.tar.gz s3://{{LogDestination}} --region $region\",\n            \"    else \",\n            \"        echo \\\"Bucket is public. Cannot Upload to a public bucket. Exiting!\\\"\",\n            \"        exit 1\",\n            \"    fi\",\n            \"else\",\n            \"    echo \\\"AWS CLI Not Installed. Quitting Upload WorkFlow.\\\"\",\n            \"    exit 1\",\n            \"fi\"\n          ]\n        }\n      },\n      \"description\": \"Upload logs to S3\"\n    }\n  ]\n}",
  "CreatedDate": "2022-03-24T12:31:24.305Z",
  "DisplayName": null,
  "DocumentFormat": {
    "Value": "JSON"
  },
  "DocumentType": {
    "Value": "Automation"
  },
  "DocumentVersion": "2",
  "Name": "AWSSupport-CollectEKSInstanceLogs",
  "Requires": [],
  "ReviewStatus": null,
  "Status": {
    "Value": "Active"
  },
  "StatusInformation": null,
  "VersionName": null,
  "ResponseMetadata": {
    "RequestId": "d2617860-e715-40e2-b9d9-08890997201a",
    "Metadata": {},
    "ChecksumAlgorithm": 0,
    "ChecksumValidationStatus": 0
  },
  "ContentLength": 33175,
  "HttpStatusCode": 200,
  "LoggedAt": "2022-11-27T07:12:37.2583502+00:00"
}
