{
  "AttachmentsContent": [],
  "Content": "{\n  \"description\" : \"## Id\\nAWSResilienceHub-DeleteEFSReplicationSOP_2023-01-01\\n\\n## Intent\\nDelete an existing EFS Replication configuration in order to fail over to the destination file system\\n\\n## Type\\nSOP\\n\\n## Risk\\nHigh\\n\\n## Requirements\\n  * EFS file system\\n  * Automatic Approval Boolean Value. If not stated,an SNS Topic and a Role the has permissions to authorize should be passed\\n\\n## Permissions required for AutomationAssumeRole\\n  * elasticfilesystem:DeleteReplicationConfiguration\\n  * elasticfilesystem:DescribeReplicationConfigurations\\n  * SNS:Publish\\n\\n## Supports Rollback\\nNo\\n\\n## Cancellation behavior\\nFail\\n\\n## Inputs\\n### (Required) AutomationAssumeRole\\n  * type: String\\n  * description: ARN of the IAM role with permissions listed above\\n\\n### (Required) FileSystemId\\n  * type: String\\n  * description: ID of the EFS file system\\n\\n ### (Optional) ApproveDeleteReplicationAutomatically\\n  * type: String\\n  * description: If it is true, approve deleting EFE Replication automatically.\\n    Otherwise, give a user a chance to decide. It is false by default.\\n\\n### (Optional) SNSTopicARNForManualApproval\\n  * type: String\\n  * description: The ARN of the SNS Topic where a user will receive the notification\\n                  about the manual approval of deleting the given EFS Replication\\n\\n ### (Optional) IAMPrincipalForManualApproval\\n  * type: String\\n  * description: ARN of AWS authenticated principal who are able to either approve or reject the deletion of the given EFS Replication.\\n                 Can be either an AWS Identity and Access Management (IAM) user name or IAM user ARN or IAM role ARN or IAM assume role user ARN\\n\\n## Details\\nThe document deletes an EFS Replication Configuration\\n\\n## Steps executed in normal flow\\n  * CheckApproveInputs\\n  * CheckAutomaticApproval\\n  * ApproveChangeOrCancel\\n  * RecordStartTime\\n  * DeleteEfsReplication\\n  * OutputRecoveryTime\\n\\n## Outputs\\n### OutputRecoveryTime.RecoveryTime\\n  * type: Integer\\n  * description: SOP execution time in seconds\",\n  \"schemaVersion\" : \"0.3\",\n  \"assumeRole\" : \"{{ AutomationAssumeRole }}\",\n  \"parameters\" : {\n    \"FileSystemId\" : {\n      \"type\" : \"String\",\n      \"description\" : \"(Required) ID of the EFS file system\"\n    },\n    \"AutomationAssumeRole\" : {\n      \"type\" : \"String\",\n      \"description\" : \"(Required) The ARN of the role that allows Automation to perform the actions on your behalf\"\n    },\n    \"ApproveDeleteReplicationAutomatically\" : {\n      \"type\" : \"Boolean\",\n      \"description\" : \"(Optional) If it is true, approve changing approve deleting EFE Replication automatically.\\nOtherwise, give a user a chance to decide. It is false by default.\",\n      \"default\" : false\n    },\n    \"SNSTopicARNForManualApproval\" : {\n      \"type\" : \"String\",\n      \"description\" : \"(Optional) The ARN of the SNS Topic where a user will receive the notification\\nabout the manual approval of deleting the given EFS Replication.\",\n      \"default\" : \"\"\n    },\n    \"IAMPrincipalForManualApproval\" : {\n      \"type\" : \"String\",\n      \"description\" : \"(Optional) ARN of AWS authenticated principal who are able to either approve or reject the deletion of the given EFS Replication.\\nCan be either an AWS Identity and Access Management (IAM) user name or IAM user ARN or IAM role ARN or IAM assume role user ARN\",\n      \"default\" : \"\"\n    }\n  },\n  \"outputs\" : [ \"OutputRecoveryTime.RecoveryTime\" ],\n  \"mainSteps\" : [ {\n    \"name\" : \"CheckApproveInputs\",\n    \"action\" : \"aws:branch\",\n    \"description\" : \"Validate inputs in case automatic approval is not true\",\n    \"inputs\" : {\n      \"Choices\" : [ {\n        \"And\" : [ {\n          \"Variable\" : \"{{ApproveDeleteReplicationAutomatically}}\",\n          \"BooleanEquals\" : false\n        }, {\n          \"Variable\" : \"{{SNSTopicARNForManualApproval}}\",\n          \"StringEquals\" : \"\"\n        } ],\n        \"NextStep\" : \"FailWithIncorrectApproveParams\"\n      }, {\n        \"And\" : [ {\n          \"Variable\" : \"{{ApproveDeleteReplicationAutomatically}}\",\n          \"BooleanEquals\" : false\n        }, {\n          \"Variable\" : \"{{IAMPrincipalForManualApproval}}\",\n          \"StringEquals\" : \"\"\n        } ],\n        \"NextStep\" : \"FailWithIncorrectApproveParams\"\n      } ],\n      \"Default\" : \"CheckAutomaticApproval\"\n    }\n  }, {\n    \"name\" : \"CheckAutomaticApproval\",\n    \"description\" : \"Branch for automatic approval\",\n    \"action\" : \"aws:branch\",\n    \"inputs\" : {\n      \"Choices\" : [ {\n        \"NextStep\" : \"RecordStartTime\",\n        \"Variable\" : \"{{ApproveDeleteReplicationAutomatically}}\",\n        \"BooleanEquals\" : true\n      }, {\n        \"NextStep\" : \"ApproveChangeOrCancel\",\n        \"Variable\" : \"{{ApproveDeleteReplicationAutomatically}}\",\n        \"BooleanEquals\" : false\n      } ]\n    }\n  }, {\n    \"name\" : \"FailWithIncorrectApproveParams\",\n    \"action\" : \"aws:executeScript\",\n    \"description\" : \"Fail with message\",\n    \"isEnd\" : true,\n    \"inputs\" : {\n      \"Runtime\" : \"python3.8\",\n      \"Handler\" : \"raise_exception\",\n      \"InputPayload\" : {\n        \"ErrorMessage\" : \"If ApproveDeleteReplicationAutomatically parameter is set to `true`, both IAMPrincipalForManualApproval and SNSTopicARNForManualApproval parameters must be non-empty\"\n      },\n      \"Script\" : \"import logging\\nimport time\\nfrom datetime import datetime, timezone\\n\\nimport boto3\\nfrom botocore.exceptions import ClientError\\nfrom dateutil import parser\\n\\nlogger = logging.getLogger()\\nlogger.setLevel(logging.INFO)\\n\\n\\n\\ndef raise_exception(events, context):\\n    \\\"\\\"\\\"\\n    Raises AssertionError exception with defined error message\\n    You can pass additional arguments to run python format() on the message.\\n    Example:\\n\\n    ErrorMessage: \\\"test {test1} {test2}\\\"\\n    test1: \\\"replaced1\\\"\\n    test2: \\\"replaced2\\\"\\n\\n    will render in\\n    `test replaced1 replaced2`\\n\\n\\n    :param events: dict with the following keys:\\n        * ErrorMessage: error message to return, you can add placeholders in {} and replace them with other parameters\\n        * any_key: will replace placeholder {any_key} in ErrorMessage\\n    :param context:\\n    :return: None\\n    \\\"\\\"\\\"\\n    required_params = [\\n        'ErrorMessage'\\n    ]\\n\\n    for key in required_params:\\n        if key not in events:\\n            raise KeyError(f'Requires {key} in events')\\n\\n    format_dict = {k: v for k, v in events.items() if k != 'ErrorMessage'}\\n    raise AssertionError(events['ErrorMessage'].format(**format_dict))\"\n    }\n  }, {\n    \"name\" : \"ApproveChangeOrCancel\",\n    \"action\" : \"aws:approve\",\n    \"description\" : \"Manual Approval for deleting EFS Replication\",\n    \"timeoutSeconds\" : 3600,\n    \"onFailure\" : \"Abort\",\n    \"inputs\" : {\n      \"NotificationArn\" : \"{{SNSTopicARNForManualApproval}}\",\n      \"Message\" : \"Do you agree to delete the given EFS replication configuration? Data will cease to sync between your source and target file systems\",\n      \"MinRequiredApprovals\" : 1,\n      \"Approvers\" : [ \"{{IAMPrincipalForManualApproval}}\" ]\n    }\n  }, {\n    \"name\" : \"RecordStartTime\",\n    \"description\" : \"Start recording execution time\",\n    \"action\" : \"aws:executeScript\",\n    \"outputs\" : [ {\n      \"Name\" : \"StartTime\",\n      \"Selector\" : \"$.Payload\",\n      \"Type\" : \"String\"\n    } ],\n    \"inputs\" : {\n      \"Runtime\" : \"python3.8\",\n      \"Handler\" : \"start_time\",\n      \"Script\" : \"import logging\\nimport time\\nfrom datetime import datetime, timezone\\n\\nimport boto3\\nfrom botocore.exceptions import ClientError\\nfrom dateutil import parser\\n\\nlogger = logging.getLogger()\\nlogger.setLevel(logging.INFO)\\n\\n\\n\\ndef start_time(events, context):\\n    return datetime.now(timezone.utc).isoformat()\"\n    }\n  }, {\n    \"name\" : \"DeleteEfsReplication\",\n    \"description\" : \"Delete Replication\",\n    \"action\" : \"aws:executeScript\",\n    \"inputs\" : {\n      \"Runtime\" : \"python3.8\",\n      \"Handler\" : \"delete_efs_replication\",\n      \"InputPayload\" : {\n        \"FileSystemId\" : \"{{ FileSystemId }}\"\n      },\n      \"Script\" : \"import logging\\nimport time\\nfrom typing import List\\nimport json\\nimport uuid\\nimport sys\\nimport subprocess\\n\\nimport boto3\\nfrom botocore.exceptions import ClientError\\n\\n\\nlogger = logging.getLogger(__name__)\\nlogger.setLevel(logging.INFO)\\n\\n\\n\\ndef update_boto3_version():\\n    boto_modules = []\\n    for m in sys.modules.keys():\\n        if m.startswith(\\\"boto\\\"):\\n            boto_modules.append(m)\\n    for m in boto_modules:\\n        del sys.modules[m]\\n    subprocess.check_call(\\n        [sys.executable, \\\"-m\\\", \\\"pip\\\", \\\"install\\\", \\\"boto3\\\", \\\"-t\\\", \\\"/tmp/\\\"]\\n    )\\n    sys.path.insert(0, \\\"/tmp/\\\")\\n\\n\\n\\ndef delete_efs_replication(events, context):\\n    update_boto3_version()\\n    import boto3\\n    replication_region = boto3.client(\\\"efs\\\").describe_replication_configurations(\\n        FileSystemId=events[\\\"FileSystemId\\\"]\\n    )[\\\"Replications\\\"][0][\\\"Destinations\\\"][0][\\\"Region\\\"]\\n    boto3.client(\\\"efs\\\", region_name=replication_region).delete_replication_configuration(\\n        SourceFileSystemId=events[\\\"FileSystemId\\\"]\\n    )\"\n    }\n  }, {\n    \"name\" : \"OutputRecoveryTime\",\n    \"description\" : \"Calculate execution time\",\n    \"action\" : \"aws:executeScript\",\n    \"outputs\" : [ {\n      \"Name\" : \"RecoveryTime\",\n      \"Selector\" : \"$.Payload\",\n      \"Type\" : \"Integer\"\n    } ],\n    \"inputs\" : {\n      \"Runtime\" : \"python3.8\",\n      \"Handler\" : \"recovery_time\",\n      \"Script\" : \"import logging\\nimport time\\nfrom datetime import datetime, timezone\\n\\nimport boto3\\nfrom botocore.exceptions import ClientError\\nfrom dateutil import parser\\n\\nlogger = logging.getLogger()\\nlogger.setLevel(logging.INFO)\\n\\n\\n\\ndef recovery_time(events, context):\\n    return (datetime.now(timezone.utc) - parser.parse(events['StartTime'])).seconds\",\n      \"InputPayload\" : {\n        \"StartTime\" : \"{{ RecordStartTime.StartTime }}\"\n      }\n    }\n  } ]\n}",
  "CreatedDate": "2023-03-22T12:06:30.916Z",
  "DisplayName": null,
  "DocumentFormat": {
    "Value": "JSON"
  },
  "DocumentType": {
    "Value": "Automation"
  },
  "DocumentVersion": "2",
  "Name": "AWSResilienceHub-DeleteEFSReplicationSOP_2023-01-01",
  "Requires": [],
  "ReviewStatus": null,
  "Status": {
    "Value": "Active"
  },
  "StatusInformation": null,
  "VersionName": null,
  "ResponseMetadata": {
    "RequestId": "b74b4657-2df1-483a-ac69-45208b178c8b",
    "Metadata": {},
    "ChecksumAlgorithm": 0,
    "ChecksumValidationStatus": 0
  },
  "ContentLength": 10791,
  "HttpStatusCode": 200,
  "LoggedAt": "2023-06-08T07:11:02.724832+00:00"
}
