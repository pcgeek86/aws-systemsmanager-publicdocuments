{
  "AttachmentsContent": [],
  "Content": "{\n  \"schemaVersion\": \"0.3\",\n  \"description\": \"Collects troubleshooting logs from the Operating System, and uploads them to an S3 bucket in your account.\",\n  \"assumeRole\": \"{{ AutomationAssumeRole }}\",\n  \"parameters\": {\n    \"InstanceId\": {\n      \"type\": \"String\",\n      \"description\": \"(Required) The ID of the Windows or Linux managed instance you want to collect logs from.\",\n      \"allowedPattern\": \"^[m]{0,1}i-[a-z0-9]{8,17}$\"\n    },\n    \"S3BucketName\": {\n      \"type\": \"String\",\n      \"description\": \"(Required) S3 bucket to upload the logs to.\",\n      \"allowedPattern\": \"^[_a-zA-Z0-9][-._a-zA-Z0-9]{2,62}$\"\n    },\n    \"S3Path\": {\n      \"type\": \"String\",\n      \"description\": \"(Required) S3 path for the collected logs.\",\n      \"default\": \"AWSSupport-SendLogBundleToS3Bucket/\",\n      \"allowedPattern\": \"^[a-zA-Z0-9][-./a-zA-Z0-9]{0,255}/$\"\n    },\n    \"AutomationAssumeRole\": {\n      \"type\": \"String\",\n      \"description\": \"(Optional) The IAM role for this execution. If no role is specified, AWS Systems Manager Automation will use the permissions of the user that executes this document.\",\n      \"default\": \"\"\n    }\n  },\n  \"mainSteps\": [\n    {\n      \"name\": \"assertInstanceIsManagedInstance\",\n      \"action\": \"aws:assertAwsResourceProperty\",\n      \"onFailure\": \"Abort\",\n      \"inputs\": {\n        \"Service\": \"ssm\",\n        \"Api\": \"DescribeInstanceInformation\",\n        \"InstanceInformationFilterList\": [\n          {\n            \"key\": \"InstanceIds\",\n            \"valueSet\": [\n              \"{{ InstanceId }}\"\n            ]\n          }\n        ],\n        \"PropertySelector\": \"$.InstanceInformationList[0].PingStatus\",\n        \"DesiredValues\": [\n          \"Online\"\n        ]\n      },\n      \"isCritical\": \"true\",\n      \"nextStep\": \"describeManagedInstance\"\n    },\n    {\n      \"name\": \"describeManagedInstance\",\n      \"action\": \"aws:executeAwsApi\",\n      \"onFailure\": \"Abort\",\n      \"inputs\": {\n        \"Service\": \"ssm\",\n        \"Api\": \"DescribeInstanceInformation\",\n        \"InstanceInformationFilterList\": [\n          {\n            \"key\": \"InstanceIds\",\n            \"valueSet\": [\n              \"{{ InstanceId }}\"\n            ]\n          }\n        ]\n      },\n      \"outputs\": [\n        {\n          \"Name\": \"Platform\",\n          \"Selector\": \"$.InstanceInformationList[0].PlatformType\"\n        }\n      ],\n      \"isCritical\": \"true\",\n      \"nextStep\": \"branchOnManagedInstancePlatform\"\n    },\n    {\n      \"name\": \"branchOnManagedInstancePlatform\",\n      \"action\": \"aws:branch\",\n      \"onFailure\": \"Abort\",\n      \"inputs\": {\n        \"Choices\": [\n          {\n            \"NextStep\": \"installEC2RescueForWindows\",\n            \"Variable\": \"{{ describeManagedInstance.Platform }}\",\n            \"StringEquals\": \"Windows\"\n          },\n          {\n            \"NextStep\": \"installEC2RescueForLinux\",\n            \"Variable\": \"{{ describeManagedInstance.Platform }}\",\n            \"StringEquals\": \"Linux\"\n          }\n        ]\n      },\n      \"isCritical\": \"true\",\n      \"isEnd\": \"true\"\n    },\n    {\n      \"name\": \"installEC2RescueForWindows\",\n      \"action\": \"aws:runCommand\",\n      \"onFailure\": \"Abort\",\n      \"inputs\": {\n        \"DocumentName\": \"AWS-ConfigureAWSPackage\",\n        \"InstanceIds\": [\n          \"{{ InstanceId }}\"\n        ],\n        \"Parameters\": {\n          \"name\": \"AWSSupport-EC2Rescue\",\n          \"action\": \"Install\",\n          \"version\": \"latest\"\n        }\n      },\n      \"isCritical\": \"true\",\n      \"nextStep\": \"collectAndUploadWindowsLogBundle\"\n    },\n    {\n      \"name\": \"collectAndUploadWindowsLogBundle\",\n      \"action\": \"aws:runCommand\",\n      \"onFailure\": \"Abort\",\n      \"inputs\": {\n        \"DocumentName\": \"AWS-RunPowerShellScript\",\n        \"InstanceIds\": [\n          \"{{ InstanceId }}\"\n        ],\n        \"Parameters\": {\n          \"commands\": [\n            \"try{ \",\n            \"    if(Get-Module -ListAvailable -Name AWSPowershell){ \",\n            \"        Import-Module AWSPowershell, EC2Rescue \",\n            \"        $s3BucketName = \\\"{{ S3BucketName }}\\\" \",\n            \"        $s3Path = \\\"{{ S3Path }}\\\" \",\n            \"        if(Test-S3Bucket -BucketName $s3BucketName){ \",\n            \"            Write-Host \\\"Collecting logs from the current Windows instance.\\\" \",\n            \"            $logFile = Invoke-EC2RescueCollectLogBundle -Logs \\\"all\\\"  \",\n            \"            Write-Host \\\"Log collection completed. Uploading logs to S3 bucket ${s3BucketName} under path ${s3Path}.\\\" \",\n            \"            Copy-EC2RescueLogBundleToS3 -FilePath $logFile -S3BucketName $s3BucketName -S3Path $s3Path \",\n            \"            Write-Host \\\"Log upload completed.\\\" \",\n            \"        }else{ \",\n            \"            throw (\\\"No S3 bucket called \\\" + $s3BucketName + \\\" found in the current AWS account, or access denied. Please specify an S3 bucket you own, and that this instance has access to.\\\") \",\n            \"        } \",\n            \"    }else{ \",\n            \"        Write-Host \\\"AWS Tools for Windows PowerShell not installed. Please install the latest version of the AWS Tools for Windows PowerShell and try again.\\\" \",\n            \"        Write-Host \\\"Download location: https://aws.amazon.com/powershell/\\\" \",\n            \"        Exit 255 \",\n            \"    } \",\n            \"}catch{ \",\n            \"    Write-Host $_.Exception.Message \",\n            \"    Exit 1 \",\n            \"}\"\n          ]\n        }\n      },\n      \"isCritical\": \"true\",\n      \"isEnd\": \"true\"\n    },\n    {\n      \"name\": \"installEC2RescueForLinux\",\n      \"action\": \"aws:runCommand\",\n      \"onFailure\": \"Abort\",\n      \"inputs\": {\n        \"DocumentName\": \"AWS-ConfigureAWSPackage\",\n        \"InstanceIds\": [\n          \"{{ InstanceId }}\"\n        ],\n        \"Parameters\": {\n          \"name\": \"AWSSupport-EC2Rescue\",\n          \"action\": \"Install\",\n          \"version\": \"latest\"\n        }\n      },\n      \"isCritical\": \"true\",\n      \"nextStep\": \"collectAndUploadLinuxLogBundle\"\n    },\n    {\n      \"name\": \"collectAndUploadLinuxLogBundle\",\n      \"action\": \"aws:runCommand\",\n      \"onFailure\": \"Abort\",\n      \"inputs\": {\n        \"DocumentName\": \"AWS-RunShellScript\",\n        \"InstanceIds\": [\n          \"{{ InstanceId }}\"\n        ],\n        \"Parameters\": {\n          \"commands\": [\n            \"#!/bin/sh \",\n            \"error_trap() \",\n            \"{ \",\n            \"    if test -n \\\"$1\\\" ; then \",\n            \"        printf \\\"%s\\\\\\\\n\\\" \\\"$1\\\" \",\n            \"    fi \",\n            \"    printf \\\"%.s=\\\" $(seq 1 80) \",\n            \"    printf \\\"\\\\\\\\nThe EC2Rescue execution did not complete successfully.\\\\\\\\n\\\" \",\n            \"    exit 1 \",\n            \"} \",\n            \" \",\n            \"# Make sure the bucket is accessible before running EC2RL \",\n            \"aws s3api head-bucket --bucket {{ S3BucketName }} || error_trap \\\"No S3 bucket called {{ S3BucketName }} found in the current AWS account or access denied. Please specify an S3 bucket you own and that this instance has access to.\\\" \",\n            \" \",\n            \"# Check that a compatible Python interpreter is available \",\n            \"if command -v python3 ; then \",\n            \"    PYTHON=python3 \",\n            \"elif command -v python2.7 ; then \",\n            \"    PYTHON=python2.7 \",\n            \"else \",\n            \"    error_trap \\\"Failed to find compatible Python environment!\\\" \",\n            \"fi \",\n            \" \",\n            \"# Use the Managed Instance ID if available \",\n            \"if test -f /var/lib/amazon/ssm/registration ; then \",\n            \"    INSTANCE_ID=\\\"$(${PYTHON} -c \\\"import json, sys; print(json.load(sys.stdin)['ManagedInstanceID'])\\\" < /var/lib/amazon/ssm/registration)\\\" || error_trap \",\n            \"# If SSM is being used on an EC2 instance without an activation (e.g. via role) then use the Instance ID \",\n            \"elif test -e /sys/hypervisor/uuid && grep -q \\\"^ec2\\\" /sys/hypervisor/uuid ; then \",\n            \"    INSTANCE_ID=\\\"$(curl -s \\\"http://169.254.169.254/latest/meta-data/instance-id\\\")\\\" || error_trap \",\n            \"elif test \\\"$(curl -s -o /dev/null -w \\\"%{http_code}\\\" http://169.254.169.254/latest/meta-data/instance-id)\\\" == 401; then \",\n            \"    INSTANCE_ID=$(TOKEN=`curl -X PUT \\\"http://169.254.169.254/latest/api/token\\\" -H \\\"X-aws-ec2-metadata-token-ttl-seconds: 21600\\\"` && curl -H \\\"X-aws-ec2-metadata-token: $TOKEN\\\" -v \\\"http://169.254.169.254/latest/meta-data/instance-id\\\") || error_trap \",\n            \"elif test \\\"$(curl -s -o /dev/null -w \\\"%{http_code}\\\" http://169.254.169.254/latest/dynamic/instance-identity/document)\\\" == 200; then \",\n            \"    INSTANCE_ID=\\\"$(curl -s http://169.254.169.254/latest/dynamic/instance-identity/document | ${PYTHON} -c 'import json, sys; print(json.load(sys.stdin)[\\\"instanceId\\\"])')\\\" || error_trap \",\n            \"else \",\n            \"    error_trap \\\"Failed to obtain an instance ID\\\" \",\n            \"fi \",\n            \" \",\n            \"# Determine if the system is an instance \",\n            \"# This Python snippet is from EC2 Rescue for Linux: ec2rlcore.prediag.is_an_instance() \",\n            \"if test \\\"$(${PYTHON} -c \\\" \",\n            \"try: \",\n            \"    with open('/sys/hypervisor/uuid') as uuid_file: \",\n            \"        if not uuid_file.readline().startswith('ec2'): \",\n            \"            print(False) \",\n            \"    print(True) \",\n            \"except (IOError, OSError): \",\n            \"    # Python2: IOError \",\n            \"    # Python3: OSError -> FileNotFoundError \",\n            \"    print(False) \",\n            \"\\\")\\\" != \\\"True\\\" ; then \",\n            \"    NOT_AN_INSTANCE=\\\"--not-an-instance\\\" \",\n            \"else \",\n            \"    NOT_AN_INSTANCE=\\\"\\\" \",\n            \"fi \",\n            \" \",\n            \"printf \\\"Running EC2 Rescue for Linux\\\\\\\\n\\\" \",\n            \"sudo ec2rl run ${NOT_AN_INSTANCE} --only-classes=collect,gather --times=3 --period=5 --domain=amazon.com --protocol=tcp --count=3 --destination=amazon.com --port=80 || error_trap \",\n            \" \",\n            \"LOG_DIR=\\\"$(basename \\\"$(find /var/tmp/ec2rl -maxdepth 1 -mindepth 1 -printf \\\"%T+ %p\\\\\\\\n\\\" | sort -r | head -n 1 | awk '{print $2}')\\\")\\\" \",\n            \"FILE_NAME=\\\"$(date --iso-8601=seconds | sed \\\"s/\\\\\\\\:/_/g\\\")\\\"_\\\"${INSTANCE_ID}\\\".tgz \",\n            \"printf \\\"Creating tarball ${FILE_NAME}, of EC2RL log directory, /var/tmp/ec2rl/%s\\\\\\\\n\\\" \\\"${LOG_DIR}\\\" \",\n            \"tar -czf \\\"${FILE_NAME}\\\" -C /var/tmp/ec2rl \\\"${LOG_DIR}\\\" || error_trap \",\n            \"printf \\\"Uploading tarball to s3://{{ S3BucketName }}/{{ S3Path }}%s\\\\\\\\n\\\" \\\"${FILE_NAME}\\\" \",\n            \"aws s3 cp \\\"$FILE_NAME\\\" s3://{{ S3BucketName }}/{{ S3Path }}\\\"${FILE_NAME}\\\"  || error_trap \",\n            \"printf \\\"Done!\\\\\\\\n\\\" \"\n          ]\n        }\n      },\n      \"isCritical\": \"true\",\n      \"isEnd\": \"true\"\n    }\n  ],\n  \"outputs\": [\n    \"collectAndUploadWindowsLogBundle.Output\",\n    \"collectAndUploadLinuxLogBundle.Output\"\n  ]\n}",
  "CreatedDate": "2021-03-02T16:09:17.432Z",
  "DisplayName": null,
  "DocumentFormat": {
    "Value": "JSON"
  },
  "DocumentType": {
    "Value": "Automation"
  },
  "DocumentVersion": "5",
  "Name": "AWSSupport-SendLogBundleToS3Bucket",
  "Requires": [],
  "ReviewStatus": null,
  "Status": {
    "Value": "Active"
  },
  "StatusInformation": null,
  "VersionName": null,
  "ResponseMetadata": {
    "RequestId": "aeed63d8-ea44-491a-a933-426911412a45",
    "Metadata": {},
    "ChecksumAlgorithm": 0,
    "ChecksumValidationStatus": 0
  },
  "ContentLength": 12092,
  "HttpStatusCode": 200,
  "LoggedAt": "2023-04-13T07:12:03.1409075+00:00"
}
