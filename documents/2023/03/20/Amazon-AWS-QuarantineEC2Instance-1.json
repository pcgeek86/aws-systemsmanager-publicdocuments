{
  "AttachmentsContent": [],
  "Content": "{\n  \"description\" : \"## Name\\n  Quarantine EC2 instance which are suspected of being compromised.\\n\\n## What does this document do?\\n  Automation document to isolate EC2 instance which are suspected of being compromised.\\n## Minimum Permissions Required\\n  * `ec2:DescribeInstances`\\n  * `ec2:DescribeSecurityGroups`\\n  * `ec2:CreateSecurityGroup`\\n  * `ec2:RevokeSecurityGroupIngress`\\n  * `ec2:RevokeSecurityGroupEgress`\\n  * `ec2:CreateSnapshot`\\n  * `ec2:DescribeSnapshots`\\n  * `ec2:ModifyInstanceAttribute`\\n  * `autoscaling:DescribeAutoScalingInstances`\\n  * `autoscaling:DetachInstances`\",\n  \"schemaVersion\" : \"0.3\",\n  \"assumeRole\" : \"{{ AutomationAssumeRole }}\",\n  \"parameters\" : {\n    \"InstanceId\" : {\n      \"type\" : \"String\",\n      \"description\" : \"(Required) The ID of the Amazon EC2 instance.\",\n      \"allowedPattern\" : \"i-[a-z0-9]{8,17}$\"\n    },\n    \"IsolationSecurityGroup\" : {\n      \"type\" : \"String\",\n      \"description\" : \"(Optional) The name of isolation security group\",\n      \"default\" : \"isolated-security-group\",\n      \"allowedPattern\" : \"[-_a-zA-Z0-9]*\"\n    },\n    \"AutomationAssumeRole\" : {\n      \"type\" : \"AWS::IAM::Role::Arn\",\n      \"description\" : \"(Optional) The ARN of the role that allows the document to perform the actions on your behalf\",\n      \"default\" : \"\",\n      \"allowedPattern\" : \"^$|arn:(aws[a-zA-Z-]*)?:iam::\\\\d{12}:role\\\\/?[a-zA-Z_0-9+=,.@\\\\-_\\\\/]+\"\n    }\n  },\n  \"mainSteps\" : [ {\n    \"name\" : \"GetEC2InstanceResources\",\n    \"description\" : \"## GetEC2InstanceResources.\\nGet EC2 Instance Resources\\n\",\n    \"action\" : \"aws:executeAwsApi\",\n    \"onFailure\" : \"Abort\",\n    \"timeoutSeconds\" : 300,\n    \"inputs\" : {\n      \"Service\" : \"ec2\",\n      \"Api\" : \"DescribeInstances\",\n      \"InstanceIds\" : [ \"{{InstanceId}}\" ]\n    },\n    \"outputs\" : [ {\n      \"Name\" : \"RevokedSecurityGroupsIds\",\n      \"Selector\" : \"$.Reservations[0].Instances[0].SecurityGroups..GroupId\",\n      \"Type\" : \"StringList\"\n    }, {\n      \"Name\" : \"RevokedSecurityGroupsNames\",\n      \"Selector\" : \"$.Reservations[0].Instances[0].SecurityGroups..GroupName\",\n      \"Type\" : \"StringList\"\n    }, {\n      \"Name\" : \"VpcId\",\n      \"Selector\" : \"$.Reservations[0].Instances[0].VpcId\",\n      \"Type\" : \"String\"\n    }, {\n      \"Name\" : \"VolumeId\",\n      \"Selector\" : \"$.Reservations[0].Instances[0].BlockDeviceMappings[0].Ebs.VolumeId\"\n    } ]\n  }, {\n    \"name\" : \"PrepareQuarantineEC2Instance\",\n    \"description\" : \"## PrepareQuarantineEC2Instance.\\nPrepare Quarantine EC2 Instance\\n\",\n    \"action\" : \"aws:executeScript\",\n    \"onFailure\" : \"Abort\",\n    \"timeoutSeconds\" : 300,\n    \"inputs\" : {\n      \"Runtime\" : \"python3.8\",\n      \"Handler\" : \"prepareQuarantine\",\n      \"InputPayload\" : {\n        \"InstanceId\" : \"{{ InstanceId }}\",\n        \"VpcId\" : \"{{ GetEC2InstanceResources.VpcId }}\",\n        \"IsolationSecurityGroup\" : \"{{ IsolationSecurityGroup }}\"\n      },\n      \"Script\" : \"import time\\n\\nimport boto3\\n\\nclient = boto3.client(\\\"ec2\\\")\\nclient_asg = boto3.client(\\\"autoscaling\\\")\\n\\n\\ndef deAttachEC2FromAutoScalingGroup(data):\\n    asgNames = []\\n    instanceId = data\\n    args = {\\\"InstanceIds\\\": [instanceId]}\\n    while True:\\n        resp = client_asg.describe_auto_scaling_instances(**args)\\n        for asg in resp[\\\"AutoScalingInstances\\\"]:\\n            asgNames.append(asg[\\\"AutoScalingGroupName\\\"])\\n        if \\\"NextToken\\\" in resp:\\n            args[\\\"NextToken\\\"] = resp[\\\"NextToken\\\"]\\n        else:\\n            break\\n\\n    for asgName in asgNames:\\n        client_asg.detach_instances(\\n            AutoScalingGroupName=asgName,\\n            InstanceIds=[\\n                instanceId,\\n            ],\\n            ShouldDecrementDesiredCapacity=False,\\n        )\\n\\ndef find_security_groups(vpc_id, group_name):\\n    security_groups = client.describe_security_groups(\\n        Filters=[\\n            {\\\"Name\\\": \\\"group-name\\\", \\\"Values\\\": [group_name]},\\n            {\\\"Name\\\": \\\"vpc-id\\\", \\\"Values\\\": [vpc_id]},\\n        ]\\n    )[\\\"SecurityGroups\\\"]\\n    for security_group in security_groups:\\n        if (\\n            security_group[\\\"GroupName\\\"] == group_name\\n            and security_group[\\\"VpcId\\\"] == vpc_id\\n        ):\\n            return security_group\\n    return None\\n\\ndef prepareQuarantine(events, context):\\n    successful = True\\n    msg = \\\"Success\\\"\\n    security_group_id = \\\"\\\"\\n    # quarantinedEC2 = []\\n    # failedQuarantineEC2 = []\\n    quarantineSG = events[\\\"IsolationSecurityGroup\\\"]\\n\\n    # Check if any EC2 attached to auto-scaling-group\\n    deAttachEC2FromAutoScalingGroup(events[\\\"InstanceId\\\"])\\n\\n    # Prepare Quarantine....\\n\\n    vpcId = events[\\\"VpcId\\\"]\\n    try:\\n        security_group = find_security_groups(vpcId, quarantineSG)\\n        security_group_IPPermissions = \\\"\\\"\\n        security_group_IPPermissions_Egress = \\\"\\\"\\n        if security_group is None:\\n            response = client.create_security_group(\\n                GroupName=quarantineSG,\\n                Description=\\\"Isolated security group used to Quarantine EC2\\\",\\n                VpcId=vpcId,\\n            )\\n            security_group_id = response[\\\"GroupId\\\"]\\n            time.sleep(5)\\n            sg = find_security_groups(vpcId, quarantineSG)\\n            security_group_IPPermissions = sg[\\\"IpPermissions\\\"]\\n            security_group_IPPermissions_Egress = sg[\\\"IpPermissionsEgress\\\"]\\n\\n        else:\\n            security_group_id = security_group[\\\"GroupId\\\"]\\n            security_group_IPPermissions = security_group[\\\"IpPermissions\\\"]\\n            security_group_IPPermissions_Egress = security_group[\\n                \\\"IpPermissionsEgress\\\"\\n            ]\\n\\n        if security_group_IPPermissions:\\n            client.revoke_security_group_ingress(\\n                GroupId=security_group_id,\\n                IpPermissions=security_group_IPPermissions,\\n                DryRun=False,\\n            )\\n        if security_group_IPPermissions_Egress:\\n            client.revoke_security_group_egress(\\n                GroupId=security_group_id,\\n                IpPermissions=security_group_IPPermissions_Egress,\\n                DryRun=False,\\n            )\\n    except Exception as e:\\n        msg = str(e)\\n        successful = False\\n\\n    if not successful:\\n        raise Exception(msg)\\n\\n    return security_group_id\"\n    },\n    \"outputs\" : [ {\n      \"Name\" : \"SecurityGroupId\",\n      \"Selector\" : \"$.Payload\",\n      \"Type\" : \"String\"\n    } ]\n  }, {\n    \"name\" : \"createSnapshot\",\n    \"description\" : \"## createSnapshot.\\ncreate Snapshot\\n\",\n    \"action\" : \"aws:executeAwsApi\",\n    \"onFailure\" : \"Abort\",\n    \"timeoutSeconds\" : 300,\n    \"inputs\" : {\n      \"Service\" : \"ec2\",\n      \"Api\" : \"CreateSnapshot\",\n      \"VolumeId\" : \"{{ GetEC2InstanceResources.VolumeId }}\",\n      \"Description\" : \"Snapshot for Quarantine EC2 with # {{ InstanceId }}\"\n    },\n    \"outputs\" : [ {\n      \"Name\" : \"SnapId\",\n      \"Selector\" : \"SnapshotId\",\n      \"Type\" : \"String\"\n    } ]\n  }, {\n    \"name\" : \"verifySnapshot\",\n    \"description\" : \"## verifySnapshot.\\nverify Snapshot\\n\",\n    \"action\" : \"aws:waitForAwsResourceProperty\",\n    \"onFailure\" : \"Abort\",\n    \"timeoutSeconds\" : 600,\n    \"inputs\" : {\n      \"Service\" : \"ec2\",\n      \"Api\" : \"DescribeSnapshots\",\n      \"SnapshotIds\" : [ \"{{createSnapshot.SnapId}}\" ],\n      \"PropertySelector\" : \"Snapshots[0].State\",\n      \"DesiredValues\" : [ \"completed\" ]\n    }\n  }, {\n    \"name\" : \"ModifyInstanceAttribute\",\n    \"description\" : \"## ModifyInstanceAttribute.\\nModify Instance Attribute\\n\",\n    \"action\" : \"aws:executeAwsApi\",\n    \"onFailure\" : \"Abort\",\n    \"timeoutSeconds\" : 300,\n    \"inputs\" : {\n      \"Service\" : \"ec2\",\n      \"Api\" : \"ModifyInstanceAttribute\",\n      \"InstanceId\" : \"{{InstanceId}}\",\n      \"Groups\" : [ \"{{PrepareQuarantineEC2Instance.SecurityGroupId}}\" ]\n    }\n  } ],\n  \"outputs\" : [ \"GetEC2InstanceResources.RevokedSecurityGroupsIds\", \"GetEC2InstanceResources.RevokedSecurityGroupsNames\", \"createSnapshot.SnapId\" ]\n}",
  "CreatedDate": "2023-03-14T16:07:28.688Z",
  "DisplayName": null,
  "DocumentFormat": {
    "Value": "JSON"
  },
  "DocumentType": {
    "Value": "Automation"
  },
  "DocumentVersion": "1",
  "Name": "AWS-QuarantineEC2Instance",
  "Requires": [],
  "ReviewStatus": null,
  "Status": {
    "Value": "Active"
  },
  "StatusInformation": null,
  "VersionName": null,
  "ResponseMetadata": {
    "RequestId": "3ee545c0-2b6f-44c9-984e-0eacdd98d60d",
    "Metadata": {},
    "ChecksumAlgorithm": 0,
    "ChecksumValidationStatus": 0
  },
  "ContentLength": 8820,
  "HttpStatusCode": 200,
  "LoggedAt": "2023-03-20T07:11:58.1562255+00:00"
}
