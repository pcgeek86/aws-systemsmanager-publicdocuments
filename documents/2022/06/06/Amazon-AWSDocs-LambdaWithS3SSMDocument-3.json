{
  "AttachmentsContent": [],
  "Content": "{\n  \"assumeRole\" : \"{{ AutomationAssumeRole }}\",\n  \"description\" : \"Tutorial: Using Amazon Lambda with Amazon S3\\n===\\nThis Automation document sets up a Lambda function that is triggered when a new object is placed into S3. It Automates the [Using Amazon Lambda with Amazon S3 Tutorial](https://docs.aws.amazon.com/lambda/latest/dg/with-s3-example.html)\\n\\nOnce this document is executed, uploading a `.jpg` or `.png` image to the source S3 bucket will automatically trigger the lambda to create a resized thumbnail in the resized S3 bucket.\\n\\nThis tutorial will upload a test image so the source bucket and resized bucket will contain a source and resized image as an example. \\nThe logs for the lambda can be found under the cloudwatch log group `/aws/lambda/CreateThumbnail`\\n\\nPrerequisites\\n---\\nTo run the following Automation document, you must have an [Automation Role](https://docs.aws.amazon.com/systems-manager/latest/userguide/automation-permissions.html) with inline policies enabled to act on the following services: \\n\\n* cloudformation\\n* iam\\n* lambda\\n* s3\\n\\nThis can be achieved by attaching an in-line policy with the following: \\n```\\n{\\n    \\\"Version\\\": \\\"2012-10-17\\\",\\n    \\\"Statement\\\": [\\n        {\\n            \\\"Sid\\\": \\\"VisualEditor0\\\",\\n            \\\"Effect\\\": \\\"Allow\\\",\\n            \\\"Action\\\": [\\n                \\\"cloudformation:*\\\",\\n                \\\"iam:CreateRole\\\",\\n                \\\"iam:DeleteRole\\\",\\n                \\\"iam:DeleteRolePolicy\\\",\\n                \\\"iam:GetRole\\\",\\n                \\\"iam:GetRolePolicy\\\",\\n                \\\"iam:PassRole\\\",\\n                \\\"iam:PutRolePolicy\\\",\\n                \\\"lambda:AddPermission\\\",\\n                \\\"lambda:CreateFunction\\\",\\n                \\\"lambda:DeleteFunction\\\",\\n                \\\"lambda:GetFunction\\\",\\n                \\\"lambda:GetFunctionConfiguration\\\",\\n                \\\"lambda:InvokeFunction\\\",\\n                \\\"lambda:RemovePermission\\\",\\n                \\\"s3:CreateBucket\\\",\\n                \\\"s3:DeleteBucket\\\",\\n                \\\"s3:GetObject\\\",\\n                \\\"s3:PutBucketNotification\\\",\\n                \\\"s3:PutObject\\\",\\n                \\\"s3:DeleteObject\\\"\\n            ],\\n            \\\"Resource\\\": \\\"*\\\"\\n        }\\n    ]\\n}\\n```\\n  \\nResources created\\n---\\n* S3 bucket containing the lambda code\\n* Lambda function that will resize an image to a thumbnail\\n* S3 bucket containing source image\\n* S3 bucket containing resized image\\n* IAM Role for executing the Lambda\\n\\nCleanup\\n---\\nTo remove resources created by this Automation document, navigate to the [Amazon CloudFormation console](https://console.aws.amazon.com/cloudformation/home) and delete the two stacks created.\\n\\n**Important:** In order to properly clean up the stacks, all files in the three S3 buckets will need to be deleted before the stacks can be deleted.\\n\\n*Provide feedback [here](https://docs.aws.amazon.com/forms/aws-doc-feedback?feedback_destination_id=fdb9de10-9bb3-4e90-b330-df8c2533c9dd&topic_url=http://docs.aws.amazon.com/AutomatedTutorials/AWSDocs-LambdaWithS3SSMDocument).*\",\n  \"mainSteps\" : [ {\n    \"action\" : \"aws:createStack\",\n    \"description\" : \"Creates an S3 bucket to host the prepared lambda code\",\n    \"inputs\" : {\n      \"StackName\" : \"LambdaCodeS3Stack\",\n      \"TemplateBody\" : \"Resources:\\n  LambdaCodeBucket:\\n    Type: AWS::S3::Bucket\\n    Properties:\\n      BucketName: !Join\\n        - ''\\n        - - {{ automation:EXECUTION_ID }}\\n          - \\\"-lambda-code\\\"\\n      AccessControl: BucketOwnerFullControl\"\n    },\n    \"name\" : \"createCodeS3Bucket\"\n  }, {\n    \"action\" : \"aws:executeAwsApi\",\n    \"description\" : \"Retrieves the bucket name that will contain the lambda code\",\n    \"inputs\" : {\n      \"Api\" : \"DescribeStackResources\",\n      \"Service\" : \"cloudformation\",\n      \"StackName\" : \"{{createCodeS3Bucket.StackId}}\"\n    },\n    \"name\" : \"getLambdaBucketName\",\n    \"onFailure\" : \"step:deleteLambdaCodeS3Stack\",\n    \"outputs\" : [ {\n      \"Name\" : \"CodeS3BucketName\",\n      \"Selector\" : \"$.StackResources[0].PhysicalResourceId\",\n      \"Type\" : \"String\"\n    } ]\n  }, {\n    \"action\" : \"aws:executeScript\",\n    \"description\" : \"Uploads lambda code to the designated S3 bucket\",\n    \"inputs\" : {\n      \"Handler\" : \"script_handler\",\n      \"InputPayload\" : {\n        \"S3BucketName\" : \"{{getLambdaBucketName.CodeS3BucketName}}\"\n      },\n      \"Runtime\" : \"python3.6\",\n      \"Script\" : \"import urllib.request\\nimport boto3\\nfrom botocore.exceptions import ClientError\\n\\ndef script_handler(events, context):\\n  url = events['S3BucketName']\\n  filename = download_code('https://docs.aws.amazon.com/lambda/latest/dg/samples/CreateThumbnail.zip')\\n  print('downloaded code')\\n  upload_code_to_S3(filename, events['S3BucketName'])\\n  print('uploaded code to s3')\\n\\ndef download_code(url):\\n    filename = \\\"CreateThumbnail.zip\\\"\\n    # Adding information about user agent\\n    opener=urllib.request.build_opener()\\n    opener.addheaders=[('User-Agent','Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/36.0.1941.0 Safari/537.36')]\\n    urllib.request.install_opener(opener)\\n    urllib.request.urlretrieve(url, filename)\\n\\n    return filename\\n\\ndef upload_code_to_S3(filename, bucket_name):\\n    s3 = boto3.client('s3')\\n    try:\\n        response = s3.upload_file(filename, bucket_name, 'CreateThumbnail.zip')\\n    except ClientError as e:\\n              print(e)\\n              \\n              \\n  \\n\"\n    },\n    \"name\" : \"uploadLambdaCode\",\n    \"onFailure\" : \"step:deleteLambdaCodeS3Stack\"\n  }, {\n    \"action\" : \"aws:createStack\",\n    \"description\" : \"Creates the resource stack for the tutorial\",\n    \"inputs\" : {\n      \"Capabilities\" : [ \"CAPABILITY_NAMED_IAM\" ],\n      \"StackName\" : \"LambdaAndS3Stack\",\n      \"TemplateBody\" : \"Resources:\\n  ExecutionRole:\\n    Type: AWS::IAM::Role\\n    Properties:\\n      AssumeRolePolicyDocument:\\n        Version: 2012-10-17\\n        Statement:\\n          - Effect: Allow\\n            Principal:\\n              Service:\\n                - lambda.amazonaws.com\\n            Action: sts:AssumeRole\\n      Path: '/'\\n      \\n  IAMPolicy:\\n    Type: AWS::IAM::Policy\\n    Properties:\\n      Roles: \\n        - !Ref ExecutionRole\\n      PolicyName: AWSLambdaS3Policy\\n      PolicyDocument:\\n        Version: 2012-10-17\\n        Statement:\\n          - Effect: Allow\\n            Action:\\n              - logs:PutLogEvents\\n              - logs:CreateLogGroup\\n              - logs:CreateLogStream\\n            Resource: arn:aws:logs:*:*:*\\n          - Effect: Allow\\n            Action: s3:GetObject\\n            Resource: !Join \\n              - ''\\n              - - \\\"arn:aws:s3:::\\\"\\n                - !Ref LambdaAndS3Source\\n                - \\\"/*\\\"\\n          - Effect: Allow\\n            Action: s3:PutObject\\n            Resource: !Join \\n              - ''\\n              - - \\\"arn:aws:s3:::\\\"\\n                - !Ref LambdaAndS3SourceResized\\n                - \\\"/*\\\"\\n      \\n  LambdaFunction:\\n    Type: AWS::Lambda::Function\\n    Properties:\\n      Runtime: nodejs12.x\\n      FunctionName: CreateThumbnail\\n      Timeout: 30\\n      Role: !GetAtt ExecutionRole.Arn\\n      Handler: index.handler\\n      Code:\\n        S3Bucket: {{getLambdaBucketName.CodeS3BucketName}}\\n        S3Key: CreateThumbnail.zip\\n  \\n  LambdaAndS3Source:\\n    DependsOn: LambdaS3Permission\\n    Type: AWS::S3::Bucket\\n    Properties:\\n      BucketName: !Join\\n        - ''\\n        - - {{ automation:EXECUTION_ID }}\\n          - \\\"-lambda-s3-src\\\"\\n      AccessControl: BucketOwnerFullControl\\n      NotificationConfiguration:\\n        LambdaConfigurations:\\n          - Event: s3:ObjectCreated:*\\n            Function: !GetAtt LambdaFunction.Arn\\n      \\n  LambdaAndS3SourceResized:\\n    Type: AWS::S3::Bucket\\n    Properties:\\n      BucketName: !Join\\n        - ''\\n        - - {{ automation:EXECUTION_ID }}\\n          - \\\"-lambda-s3-src-resized\\\"\\n      AccessControl: BucketOwnerFullControl\\n            \\n  LambdaS3Permission:\\n    DependsOn: LambdaFunction\\n    Type: AWS::Lambda::Permission\\n    Properties:\\n      FunctionName: CreateThumbnail\\n      Principal: s3.amazonaws.com\\n      Action: lambda:InvokeFunction\\n      SourceAccount: !Ref AWS::AccountId\\n      SourceArn: !Sub\\n        - \\\"arn:aws:s3:::${ExecutionId}-lambda-s3-src\\\"\\n        - { ExecutionId: {{ automation:EXECUTION_ID }} }\\n        \\n  \\n\\n\"\n    },\n    \"name\" : \"createLambdaAndS3Stack\",\n    \"onFailure\" : \"step:deleteLambdaCodeFromS3\"\n  }, {\n    \"action\" : \"aws:executeAwsApi\",\n    \"description\" : \"Retrieves the bucket names of the two S3 resources created for later use\",\n    \"inputs\" : {\n      \"Api\" : \"DescribeStackResources\",\n      \"Service\" : \"cloudformation\",\n      \"StackName\" : \"{{createLambdaAndS3Stack.StackId}}\"\n    },\n    \"name\" : \"getStackInformation\",\n    \"onFailure\" : \"step:deleteLambdaCodeFromS3\",\n    \"outputs\" : [ {\n      \"Name\" : \"S3BucketName\",\n      \"Selector\" : \"$.StackResources[2].PhysicalResourceId\",\n      \"Type\" : \"String\"\n    }, {\n      \"Name\" : \"S3ResizedBucketName\",\n      \"Selector\" : \"$.StackResources[3].PhysicalResourceId\",\n      \"Type\" : \"String\"\n    } ]\n  }, {\n    \"action\" : \"aws:executeScript\",\n    \"description\" : \"Uploads an image to the source S3 bucket, which will trigger the lambda to create a resized image in the resized S3 bucket.\",\n    \"inputs\" : {\n      \"Handler\" : \"script_handler\",\n      \"InputPayload\" : {\n        \"S3BucketName\" : \"{{getStackInformation.S3BucketName}}\"\n      },\n      \"Runtime\" : \"python3.6\",\n      \"Script\" : \"import urllib.request\\nimport boto3\\nfrom botocore.exceptions import ClientError\\n\\ndef script_handler(events, context):\\n\\n  filename = download_image()\\n  print('uploading image to ', events['S3BucketName'])\\n  upload_image_to_S3(filename, events['S3BucketName'])\\n\\ndef download_image():\\n    image_url = \\\"https://docs.aws.amazon.com/lambda/latest/dg/images/landing-page/features-destinations.png\\\"\\n    filename = \\\"lambda.png\\\"\\n    # Adding information about user agent\\n    opener=urllib.request.build_opener()\\n    opener.addheaders=[('User-Agent','Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/36.0.1941.0 Safari/537.36')]\\n    urllib.request.install_opener(opener)\\n\\n    urllib.request.urlretrieve(image_url, filename)\\n\\n    return filename\\n\\ndef upload_image_to_S3(filename, bucket_name):\\n    s3 = boto3.client('s3')\\n    try:\\n        response = s3.upload_file(filename, bucket_name, 'lambda.png')\\n    except ClientError as e:\\n        print(e)\\n\\n\"\n    },\n    \"isEnd\" : true,\n    \"name\" : \"uploadImageToS3\",\n    \"onFailure\" : \"step:deleteLambdaCodeFromS3\"\n  }, {\n    \"action\" : \"aws:executeAwsApi\",\n    \"description\" : \"Deletes the lambda code from the S3 bucket so that resources can be cleaned up\",\n    \"inputs\" : {\n      \"Api\" : \"deleteObject\",\n      \"Bucket\" : \"{{getLambdaBucketName.CodeS3BucketName}}\",\n      \"Key\" : \"CreateThumbnail.zip\",\n      \"Service\" : \"s3\"\n    },\n    \"name\" : \"deleteLambdaCodeFromS3\",\n    \"nextStep\" : \"deleteLambdaCodeS3Stack\",\n    \"onFailure\" : \"step:deleteLambdaCodeS3Stack\"\n  }, {\n    \"action\" : \"aws:deleteStack\",\n    \"description\" : \"Deletes the stack containing the S3 bucket that stores the lambda code\",\n    \"inputs\" : {\n      \"StackName\" : \"LambdaCodeS3Stack\"\n    },\n    \"isEnd\" : false,\n    \"name\" : \"deleteLambdaCodeS3Stack\",\n    \"nextStep\" : \"deleteImageFromS3\",\n    \"onFailure\" : \"step:deleteStack\"\n  }, {\n    \"action\" : \"aws:executeAwsApi\",\n    \"description\" : \"Deletes the tutorial image from the S3 bucket so that resources can be cleaned up\",\n    \"inputs\" : {\n      \"Api\" : \"deleteObject\",\n      \"Bucket\" : \"{{getStackInformation.S3BucketName}}\",\n      \"Key\" : \"lambda.png\",\n      \"Service\" : \"s3\"\n    },\n    \"name\" : \"deleteImageFromS3\",\n    \"nextStep\" : \"deleteResizedImageFromS3\",\n    \"onFailure\" : \"step:deleteStack\"\n  }, {\n    \"action\" : \"aws:executeAwsApi\",\n    \"description\" : \"Deletes the resized tutorial image from the resized S3 bucket so that resources can be cleaned up\",\n    \"inputs\" : {\n      \"Api\" : \"deleteObject\",\n      \"Bucket\" : \"{{getStackInformation.S3ResizedBucketName}}\",\n      \"Key\" : \"resized-lambda.png\",\n      \"Service\" : \"s3\"\n    },\n    \"name\" : \"deleteResizedImageFromS3\",\n    \"nextStep\" : \"deleteStack\",\n    \"onFailure\" : \"step:deleteStack\"\n  }, {\n    \"action\" : \"aws:deleteStack\",\n    \"description\" : \"Cleans up stack for the tutorial\",\n    \"inputs\" : {\n      \"StackName\" : \"LambdaAndS3Stack\"\n    },\n    \"name\" : \"deleteStack\"\n  } ],\n  \"parameters\" : {\n    \"AutomationAssumeRole\" : {\n      \"description\" : \"(Required) The ARN of the role that allows Automation to perform the actions on your behalf\",\n      \"type\" : \"String\"\n    }\n  },\n  \"schemaVersion\" : \"0.3\"\n}",
  "CreatedDate": "2021-05-07T22:32:22.187Z",
  "DisplayName": null,
  "DocumentFormat": {
    "Value": "JSON"
  },
  "DocumentType": {
    "Value": "Automation"
  },
  "DocumentVersion": "3",
  "Name": "AWSDocs-LambdaWithS3SSMDocument",
  "Requires": [],
  "ReviewStatus": null,
  "Status": {
    "Value": "Active"
  },
  "StatusInformation": null,
  "VersionName": null,
  "ResponseMetadata": {
    "RequestId": "2380cf8a-b71a-4625-b421-f231f64de4f8",
    "Metadata": {},
    "ChecksumAlgorithm": 0,
    "ChecksumValidationStatus": 0
  },
  "ContentLength": 13872,
  "HttpStatusCode": 200,
  "LoggedAt": "2022-06-06T07:13:03.171377+00:00"
}
