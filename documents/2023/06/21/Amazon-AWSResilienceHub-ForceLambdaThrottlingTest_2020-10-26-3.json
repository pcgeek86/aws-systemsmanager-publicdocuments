{
  "AttachmentsContent": [],
  "Content": "{\n  \"description\" : \"## Id\\nAWSResilienceHub-ForceLambdaThrottlingTest_2020-10-26\\n\\n## Intent\\nTest Lambda behavior when hitting ReservedConcurrentExecutions value\\n\\n## Type\\nTEST\\n\\n## Risk\\nMedium\\n\\n## Requirements\\n  * Lambda Function\\n  * Alarm for metric [Throttles](https://docs.aws.amazon.com/lambda/latest/dg/monitoring-metrics.html) setup for the Lambda function\\n\\n## Permissions required for AutomationAssumeRole\\n  * ssm:StartAutomationExecution\\n  * ssm:GetAutomationExecution\\n  * ssm:GetParameters\\n  * lambda:PutFunctionConcurrency\\n  * lambda:GetFunctionConcurrency\\n  * lambda:DeleteFunctionConcurrency\\n  * cloudwatch:DescribeAlarms\\n  * iam:PassRole\\n\\n## Supports Rollback\\nYes.\\n\\n## Cancellation behavior\\nFail or rollback with description of what is rolled back\\n\\n## Inputs\\n### (Required) AutomationAssumeRole\\n  * type: String\\n  * description: ARN of the IAM role with permissions listed above\\n\\n### (Required) LambdaARN\\n  * type: String\\n  * description: The Lambda function ARN\\n\\n### (Required) ThrottlesAlarmName\\n  * type: String\\n  * description: Alarm for metric `Throttles` setup for the Lambda function\\n\\n### (Optional) IsRollback\\n  * type: String\\n  * description: Run the rollback steps of the document. True or False. If True, the parameter PreviousExecutionId should also be specified\\n  * default: false\\n\\n### (Optional) PreviousExecutionId\\n  * type: String\\n  * description: SSM execution ID of the previous execution of this document for which resources need to be cleaned up\\n\\n## Details\\nThe document injects failure by setting reserved concurrent executions to 0. In case of issues users should\\nmanually revert reserved concurrent execution to the original value.\\n\\n## Steps executed in normal flow\\n  * CheckIsRollback\\n  * AssertAlarmToBeGreenBeforeTest\\n  * BackupReservedConcurrentExecutions\\n  * EnableFunctionThrottling\\n  * AssertAlarmToBeRed\\n  * RollbackCurrentExecution\\n  * RemoveConcurrentExecutions/RollbackConcurrentExecutionsValue\\n  * AssertAlarmToBeGreen\\n\\n## Steps executed in rollback flow\\n  * CheckIsRollback\\n  * PrepareRollbackOfPreviousExecution\\n  * GetInputsFromPreviousExecution\\n  * AssertLambdaARN\\n  * RollbackPreviousExecution\\n  * RollbackConcurrentExecutionsValueOnRollback/RemoveConcurrentExecutionsOnRollback\\n\\n## Outputs\\nNone\",\n  \"schemaVersion\" : \"0.3\",\n  \"assumeRole\" : \"{{ AutomationAssumeRole }}\",\n  \"parameters\" : {\n    \"LambdaARN\" : {\n      \"type\" : \"String\",\n      \"description\" : \"(Required) LambdaARN\"\n    },\n    \"AutomationAssumeRole\" : {\n      \"type\" : \"String\",\n      \"description\" : \"(Required) The ARN of the role that allows Automation to perform the actions on your behalf.\"\n    },\n    \"ThrottlesAlarmName\" : {\n      \"type\" : \"String\",\n      \"description\" : \"(Required) Alarm which should be red after injection of the failure and green after the rollback process in the end of the test.\"\n    },\n    \"IsRollback\" : {\n      \"type\" : \"String\",\n      \"description\" : \"(Optional) Run rollback step of the given previous execution (parameter `PreviousExecutionId`). Can be either true or false.\",\n      \"default\" : \"false\"\n    },\n    \"PreviousExecutionId\" : {\n      \"type\" : \"String\",\n      \"description\" : \"(Optional) Previous execution id for which resources need to be cleaned up.\",\n      \"default\" : \"\"\n    }\n  },\n  \"mainSteps\" : [ {\n    \"name\" : \"CheckIsRollback\",\n    \"description\" : \"Check if document should be executed in rollback mode\",\n    \"action\" : \"aws:branch\",\n    \"inputs\" : {\n      \"Choices\" : [ {\n        \"NextStep\" : \"PrepareRollbackOfPreviousExecution\",\n        \"Variable\" : \"{{IsRollback}}\",\n        \"StringEquals\" : \"true\"\n      } ],\n      \"Default\" : \"AssertAlarmToBeGreenBeforeTest\"\n    }\n  }, {\n    \"name\" : \"PrepareRollbackOfPreviousExecution\",\n    \"description\" : \"Get reserved concurrent executions value that will be used to revert Lambda function to its original state\",\n    \"action\" : \"aws:executeScript\",\n    \"outputs\" : [ {\n      \"Name\" : \"ReservedConcurrentExecutions\",\n      \"Selector\" : \"$.Payload.ReservedConcurrentExecutions\",\n      \"Type\" : \"Integer\"\n    }, {\n      \"Name\" : \"IsConcurrentExecutionsConfigured\",\n      \"Selector\" : \"$.Payload.IsConcurrentExecutionsConfigured\",\n      \"Type\" : \"Boolean\"\n    } ],\n    \"inputs\" : {\n      \"Runtime\" : \"python3.8\",\n      \"Handler\" : \"get_typed_output_from_ssm_step_execution\",\n      \"InputPayload\" : {\n        \"ExecutionId\" : \"{{PreviousExecutionId}}\",\n        \"StepName\" : \"BackupReservedConcurrentExecutions\",\n        \"ResponseField\" : \"ReservedConcurrentExecutions,IsConcurrentExecutionsConfigured\"\n      },\n      \"Script\" : \"import json\\n\\nimport boto3\\nfrom botocore.config import Config\\n\\n\\n\\n\\ndef get_typed_output_from_ssm_step_execution(events, context):\\n    config = Config(retries={'max_attempts': 20, 'mode': 'standard'})\\n    ssm = boto3.client('ssm', config=config)\\n\\n    if 'ExecutionId' not in events or 'StepName' not in events or 'ResponseField' not in events:\\n        raise KeyError('Requires ExecutionId, StepName and ResponseField in events')\\n\\n    ssm_response = ssm.get_automation_execution(AutomationExecutionId=events['ExecutionId'])\\n    for step in ssm_response['AutomationExecution']['StepExecutions']:\\n        if step['StepName'] == events['StepName']:\\n            response_fields = events['ResponseField'].split(',')\\n            output = {}\\n            for response_field in response_fields:\\n                if response_field in step['Outputs']:\\n                    # In order to return output values with specific types (int, str etc) we have to\\n                    # use 'OutputPayload' and convert it to json object, otherwise all values are returned as string.\\n                    output_payload = json.loads(step['Outputs']['OutputPayload'][0])\\n                    output[response_field] = output_payload['Payload'][response_field]\\n                else:\\n                    # If value for given parameter was not found None is set.\\n                    output[response_field] = None\\n            return output\\n\\n    # Could not find step name\\n    raise Exception('Can not find step name % in ssm execution response', events['StepName'])\"\n    }\n  }, {\n    \"name\" : \"GetInputsFromPreviousExecution\",\n    \"description\" : \"Get input from previous execution. This will be used to validate that rollback is executed with the same input\",\n    \"action\" : \"aws:executeScript\",\n    \"outputs\" : [ {\n      \"Name\" : \"LambdaARN\",\n      \"Selector\" : \"$.Payload.LambdaARN[0]\",\n      \"Type\" : \"String\"\n    } ],\n    \"inputs\" : {\n      \"Runtime\" : \"python3.8\",\n      \"Handler\" : \"get_inputs_from_ssm_execution\",\n      \"InputPayload\" : {\n        \"ExecutionId\" : \"{{ PreviousExecutionId }}\"\n      },\n      \"Script\" : \"import json\\n\\nimport boto3\\nfrom botocore.config import Config\\n\\n\\n\\ndef get_inputs_from_ssm_execution(events, context):\\n    output = {}\\n    config = Config(retries={'max_attempts': 20, 'mode': 'standard'})\\n    ssm = boto3.client('ssm', config=config)\\n\\n    if 'ExecutionId' not in events:\\n        raise KeyError('Requires ExecutionId')\\n\\n    if not events['ExecutionId']:\\n        raise KeyError('Requires not empty ExecutionId')\\n\\n    response = ssm.get_automation_execution(AutomationExecutionId=events['ExecutionId'])\\n    response_parameters = response['AutomationExecution']['Parameters']\\n    # TODO DIG-853\\n    for parameter in response_parameters:\\n        output[parameter] = response_parameters[parameter]\\n\\n    return output\"\n    }\n  }, {\n    \"name\" : \"AssertLambdaARN\",\n    \"description\" : \"Validate that rollback is executed with the same input\",\n    \"action\" : \"aws:branch\",\n    \"inputs\" : {\n      \"Choices\" : [ {\n        \"NextStep\" : \"RollbackPreviousExecution\",\n        \"Variable\" : \"{{ GetInputsFromPreviousExecution.LambdaARN }}\",\n        \"StringEquals\" : \"{{ LambdaARN }}\"\n      } ]\n    },\n    \"isEnd\" : true\n  }, {\n    \"name\" : \"RollbackPreviousExecution\",\n    \"description\" : \"Select if reserved concurrent executions has to be removed or restored on rollback\",\n    \"action\" : \"aws:branch\",\n    \"inputs\" : {\n      \"Choices\" : [ {\n        \"NextStep\" : \"RemoveConcurrentExecutionsOnRollback\",\n        \"Variable\" : \"{{PrepareRollbackOfPreviousExecution.IsConcurrentExecutionsConfigured}}\",\n        \"BooleanEquals\" : false\n      }, {\n        \"NextStep\" : \"RollbackConcurrentExecutionsValueOnRollback\",\n        \"Variable\" : \"{{PrepareRollbackOfPreviousExecution.IsConcurrentExecutionsConfigured}}\",\n        \"BooleanEquals\" : true\n      } ]\n    }\n  }, {\n    \"name\" : \"RollbackConcurrentExecutionsValueOnRollback\",\n    \"description\" : \"Restore original reserved concurrent executions value on rollback\",\n    \"action\" : \"aws:executeAwsApi\",\n    \"inputs\" : {\n      \"Service\" : \"lambda\",\n      \"Api\" : \"PutFunctionConcurrency\",\n      \"FunctionName\" : \"{{LambdaARN}}\",\n      \"ReservedConcurrentExecutions\" : \"{{PrepareRollbackOfPreviousExecution.ReservedConcurrentExecutions}}\"\n    },\n    \"isEnd\" : true\n  }, {\n    \"name\" : \"RemoveConcurrentExecutionsOnRollback\",\n    \"description\" : \"Remove reserved concurrent executions on rollback\",\n    \"maxAttempts\" : 5,\n    \"onCancel\" : \"step:TriggerRollback\",\n    \"action\" : \"aws:executeAwsApi\",\n    \"inputs\" : {\n      \"Service\" : \"lambda\",\n      \"Api\" : \"DeleteFunctionConcurrency\",\n      \"FunctionName\" : \"{{LambdaARN}}\"\n    },\n    \"isEnd\" : true\n  }, {\n    \"name\" : \"AssertAlarmToBeGreenBeforeTest\",\n    \"description\" : \"Ensure alarm is green before starting test. Fail if alarm is not green within expected time.\",\n    \"action\" : \"aws:waitForAwsResourceProperty\",\n    \"maxAttempts\" : 1,\n    \"timeoutSeconds\" : 1200,\n    \"onFailure\" : \"Abort\",\n    \"inputs\" : {\n      \"Service\" : \"cloudwatch\",\n      \"Api\" : \"DescribeAlarms\",\n      \"AlarmNames\" : [ \"{{ThrottlesAlarmName}}\" ],\n      \"PropertySelector\" : \"$.MetricAlarms[0].StateValue\",\n      \"DesiredValues\" : [ \"OK\" ]\n    }\n  }, {\n    \"name\" : \"BackupReservedConcurrentExecutions\",\n    \"description\" : \"Get reserved concurrent executions value for rollback\",\n    \"action\" : \"aws:executeScript\",\n    \"outputs\" : [ {\n      \"Name\" : \"IsConcurrentExecutionsConfigured\",\n      \"Selector\" : \"$.Payload.IsConcurrentExecutionsConfigured\",\n      \"Type\" : \"Boolean\"\n    }, {\n      \"Name\" : \"ReservedConcurrentExecutions\",\n      \"Selector\" : \"$.Payload.ReservedConcurrentExecutions\",\n      \"Type\" : \"Integer\"\n    } ],\n    \"inputs\" : {\n      \"Runtime\" : \"python3.8\",\n      \"Handler\" : \"backup_reserved_concurrent_executions\",\n      \"InputPayload\" : {\n        \"LambdaARN\" : \"{{LambdaARN}}\"\n      },\n      \"Script\" : \"import json\\n\\nimport boto3\\nfrom botocore.config import Config\\n\\n\\n\\ndef backup_reserved_concurrent_executions(events: dict, context):\\n    lambda_arn = events.get('LambdaARN')\\n    if not lambda_arn:\\n        raise KeyError('Requires LambdaARN in events')\\n    config = Config(retries={'max_attempts': 20, 'mode': 'standard'})\\n    lambda_client = boto3.client('lambda', config=config)\\n    response = lambda_client.get_function_concurrency(FunctionName=lambda_arn)\\n    is_concurrent_executions_configured = True if response.get('ReservedConcurrentExecutions') else False\\n    reserved_concurrent_executions = response.get('ReservedConcurrentExecutions')\\n    if not reserved_concurrent_executions:\\n        # Value must be presented for SSM automation execution in payload therefore in case if\\n        # 'ReservedConcurrentExecutions' is not configured we set it to -1\\n        reserved_concurrent_executions = -1\\n    return {'IsConcurrentExecutionsConfigured': is_concurrent_executions_configured,\\n            'ReservedConcurrentExecutions': reserved_concurrent_executions}\"\n    }\n  }, {\n    \"name\" : \"EnableFunctionThrottling\",\n    \"description\" : \"Set reserved concurrent executions to 0 to inject failure\",\n    \"onFailure\" : \"step:RollbackCurrentExecution\",\n    \"onCancel\" : \"step:TriggerRollback\",\n    \"action\" : \"aws:executeAwsApi\",\n    \"inputs\" : {\n      \"Service\" : \"lambda\",\n      \"Api\" : \"PutFunctionConcurrency\",\n      \"FunctionName\" : \"{{LambdaARN}}\",\n      \"ReservedConcurrentExecutions\" : 0\n    }\n  }, {\n    \"name\" : \"AssertAlarmToBeRed\",\n    \"description\" : \"Wait for expected alarm to be red after failure is injected\",\n    \"action\" : \"aws:waitForAwsResourceProperty\",\n    \"maxAttempts\" : 1,\n    \"timeoutSeconds\" : 1200,\n    \"onFailure\" : \"step:RollbackCurrentExecution\",\n    \"onCancel\" : \"step:TriggerRollback\",\n    \"inputs\" : {\n      \"Service\" : \"cloudwatch\",\n      \"Api\" : \"DescribeAlarms\",\n      \"AlarmNames\" : [ \"{{ThrottlesAlarmName}}\" ],\n      \"PropertySelector\" : \"$.MetricAlarms[0].StateValue\",\n      \"DesiredValues\" : [ \"ALARM\" ]\n    }\n  }, {\n    \"name\" : \"RollbackCurrentExecution\",\n    \"description\" : \"Select if reserved concurrent executions has to be removed or restored\",\n    \"action\" : \"aws:branch\",\n    \"inputs\" : {\n      \"Choices\" : [ {\n        \"NextStep\" : \"RemoveConcurrentExecutions\",\n        \"Variable\" : \"{{BackupReservedConcurrentExecutions.IsConcurrentExecutionsConfigured}}\",\n        \"BooleanEquals\" : false\n      }, {\n        \"NextStep\" : \"RollbackConcurrentExecutionsValue\",\n        \"Variable\" : \"{{BackupReservedConcurrentExecutions.IsConcurrentExecutionsConfigured}}\",\n        \"BooleanEquals\" : true\n      } ]\n    }\n  }, {\n    \"name\" : \"RemoveConcurrentExecutions\",\n    \"description\" : \"Remove reserved concurrent executions\",\n    \"maxAttempts\" : 5,\n    \"onCancel\" : \"step:TriggerRollback\",\n    \"action\" : \"aws:executeAwsApi\",\n    \"inputs\" : {\n      \"Service\" : \"lambda\",\n      \"Api\" : \"DeleteFunctionConcurrency\",\n      \"FunctionName\" : \"{{LambdaARN}}\"\n    },\n    \"nextStep\" : \"AssertAlarmToBeGreen\"\n  }, {\n    \"name\" : \"RollbackConcurrentExecutionsValue\",\n    \"description\" : \"Restore original reserved concurrent executions value\",\n    \"maxAttempts\" : 5,\n    \"onCancel\" : \"step:TriggerRollback\",\n    \"action\" : \"aws:executeAwsApi\",\n    \"inputs\" : {\n      \"Service\" : \"lambda\",\n      \"Api\" : \"PutFunctionConcurrency\",\n      \"FunctionName\" : \"{{LambdaARN}}\",\n      \"ReservedConcurrentExecutions\" : \"{{BackupReservedConcurrentExecutions.ReservedConcurrentExecutions}}\"\n    },\n    \"nextStep\" : \"AssertAlarmToBeGreen\"\n  }, {\n    \"name\" : \"AssertAlarmToBeGreen\",\n    \"description\" : \"Wait for the alarm to be green after test is complete\",\n    \"action\" : \"aws:waitForAwsResourceProperty\",\n    \"maxAttempts\" : 1,\n    \"timeoutSeconds\" : 1200,\n    \"inputs\" : {\n      \"Service\" : \"cloudwatch\",\n      \"Api\" : \"DescribeAlarms\",\n      \"AlarmNames\" : [ \"{{ThrottlesAlarmName}}\" ],\n      \"PropertySelector\" : \"$.MetricAlarms[0].StateValue\",\n      \"DesiredValues\" : [ \"OK\" ]\n    },\n    \"isEnd\" : true\n  }, {\n    \"name\" : \"TriggerRollback\",\n    \"description\" : \"This step is executed when ssm document is cancelled while it was in progress. This step starts a new execution of document in rollback mode to rollback the changes made as part of normal execution\",\n    \"action\" : \"aws:executeScript\",\n    \"onFailure\" : \"Abort\",\n    \"outputs\" : [ {\n      \"Name\" : \"RollbackExecutionId\",\n      \"Selector\" : \"$.Payload.RollbackExecutionId\",\n      \"Type\" : \"String\"\n    } ],\n    \"inputs\" : {\n      \"Runtime\" : \"python3.8\",\n      \"Handler\" : \"start_rollback_execution\",\n      \"InputPayload\" : {\n        \"ExecutionId\" : \"{{automation:EXECUTION_ID}}\"\n      },\n      \"Script\" : \"import json\\n\\nimport boto3\\nfrom botocore.config import Config\\n\\n\\n\\n\\ndef start_rollback_execution(events, context):\\n    output = {}\\n    config = Config(retries={'max_attempts': 20, 'mode': 'standard'})\\n    ssm = boto3.client('ssm', config=config)\\n\\n    if 'ExecutionId' not in events or not events['ExecutionId']:\\n        raise KeyError('Requires not empty ExecutionId')\\n\\n    response = ssm.get_automation_execution(AutomationExecutionId=events['ExecutionId'])\\n\\n    # Get parameters for current execution and add IsRollback and PreviousExecutionId\\n    response_parameters = response['AutomationExecution']['Parameters']\\n    response_parameters['IsRollback'] = ['true']\\n    response_parameters['PreviousExecutionId'] = [events['ExecutionId']]\\n\\n    rollback_execution_response = ssm.start_automation_execution(\\n        DocumentName=response['AutomationExecution']['DocumentName'],\\n        DocumentVersion=response['AutomationExecution']['DocumentVersion'],\\n        Parameters=response_parameters\\n    )\\n    output['RollbackExecutionId'] = rollback_execution_response['AutomationExecutionId']\\n    return output\"\n    },\n    \"isEnd\" : true\n  } ]\n}",
  "CreatedDate": "2023-02-19T17:24:50.931Z",
  "DisplayName": null,
  "DocumentFormat": {
    "Value": "JSON"
  },
  "DocumentType": {
    "Value": "Automation"
  },
  "DocumentVersion": "3",
  "Name": "AWSResilienceHub-ForceLambdaThrottlingTest_2020-10-26",
  "Requires": [],
  "ReviewStatus": null,
  "Status": {
    "Value": "Active"
  },
  "StatusInformation": null,
  "VersionName": null,
  "ResponseMetadata": {
    "RequestId": "bd401741-9f1c-46ed-8ea7-43b4f8945a56",
    "Metadata": {},
    "ChecksumAlgorithm": 0,
    "ChecksumValidationStatus": 0
  },
  "ContentLength": 17820,
  "HttpStatusCode": 200,
  "LoggedAt": "2023-06-21T07:12:11.9568134+00:00"
}
