{
  "AttachmentsContent": [],
  "Content": "{\n  \"description\" : \"# Id\\n  rds:sop:restore_from_backup:2020-04-01\\n\\n## Intent\\n  SOP to restore a single AZ RDS DB from backup.\\n\\n## Type\\n  SOFTWARE\\n\\n## Risk\\n  MEDIUM\\n\\n## Requirements\\n  * a single AZ RDS DB with backup\\n\\n## Permission required for AutomationAssumeRole\\n  * rds:DeleteDBInstance\\n  * rds:DescribeDBInstances\\n  * rds:DescribeDBSnapshots\\n  * rds:ModifyDBInstance\\n  * rds:RestoreDBInstanceFromDBSnapshot\\n  * kms:DescribeKey\\n  * kms:CreateGrant\\n\\n## Supports Rollback\\n  No.\\n\\n## Inputs\\n### DbInstanceIdentifier\\n  * Description: (Required) The identifier of the source DB instance with at least one read replica\\n  * Type: String\\n### Dryrun\\n  * Description: (Optional) Dryrun indicates a testing run, changes will be rolled back.\\n  * Type: String\\n  * Default: False\\n### AutomationAssumeRole:\\n  * Description: (Required) The ARN of the role that allows Automation to perform the actions on your behalf.\\n  * Type: String\\n### SnapshotId:\\n  * Description: (Optional) The identifier of the snapshot to restore\\n  * Type: String\\n  * Default: '$LATEST'\\n\\n## Details of SSM Document steps:\\n### On Dryrun mode (Dryrun=True):\\n  * Dryrun_TrafficRedirectionBranch\\n  * RecordStartTime\\n  * ResolveSnapshotId\\n  * RestoreSnapshot\\n  * WaitForNewDatabaseToBeAvailable\\n  * RenameParameters\\n  * RenamePreviousDatabaseToOld\\n  * WaitForMasterToBeRenamedToOld\\n  * RenameNewDatabaseToNoSuffix\\n  * WaitForNewToBeRenamedToMaster\\n  * OutputRecoveryTime\\n  * Dryrun_EndBranch\\n  * DeleteRestoredInstance\\n\\n### On Wetrun mode (Dryrun=False):\\n  * Dryrun_TrafficRedirectionBranch\\n  * TrafficRedirectionPause\\n  * RecordStartTime\\n  * ResolveSnapshotId\\n  * RestoreSnapshot\\n  * WaitForNewDatabaseToBeAvailable\\n  * RenameParameters\\n  * RenamePreviousDatabaseToOld\\n  * WaitForMasterToBeRenamedToOld\\n  * RenameNewDatabaseToNoSuffix\\n  * WaitForNewToBeRenamedToMaster\\n  * OutputRecoveryTime\\n  * Dryrun_EndBranch\\n  * EmptyStepForWetrunEnd\\n\\n## Outputs\\n  * OutputRecoveryTime.RecoveryTime: recovery time in seconds\",\n  \"schemaVersion\" : \"0.3\",\n  \"assumeRole\" : \"{{ AutomationAssumeRole }}\",\n  \"parameters\" : {\n    \"Dryrun\" : {\n      \"type\" : \"Boolean\",\n      \"default\" : false,\n      \"description\" : \"(Optional) Dryrun indicates a testing run, changes will be rolled back.\"\n    },\n    \"AutomationAssumeRole\" : {\n      \"type\" : \"String\",\n      \"description\" : \"(Required) The ARN of the role that allows Automation to perform the actions on your behalf\"\n    },\n    \"DbInstanceIdentifier\" : {\n      \"type\" : \"String\",\n      \"description\" : \"(Required) The identifier of the DB instance to be replaced, or base name if dry run\"\n    },\n    \"SnapshotId\" : {\n      \"type\" : \"String\",\n      \"description\" : \"(Optional) The identifier of the snapshot to restore\",\n      \"default\" : \"$LATEST\"\n    }\n  },\n  \"outputs\" : [ \"OutputRecoveryTime.RecoveryTime\" ],\n  \"mainSteps\" : [ {\n    \"name\" : \"Dryrun_TrafficRedirectionBranch\",\n    \"action\" : \"aws:branch\",\n    \"inputs\" : {\n      \"Choices\" : [ {\n        \"NextStep\" : \"TrafficRedirectionPause\",\n        \"Variable\" : \"{{Dryrun}}\",\n        \"BooleanEquals\" : false\n      }, {\n        \"NextStep\" : \"RecordStartTime\",\n        \"Variable\" : \"{{Dryrun}}\",\n        \"BooleanEquals\" : true\n      } ]\n    },\n    \"description\" : \"\"\n  }, {\n    \"name\" : \"TrafficRedirectionPause\",\n    \"action\" : \"aws:pause\",\n    \"inputs\" : {\n      \"Message\" : \"Resume execution once traffic has been redirected from the resource\"\n    }\n  }, {\n    \"name\" : \"RecordStartTime\",\n    \"action\" : \"aws:executeScript\",\n    \"outputs\" : [ {\n      \"Name\" : \"StartTime\",\n      \"Selector\" : \"$.Payload\",\n      \"Type\" : \"String\"\n    } ],\n    \"inputs\" : {\n      \"Runtime\" : \"python3.8\",\n      \"Handler\" : \"script_handler\",\n      \"Script\" : \"def script_handler(events, context):\\n  from datetime import datetime, timezone\\n  return datetime.now(timezone.utc).isoformat()\"\n    }\n  }, {\n    \"name\" : \"ResolveSnapshotId\",\n    \"action\" : \"aws:executeScript\",\n    \"outputs\" : [ {\n      \"Name\" : \"SnapshotId\",\n      \"Selector\" : \"$.Payload\",\n      \"Type\" : \"String\"\n    } ],\n    \"inputs\" : {\n      \"Runtime\" : \"python3.8\",\n      \"Handler\" : \"script_handler\",\n      \"Script\" : \"def script_handler(events, context):\\n  if events['SnapshotId'] != '$LATEST':\\n    return events['SnapshotId']\\n\\n  #return latest snapshot\\n  import boto3\\n  rds = boto3.client('rds')\\n  db_snapshots = rds.describe_db_snapshots(DBInstanceIdentifier = events['DbInstanceIdentifier'])['DBSnapshots']\\n  if not db_snapshots:\\n    raise Exception(\\\"No DB snapshots found for RDS instance \\\" + events['DbInstanceIdentifier'])\\n  sorted_snapshots = sorted(db_snapshots, key=lambda snapshot:snapshot['SnapshotCreateTime'], reverse=True)\\n  return sorted_snapshots[0]['DBSnapshotIdentifier']\",\n      \"InputPayload\" : {\n        \"Dryrun\" : \"{{Dryrun}}\",\n        \"SnapshotId\" : \"{{SnapshotId}}\",\n        \"DbInstanceIdentifier\" : \"{{DbInstanceIdentifier}}\"\n      }\n    }\n  }, {\n    \"name\" : \"RestoreSnapshot\",\n    \"action\" : \"aws:executeScript\",\n    \"outputs\" : [ {\n      \"Name\" : \"RestoredInstanceId\",\n      \"Selector\" : \"$.Payload\",\n      \"Type\" : \"String\"\n    } ],\n    \"inputs\" : {\n      \"Runtime\" : \"python3.8\",\n      \"Handler\" : \"script_handler\",\n      \"Script\" : \"\\nimport logging\\nimport random\\nimport time\\nfrom datetime import datetime, timezone\\nfrom operator import itemgetter\\n\\nimport boto3\\nimport botocore\\nfrom botocore.config import Config\\nfrom botocore.exceptions import ClientError\\n\\nlogger = logging.getLogger(__name__)\\nlogger.setLevel(logging.INFO)\\n\\nvalid_capacity_PostgreSQL = [2, 4, 8, 16, 32, 64]\\n\\nRESTORED_CLUSTER_SUFFIX_FORMAT = '%m-%d-%Y-%H-%M-%S'\\n\\n\\n\\n\\ndef get_execution_instance_id(rds_instance_id, middle, execution_id):\\n    \\\"\\\"\\\"\\n    Valid RDS Instance identifier from string\\n    \\\"\\\"\\\"\\n    # identifier must be less than 63 characters, but we allow 2 chars for extra suffix\\n    # https://docs.aws.amazon.com/cli/latest/reference/rds/create-db-instance.html\\n    max_length = 61\\n    prefix_length = max_length - len(execution_id) - len(middle) - 2  # hyphens\\n    prefix = rds_instance_id[0:prefix_length].rstrip('-')  # two consecutive hyphens is not allowed.\\n    rds_instance_id = f\\\"{prefix}-{middle}-{execution_id}\\\"\\n    return rds_instance_id\\n\\n\\n\\n\\ndef script_handler(events, context):\\n  import boto3\\n  rds = boto3.client('rds')\\n  db_instance_response = rds.describe_db_instances(DBInstanceIdentifier = events['SourceDBInstanceIdentifier'])['DBInstances'][0]\\n  restored_db_instance_id = get_execution_instance_id(events['SourceDBInstanceIdentifier'], 'new', events['AutomationId'])\\n  if db_instance_response['MultiAZ']:\\n    rds.restore_db_instance_from_db_snapshot(\\n      Engine = db_instance_response['Engine'],\\n      StorageType = db_instance_response['StorageType'],\\n      DBSnapshotIdentifier = events['DBSnapshotIdentifier'],\\n      DBInstanceIdentifier = restored_db_instance_id,\\n      DBInstanceClass = db_instance_response['DBInstanceClass'],\\n      DBSubnetGroupName = db_instance_response['DBSubnetGroup']['DBSubnetGroupName'],\\n      Port = db_instance_response[\\\"Endpoint\\\"]['Port'],\\n      MultiAZ = db_instance_response['MultiAZ'],\\n      CopyTagsToSnapshot = db_instance_response['CopyTagsToSnapshot'],\\n      VpcSecurityGroupIds = [db_instance_response['VpcSecurityGroups'][0]['VpcSecurityGroupId']]\\n    )\\n  else:\\n    rds.restore_db_instance_from_db_snapshot(\\n      Engine = db_instance_response['Engine'],\\n      StorageType = db_instance_response['StorageType'],\\n      DBSnapshotIdentifier = events['DBSnapshotIdentifier'],\\n      DBInstanceIdentifier = restored_db_instance_id,\\n      DBInstanceClass = db_instance_response['DBInstanceClass'],\\n      DBSubnetGroupName = db_instance_response['DBSubnetGroup']['DBSubnetGroupName'],\\n      AvailabilityZone = db_instance_response['AvailabilityZone'],\\n      Port = db_instance_response[\\\"Endpoint\\\"]['Port'],\\n      MultiAZ = db_instance_response['MultiAZ'],\\n      CopyTagsToSnapshot = db_instance_response['CopyTagsToSnapshot'],\\n      VpcSecurityGroupIds = [db_instance_response['VpcSecurityGroups'][0]['VpcSecurityGroupId']]\\n    )\\n  return restored_db_instance_id\",\n      \"InputPayload\" : {\n        \"SourceDBInstanceIdentifier\" : \"{{DbInstanceIdentifier}}\",\n        \"DBSnapshotIdentifier\" : \"{{ResolveSnapshotId.SnapshotId}}\",\n        \"AutomationId\" : \"{{automation:EXECUTION_ID}}\"\n      }\n    }\n  }, {\n    \"name\" : \"WaitForNewDatabaseToBeAvailable\",\n    \"action\" : \"aws:waitForAwsResourceProperty\",\n    \"timeoutSeconds\" : 1800,\n    \"inputs\" : {\n      \"Service\" : \"rds\",\n      \"Api\" : \"DescribeDBInstances\",\n      \"DBInstanceIdentifier\" : \"{{RestoreSnapshot.RestoredInstanceId}}\",\n      \"PropertySelector\" : \"$.DBInstances[0].DBInstanceStatus\",\n      \"DesiredValues\" : [ \"available\" ]\n    }\n  }, {\n    \"name\" : \"RenameParameters\",\n    \"action\" : \"aws:executeScript\",\n    \"outputs\" : [ {\n      \"Name\" : \"MasterSourceId\",\n      \"Selector\" : \"$.Payload.MasterSourceId\",\n      \"Type\" : \"String\"\n    }, {\n      \"Name\" : \"MasterTargetId\",\n      \"Selector\" : \"$.Payload.MasterTargetId\",\n      \"Type\" : \"String\"\n    }, {\n      \"Name\" : \"ReplicaSourceId\",\n      \"Selector\" : \"$.Payload.ReplicaSourceId\",\n      \"Type\" : \"String\"\n    }, {\n      \"Name\" : \"ReplicaTargetId\",\n      \"Selector\" : \"$.Payload.ReplicaTargetId\",\n      \"Type\" : \"String\"\n    } ],\n    \"inputs\" : {\n      \"Runtime\" : \"python3.8\",\n      \"Handler\" : \"script_handler\",\n      \"Script\" : \"\\nimport logging\\nimport random\\nimport time\\nfrom datetime import datetime, timezone\\nfrom operator import itemgetter\\n\\nimport boto3\\nimport botocore\\nfrom botocore.config import Config\\nfrom botocore.exceptions import ClientError\\n\\nlogger = logging.getLogger(__name__)\\nlogger.setLevel(logging.INFO)\\n\\nvalid_capacity_PostgreSQL = [2, 4, 8, 16, 32, 64]\\n\\nRESTORED_CLUSTER_SUFFIX_FORMAT = '%m-%d-%Y-%H-%M-%S'\\n\\n\\n\\n\\ndef get_execution_instance_id(rds_instance_id, middle, execution_id):\\n    \\\"\\\"\\\"\\n    Valid RDS Instance identifier from string\\n    \\\"\\\"\\\"\\n    # identifier must be less than 63 characters, but we allow 2 chars for extra suffix\\n    # https://docs.aws.amazon.com/cli/latest/reference/rds/create-db-instance.html\\n    max_length = 61\\n    prefix_length = max_length - len(execution_id) - len(middle) - 2  # hyphens\\n    prefix = rds_instance_id[0:prefix_length].rstrip('-')  # two consecutive hyphens is not allowed.\\n    rds_instance_id = f\\\"{prefix}-{middle}-{execution_id}\\\"\\n    return rds_instance_id\\n\\n\\n\\n\\ndef script_handler(events, context):\\n  masterId = events['DbInstanceIdentifier']\\n  dryrun = events['Dryrun']\\n  automation_id = events['AutomationId']\\n  target_db_instance_id = get_execution_instance_id(masterId, 'new', automation_id)\\n  old_db_instance_id = get_execution_instance_id(masterId, 'old', automation_id)\\n  return {\\n    'MasterSourceId' : target_db_instance_id if dryrun else masterId,\\n    'MasterTargetId' : target_db_instance_id + '-1' if dryrun else old_db_instance_id,\\n    'ReplicaSourceId' : target_db_instance_id + '-1' if dryrun else target_db_instance_id,\\n    'ReplicaTargetId' : target_db_instance_id + '-2' if dryrun else masterId\\n  }\",\n      \"InputPayload\" : {\n        \"Dryrun\" : \"{{Dryrun}}\",\n        \"DbInstanceIdentifier\" : \"{{DbInstanceIdentifier}}\",\n        \"AutomationId\" : \"{{automation:EXECUTION_ID}}\"\n      }\n    }\n  }, {\n    \"name\" : \"RenamePreviousDatabaseToOld\",\n    \"action\" : \"aws:executeAwsApi\",\n    \"maxAttempts\" : 3,\n    \"inputs\" : {\n      \"Service\" : \"rds\",\n      \"Api\" : \"ModifyDBInstance\",\n      \"DBInstanceIdentifier\" : \"{{RenameParameters.MasterSourceId}}\",\n      \"NewDBInstanceIdentifier\" : \"{{RenameParameters.MasterTargetId}}\",\n      \"ApplyImmediately\" : true\n    }\n  }, {\n    \"name\" : \"WaitForMasterToBeRenamedToOld\",\n    \"action\" : \"aws:executeScript\",\n    \"timeoutSeconds\" : 600,\n    \"inputs\" : {\n      \"Runtime\" : \"python3.8\",\n      \"Handler\" : \"script_handler\",\n      \"Script\" : \"def script_handler(events, context):\\n  import boto3, time\\n  rds = boto3.client('rds')\\n  while True:\\n    try:\\n      if rds.describe_db_instances(DBInstanceIdentifier=events[\\\"DBInstanceIdentifier\\\"])[\\\"DBInstances\\\"][0][\\\"DBInstanceStatus\\\"] == \\\"available\\\":\\n        return \\\"Instance successfully renamed to %s\\\" % (events[\\\"DBInstanceIdentifier\\\"])\\n    except rds.exceptions.DBInstanceNotFoundFault:\\n      pass\\n    finally:\\n      time.sleep(30)\",\n      \"InputPayload\" : {\n        \"DBInstanceIdentifier\" : \"{{RenameParameters.MasterTargetId}}\"\n      }\n    }\n  }, {\n    \"name\" : \"RenameNewDatabaseToNoSuffix\",\n    \"action\" : \"aws:executeAwsApi\",\n    \"maxAttempts\" : 3,\n    \"inputs\" : {\n      \"Service\" : \"rds\",\n      \"Api\" : \"ModifyDBInstance\",\n      \"DBInstanceIdentifier\" : \"{{RenameParameters.ReplicaSourceId}}\",\n      \"NewDBInstanceIdentifier\" : \"{{RenameParameters.ReplicaTargetId}}\",\n      \"ApplyImmediately\" : true\n    }\n  }, {\n    \"name\" : \"WaitForNewToBeRenamedToMaster\",\n    \"action\" : \"aws:executeScript\",\n    \"timeoutSeconds\" : 600,\n    \"inputs\" : {\n      \"Runtime\" : \"python3.8\",\n      \"Handler\" : \"script_handler\",\n      \"Script\" : \"def script_handler(events, context):\\n  import boto3, time\\n  rds = boto3.client('rds')\\n  while True:\\n    try:\\n      if rds.describe_db_instances(DBInstanceIdentifier=events[\\\"DBInstanceIdentifier\\\"])[\\\"DBInstances\\\"][0][\\\"DBInstanceStatus\\\"] == \\\"available\\\":\\n        return \\\"Instance successfully renamed to %s\\\" % (events[\\\"DBInstanceIdentifier\\\"])\\n    except rds.exceptions.DBInstanceNotFoundFault:\\n      pass\\n    finally:\\n      time.sleep(30)\",\n      \"InputPayload\" : {\n        \"DBInstanceIdentifier\" : \"{{RenameParameters.ReplicaTargetId}}\"\n      }\n    }\n  }, {\n    \"name\" : \"OutputRecoveryTime\",\n    \"action\" : \"aws:executeScript\",\n    \"inputs\" : {\n      \"Runtime\" : \"python3.8\",\n      \"Handler\" : \"script_handler\",\n      \"Script\" : \"def script_handler(events, context):\\n  from datetime import datetime, timezone\\n  from dateutil import parser\\n  return (datetime.now(timezone.utc) - parser.parse(events['StartTime'])).seconds\",\n      \"InputPayload\" : {\n        \"StartTime\" : \"{{RecordStartTime.StartTime}}\"\n      }\n    },\n    \"outputs\" : [ {\n      \"Name\" : \"RecoveryTime\",\n      \"Selector\" : \"$.Payload\",\n      \"Type\" : \"Integer\"\n    } ]\n  }, {\n    \"name\" : \"Dryrun_EndBranch\",\n    \"action\" : \"aws:branch\",\n    \"inputs\" : {\n      \"Choices\" : [ {\n        \"NextStep\" : \"EmptyStepForWetrunEnd\",\n        \"Variable\" : \"{{Dryrun}}\",\n        \"BooleanEquals\" : false\n      }, {\n        \"NextStep\" : \"DeleteRestoredInstance\",\n        \"Variable\" : \"{{Dryrun}}\",\n        \"BooleanEquals\" : true\n      } ]\n    }\n  }, {\n    \"name\" : \"EmptyStepForWetrunEnd\",\n    \"action\" : \"aws:sleep\",\n    \"isEnd\" : true,\n    \"inputs\" : {\n      \"Duration\" : \"PT1S\"\n    }\n  }, {\n    \"name\" : \"DeleteRestoredInstance\",\n    \"action\" : \"aws:executeAwsApi\",\n    \"maxAttempts\" : 3,\n    \"inputs\" : {\n      \"Service\" : \"rds\",\n      \"Api\" : \"DeleteDBInstance\",\n      \"DBInstanceIdentifier\" : \"{{RenameParameters.ReplicaTargetId}}\",\n      \"SkipFinalSnapshot\" : true,\n      \"DeleteAutomatedBackups\" : true\n    }\n  } ]\n}",
  "CreatedDate": "2023-02-19T17:14:36.298Z",
  "DisplayName": null,
  "DocumentFormat": {
    "Value": "JSON"
  },
  "DocumentType": {
    "Value": "Automation"
  },
  "DocumentVersion": "6",
  "Name": "AWSResilienceHub-RestoreFromRdsBackupSOP_2020-04-01",
  "Requires": [],
  "ReviewStatus": null,
  "Status": {
    "Value": "Active"
  },
  "StatusInformation": null,
  "VersionName": null,
  "ResponseMetadata": {
    "RequestId": "105932a8-5193-4de4-882c-baa22f3e31ec",
    "Metadata": {},
    "ChecksumAlgorithm": 0,
    "ChecksumValidationStatus": 0
  },
  "ContentLength": 16464,
  "HttpStatusCode": 200,
  "LoggedAt": "2023-05-12T07:11:21.4046902+00:00"
}
