{
  "AttachmentsContent": [],
  "Content": "{\n  \"schemaVersion\": \"1.2\",\n  \"description\": \"Scans for or installs Microsoft Windows updates. Includes the option to filter on Microsoft Knowledge Base (KB) article IDs.\",\n  \"parameters\": {\n    \"Action\": {\n      \"type\": \"String\",\n      \"default\": \"Install\",\n      \"description\": \"(Optional) Choose an option to scan for Microsoft Windows updates, or scan for and install updates.\",\n      \"allowedValues\": [\n        \"Install\",\n        \"Scan\"\n      ]\n    },\n    \"AllowReboot\": {\n      \"type\": \"String\",\n      \"default\": \"True\",\n      \"description\": \"(Optional) Specify whether to reboot the instance after installing Windows Updates. The default value is True, which means that instances reboot if any updates are installed. Warning: If you specify False, then some updates might fail to install.\",\n      \"allowedValues\": [\n        \"True\",\n        \"False\"\n      ]\n    },\n    \"IncludeKbs\": {\n      \"type\": \"String\",\n      \"default\": \"\",\n      \"description\": \"(Optional) Specify one or more Microsoft Knowledge Base (KB) article IDs to include. You can install multiple IDs using comma-separated values. Valid formats: KB9876543 or 9876543.\",\n      \"allowedPattern\": \"(^$)|^((KB){0,1}[0-9]{1,7})(,((KB){0,1}[0-9]{1,7}))*$\"\n    },\n    \"ExcludeKbs\": {\n      \"type\": \"String\",\n      \"default\": \"\",\n      \"description\": \"(Optional) Specify one or more Microsoft Knowledge Base (KB) article IDs to exclude. You can exclude multiple IDs using comma-separated values. Valid formats: KB9876543 or 9876543.\",\n      \"allowedPattern\": \"(^$)|^((KB){0,1}[0-9]{1,7})(,((KB){0,1}[0-9]{1,7}))*$\"\n    },\n    \"Categories\": {\n      \"type\": \"String\",\n      \"default\": \"\",\n      \"description\": \"(Optional) Specify one or more update categories. You can filter categories using comma-separated values. Options: Application, Connectors, CriticalUpdates, DefinitionUpdates, DeveloperKits, Drivers, FeaturePacks, Guidance, Microsoft, SecurityUpdates, ServicePacks, Tools, UpdateRollups, Updates. Valid formats include a single entry, for example: CriticalUpdates. Or you can specify a comma separated list: CriticalUpdates,SecurityUpdates\",\n      \"allowedPattern\": \"(^$)|^(Application|Connectors|CriticalUpdates|DefinitionUpdates|DeveloperKits|Drivers|FeaturePacks|Guidance|Microsoft|SecurityUpdates|ServicePacks|Tools|UpdateRollups|Updates)(,(Application|Connectors|CriticalUpdates|DefinitionUpdates|DeveloperKits|Drivers|FeaturePacks|Guidance|Microsoft|SecurityUpdates|ServicePacks|Tools|UpdateRollups|Updates))*$\"\n    },\n    \"SeverityLevels\": {\n      \"type\": \"String\",\n      \"default\": \"\",\n      \"description\": \"(Optional) Specify one or more MSRC severity levels associated with an update. You can filter severity levels using comma-separated values. Options: Critical, Important, Low, Moderate or Unspecified. Valid formats include a single entry, for example: Critical. Or you can specify a comma separated list: Critical,Important,Low.\",\n      \"allowedPattern\": \"(^$)|^(Critical|Important|Low|Moderate|Unspecified)(,(Critical|Important|Low|Moderate|Unspecified))*$\"\n    },\n    \"PublishedDaysOld\": {\n      \"type\": \"String\",\n      \"default\": \"\",\n      \"description\": \"(Optional) Specify the number of days since the updates were published. For example, if you specify 10, then the system returns all updates that were published 10 days or more since the updates were released by Microsoft.\",\n      \"allowedPattern\": \"(^$)|^[0-9]\\\\d*$\"\n    },\n    \"PublishedDateAfter\": {\n      \"type\": \"String\",\n      \"default\": \"\",\n      \"description\": \"(Optional) Specify a published-after date. For example, if you specify 01/01/2017, the system returns all updates publish on or after 01/01/2017.\",\n      \"allowedPattern\": \"(^$)|^(0[1-9]|1[012])[- \\\\/.](0[1-9]|[12][0-9]|3[01])[- \\\\/.]((?:19|20)\\\\d\\\\d)$\"\n    },\n    \"PublishedDateBefore\": {\n      \"type\": \"String\",\n      \"default\": \"\",\n      \"description\": \"(Optional) Specify a published-before date. For example, if you specify 01/01/2017, the system returns all updates published on or before 01/01/2017.\",\n      \"allowedPattern\": \"(^$)|^(0[1-9]|1[012])[- \\\\/.](0[1-9]|[12][0-9]|3[01])[- \\\\/.]((?:19|20)\\\\d\\\\d)$\"\n    },\n    \"DocumentTimeout\": {\n      \"type\": \"String\",\n      \"default\": \"14400\",\n      \"description\": \"SSM document timeout\"\n    }\n  },\n  \"runtimeConfig\": {\n    \"aws:runPowerShellScript\": {\n      \"properties\": [\n        {\n          \"id\": \"0.aws:runPowerShellScript\",\n          \"timeoutSeconds\": \"{{ DocumentTimeout }}\",\n          \"runCommand\": [\n            \"$zipFilename = 'AWSUpdateWindowsInstance_1_4_4_0.zip'\",\n            \"$zipFileHash = 'CD337ADCFBA463DE895B8D8248A3991940ABB03ADF8525ECA1302385D6A1DDA6'\",\n            \"$moduleName = 'AWSUpdateWindowsInstance'\",\n            \"$tempPath = $env:TEMP\",\n            \"$moduleDirectory = Join-Path $tempPath -ChildPath $moduleName\",\n            \"$moduleZipFilePath = Join-Path $tempPath -ChildPath $zipFilename\",\n            \"$moduleManifestPath = Join-Path $moduleDirectory -ChildPath ('{0}.psd1' -f $moduleName)\",\n            \"$action = '{{ Action }}'\",\n            \"[string[]] $includeList = ('{{ IncludeKbs }}').Split(',',[System.StringSplitOptions]::RemoveEmptyEntries)\",\n            \"[string[]] $excludeList = ('{{ ExcludeKbs }}').Split(',',[System.StringSplitOptions]::RemoveEmptyEntries)\",\n            \"[string[]] $categoryList = ('{{ Categories }}').Split(',',[System.StringSplitOptions]::RemoveEmptyEntries)\",\n            \"[string[]] $severityLevelList = ('{{ SeverityLevels }}').Split(',',[System.StringSplitOptions]::RemoveEmptyEntries)\",\n            \"[string]$publishedDateAfter = '{{ PublishedDateAfter }}'\",\n            \"[string]$publishedDateBefore = '{{ PublishedDateBefore }}'\",\n            \"[string]$publishedDaysOld = '{{ PublishedDaysOld }}'\",\n            \"[string]$allowReboot = '{{ AllowReboot }}'\",\n            \"\",\n            \"function Main {\",\n            \"  Test-PreCondition\",\n            \"  Clear-WindowsUpdateModule\",\n            \"  Get-WindowsUpdateModule\",\n            \"  Expand-WindowsUpdateModule\",\n            \"  Invoke-WindowsUpdateModule\",\n            \"}\",\n            \"function Test-PreCondition {\",\n            \"  $osversion = [Environment]::OSVersion.Version\",\n            \"  if ($osversion.Major -le 5) {\",\n            \"    Write-Host 'This document is not supported on Windows Server 2003 or earlier.'\",\n            \"    Exit -1\",\n            \"  }\",\n            \"\",\n            \"  if ($osversion.Version -ge '10.0') {\",\n            \"    $sku = (Get-CimInstance -ClassName Win32_OperatingSystem).OperatingSystemSKU\",\n            \"    if ($sku -eq 143 -or $sku -eq 144) {\",\n            \"      Write-Host 'This document is not supported on Windows 2016 Nano Server.'\",\n            \"      Exit -1\",\n            \"    }\",\n            \"  }\",\n            \"\",\n            \"}\",\n            \"\",\n            \"function Clear-WindowsUpdateModule {\",\n            \"  try {\",\n            \"    if (Test-Path $moduleDirectory) {\",\n            \"      Remove-Item $moduleDirectory -Force -Recurse\",\n            \"    }\",\n            \"    if (Test-Path $moduleZipFilePath) {\",\n            \"      Remove-Item $moduleZipFilePath -Force\",\n            \"    }\",\n            \"  } catch {\",\n            \"    Write-Host \\\"Cleaning Windows update module resulted in error: $($_)\\\"\",\n            \"  }\",\n            \"}\",\n            \"\",\n            \"function Get-WindowsUpdateModule {\",\n            \"  try {\",\n            \"    $ssmAgentService = Get-ItemProperty 'HKLM:SYSTEM\\\\CurrentControlSet\\\\Services\\\\AmazonSSMAgent\\\\' -ErrorAction SilentlyContinue\",\n            \"    if($ssmAgentService -and $ssmAgentService.Version -ge '2.0.533.0') {\",\n            \"      $region = $env:AWS_SSM_REGION_NAME\",\n            \"    }\",\n            \"\",\n            \"    if(-not $region) {\",\n            \"      try {\",\n            \"        $identityDocumentUrl = 'http://169.254.169.254/latest/dynamic/instance-identity/document'\",\n            \"        $region = ((Invoke-WebRequest -UseBasicParsing -uri $identityDocumentUrl).Content | ConvertFrom-Json).region\",\n            \"      } catch {\",\n            \"        $region = 'us-east-1'\",\n            \"      }\",\n            \"    }\",\n            \"\",\n            \"    if ($region.StartsWith('cn-')) {\",\n            \"      $s3Location = 'https://s3.{0}.amazonaws.com.cn/aws-windows-downloads-{0}/PSModules/AWSUpdateWindowsInstance/{1}'\",\n            \"    } elseif($region.StartsWith('us-gov-')) {\",\n            \"      $s3Location = 'https://s3-fips-{0}.amazonaws.com/aws-windows-downloads-{0}/PSModules/AWSUpdateWindowsInstance/{1}'\",\n            \"    } elseif($region -eq 'us-east-1') {\",\n            \"      $s3Location = 'https://s3.amazonaws.com/aws-windows-downloads-{0}/PSModules/AWSUpdateWindowsInstance/{1}'\",\n            \"    } else {\",\n            \"      $s3Location = 'https://aws-windows-downloads-{0}.s3.amazonaws.com/PSModules/AWSUpdateWindowsInstance/{1}'\",\n            \"    }\",\n            \"\",\n            \"    $source = $s3Location -f $region, $zipFilename\",\n            \"    $moduleLocalPath = Join-Path $tempPath -ChildPath $zipFilename\",\n            \"    Start-BitsTransfer -Source $source -Destination $moduleLocalPath\",\n            \"\",\n            \"    $fileStream = New-Object System.IO.FileStream($moduleLocalPath, [System.IO.FileMode]::Open, [System.IO.FileAccess]::Read)\",\n            \"    $sha256 = [System.Security.Cryptography.HashAlgorithm]::Create('System.Security.Cryptography.SHA256CryptoServiceProvider')\",\n            \"    $currentHash = [System.BitConverter]::ToString($sha256.ComputeHash($fileStream), 0).Replace('-', '').ToLowerInvariant()\",\n            \"    $sha256.Dispose()\",\n            \"    $fileStream.Dispose()\",\n            \"\",\n            \"    if ($currentHash -ne $zipFileHash) {\",\n            \"      Write-Host 'The SHA hash of the module does not match the expected value.'\",\n            \"      Exit -1\",\n            \"    }\",\n            \"  } catch {\",\n            \"    Write-Host ('Error encountered while getting the module: {0}.' -f $_.Exception.Message)\",\n            \"    Exit -1\",\n            \"  }\",\n            \"}\",\n            \"\",\n            \"function Expand-WindowsUpdateModule {\",\n            \"  try {\",\n            \"    [System.Reflection.Assembly]::LoadWithPartialName('System.IO.Compression.FileSystem') | Out-Null\",\n            \"    $zip = [System.IO.Compression.ZipFile]::OpenRead($moduleZipFilePath)\",\n            \"    foreach ($item in $zip.Entries) {\",\n            \"      $extractPath = Join-Path $tempPath -ChildPath $item.FullName\",\n            \"      if ($item.Length -eq 0) {\",\n            \"        if (-not (Test-Path $extractPath)) {\",\n            \"          New-Item $extractPath -ItemType Directory | Out-Null\",\n            \"        }\",\n            \"      } else {\",\n            \"        $parentPath = Split-Path $extractPath\",\n            \"        if (-not (Test-Path $parentPath)) {\",\n            \"          New-Item $parentPath -ItemType Directory | Out-Null\",\n            \"        }\",\n            \"        [System.IO.Compression.ZipFileExtensions]::ExtractToFile($item, $extractPath, $true)\",\n            \"      }\",\n            \"    }\",\n            \"  } catch {\",\n            \"    Write-Host ('Error encountered when extracting module file: {0}.' -f $_.Exception.Message)\",\n            \"    Exit -1\",\n            \"  } finally {\",\n            \"    $zip.Dispose()\",\n            \"  }\",\n            \"}\",\n            \"\",\n            \"function Invoke-WindowsUpdateModule {\",\n            \"  Import-Module $moduleManifestPath\",\n            \"  try {\",\n            \"    $root = $PSScriptRoot.Split('\\\\')\",\n            \"    $runCommandId = $root[$root.Count - 3]\",\n            \"  } catch {\",\n            \"    Write-Host ('Error encountered when obtaining the run command id: {0}.' -f $_.Exception.Message)\",\n            \"    Exit -1\",\n            \"  }\",\n            \"  $command = 'Install-AwsUwiWindowsUpdates -Id $runCommandId'\",\n            \"  if ($action -ieq 'Scan') { $command += ' -ListOnly' }\",\n            \"  if ($includeList) { $command += ' -IncludeKbs $($includeList)' }\",\n            \"  if ($excludeList) { $command += ' -ExcludeKbs $($excludeList)' }\",\n            \"  if ($categoryList) { $command += ' -Categories $($categoryList)' }\",\n            \"  if ($severityLevelList) { $command += ' -SeverityLevel $($severityLevelList)' }\",\n            \"  if ($publishedDateAfter) { $command += ' -PublishedDateAfter $($publishedDateAfter)' }\",\n            \"  if ($publishedDateBefore) { $command += ' -PublishedDateBefore $($publishedDateBefore)' }\",\n            \"  if ($publishedDaysOld) { $command += ' -PublishedDaysOld $([int]$publishedDaysOld)' }\",\n            \"  if ($allowReboot -ieq 'False') { $command += ' -NoReboot' }\",\n            \"  Invoke-Expression $command\",\n            \"}\",\n            \"\",\n            \"try {\",\n            \"    Main\",\n            \"} Finally {\",\n            \"   Write-Output 'Patching finished, waiting for storage regeneration before reboot...';\",\n            \"   $Resources = Get-ClusterResource\",\n            \"   $loop = 1;\",\n            \"   while($loop) {\",\n            \"      $allActive = 1;\",\n            \"      ForEach ($res in $Resources) {\",\n            \"           if($res.StorageType -eq 'Storage Pool' -And $res.State -ne 'Online') {\",\n            \"            $allActive = 0;\",\n            \"            Write-Output 'Storage pool $res.Name is not available, waiting...';\",\n            \"          }\",\n            \"      }\",\n            \"      if($allActive) {\",\n            \"        $loop = 0;\",\n            \"        Write-Output 'All storage discs are online'\",\n            \"      }\",\n            \"      start-sleep -seconds 60;\",\n            \"   }\",\n            \"}\"\n          ]\n        }\n      ]\n    }\n  }\n}",
  "CreatedDate": "2020-02-13T12:15:27.953Z",
  "DisplayName": null,
  "DocumentFormat": {
    "Value": "JSON"
  },
  "DocumentType": {
    "Value": "Command"
  },
  "DocumentVersion": "1",
  "Name": "arn:aws:ssm:us-west-2:373220815189:document/AP-InstallWindowsUpdatesSqlCluster",
  "Requires": [],
  "ReviewStatus": null,
  "Status": {
    "Value": "Active"
  },
  "StatusInformation": null,
  "VersionName": null,
  "ResponseMetadata": {
    "RequestId": "38233971-5304-4044-890f-083ddbac3e89",
    "Metadata": {}
  },
  "ContentLength": 14798,
  "HttpStatusCode": 200,
  "LoggedAt": "2022-02-14T07:11:34.7550315+00:00"
}
