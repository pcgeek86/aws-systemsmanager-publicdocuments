{
  "AttachmentsContent": [],
  "Content": "{\n  \"description\": \"The **AWSSupport-ResetLinuxUserPassword** runbook allows you to set or reset the password of a local user. The user and password can be used for serial console access to troubleshoot boot, network configuration, and other issues on Nitro instances. For more information please review [Configure access to the EC2 Serial Console](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/configure-access-to-serial-console.html). The runbook creates a temporary Amazon Elastic Compute Cloud (Amazon EC2) instance in your account and an AWS Identity and Access Management (IAM) role that is attached to the temporary EC2 instance with permissions to retrieve the Secrets Manager secret value containing the password. The runbook stops the target EC2 instance, detaches the root volume, and attach it to the temporary instance where a script is executed using Systems Manager Run Command to set the user password. Then the volume is attached back to your instance. The runbook requires you to provide an AWS Secrets Manager *plaintext* secret containing the password. In case of failure, the runbook creates a new volume from the snapshot and attach it to the target EC2 Instance if you have selected the option to create a snapshot.\\n\\n## Important\\n\\nThe helper EC2 instance subnet must allow access to:\\n> * The Systems Manager endpoints (```ec2messages``` and ```ssmmessages```) via Virtual Private Cloud (VPC) interface endpoints or Internet. For more details refer to: https://docs.aws.amazon.com/systems-manager/latest/userguide/systems-manager-setting-up-ec2.html\\n\\n## AWS Secrets Manager setup\\n\\nThe script retrieves and encrypts the password with a runtime call to Secrets Manager. Follow these steps to create a new AWS Secrets Manager secret:\\n\\n1. Open the Secrets Manager console at https://console.aws.amazon.com/secretsmanager/\\n1. Choose **Store a new secret**.\\n1. On the **Choose secret type** page, choose **Other type of secret**\\n1. In Key/value pairs choose the **Plaintext** tab and enter the password (We recommend setting a password that adheres to a strong password policy).\\n1. For **Encryption key**, choose **aws/secretsmanager** to use the AWS managed key for Secrets Manager.\\n1. On the **Configure secret** page, enter a descriptive **Secret name** and **Description**. Click **Next**\\n1. On the **Configure rotation** page, you can choose to turn on automatic rotation. You can also keep rotation off for now and then turn it on later. Click **Next**\\n1. On the **Review** page, review your secret details, and then choose **Store**.\\n1. Take note of the **Secret ARN**. You will use this value in the ```SecretArn``` runbook parameter.\\n\\nFor more details refer to [Create an AWS Secrets Manager secret](https://docs.aws.amazon.com/secretsmanager/latest/userguide/create_secret.html)\\n\\n\\n### Important\\n>\\n> * Changing the local user password requires the runbook to **stop** your EC2 instance. When the instance is stopped, any data stored in the RAM or the instance store volumes is lost, and the automatic public IPv4 address is released. For more information please review [Stop and start your instance](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Stop_Start.html#instance_stop).\\n> * It is a good practice to make regular backups of your persistent disk data. Consider taking a snapshot of your EBS volumes before running this runbook or leave the ```CreateSnapshot``` parameter as ```Yes```.\\n> * If your EC2 instance EBS volumes are encrypted with a customer managed Key Management Service (KMS) key, make sure the KMS key is not **deleted** or **disabled** or your instance will fail to start.\\n\\n\\n### Supported Operating Systems:\\n\\n> * Amazon Linux 1, Amazon Linux 2, and Amazon Linux 2023\\n> * Ubuntu Server 18.04 LTS, 20.04 LTS, and Ubuntu 22.04 LTS\\n> * SUSE Linux Enterprise Server 15\\n> * Debian 11.\",\n  \"schemaVersion\": \"0.3\",\n  \"assumeRole\": \"{{ AutomationAssumeRole }}\",\n  \"parameters\": {\n    \"InstanceId\": {\n      \"type\": \"AWS::EC2::Instance::Id\",\n      \"description\": \"(Required) The EC2 instance ID of the target instance on which the Linux user password should be set or reset.\"\n    },\n    \"SecretArn\": {\n      \"type\": \"String\",\n      \"description\": \"(Required) The Amazon Resource Name (ARN) of your Secrets Manager secret containing the password. The AWS CloudFormation stack creates a temporary instance with permissions to perform the GetSecretValue operation to this ARN. Make sure that the password is stored as plaintext.\",\n      \"allowedPattern\": \"^arn:(aws|aws-cn|aws-us-gov|aws-iso|aws-iso-b):secretsmanager:[a-z0-9-]{2,20}:[0-9]{12}:secret:[a-zA-Z0-9]{1}[a-zA-Z0-9\\\\/_+=.@-]{1,256}$\"\n    },\n    \"LinuxUserName\": {\n      \"type\": \"String\",\n      \"description\": \"(Optional) The username for which you want to reset the password. Defaults to 'ec2-user'. Please refer to [Manage user accounts on your Linux instance](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/managing-users.html) to see a list of the default user names for Linux Amazon Machine Images (AMIs) provided by AWS.\",\n      \"default\": \"ec2-user\",\n      \"allowedPattern\": \"^[a-zA-Z0-9\\\\\\\\_.@-]{1,32}$\"\n    },\n    \"AutomationAssumeRole\": {\n      \"type\": \"AWS::IAM::Role::Arn\",\n      \"description\": \"(Optional) The Amazon Resource Name (ARN) of the AWS Identity and Access Management (IAM) role that allows Systems Manager Automation to perform the actions on your behalf. If no role is specified, Systems Manager Automation uses the permissions of the user that starts this runbook.\",\n      \"default\": \"\"\n    },\n    \"SecurityGroupId\": {\n      \"type\": \"String\",\n      \"description\": \"(Optional) The security group ID that will be associated to the temporary EC2 instance. If not provided, the default VPC security group is used. Note: The helper instance security group must allow HTTPS (port 443) outbound traffic to the Secrets Manager and Systems Manager endpoints.\",\n      \"allowedPattern\": \"^$|sg\\\\-[a-z0-9]{8,17}$\",\n      \"default\": \"\"\n    },\n    \"SubnetId\": {\n      \"type\": \"String\",\n      \"description\": \"(Optional) The subnet ID for the EC2 helper instance. By default, the same subnet where the provided instance resides is used. IMPORTANT: If you provide a custom subnet, it must be in the same Availability Zone as InstanceId. The helper instance subnet must allow access to the Secrets Manager and Systems Manager endpoints via VPC endpoints or Internet.\",\n      \"allowedPattern\": \"^$|^subnet\\\\-[a-z0-9]{8,17}$\",\n      \"default\": \"\"\n    },\n    \"CreateSnapshot\": {\n      \"type\": \"String\",\n      \"description\": \"(Required) Select \\\"Yes\\\" or \\\"No\\\" to create a snapshot of the target instance root EBS volume before running this automation.\",\n      \"default\": \"Yes\",\n      \"allowedValues\": [\n        \"Yes\",\n        \"No\"\n      ]\n    },\n    \"StopConsent\": {\n      \"type\": \"String\",\n      \"description\": \"(Required) Select \\\"Yes\\\" if you acknowledge that this runbook will stop and start your EC2 instance if it was running in order to detach its root EBS volume. When the instance is stopped, any data stored in the RAM or the instance store volumes is lost, and the automatic public IPv4 address is released. For more information please review [Stop and start your instance](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Stop_Start.html#instance_stop).\",\n      \"default\": \"No\",\n      \"allowedValues\": [\n        \"Yes\",\n        \"No\"\n      ]\n    },\n    \"DeviceName\": {\n      \"type\": \"String\",\n      \"description\": \"(Optional) The device name used to attach the Amazon EBS root volume of your EC2 instance to the temporary EC2 instance. For more information please review [Device names on Linux instances](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/device_naming.html).\",\n      \"default\": \"/dev/xvdf\",\n      \"allowedPattern\": \"^\\\\/dev\\\\/xvd[f-p]$|^\\\\/dev\\\\/sd[f-p]$\"\n    }\n  },\n  \"mainSteps\": [\n    {\n      \"name\": \"CheckStopConsent\",\n      \"action\": \"aws:branch\",\n      \"description\": \"Evaluates explicit consent for stopping the Amazon EC2 Instance.\",\n      \"isCritical\": true,\n      \"isEnd\": true,\n      \"inputs\": {\n        \"Choices\": [\n          {\n            \"NextStep\": \"AssertInitialState\",\n            \"Variable\": \"{{ StopConsent }}\",\n            \"StringEquals\": \"Yes\"\n          }\n        ]\n      }\n    },\n    {\n      \"name\": \"AssertInitialState\",\n      \"action\": \"aws:assertAwsResourceProperty\",\n      \"description\": \"Ensures the EC2 instance status is in \\\"running\\\" or \\\"stopped\\\" state; otherwise the automation ends.\",\n      \"inputs\": {\n        \"Service\": \"ec2\",\n        \"Api\": \"DescribeInstances\",\n        \"InstanceIds\": [\n          \"{{ InstanceId }}\"\n        ],\n        \"PropertySelector\": \"Reservations[0].Instances[0].State.Name\",\n        \"DesiredValues\": [\n          \"running\",\n          \"stopped\"\n        ]\n      }\n    },\n    {\n      \"name\": \"GetInstanceProperties\",\n      \"action\": \"aws:executeAwsApi\",\n      \"description\": \"Gets the EC2 instance properties.\",\n      \"inputs\": {\n        \"Service\": \"ec2\",\n        \"Api\": \"DescribeInstances\",\n        \"InstanceIds\": [\n          \"{{ InstanceId }}\"\n        ]\n      },\n      \"outputs\": [\n        {\n          \"Name\": \"RootDeviceName\",\n          \"Selector\": \"$.Reservations[0].Instances[0].RootDeviceName\",\n          \"Type\": \"String\"\n        },\n        {\n          \"Name\": \"Architecture\",\n          \"Selector\": \"$.Reservations[0].Instances[0].Architecture\",\n          \"Type\": \"String\"\n        },\n        {\n          \"Name\": \"SecurityGroupIds\",\n          \"Selector\": \"$.Reservations[0].Instances[0].SecurityGroups..GroupId\",\n          \"Type\": \"StringList\"\n        },\n        {\n          \"Name\": \"State\",\n          \"Selector\": \"$.Reservations[0].Instances[0].State.Name\",\n          \"Type\": \"String\"\n        },\n        {\n          \"Name\": \"SubnetId\",\n          \"Selector\": \"$.Reservations[0].Instances[0].NetworkInterfaces[0].SubnetId\",\n          \"Type\": \"String\"\n        },\n        {\n          \"Name\": \"Platform\",\n          \"Selector\": \"$.Reservations[0].Instances[0].Platform\",\n          \"Type\": \"String\"\n        },\n        {\n          \"Name\": \"AvailabilityZone\",\n          \"Selector\": \"$.Reservations[0].Instances[0].Placement.AvailabilityZone\",\n          \"Type\": \"String\"\n        },\n        {\n          \"Name\": \"InstanceLifecycle\",\n          \"Selector\": \"$.Reservations[0].Instances[0].InstanceLifecycle\",\n          \"Type\": \"String\"\n        }\n      ]\n    },\n    {\n      \"name\": \"GetInstanceRootVolume\",\n      \"description\": \"Gets the EC2 instance root volume properties.\",\n      \"action\": \"aws:executeAwsApi\",\n      \"inputs\": {\n        \"Service\": \"ec2\",\n        \"Api\": \"DescribeVolumes\",\n        \"Filters\": [\n          {\n            \"Name\": \"attachment.instance-id\",\n            \"Values\": [\n              \"{{ InstanceId }}\"\n            ]\n          },\n          {\n            \"Name\": \"attachment.device\",\n            \"Values\": [\n              \"{{ GetInstanceProperties.RootDeviceName }}\"\n            ]\n          }\n        ]\n      },\n      \"outputs\": [\n        {\n          \"Name\": \"RootDeviceVolumeId\",\n          \"Selector\": \"$.Volumes[0].Attachments[0].VolumeId\",\n          \"Type\": \"String\"\n        },\n        {\n          \"Name\": \"RootDeviceDeleteOnTermination\",\n          \"Selector\": \"$.Volumes[0].Attachments[0].DeleteOnTermination\",\n          \"Type\": \"Boolean\"\n        }\n      ]\n    },\n    {\n      \"name\": \"BranchOnSubnetId\",\n      \"description\": \"Branches the automation depending on whether an custom subnet ID for the target EC2 instance was provided or not.\",\n      \"action\": \"aws:branch\",\n      \"inputs\": {\n        \"Choices\": [\n          {\n            \"NextStep\": \"AssertInstanceRootVolumeIsEbs\",\n            \"Variable\": \"{{ SubnetId }}\",\n            \"StringEquals\": \"\"\n          }\n        ],\n        \"Default\": \"AssertCustomSubnetIsInSameAZAsInstance\"\n      }\n    },\n    {\n      \"name\": \"AssertCustomSubnetIsInSameAZAsInstance\",\n      \"action\": \"aws:assertAwsResourceProperty\",\n      \"description\": \"Ensures the custom subnet is in the same availability zone as the target EC2 instance.\",\n      \"inputs\": {\n        \"Service\": \"ec2\",\n        \"Api\": \"DescribeSubnets\",\n        \"SubnetIds\": [\n          \"{{ SubnetId }}\"\n        ],\n        \"PropertySelector\": \"$.Subnets[0].AvailabilityZone\",\n        \"DesiredValues\": [\n          \"{{ GetInstanceProperties.AvailabilityZone }}\"\n        ]\n      }\n    },\n    {\n      \"name\": \"AssertInstanceRootVolumeIsEbs\",\n      \"description\": \"Ensures the EC2 instance root volume is EBS.\",\n      \"action\": \"aws:assertAwsResourceProperty\",\n      \"inputs\": {\n        \"Service\": \"ec2\",\n        \"Api\": \"DescribeInstances\",\n        \"InstanceIds\": [\n          \"{{ InstanceId }}\"\n        ],\n        \"PropertySelector\": \"$.Reservations[0].Instances[0].RootDeviceType\",\n        \"DesiredValues\": [\n          \"ebs\"\n        ]\n      }\n    },\n    {\n      \"name\": \"AssertInstanceArchitecture\",\n      \"action\": \"aws:assertAwsResourceProperty\",\n      \"description\": \"Ensures the EC2 instance architecture is \\\"arm64\\\" or \\\"x86_64\\\".\",\n      \"inputs\": {\n        \"Service\": \"ec2\",\n        \"Api\": \"DescribeInstances\",\n        \"InstanceIds\": [\n          \"{{ InstanceId }}\"\n        ],\n        \"PropertySelector\": \"$.Reservations[0].Instances[0].Architecture\",\n        \"DesiredValues\": [\n          \"arm64\",\n          \"x86_64\"\n        ]\n      }\n    },\n    {\n      \"name\": \"AssertInstanceStopBehaviorIsStop\",\n      \"action\": \"aws:assertAwsResourceProperty\",\n      \"description\": \"Ensures the EC2 instance shutdown behavior is \\\"stop\\\" and not \\\"terminate\\\".\",\n      \"inputs\": {\n        \"Service\": \"ec2\",\n        \"Api\": \"DescribeInstanceAttribute\",\n        \"InstanceId\": \"{{ InstanceId }}\",\n        \"Attribute\": \"instanceInitiatedShutdownBehavior\",\n        \"PropertySelector\": \"$.InstanceInitiatedShutdownBehavior.Value\",\n        \"DesiredValues\": [\n          \"stop\"\n        ]\n      }\n    },\n    {\n      \"name\": \"AssertInstanceLifecycleIsNotSpot\",\n      \"action\": \"aws:branch\",\n      \"description\": \"Ensures the EC2 instance Lifecycle is not \\\"Spot\\\"; otherwise the automation ends.\",\n      \"isEnd\": true,\n      \"inputs\": {\n        \"Choices\": [\n          {\n            \"NextStep\": \"AssertNotPartOfAutoScalingGroup\",\n            \"Not\": {\n              \"Variable\": \"{{ GetInstanceProperties.InstanceLifecycle }}\",\n              \"StringEquals\": \"spot\"\n            }\n          }\n        ]\n      }\n    },\n    {\n      \"name\": \"AssertNotPartOfAutoScalingGroup\",\n      \"action\": \"aws:executeScript\",\n      \"description\": \"Ensures the EC2 instance is not part of an Amazon EC2 Auto Scaling group by calling the \\\"DescribeAutoScalingInstances\\\" API. If the instance is part of an Amazon EC2 Auto Scaling group, ensures the EC2 instance is in 'Standby' lifecycle state.\",\n      \"timeoutSeconds\": 600,\n      \"inputs\": {\n        \"Runtime\": \"python3.8\",\n        \"Handler\": \"check_autoscaling_resource\",\n        \"InputPayload\": {\n          \"InstanceId\": \"{{ InstanceId }}\"\n        },\n        \"Script\": \"# Copyright 2023 Amazon.com, Inc. or its affiliates. All Rights Reserved.\\n# SPDX-License-Identifier: LicenseRef-.amazon.com.-AmznSL-1.0\\n# Licensed under the Amazon Software License  http://aws.amazon.com/asl/\\n\\nimport boto3\\nfrom botocore.exceptions import ClientError\\n\\nautoscaling = boto3.client('autoscaling')\\n\\ndef check_autoscaling_resource(events, context):\\n    \\n    try:\\n        instances = autoscaling.describe_auto_scaling_instances(\\n            InstanceIds = [ events['InstanceId'] ]\\n        )['AutoScalingInstances']\\n        if instances and instances[0]['LifecycleState'] not in ['Standby']:\\n            raise Exception('The target EC2 instance is part of an EC2 Auto Scaling Group and not in \\\"Standby\\\" lifecycle state')\\n        else:\\n            return\\n\\n    except ClientError as e:\\n        c = e.response['Error']['Code']\\n        m = e.response['Error']['Message']\\n        raise Exception(f'An error occurred when describing Auto Scaling instances: {c}:{m}')\\n\"\n      }\n    },\n    {\n      \"name\": \"CreateEc2HelperInstance\",\n      \"action\": \"aws:createStack\",\n      \"description\": \"Creates a temporary EC2 instance to be used for resetting the user password using AWS CloudFormation.\",\n      \"onFailure\": \"step:DescribeCloudFormationErrorFromStackEvents\",\n      \"onCancel\": \"step:DescribeCloudFormationErrorFromStackEvents\",\n      \"maxAttempts\": 1,\n      \"inputs\": {\n        \"Capabilities\": [\n          \"CAPABILITY_IAM\"\n        ],\n        \"StackName\": \"AWSSupport-ResetLinuxUserPassword-{{ automation:EXECUTION_ID }}\",\n        \"ClientRequestToken\": \"AWSSupport-ResetLinuxUserPassword-{{ automation:EXECUTION_ID }}\",\n        \"TimeoutInMinutes\": 10,\n        \"Parameters\": [\n          {\n            \"ParameterKey\": \"CustomSecurityGroupId\",\n            \"ParameterValue\": \"{{ SecurityGroupId }}\"\n          },\n          {\n            \"ParameterKey\": \"CustomSubnetId\",\n            \"ParameterValue\": \"{{ SubnetId }}\"\n          },\n          {\n            \"ParameterKey\": \"InstanceSubnetId\",\n            \"ParameterValue\": \"{{ GetInstanceProperties.SubnetId }}\"\n          },\n          {\n            \"ParameterKey\": \"Architecture\",\n            \"ParameterValue\": \"{{ GetInstanceProperties.Architecture }}\"\n          },\n          {\n            \"ParameterKey\": \"SecretArn\",\n            \"ParameterValue\": \"{{ SecretArn }}\"\n          },\n          {\n            \"ParameterKey\": \"ExecutionId\",\n            \"ParameterValue\": \"{{ automation:EXECUTION_ID }}\"\n          }\n        ],\n        \"TemplateBody\": \"AWSTemplateFormatVersion: 2010-09-09\\nDescription: Deploy Single EC2 Linux Instance with IAM Instance profile\\nParameters:\\n  CustomSecurityGroupId:\\n    Type: String\\n    Default: ''\\n  CustomSubnetId:\\n    Type: String\\n    Default: ''\\n  InstanceSubnetId:\\n    Type: String\\n    Default: ''\\n  Architecture:\\n    Type: String\\n    AllowedValues:\\n      - arm64\\n      - x86_64\\n  SecretArn:\\n    Type: String\\n  ExecutionId:\\n    Type: String\\n    Default: 00000000-0000-0000-0000-000000000000\\n  AmiId:\\n    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'\\n    Default: /aws/service/ami-amazon-linux-latest/amzn2-ami-kernel-5.10-hvm-x86_64-gp2\\n  AmiIdARM:\\n    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'\\n    Default: /aws/service/ami-amazon-linux-latest/amzn2-ami-kernel-5.10-hvm-arm64-gp2\\nConditions:\\n  IsArchitectureARM: !Equals \\n    - !Ref Architecture\\n    - arm64\\n  UseCustomSecurityGroup: !Not \\n    - !Equals \\n      - !Ref CustomSecurityGroupId\\n      - ''\\n  UseCustomSubnet: !Not \\n    - !Equals \\n      - !Ref CustomSubnetId\\n      - ''\\nResources:\\n  HelperIamInstanceProfileRole:\\n    Type: 'AWS::IAM::Role'\\n    Properties:\\n      AssumeRolePolicyDocument:\\n        Version: 2012-10-17\\n        Statement:\\n          - Effect: Allow\\n            Principal:\\n              Service:\\n                - ec2.amazonaws.com\\n            Action:\\n              - 'sts:AssumeRole'\\n      ManagedPolicyArns:\\n        - !Sub 'arn:${AWS::Partition}:iam::aws:policy/AmazonSSMManagedInstanceCore'\\n        - !Sub 'arn:${AWS::Partition}:iam::aws:policy/AmazonSSMPatchAssociation'\\n      Policies:\\n        - PolicyName: AllowSecretsManagerAccess\\n          PolicyDocument:\\n            Version: 2012-10-17\\n            Statement:\\n              - Effect: Allow\\n                Action:\\n                  - 'secretsmanager:GetSecretValue'\\n                Resource: !Ref SecretArn\\n              - Effect: Allow\\n                Action:\\n                  - 'logs:CreateLogGroup'\\n                  - 'logs:CreateLogStream'\\n                  - 'logs:DescribeLogStreams'\\n                  - 'logs:PutLogEvents'\\n                Resource: '*'\\n  HelperIamInstanceProfile:\\n    Type: 'AWS::IAM::InstanceProfile'\\n    Properties:\\n      Roles:\\n        - !Ref HelperIamInstanceProfileRole\\n  HelperEc2InstanceLaunchTemplate:\\n    Type: AWS::EC2::LaunchTemplate\\n    Properties:\\n      LaunchTemplateData:\\n        MetadataOptions:\\n          HttpEndpoint: enabled\\n          HttpTokens: required\\n          HttpPutResponseHopLimit: 1\\n  HelperEc2Instance:\\n    Type: 'AWS::EC2::Instance'\\n    Properties:\\n      IamInstanceProfile: !Ref HelperIamInstanceProfile\\n      Tags:\\n        - Key: Name\\n          Value: !Sub 'AWSSupport-ResetLinuxUserPassword-${ExecutionId}'\\n      ImageId: !If \\n        - IsArchitectureARM\\n        - !Ref AmiIdARM\\n        - !Ref AmiId\\n      LaunchTemplate:\\n        LaunchTemplateId: !Ref HelperEc2InstanceLaunchTemplate\\n        Version: !GetAtt HelperEc2InstanceLaunchTemplate.LatestVersionNumber\\n      InstanceType: !If \\n        - IsArchitectureARM\\n        - t4g.small\\n        - t3.small\\n      PropagateTagsToVolumeOnCreation: true\\n      BlockDeviceMappings:\\n        - DeviceName: /dev/xvda\\n          Ebs:\\n            VolumeSize: 8\\n            Encrypted: true\\n            VolumeType: gp3\\n            DeleteOnTermination: true\\n      NetworkInterfaces:\\n        - DeleteOnTermination: true\\n          AssociatePublicIpAddress: true\\n          DeviceIndex: '0'\\n          GroupSet:\\n            - !If \\n              - UseCustomSecurityGroup\\n              - !Ref CustomSecurityGroupId\\n              - Ref: AWS::NoValue\\n          SubnetId: !If \\n            - UseCustomSubnet\\n            - !Ref CustomSubnetId\\n            - !Ref InstanceSubnetId\\nOutputs:\\n  HelperInstanceId:\\n    Description: The Instance ID\\n    Value: !Ref HelperEc2Instance\\n\",\n        \"Tags\": [\n          {\n            \"Key\": \"Name\",\n            \"Value\": \"AWSSupport-ResetLinuxUserPassword-{{ automation:EXECUTION_ID }}\"\n          },\n          {\n            \"Key\": \"AWSSupport-ResetLinuxUserPassword-AutomationExecution\",\n            \"Value\": \"{{ automation:EXECUTION_ID }}\"\n          }\n        ]\n      },\n      \"outputs\": [\n        {\n          \"Name\": \"CloudformationStackId\",\n          \"Selector\": \"$.StackId\",\n          \"Type\": \"String\"\n        },\n        {\n          \"Name\": \"CloudformationStackStatus\",\n          \"Selector\": \"$.StackStatus\",\n          \"Type\": \"String\"\n        }\n      ]\n    },\n    {\n      \"name\": \"WaitForEc2HelperInstanceCreation\",\n      \"action\": \"aws:waitForAwsResourceProperty\",\n      \"description\": \"Waits until the Amazon EC2 instance created by the AWS CloudFormation is running.\",\n      \"onFailure\": \"step:DescribeCloudFormationErrorFromStackEvents\",\n      \"onCancel\": \"step:DescribeCloudFormationErrorFromStackEvents\",\n      \"maxAttempts\": 10,\n      \"timeoutSeconds\": 150,\n      \"inputs\": {\n        \"Service\": \"cloudformation\",\n        \"Api\": \"DescribeStacks\",\n        \"StackName\": \"{{ CreateEc2HelperInstance.CloudformationStackId }}\",\n        \"PropertySelector\": \"$.Stacks[0].StackStatus\",\n        \"DesiredValues\": [\n          \"UPDATE_COMPLETE\",\n          \"CREATE_COMPLETE\"\n        ]\n      }\n    },\n    {\n      \"name\": \"FindEc2HelperInstanceId\",\n      \"action\": \"aws:executeAwsApi\",\n      \"description\": \"Gets the ID for the EC2 helper instance created by AWS CloudFormation.\",\n      \"onFailure\": \"step:DescribeCloudFormationErrorFromStackEvents\",\n      \"onCancel\": \"step:DescribeCloudFormationErrorFromStackEvents\",\n      \"inputs\": {\n        \"Service\": \"cloudformation\",\n        \"Api\": \"DescribeStackResource\",\n        \"StackName\": \"{{ CreateEc2HelperInstance.CloudformationStackId }}\",\n        \"LogicalResourceId\": \"HelperEc2Instance\"\n      },\n      \"outputs\": [\n        {\n          \"Name\": \"HelperInstanceId\",\n          \"Selector\": \"$.StackResourceDetail.PhysicalResourceId\",\n          \"Type\": \"String\"\n        }\n      ]\n    },\n    {\n      \"name\": \"WaitForHelperInstanceToBeSsmManaged\",\n      \"action\": \"aws:waitForAwsResourceProperty\",\n      \"description\": \"Waits for the temporary EC2 helper instance to become managed by Systems Manager.\",\n      \"onFailure\": \"step:DescribeCloudFormationErrorFromStackEvents\",\n      \"onCancel\": \"step:DescribeCloudFormationErrorFromStackEvents\",\n      \"timeoutSeconds\": 600,\n      \"inputs\": {\n        \"Service\": \"ssm\",\n        \"Api\": \"DescribeInstanceInformation\",\n        \"InstanceInformationFilterList\": [\n          {\n            \"key\": \"InstanceIds\",\n            \"valueSet\": [\n              \"{{ FindEc2HelperInstanceId.HelperInstanceId }}\"\n            ]\n          }\n        ],\n        \"PropertySelector\": \"$.InstanceInformationList[0].PingStatus\",\n        \"DesiredValues\": [\n          \"Online\"\n        ]\n      }\n    },\n    {\n      \"name\": \"StopInstance\",\n      \"action\": \"aws:changeInstanceState\",\n      \"description\": \"Stops the EC2 instance.\",\n      \"nextStep\": \"BranchIfCreateSnapshot\",\n      \"onFailure\": \"step:ForceStopInstance\",\n      \"onCancel\": \"step:BranchOnPreviousInstanceState\",\n      \"maxAttempts\": 3,\n      \"timeoutSeconds\": 300,\n      \"inputs\": {\n        \"InstanceIds\": [\n          \"{{ InstanceId }}\"\n        ],\n        \"CheckStateOnly\": false,\n        \"DesiredState\": \"stopped\",\n        \"Force\": false\n      }\n    },\n    {\n      \"name\": \"ForceStopInstance\",\n      \"action\": \"aws:changeInstanceState\",\n      \"description\": \"Forces the EC2 instance to stop in case it gets stuck in stopping state.\",\n      \"onFailure\": \"step:BranchOnPreviousInstanceState\",\n      \"onCancel\": \"step:BranchOnPreviousInstanceState\",\n      \"maxAttempts\": 3,\n      \"timeoutSeconds\": 300,\n      \"inputs\": {\n        \"InstanceIds\": [\n          \"{{ InstanceId }}\"\n        ],\n        \"CheckStateOnly\": false,\n        \"DesiredState\": \"stopped\",\n        \"Force\": true\n      }\n    },\n    {\n      \"name\": \"BranchIfCreateSnapshot\",\n      \"action\": \"aws:branch\",\n      \"description\": \"Branches the automation depending on whether an snapshot of the target EC2 instance EBS root volume was requested or not.\",\n      \"isEnd\": true,\n      \"inputs\": {\n        \"Choices\": [\n          {\n            \"NextStep\": \"CreateSnapshot\",\n            \"Variable\": \"{{ CreateSnapshot }}\",\n            \"StringEquals\": \"Yes\"\n          },\n          {\n            \"NextStep\": \"DetachRootEbsVolumeFromInstance\",\n            \"Variable\": \"{{ CreateSnapshot }}\",\n            \"StringEquals\": \"No\"\n          }\n        ]\n      }\n    },\n    {\n      \"name\": \"CreateSnapshot\",\n      \"action\": \"aws:executeAwsApi\",\n      \"description\": \"Creates an snapshot of the target EC2 instance root EBS volume.\",\n      \"onFailure\": \"step:BranchOnPreviousInstanceState\",\n      \"onCancel\": \"step:BranchOnPreviousInstanceState\",\n      \"maxAttempts\": 3,\n      \"inputs\": {\n        \"Service\": \"ec2\",\n        \"Api\": \"CreateSnapshot\",\n        \"VolumeId\": \"{{ GetInstanceRootVolume.RootDeviceVolumeId }}\"\n      },\n      \"outputs\": [\n        {\n          \"Name\": \"SnapshotId\",\n          \"Selector\": \"SnapshotId\",\n          \"Type\": \"String\"\n        }\n      ]\n    },\n    {\n      \"name\": \"WaitForSnapshotCompleted\",\n      \"action\": \"aws:waitForAwsResourceProperty\",\n      \"description\": \"Waits for the snapshot to be in \\\"completed\\\" state.\",\n      \"onFailure\": \"step:BranchOnPreviousInstanceState\",\n      \"onCancel\": \"step:BranchOnPreviousInstanceState\",\n      \"maxAttempts\": 3,\n      \"inputs\": {\n        \"Service\": \"ec2\",\n        \"Api\": \"DescribeSnapshots\",\n        \"SnapshotIds\": [\n          \"{{ CreateSnapshot.SnapshotId }}\"\n        ],\n        \"PropertySelector\": \"$.Snapshots[0].State\",\n        \"DesiredValues\": [\n          \"completed\"\n        ]\n      }\n    },\n    {\n      \"name\": \"DetachRootEbsVolumeFromInstance\",\n      \"action\": \"aws:executeAwsApi\",\n      \"description\": \"Detaches the EBS root volume from the target EC2 instance.\",\n      \"onFailure\": \"step:AttachRootEbsVolumeBackToInstance\",\n      \"onCancel\": \"step:AttachRootEbsVolumeBackToInstance\",\n      \"maxAttempts\": 3,\n      \"inputs\": {\n        \"Service\": \"ec2\",\n        \"Api\": \"DetachVolume\",\n        \"VolumeId\": \"{{ GetInstanceRootVolume.RootDeviceVolumeId }}\"\n      }\n    },\n    {\n      \"name\": \"WaitForInstanceRootVolumeToBeDetached\",\n      \"description\": \"Waits for the EBS root volume to be detached from the target EC2 instance.\",\n      \"action\": \"aws:waitForAwsResourceProperty\",\n      \"onFailure\": \"step:AttachRootEbsVolumeBackToInstance\",\n      \"onCancel\": \"step:AttachRootEbsVolumeBackToInstance\",\n      \"timeoutSeconds\": 180,\n      \"inputs\": {\n        \"Service\": \"ec2\",\n        \"Api\": \"DescribeVolumes\",\n        \"VolumeIds\": [\n          \"{{ GetInstanceRootVolume.RootDeviceVolumeId }}\"\n        ],\n        \"PropertySelector\": \"$.Volumes[0].State\",\n        \"DesiredValues\": [\n          \"available\"\n        ]\n      }\n    },\n    {\n      \"name\": \"AttachRootEbsVolumeToHelperInstance\",\n      \"action\": \"aws:executeAwsApi\",\n      \"description\": \"Attaches the root EBS volume to the helper EC2 instance.\",\n      \"onFailure\": \"step:AttachRootEbsVolumeBackToInstance\",\n      \"onCancel\": \"step:AttachRootEbsVolumeBackToInstance\",\n      \"maxAttempts\": 3,\n      \"inputs\": {\n        \"Service\": \"ec2\",\n        \"Api\": \"AttachVolume\",\n        \"Device\": \"{{ DeviceName }}\",\n        \"InstanceId\": \"{{ FindEc2HelperInstanceId.HelperInstanceId }}\",\n        \"VolumeId\": \"{{ GetInstanceRootVolume.RootDeviceVolumeId }}\"\n      }\n    },\n    {\n      \"name\": \"WaitForInstanceRootVolumeToBeAttachedToHelperInstance\",\n      \"description\": \"Waits for the EBS root volume to be attached to the helper EC2 instance.\",\n      \"action\": \"aws:waitForAwsResourceProperty\",\n      \"onFailure\": \"step:AttachRootEbsVolumeBackToInstance\",\n      \"onCancel\": \"step:AttachRootEbsVolumeBackToInstance\",\n      \"timeoutSeconds\": 180,\n      \"inputs\": {\n        \"Service\": \"ec2\",\n        \"Api\": \"DescribeVolumes\",\n        \"VolumeIds\": [\n          \"{{ GetInstanceRootVolume.RootDeviceVolumeId }}\"\n        ],\n        \"PropertySelector\": \"$.Volumes[0].State\",\n        \"DesiredValues\": [\n          \"in-use\"\n        ]\n      }\n    },\n    {\n      \"name\": \"SetPasswordForLinuxUser\",\n      \"action\": \"aws:runCommand\",\n      \"description\": \"Resets the target user password by running a shell script using Systems Manager Run Command on the helper EC2 instance.\",\n      \"onFailure\": \"step:DetachEbsRootVolumeFromHelperInstanceAfterError\",\n      \"onCancel\": \"step:AttachRootEbsVolumeBackToInstance\",\n      \"isCritical\": true,\n      \"inputs\": {\n        \"DocumentName\": \"AWS-RunShellScript\",\n        \"InstanceIds\": [\n          \"{{ FindEc2HelperInstanceId.HelperInstanceId }}\"\n        ],\n        \"Parameters\": {\n          \"commands\": [\n            \"# Copyright 2023 Amazon.com, Inc. or its affiliates. All Rights Reserved.\",\n            \"# SPDX-License-Identifier: LicenseRef-.amazon.com.-AmznSL-1.0\",\n            \"# Licensed under the Amazon Software License  http://aws.amazon.com/asl/\",\n            \"\",\n            \"set +o history\",\n            \"\",\n            \"function throw()\",\n            \"{\",\n            \"    disk={{DeviceName}}\",\n            \"    echo $(cat /etc/os-release | grep '^NAME=')\",\n            \"    echo $(cat /etc/os-release | grep '^VERSION_ID=')\",\n            \"    echo $(uname -r)\",\n            \"    echo $(fdisk -l {{DeviceName}})\",\n            \"    echo $(lsblk)\",\n            \"    echo \\\"Error: $1\\\" >&2 # Send message to stderr.\",\n            \"    exit 1\",\n            \"}\",\n            \"\",\n            \"# Create variables for input parameters\",\n            \"user_name={{LinuxUserName}}\",\n            \"secret_arn={{SecretArn}}\",\n            \"volume_id={{GetInstanceRootVolume.RootDeviceVolumeId}}\",\n            \"region={{global:REGION}}\",\n            \"partition=\\\"\\\"\",\n            \"disk={{DeviceName}}\",\n            \"\",\n            \"# If the user name is empty, defaults to \\\"ec2-user\\\"\",\n            \"if [[ -z $user_name ]]; then user_name=\\\"ec2-user\\\"; fi\",\n            \"\",\n            \"# Create mount folder\",\n            \"mount_dir=\\\"/awssupport\\\"; mkdir -p $mount_dir\",\n            \"\",\n            \"if [[ -c /dev/xen/xenbus ]]; then\",\n            \"  partition=$(fdisk -l $disk | awk \\\"/Device/,EOF\\\" | grep \\\"/dev/xvd.*Linux\\\" | grep -v  boot | cut -d \\\" \\\" -f 1)\",\n            \"else\",\n            \"  for device in $(ls /sys/devices/pci*/*/nvme/nvme*/serial); do\",\n            \"    if grep ${volume_id/-/} $device >/dev/null 2>&1; then\",\n            \"      disk=/dev/$(cat ${device/serial/nvme*}/uevent | grep DEVNAME | cut -d \\\"=\\\" -f 2)\",\n            \"    fi\",\n            \"  done\",\n            \"  partition=$(fdisk -l $disk | awk \\\"/Device/,EOF\\\" | grep \\\"/dev/nvme.*Linux\\\" | grep -v  boot | cut -d \\\" \\\" -f 1)\",\n            \"fi\",\n            \"\",\n            \"[[ -z $partition ]] && throw \\\"An error occurred when trying to find the partition for disk $disk\\\"\",\n            \"\",\n            \"# Mount the target instance Amazon EBS root volume\",\n            \"mount $partition $mount_dir >/dev/null 2>&1 || {\",\n            \"  mount -o nouuid $partition $mount_dir >/dev/null 2>&1 || throw \\\"An error occurred when trying to mount the attached volume $volume_id\\\"\",\n            \"}\",\n            \"echo \\\"Attached volume $volume_id with partition $partition mounted successfully\\\"\",\n            \"\",\n            \"# Try to get the Secrets Manager secret ARN to test access to the secret\",\n            \"aws secretsmanager get-secret-value --secret-id $secret_arn --region $region --output text --query ARN >/dev/null 2>&1 || throw \\\"An error occurred when trying to get $secret_arn\\\"\",\n            \"\",\n            \"# Change the use password using chpasswd\",\n            \"if echo $user_name:$(aws secretsmanager get-secret-value --secret-id $secret_arn --region $region --output text --query SecretString) | chroot $mount_dir /usr/sbin/chpasswd; then\",\n            \"  echo \\\"Password successfully set for $user_name\\\"\",\n            \"  # Unmount the target instance Amazon EBS root volume\",\n            \"  umount $mount_dir >/dev/null 2>&1 || throw \\\"An error occurred when trying to unmount the attached volume $volume_id\\\"\",\n            \"  echo \\\"Attached volume $volume_id unmounted successfully\\\"\",\n            \"  exit 0\",\n            \"else\",\n            \"  echo \\\"An error $result occurred when trying to set the password for $user_name\\\"\",\n            \"  # Unmount the target instance Amazon EBS root volume\",\n            \"  umount $mount_dir >/dev/null 2>&1 || throw \\\"An error occurred when trying to unmount the attached volume $volume_id\\\"\",\n            \"  exit 1\",\n            \"fi\"\n          ]\n        },\n        \"CloudWatchOutputConfig\": {\n          \"CloudWatchLogGroupName\": \"/aws/ssm/AWS-RunShellScript\",\n          \"CloudWatchOutputEnabled\": true\n        },\n        \"TimeoutSeconds\": 240\n      }\n    },\n    {\n      \"name\": \"DetachEbsRootVolumeFromHelperInstance\",\n      \"action\": \"aws:executeAwsApi\",\n      \"description\": \"Detaches the EBS root volume from the helper EC2 instance.\",\n      \"onFailure\": \"step:RestoreRootVolumeIfSnapshot\",\n      \"onCancel\": \"step:AttachRootEbsVolumeBackToInstance\",\n      \"maxAttempts\": 3,\n      \"inputs\": {\n        \"Service\": \"ec2\",\n        \"Api\": \"DetachVolume\",\n        \"VolumeId\": \"{{ GetInstanceRootVolume.RootDeviceVolumeId }}\"\n      }\n    },\n    {\n      \"name\": \"WaitForInstanceRootVolumeToBeDetachedFromHelperInstance\",\n      \"description\": \"Waits for the EBS root volume to be detached to the helper EC2 instance.\",\n      \"action\": \"aws:waitForAwsResourceProperty\",\n      \"onCancel\": \"step:AttachRootEbsVolumeBackToInstance\",\n      \"onFailure\": \"step:RestoreRootVolumeIfSnapshot\",\n      \"nextStep\": \"AttachRootEbsVolumeBackToInstance\",\n      \"timeoutSeconds\": 180,\n      \"inputs\": {\n        \"Service\": \"ec2\",\n        \"Api\": \"DescribeVolumes\",\n        \"VolumeIds\": [\n          \"{{ GetInstanceRootVolume.RootDeviceVolumeId }}\"\n        ],\n        \"PropertySelector\": \"$.Volumes[0].State\",\n        \"DesiredValues\": [\n          \"available\"\n        ]\n      }\n    },\n    {\n      \"name\": \"DetachEbsRootVolumeFromHelperInstanceAfterError\",\n      \"action\": \"aws:executeAwsApi\",\n      \"description\": \"Detaches the EBS root volume from the helper EC2 instance after an error.\",\n      \"onFailure\": \"step:RestoreRootVolumeIfSnapshot\",\n      \"onCancel\": \"step:AttachRootEbsVolumeBackToInstance\",\n      \"maxAttempts\": 3,\n      \"inputs\": {\n        \"Service\": \"ec2\",\n        \"Api\": \"DetachVolume\",\n        \"VolumeId\": \"{{ GetInstanceRootVolume.RootDeviceVolumeId }}\"\n      }\n    },\n    {\n      \"name\": \"WaitForInstanceRootVolumeToBeDetachedFromHelperInstanceAfterError\",\n      \"description\": \"Waits for the EBS root volume to be detached from the helper EC2 instance after an error.\",\n      \"action\": \"aws:waitForAwsResourceProperty\",\n      \"onFailure\": \"step:RestoreRootVolumeIfSnapshot\",\n      \"onCancel\": \"step:AttachRootEbsVolumeBackToInstance\",\n      \"timeoutSeconds\": 180,\n      \"inputs\": {\n        \"Service\": \"ec2\",\n        \"Api\": \"DescribeVolumes\",\n        \"VolumeIds\": [\n          \"{{ GetInstanceRootVolume.RootDeviceVolumeId }}\"\n        ],\n        \"PropertySelector\": \"$.Volumes[0].State\",\n        \"DesiredValues\": [\n          \"available\"\n        ]\n      },\n      \"isCritical\": \"true\"\n    },\n    {\n      \"name\": \"RestoreRootVolumeIfSnapshot\",\n      \"action\": \"aws:branch\",\n      \"description\": \"Branches the automation depending on whether a snapshot of the root volume was requested to determine the recovery path in case of failure.\",\n      \"inputs\": {\n        \"Choices\": [\n          {\n            \"NextStep\": \"CreateNewRootVolumeFromSnapshot\",\n            \"Variable\": \"{{ CreateSnapshot }}\",\n            \"StringEquals\": \"Yes\"\n          },\n          {\n            \"NextStep\": \"AttachRootEbsVolumeBackToInstance\",\n            \"Variable\": \"{{ CreateSnapshot }}\",\n            \"StringEquals\": \"No\"\n          }\n        ]\n      }\n    },\n    {\n      \"name\": \"AttachRootEbsVolumeBackToInstance\",\n      \"action\": \"aws:executeAwsApi\",\n      \"description\": \"Attaches the root EBS volume back to target EC2 instance.\",\n      \"nextStep\": \"WaitForAttachRootEbsVolumeBackToInstance\",\n      \"onFailure\": \"step:BranchOnPreviousInstanceState\",\n      \"onCancel\": \"step:BranchOnPreviousInstanceState\",\n      \"maxAttempts\": 3,\n      \"inputs\": {\n        \"Service\": \"ec2\",\n        \"Api\": \"AttachVolume\",\n        \"Device\": \"{{ GetInstanceProperties.RootDeviceName }}\",\n        \"VolumeId\": \"{{ GetInstanceRootVolume.RootDeviceVolumeId }}\",\n        \"InstanceId\": \"{{ InstanceId }}\"\n      }\n    },\n    {\n      \"name\": \"WaitForAttachRootEbsVolumeBackToInstance\",\n      \"description\": \"Waits for the EBS root volume to be attached to the EC2 instance.\",\n      \"action\": \"aws:waitForAwsResourceProperty\",\n      \"nextStep\": \"BranchOnPreviousInstanceState\",\n      \"onFailure\": \"step:BranchOnPreviousInstanceState\",\n      \"onCancel\": \"step:BranchOnPreviousInstanceState\",\n      \"timeoutSeconds\": 180,\n      \"inputs\": {\n        \"Service\": \"ec2\",\n        \"Api\": \"DescribeVolumes\",\n        \"VolumeIds\": [\n          \"{{ GetInstanceRootVolume.RootDeviceVolumeId }}\"\n        ],\n        \"PropertySelector\": \"$.Volumes[0].State\",\n        \"DesiredValues\": [\n          \"in-use\"\n        ]\n      }\n    },\n    {\n      \"name\": \"CreateNewRootVolumeFromSnapshot\",\n      \"action\": \"aws:executeAwsApi\",\n      \"description\": \"Creates a new EBS volume from the target EC2 instance root volume snapshot.\",\n      \"onFailure\": \"step:WaitCloudFormationStackRollback\",\n      \"onCancel\": \"step:WaitCloudFormationStackRollback\",\n      \"maxAttempts\": 3,\n      \"inputs\": {\n        \"Service\": \"ec2\",\n        \"Api\": \"CreateVolume\",\n        \"AvailabilityZone\": \"{{ GetInstanceProperties.AvailabilityZone }}\",\n        \"SnapshotId\": \"{{ CreateSnapshot.SnapshotId }}\"\n      },\n      \"outputs\": [\n        {\n          \"Name\": \"NewRootVolumeId\",\n          \"Selector\": \"$.VolumeId\",\n          \"Type\": \"String\"\n        }\n      ]\n    },\n    {\n      \"name\": \"WaitForVolumeAvailable\",\n      \"action\": \"aws:waitForAwsResourceProperty\",\n      \"description\": \"Waits until the new EBS volume is in \\\"available\\\" state\",\n      \"onFailure\": \"step:WaitCloudFormationStackRollback\",\n      \"onCancel\": \"step:WaitCloudFormationStackRollback\",\n      \"timeoutSeconds\": 180,\n      \"maxAttempts\": 3,\n      \"inputs\": {\n        \"Service\": \"ec2\",\n        \"Api\": \"DescribeVolumes\",\n        \"PropertySelector\": \"Volumes[0].State\",\n        \"DesiredValues\": [\n          \"available\"\n        ],\n        \"VolumeIds\": [\n          \"{{ CreateNewRootVolumeFromSnapshot.NewRootVolumeId }}\"\n        ]\n      }\n    },\n    {\n      \"name\": \"AttachNewRootVolumeFromSnapshot\",\n      \"action\": \"aws:executeAwsApi\",\n      \"description\": \"Attaches the new EBS volume to the target instance as root volume.\",\n      \"onFailure\": \"step:WaitCloudFormationStackRollback\",\n      \"onCancel\": \"step:WaitCloudFormationStackRollback\",\n      \"maxAttempts\": 3,\n      \"inputs\": {\n        \"Service\": \"ec2\",\n        \"Api\": \"AttachVolume\",\n        \"Device\": \"{{ GetInstanceProperties.RootDeviceName }}\",\n        \"VolumeId\": \"{{ CreateNewRootVolumeFromSnapshot.NewRootVolumeId }}\",\n        \"InstanceId\": \"{{ InstanceId }}\"\n      }\n    },\n    {\n      \"name\": \"VerifyNewRootVolumeAttached\",\n      \"action\": \"aws:waitForAwsResourceProperty\",\n      \"description\": \"Waits for the EBS volume to be in \\\"attached\\\" state.\",\n      \"onFailure\": \"step:WaitCloudFormationStackRollback\",\n      \"onCancel\": \"step:WaitCloudFormationStackRollback\",\n      \"nextStep\": \"BranchOnPreviousInstanceState\",\n      \"timeoutSeconds\": 180,\n      \"maxAttempts\": 3,\n      \"inputs\": {\n        \"Service\": \"ec2\",\n        \"Api\": \"DescribeVolumes\",\n        \"PropertySelector\": \"$.Volumes[0].Attachments[0].State\",\n        \"DesiredValues\": [\n          \"attached\"\n        ],\n        \"VolumeIds\": [\n          \"{{ CreateNewRootVolumeFromSnapshot.NewRootVolumeId }}\"\n        ]\n      }\n    },\n    {\n      \"name\": \"DescribeCloudFormationErrorFromStackEvents\",\n      \"description\": \"Describes the AWS CloudFormation stack events if the runbooks fails to create or update the AWS CloudFormation stack.\",\n      \"onCancel\": \"step:WaitCloudFormationStackRollback\",\n      \"onFailure\": \"step:WaitCloudFormationStackRollback\",\n      \"nextStep\": \"WaitCloudFormationStackRollback\",\n      \"action\": \"aws:executeAwsApi\",\n      \"maxAttempts\": 3,\n      \"inputs\": {\n        \"Service\": \"cloudformation\",\n        \"Api\": \"DescribeStackEvents\",\n        \"StackName\": \"{{ CreateEc2HelperInstance.CloudformationStackId }}\"\n      },\n      \"outputs\": [\n        {\n          \"Name\": \"Events\",\n          \"Selector\": \"$.StackEvents..ResourceStatusReason\",\n          \"Type\": \"StringList\"\n        }\n      ],\n      \"isCritical\": false\n    },\n    {\n      \"name\": \"BranchOnPreviousInstanceState\",\n      \"action\": \"aws:branch\",\n      \"description\": \"Branches the automation depending on the previous EC2 instance state; if it was \\\"running\\\", starts it again; if it was in \\\"stopped\\\" state, the automation continues.\",\n      \"isEnd\": true,\n      \"inputs\": {\n        \"Choices\": [\n          {\n            \"NextStep\": \"StartInstance\",\n            \"Variable\": \"{{ GetInstanceProperties.State }}\",\n            \"StringEquals\": \"running\"\n          }\n        ],\n        \"Default\": \"WaitCloudFormationStackRollback\"\n      }\n    },\n    {\n      \"name\": \"StartInstance\",\n      \"action\": \"aws:changeInstanceState\",\n      \"description\": \"Starts the EC2 instance.\",\n      \"onCancel\": \"step:WaitCloudFormationStackRollback\",\n      \"onFailure\": \"Continue\",\n      \"maxAttempts\": 3,\n      \"timeoutSeconds\": 360,\n      \"inputs\": {\n        \"InstanceIds\": [\n          \"{{ InstanceId }}\"\n        ],\n        \"CheckStateOnly\": false,\n        \"DesiredState\": \"running\"\n      }\n    },\n    {\n      \"name\": \"WaitCloudFormationStackRollback\",\n      \"action\": \"aws:waitForAwsResourceProperty\",\n      \"description\": \"Waits until the AWS CloudFormation stack is in a terminal status before deleting.\",\n      \"nextStep\": \"DeleteCloudFormationStack\",\n      \"onFailure\": \"step:DeleteCloudFormationStack\",\n      \"onCancel\": \"step:DeleteCloudFormationStack\",\n      \"timeoutSeconds\": 600,\n      \"maxAttempts\": 3,\n      \"inputs\": {\n        \"Service\": \"cloudformation\",\n        \"Api\": \"DescribeStacks\",\n        \"StackName\": \"{{ CreateEc2HelperInstance.CloudformationStackId }}\",\n        \"PropertySelector\": \"$.Stacks[0].StackStatus\",\n        \"DesiredValues\": [\n          \"UPDATE_COMPLETE\",\n          \"CREATE_COMPLETE\",\n          \"ROLLBACK_FAILED\",\n          \"ROLLBACK_COMPLETE\",\n          \"DELETE_COMPLETE\",\n          \"CREATE_FAILED\",\n          \"DELETE_FAILED\",\n          \"UPDATE_ROLLBACK_FAILED\",\n          \"UPDATE_ROLLBACK_COMPLETE\"\n        ]\n      },\n      \"isCritical\": false\n    },\n    {\n      \"name\": \"DeleteCloudFormationStack\",\n      \"action\": \"aws:executeAwsApi\",\n      \"description\": \"Deletes the AWS CloudFormation stack including the temporary EC2 helper instance.\",\n      \"maxAttempts\": 5,\n      \"inputs\": {\n        \"Service\": \"cloudformation\",\n        \"Api\": \"DeleteStack\",\n        \"StackName\": \"{{ CreateEc2HelperInstance.CloudformationStackId }}\"\n      },\n      \"isCritical\": true,\n      \"isEnd\": \"true\"\n    }\n  ]\n}",
  "CreatedDate": "2023-05-31T08:42:12.915Z",
  "DisplayName": null,
  "DocumentFormat": {
    "Value": "JSON"
  },
  "DocumentType": {
    "Value": "Automation"
  },
  "DocumentVersion": "3",
  "Name": "AWSSupport-ResetLinuxUserPassword",
  "Requires": [],
  "ReviewStatus": null,
  "Status": {
    "Value": "Active"
  },
  "StatusInformation": null,
  "VersionName": null,
  "ResponseMetadata": {
    "RequestId": "afec26c8-599d-44aa-9140-0d0da03e65a1",
    "Metadata": {},
    "ChecksumAlgorithm": 0,
    "ChecksumValidationStatus": 0
  },
  "ContentLength": 48326,
  "HttpStatusCode": 200,
  "LoggedAt": "2023-06-11T07:11:09.5942722+00:00"
}
