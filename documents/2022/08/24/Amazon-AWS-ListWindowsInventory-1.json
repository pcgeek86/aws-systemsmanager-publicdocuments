{
  "AttachmentsContent": [],
  "Content": "{\n  \"schemaVersion\": \"1.2\",\n  \"description\": \"List information about the operating system, installed applications, or installed updates. We recommend exporting results to an Amazon S3 bucket. Output can exceed the maximum.\",\n  \"parameters\": {\n    \"ListOSInformation\": {\n      \"type\": \"String\",\n      \"default\": \"true\",\n      \"description\": \"(Optional) Lists information about the operating system. Default is true.\",\n      \"allowedValues\": [\n        \"true\",\n        \"false\"\n      ]\n    },\n    \"ListInstalledApplications\": {\n      \"type\": \"String\",\n      \"default\": \"false\",\n      \"description\": \"(Optional) Lists applications installed on the instance. Default is false.\",\n      \"allowedValues\": [\n        \"true\",\n        \"false\"\n      ]\n    },\n    \"ListInstalledUpdates\": {\n      \"type\": \"String\",\n      \"default\": \"false\",\n      \"description\": \"(Optional) Lists operating system updates installed on the instance. Default is false.\",\n      \"allowedValues\": [\n        \"true\",\n        \"false\"\n      ]\n    }\n  },\n  \"runtimeConfig\": {\n    \"aws:runPowerShellScript\": {\n      \"properties\": [\n        {\n          \"id\": \"0.aws:runPowerShellScript\",\n          \"runCommand\": [\n            \"<#\",\n            \".Synopsis\",\n            \"  A generic script for setting up regional access, downloading,\",\n            \"  signature verification, installing, and running a PowerShell \",\n            \"  module from Run Command.\",\n            \" \",\n            \".Description\",\n            \"  1. Customize the variables in the script to align with the target module configuration.\",\n            \"  2. Implement the RunModule function to call and return from the target operation.\",\n            \"\",\n            \".Notes\",\n            \"  File hashes are verified using SHA256. \",\n            \"#>\",\n            \"\",\n            \"\",\n            \"# Check OS version supports installation script before beginning. \",\n            \"if ([environment]::OSVersion.Version.Major -le 5) {\",\n            \"    Write-Error \\\"The Inventory command does not support Windows 2003. Machine must be Windows 2008 or higher.\\\"\",\n            \"    exit -1\",\n            \"}\",\n            \"elseif ([Environment]::OSVersion.Version -ge \\\"10.0\\\") {\",\n            \"    $sku = (Get-CimInstance -ClassName Win32_OperatingSystem).OperatingSystemSKU\",\n            \"    if ($sku -eq 143 -or $sku -eq 144) {\",\n            \"        Write-Host \\\"This command is not supported on Windows 2016 Nano Server.\\\"\",\n            \"        exit -1\",\n            \"    }\",\n            \"}\",\n            \"\",\n            \"$appName = 'Inventory'\",\n            \"$psModuleFileName = 'inventory.psm1'\",\n            \"$s3FileName = 'AWS-ListWindowsInventory-1.1.zip'\",\n            \"$s3Location = 'https://s3{0}.amazonaws.com/aws-ssm-{1}/inventory/' + $s3FileName\",\n            \"$s3FileHash = '7062DA68B82E9E952659FE803AE87E9942C975B80FFA7D1B464E326E2D1FF484'\",\n            \"$psModuleFileHash = '68D46469CA6D7C235AE4813467DBDA0014E7DE49694AB6215281EC3C202D0F87'\",\n            \"$psModuleInstallLocation = [IO.Path]::Combine([Environment]::GetEnvironmentVariable([Environment+SpecialFolder]::ProgramFiles), 'Amazon', $appName)\",\n            \"$psModuleInstallFile = [IO.Path]::Combine($psModuleInstallLocation, $psModuleFileName)\",\n            \"$log = @()\",\n            \"\",\n            \"function ExtractZipCoreOs ([string]$zipFilePath, [string]$destPath) {\",\n            \"    try\",\n            \"    {\",\n            \"        [System.Reflection.Assembly]::LoadWithPartialName(\\\"System.IO.Compression.FileSystem\\\") | Out-Null\",\n            \"\",\n            \"        $zip = [System.IO.Compression.ZipFile]::OpenRead($zipFilePath)\",\n            \"\",\n            \"        foreach ($item in $zip.Entries) {\",\n            \"            $extractedPath = Join-Path $destPath $item.FullName\",\n            \"\",\n            \"            if ($item.Length -eq 0) {\",\n            \"                if ((Test-Path $extractedPath) -eq 0) {\",\n            \"                    mkdir $extractedPath | Out-Null\",\n            \"                }\",\n            \"            } else {\",\n            \"                $fileParent = Split-Path $extractedPath\",\n            \"\",\n            \"                if ((Test-Path $fileParent) -eq 0) {\",\n            \"                    mkdir $fileParent | Out-Null\",\n            \"                }\",\n            \"\",\n            \"                [System.IO.Compression.ZipFileExtensions]::ExtractToFile($item,(Join-Path -Path $fileParent -ChildPath $item.FullName), $true)\",\n            \"            }\",\n            \"        }\",\n            \"    } \",\n            \"    catch\",\n            \"    {\",\n            \"        throw \\\"Error encountered when extracting Inventory zip file.`n$($_.Exception.Message)\\\"\",\n            \"    }\",\n            \"    finally\",\n            \"    {\",\n            \"        $zip.Dispose()\",\n            \"    }\",\n            \"}\",\n            \"\",\n            \"function RunModule {\",\n            \"    Import-Module $psModuleInstallFile\",\n            \"\",\n            \"    try {\",\n            \"    \",\n            \"      if ('{{ ListOSInformation }}' -eq 'true') {\",\n            \"        Get-OSInventory\",\n            \"      }\",\n            \"\",\n            \"      if ('{{ ListInstalledApplications }}' -eq 'true') {\",\n            \"        Get-AppInventory\",\n            \"      }\",\n            \"\",\n            \"      if ('{{ ListInstalledUpdates }}' -eq 'true') {\",\n            \"        Get-PatchInventory\",\n            \"      }\",\n            \"    } catch {\",\n            \"      $exceptionMessage = 'Exception thrown while getting system inventory: {0}' -f $_.Exception.Message \",\n            \"      Write-Error $exceptionMessage\",\n            \"      exit 1\",\n            \"    }\",\n            \"\",\n            \"}\",\n            \"\",\n            \"\",\n            \"function CheckFileHash ($filePath, $fileHash) {\",\n            \"    if (Test-Path($filePath)) {\",\n            \"        $fileStream = New-Object System.IO.FileStream($filePath, [System.IO.FileMode]::Open, [System.IO.FileAccess]::Read)\",\n            \"        $sha256 = [System.Security.Cryptography.HashAlgorithm]::Create('System.Security.Cryptography.SHA256CryptoServiceProvider')\",\n            \"        $sourceHash = [System.BitConverter]::ToString($sha256.ComputeHash($fileStream), 0).Replace('-', '').ToLowerInvariant()\",\n            \"        $sha256.Dispose()\",\n            \"        $fileStream.Dispose()\",\n            \"        \",\n            \"        if ($sourceHash -ne $fileHash) {\",\n            \"            return $false\",\n            \"        }\",\n            \"        else {\",\n            \"            return $true\",\n            \"        }\",\n            \"    }\",\n            \"    else {\",\n            \"        return $false\",\n            \"    }\",\n            \"}\",\n            \"\",\n            \"function PrepareToRunModule($scriptPath) {\",\n            \"    $downloadPath = [IO.Path]::Combine($scriptPath, $s3FileName)\",\n            \"\",\n            \"    try {\",\n            \"\",\n            \"        $isInstalled = $false\",\n            \"        \",\n            \"        if (-Not (CheckFileHash $psModuleInstallFile $psModuleFileHash)) {\",\n            \"            try {\",\n            \"                $log += (\\\"Preparing to download {0} PowerShell module from S3.`r`n\\\" -f $appName)\",\n            \"                $log += \\\"Obtaining instance region from instance metadata.`r`n\\\"\",\n            \"                $region = $env:AWS_SSM_REGION_NAME\",\n            \"                if (($region -eq $null) -or ($region -eq '')) {\",\n            \"                   throw \\\"Region could not be determined from agent environment variable or metadata.\\\"\",\n            \"                }\",\n            \"                if ($region -eq 'us-east-1') {\",\n            \"                    $s3Location = $s3Location -f '', $region\",\n            \"                } else {\",\n            \"                    $s3Address = '-' + $region\",\n            \"                    $s3Location = $s3Location -f $s3Address, $region\",\n            \"                }\",\n            \"\",\n            \"                if (-Not (Test-Path($psModuleInstallLocation))) {\",\n            \"                    $noOp = New-Item $psModuleInstallLocation -ItemType Directory\",\n            \"                }\",\n            \"\",\n            \"                if (-Not (Test-Path($scriptPath))) {\",\n            \"                    $noOp = New-Item $scriptPath -ItemType Directory\",\n            \"                }\",\n            \"\",\n            \"                $log += (\\\"Downloading {0} PowerShell module from {1} to {2}.`r`n\\\" -f $appName, $s3Location, $downloadPath)\",\n            \"                (New-Object Net.WebClient).DownloadFile($s3Location, $downloadPath)\",\n            \"\",\n            \"                if (CheckFileHash $downloadPath $s3FileHash ) {\",\n            \"                    $log += (\\\"Extracting {0} zip file contents to script folder.`r`n\\\" -f $appName)\",\n            \"                    try {\",\n            \"                        (New-Object -Com Shell.Application).namespace($psModuleInstallLocation).CopyHere((New-Object -Com Shell.Application).namespace($downloadPath).Items(), 16)\",\n            \"                    } catch [Exception] {\",\n            \"                        ExtractZipCoreOs $downloadPath $psModuleInstallLocation\",\n            \"                    }\",\n            \"                }\",\n            \"                else {\",\n            \"                    throw ('The SHA hash of the {0} S3 source file does not match the expected value.' -f $appName)\",\n            \"                }\",\n            \"            } catch [Exception] {\",\n            \"                $exceptionMessage = 'Exception thrown while downloading {0} PowerShell module with message: {1}' -f $appName, $_.Exception.Message\",\n            \"                throw $exceptionMessage\",\n            \"            }\",\n            \"\",\n            \"            $log += (\\\"Verifying SHA 256 of the {0} PowerShell module.`r`n\\\" -f $appName)\",\n            \"            if (CheckFileHash $psModuleInstallFile $psModuleFileHash) {\",\n            \"                $log += (\\\"Successfully downloaded and installed the {0} PowerShell module.`r`n\\\" -f $appName)\",\n            \"            }\",\n            \"            else {\",\n            \"                throw ('The SHA hash of the {0} PowerShell module does not match the expected value.' -f $appName)\",\n            \"            }\",\n            \"        }\",\n            \"    }\",\n            \"    catch [Exception] {\",\n            \"        $msg = \\\"An error occurred when executing {0}: {1}`r`nDetails:`r`n{2}\\\" -f $appName, $_.Exception.Message, $log\",\n            \"        Write-Error $msg\",\n            \"    \",\n            \"        exit -1\",\n            \"    }\",\n            \"    finally {\",\n            \"        if (Test-Path $downloadPath) {\",\n            \"            rm $downloadPath\",\n            \"        }\",\n            \"    }\",\n            \"}\",\n            \"\",\n            \"# Run the script\",\n            \"$scriptPath = split-path -parent $MyInvocation.MyCommand.Definition\",\n            \"PrepareToRunModule($scriptPath)\",\n            \"RunModule\",\n            \"\"\n          ]\n        }\n      ]\n    }\n  }\n}\n",
  "CreatedDate": "2022-04-05T17:09:02.445Z",
  "DisplayName": null,
  "DocumentFormat": {
    "Value": "JSON"
  },
  "DocumentType": {
    "Value": "Command"
  },
  "DocumentVersion": "1",
  "Name": "AWS-ListWindowsInventory",
  "Requires": [],
  "ReviewStatus": null,
  "Status": {
    "Value": "Active"
  },
  "StatusInformation": null,
  "VersionName": null,
  "ResponseMetadata": {
    "RequestId": "6df41bf3-3657-4214-8fdb-7b8660c87e4e",
    "Metadata": {},
    "ChecksumAlgorithm": 0,
    "ChecksumValidationStatus": 0
  },
  "ContentLength": 12152,
  "HttpStatusCode": 200,
  "LoggedAt": "2022-08-24T07:12:30.6279785+00:00"
}
