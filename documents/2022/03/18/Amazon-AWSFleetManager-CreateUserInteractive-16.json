{
  "AttachmentsContent": [],
  "Content": "{\n  \"schemaVersion\" : \"1.0\",\n  \"description\" : \"Creates a local user account.\",\n  \"sessionType\" : \"InteractiveCommands\",\n  \"parameters\" : {\n    \"UserName\" : {\n      \"type\" : \"String\",\n      \"description\" : \"The user to be created.\",\n      \"allowedPattern\" : \"^[^\\\"'\\\\/\\\\\\\\\\\\[\\\\]:;|=,+*?<>@\\\\r\\\\n]+$\",\n      \"maxChars\" : 32\n    },\n    \"SetPassword\" : {\n      \"type\" : \"String\",\n      \"description\" : \"(Optional) Set this to 'Yes' to configure the user's password.\",\n      \"default\" : \"No\",\n      \"allowedValues\" : [ \"No\", \"Yes\" ]\n    },\n    \"Description\" : {\n      \"type\" : \"String\",\n      \"description\" : \"(Optional) The user's description.\",\n      \"default\" : \" \",\n      \"allowedPattern\" : \"^[^\\\"'\\\\/\\\\\\\\\\\\[\\\\]:;|=,+*?<>@\\\\r\\\\n]+$\",\n      \"maxChars\" : 48\n    },\n    \"CreateHomeDir\" : {\n      \"type\" : \"String\",\n      \"description\" : \"(Optional) Set this to 'Yes' to create of user's home directory on linux systems.\",\n      \"default\" : \"No\",\n      \"allowedValues\" : [ \"No\", \"Yes\" ]\n    },\n    \"PerformAction\" : {\n      \"type\" : \"String\",\n      \"description\" : \"(Optional) Set this to 'Yes' to perform the action.\",\n      \"default\" : \"No\",\n      \"allowedValues\" : [ \"No\", \"Yes\" ]\n    }\n  },\n  \"properties\" : {\n    \"windows\" : {\n      \"commands\" : \"$ErrorActionPreference = 'Stop'\\n\\nFunction ParseInputParameter {\\n    param (\\n        [string]$Name,\\n        [string]$Value,\\n        [string]$Regex\\n    )\\n\\n    $ValidParameterRegex = '^--%[ +{|{].*}( +)?$'\\n    if ($Value -notmatch $ValidParameterRegex) {\\n        ExitWithFailureMessage -Message \\\"Invalid syntax for the parameter $Name\\\"\\n    }\\n    $parameterValue = $Value.Substring(3)\\n\\n    $trimmedParameterValue = $parameterValue.TrimStart().TrimEnd()\\n    $trimmedParameterValue = $trimmedParameterValue.Substring(1)\\n    $trimmedParameterValue = $trimmedParameterValue.Substring(0, $trimmedParameterValue.Length - 1)\\n\\n    if ($Regex -and $trimmedParameterValue -notmatch $Regex) {\\n        ExitWithFailureMessage -Message \\\"Invalid syntax for the parameter $Name\\\"\\n    } else {\\n        $trimmedParameterValue\\n    }\\n}\\n\\nfunction ExitWithFailureMessage {\\n    param (\\n        [string]$Message,\\n        [string]$ExceptionMessage,\\n        [Switch]$PrintJson\\n    )\\n    if ([string]::IsNullOrWhitespace($ExceptionMessage)) {\\n        $errorMessage = $Message\\n    } else {\\n        $errorMessage = '{0} {1}' -f $Message, $ExceptionMessage\\n    }\\n    if ($PrintJson) {ConvertTo-Json -InputObject @{error = $errorMessage} -Compress}\\n    WriteStandardError -Message $errorMessage\\n    [System.Environment]::Exit(1)\\n}\\n\\nfunction ExitWithFailureMessageAndExitCode {\\n    param (\\n        [string]$Message,\\n        [string]$ExceptionMessage,\\n        [int]$ExitCode,\\n        [Switch]$PrintJson\\n    )\\n    if ([string]::IsNullOrWhitespace($ExceptionMessage)) {\\n        $errorMessage = $Message\\n    } else {\\n        $errorMessage = '{0} {1}' -f $Message, $ExceptionMessage\\n    }\\n    if ($PSBoundParameters.ContainsKey('ExitCode') -eq $true) {\\n        $exitCode = $ExitCode\\n    } else {\\n        $exitCode = 1\\n    }\\n    if ($PrintJson) {\\n        $ErrorObject = @{\\n            error = $errorMessage\\n            exitCode = $exitCode\\n        }\\n        ConvertTo-Json -InputObject $ErrorObject -Compress\\n    }\\n    WriteStandardError -Message $errorMessage\\n    [System.Environment]::Exit($exitCode)\\n}\\n\\nfunction ExitWithSuccessMessage {\\n    param (\\n        [string]$Message\\n    )\\n    Write-Host $Message\\n    [System.Environment]::Exit(0)\\n}\\n\\nfunction WriteStandardError {\\n    param (\\n        [string]$Message\\n    )\\n    $Host.UI.WriteErrorLine($Message)\\n}\\n\\nfunction TestPerformAction {\\n    param ( [string]$PerformAction )\\n    if ($PerformAction -ne 'Yes') {\\n        ExitWithFailureMessage -Message \\\"No action was taken because the PerformAction parameter is set to $PerformAction. To make the desired change, set this parameter to Yes.\\\"\\n    }\\n}\\n\\n$UserName = Write-Output --%{{{ UserName }}}\\n$UserName = ParseInputParameter -Name 'UserName' -Value $UserName\\n\\n$Description = Write-Output --%{{{ Description }}}\\n$Description = ParseInputParameter -Name 'Description' -Value $Description\\n\\n$SetPassword = Write-Output --%{{{ SetPassword }}}\\n$SetPassword = ParseInputParameter -Name 'SetPassword' -Value $SetPassword\\n\\n$PerformAction = Write-Output --%{{{ PerformAction }}}\\n$PerformAction = ParseInputParameter -Name 'PerformAction' -Value $PerformAction -Regex '(Yes|No)'\\nTestPerformAction -PerformAction $PerformAction\\n\\nfunction TestLocalUserExists {\\n    param (\\n        [string]$UserName\\n    )\\n    $getCimInstance = @{\\n        Class = 'Win32_UserAccount'\\n        Filter = 'LocalAccount=True'\\n    }\\n    if (Get-CimInstance @getCimInstance | Where-Object {$_.Name -eq $Username}) {\\n        return $true\\n    } else {\\n        return $false\\n    }\\n}\\n\\nif (TestLocalUserExists -UserName $UserName) {\\n    Write-Host ''\\n    Write-Host ''\\n    ExitWithFailureMessage -Message 'The specified user already exists.'\\n}\\n\\n$adsiString = 'WinNT://{0}' -f $env:COMPUTERNAME\\n$objUser = ([ADSI]$adsiString).Create('User', $UserName)\\n\\nif ($SetPassword -eq 'Yes') {\\n    $passwordConfigured = $false\\n    $attempts = 0\\n    $maxAttempts = 5\\n    do {\\n        Write-Host ''\\n        Write-Host ''\\n        $password1 = New-Object -TypeName 'System.Management.Automation.PSCredential' -ArgumentList @(\\n            'name',\\n            (Read-Host -Prompt 'Enter a password for the user.........' -AsSecureString)\\n        )\\n        $password2 = New-Object -TypeName 'System.Management.Automation.PSCredential' -ArgumentList @(\\n            'name',\\n            (Read-Host -Prompt 'Enter the password again to confirm...' -AsSecureString)\\n        )\\n\\n        if ($password1.GetNetworkCredential().Password -eq $password2.GetNetworkCredential().Password) {\\n            try {\\n                $objUser.SetPassword($password1.GetNetworkCredential().Password)\\n                $objUser.SetInfo()\\n                $passwordConfigured = $true\\n                break\\n            } catch {\\n                Write-Host ''\\n                Write-Host $_.Exception.InnerException.Message\\n            }\\n        } else {\\n            Write-Host ''\\n            Write-Host 'The passwords do not match. Please try again.'\\n        }\\n        $attempts++\\n    }\\n    while ($attempts -lt $maxAttempts)\\n\\n    if ($passwordConfigured -eq $false) {\\n        Write-Host ''\\n        ExitWithFailureMessage -Message ('Failed to create the user {0}.' -f $UserName)\\n    }\\n}\\n\\nif (-not([string]::IsNullOrWhiteSpace($Description))) {\\n    try {\\n        $objUser.SetInfo()\\n    } catch {\\n        Write-Host ''\\n        ExitWithFailureMessage -Message $_.Exception.InnerException.Message\\n    }\\n\\n    try {\\n        $objUser.Description = $Description\\n        $objUser.SetInfo()\\n    } catch {\\n        Write-Host ''\\n        ExitWithFailureMessage -Message $_.Exception.InnerException.Message\\n    }\\n}\\n\\nWrite-Host ''\\nWrite-Host ''\\nWrite-Host ('The user {0} has been created.' -f $UserName)\\nWrite-Host ''\\nWrite-Host ''\\n\",\n      \"runAsElevated\" : true\n    },\n    \"linux\" : {\n      \"commands\" : \"#!/bin/bash\\nset -e\\n\\nif [ -f /etc/os-release ]; then\\n    . /etc/os-release\\n    OS_RELEASE=\\\"$ID${VERSION_ID:+.${VERSION_ID}}\\\"\\nelif [ -f /etc/centos-release ]; then\\n    OS_RELEASE=\\\"centos.$(awk '{print $3}' /etc/centos-release)\\\"\\nelif [ -f /etc/redhat-release ]; then\\n    OS_RELEASE=\\\"rhel.$(lsb_release -r | awk '{print $2}')\\\"\\nfi\\n\\ncase \\\"$OS_RELEASE\\\" in\\n    amzn.2|centos.7*|centos.8*|fedora.*|rhel.7*|rhel.8*|sles*)\\n        command_path='/usr/bin/'\\n        ;;\\n    amzn.2018.03|centos.6*|debian.*|rhel.6*|ubuntu.16*|ubuntu.18*|ubuntu.20*)\\n        command_path='/bin/'\\n        ;;\\n    *)\\n        # Catch all without the full path for untested platforms\\n        command_path=''\\nesac\\n\\nExitWithFailureMessage() {\\n    MESSAGE=\\\"$1\\\"\\n    JSON=\\\"$2\\\"\\n    if [[ \\\"$JSON\\\" == \\\"PRINT_JSON\\\" ]]; then\\n        \\\"${command_path}echo\\\" \\\"{\\\\\\\"error\\\\\\\":\\\\\\\"$MESSAGE\\\\\\\"}\\\"\\n    fi\\n    WriteStandardError \\\"$MESSAGE\\\"\\n    exit 1\\n}\\n\\n# exit codes. 0-100 are reserved exit codes. 101-150 codes are for linux, 151-200 are for macos and 200 onwards codes are for windows.\\nExitWithFailureMessageAndExitCode() {\\n    MESSAGE=\\\"$1\\\"\\n    EXITCODE=\\\"$2\\\"\\n    JSON=\\\"$3\\\"\\n    if [[ \\\"$JSON\\\" == \\\"PRINT_JSON\\\" ]]; then\\n        \\\"${command_path}echo\\\" \\\"{\\\\\\\"error\\\\\\\":\\\\\\\"$MESSAGE\\\\\\\",\\\\\\\"exitCode\\\\\\\":\\\\\\\"$EXITCODE\\\\\\\"}\\\"\\n    fi\\n    WriteStandardError \\\"$MESSAGE\\\"\\n    exit \\\"$EXITCODE\\\"\\n}\\n\\nExitWithSuccessMessage() {\\n    \\\"${command_path}echo\\\" \\\"$1\\\"\\n    exit 0\\n}\\n\\nWriteStandardError() {\\n    MESSAGE=\\\"$1\\\"\\n    (>&2 \\\"${command_path}echo\\\" \\\"$MESSAGE\\\")\\n}\\n\\nTestPerformAction() {\\n    if [[ \\\"$1\\\" != \\\"Yes\\\" ]]; then\\n        ExitWithFailureMessage \\\"No action was taken because the PerformAction parameter is set to $1. To make the desired change, set this parameter to Yes.\\\"\\n    fi\\n}\\n\\nUser='{{ UserName }}'\\nSetPassword='{{ SetPassword }}'\\nDescription='{{ Description }}'\\nCreateHomeDir='{{ CreateHomeDir }}'\\n\\nPERFORMACTION='{{ PerformAction }}'\\nTestPerformAction \\\"$PERFORMACTION\\\"\\n\\nCREATE_HOME_ARGUMENT='--no-create-home'\\nif \\\"${command_path}grep\\\" -q \\\"^$User:\\\" /etc/passwd; then\\n    \\\"${command_path}echo\\\" ''\\n    ExitWithFailureMessage 'The specified user already exists.'\\nfi\\n\\nif [ -f /usr/sbin/useradd ]; then\\n    COMMAND='/usr/sbin/useradd'\\n    if [ \\\"$CreateHomeDir\\\" = 'Yes' ]; then\\n        CREATE_HOME_ARGUMENT='--create-home'\\n    fi\\nelif [ -f /usr/sbin/adduser ]; then\\n    COMMAND='/usr/sbin/adduser'\\n    if [ \\\"$CreateHomeDir\\\" = 'Yes' ]; then\\n        CREATE_HOME_ARGUMENT=''\\n    fi\\nelse\\n    ExitWithFailureMessage 'Neither of the required commands adduser or useradd exist.'\\nfi\\n\\n$COMMAND \\\"$User\\\" --comment \\\"$Description\\\" \\\"$CREATE_HOME_ARGUMENT\\\" || ExitWithFailureMessage 'Failed to create the specified user.'\\n\\\"${command_path}echo\\\" ''\\n\\\"${command_path}echo\\\" ''\\n\\\"${command_path}echo\\\" \\\"The user $User has been created.\\\"\\n\\\"${command_path}echo\\\" ''\\n\\\"${command_path}echo\\\" ''\\nif [ \\\"$SetPassword\\\" = 'Yes' ]; then\\n    /usr/bin/passwd \\\"$User\\\" || {\\n        \\\"${command_path}echo\\\" ''\\n        \\\"${command_path}echo\\\" \\\"Note: The user has been created and still exists on the system.\\\"\\n        \\\"${command_path}echo\\\" \\\"To continue setting a password, please delete and try creating the user again, or try using the reset password feature.\\\"\\n        \\\"${command_path}echo\\\" ''\\n    }\\nfi\\n\",\n      \"runAsElevated\" : true\n    }\n  }\n}",
  "CreatedDate": "2021-12-13T04:03:09.828Z",
  "DisplayName": null,
  "DocumentFormat": {
    "Value": "JSON"
  },
  "DocumentType": {
    "Value": "Session"
  },
  "DocumentVersion": "16",
  "Name": "AWSFleetManager-CreateUserInteractive",
  "Requires": [],
  "ReviewStatus": null,
  "Status": {
    "Value": "Active"
  },
  "StatusInformation": null,
  "VersionName": null,
  "ResponseMetadata": {
    "RequestId": "0bbf7c26-b528-4b64-96a8-c1ba46970d70",
    "Metadata": {},
    "ChecksumAlgorithm": 0,
    "ChecksumValidationStatus": 0
  },
  "ContentLength": 11579,
  "HttpStatusCode": 200,
  "LoggedAt": "2022-03-18T07:12:23.6244174+00:00"
}
