{
  "AttachmentsContent": [],
  "Content": "{\n  \"description\" : \"#### Performs database integrity checks (DBCC) on the specified SQL Server database.\\n---\\n#### Prerequisites for using this document:\\n* Instance(s) must be running SQL Server.\\n* An AWS Secrets Manager database credential must be configured with the following two fields: **username** and **password**; For instructions, see [AWS Secrets Manager](https://docs.aws.amazon.com/secretsmanager/latest/userguide/auth-and-access.html).\\n* On Windows, the **username** and **password** must be the domain account and password used to authenticate SQL Server. The domain user must be a local administrator.\\n* On Linux, the **username** and **password** must be the SQL Server login  name and password.\\n* The **username** must be assigned, at minimum, the following database role: **sysadmin**.\\n* Instances may need to be granted additional permissions and roles that allow access to AWS Secrets Manager credentials. For more information, see the [documentation](http://docs.aws.amazon.com/launchwizard/latest/userguide/launch-wizard-sql-provided-runbooks.html).\\n---\\n*Note: This document installs and uses third-party software from [https://ola.hallengren.com](https://ola.hallengren.com), which is provided under the following license: [https://ola.hallengren.com/license.html](https://ola.hallengren.com/license.html)*.\",\n  \"schemaVersion\" : \"0.3\",\n  \"parameters\" : {\n    \"Database\" : {\n      \"type\" : \"String\",\n      \"allowedPattern\" : \"^[a-zA-Z_][\\\\w@$#_]{0,127}$\",\n      \"description\" : \"Database on which to perform integrity check\"\n    },\n    \"SecretsMangerCredential\" : {\n      \"type\" : \"String\",\n      \"allowedPattern\" : \"^[\\\\/_+=\\\\.@\\\\-a-zA-Z0-9]{1,512}$\",\n      \"description\" : \"Secrets Manager credentials for SQL Server\"\n    },\n    \"ThirdPartySoftwareConsent\" : {\n      \"type\" : \"String\",\n      \"allowedValues\" : [ \"Yes\" ],\n      \"description\" : \"Consent to the use third-party software mentioned in description\"\n    },\n    \"InstanceId\" : {\n      \"type\" : \"StringList\",\n      \"description\" : \"Target SQL Server instance for backup operation\",\n      \"allowedPattern\" : \"(^i-(\\\\w{8}|\\\\w{17})$)|(^op-\\\\w{17}$)\"\n    },\n    \"FileGroupsCheck\" : {\n      \"type\" : \"String\",\n      \"default\" : \"No\",\n      \"allowedValues\" : [ \"Yes\", \"No\" ],\n      \"description\" : \"Check file groups\"\n    },\n    \"TablesCheck\" : {\n      \"type\" : \"String\",\n      \"allowedValues\" : [ \"Yes\", \"No\" ],\n      \"description\" : \"Check tables\",\n      \"default\" : \"No\"\n    },\n    \"AllocationCheck\" : {\n      \"type\" : \"String\",\n      \"allowedValues\" : [ \"Yes\", \"No\" ],\n      \"description\" : \"Check disk space allocation structures\",\n      \"default\" : \"No\"\n    },\n    \"CatalogCheck\" : {\n      \"type\" : \"String\",\n      \"default\" : \"No\",\n      \"description\" : \"Check catalog consistency\",\n      \"allowedValues\" : [ \"Yes\", \"No\" ]\n    },\n    \"PhysicalOnlyCheck\" : {\n      \"type\" : \"String\",\n      \"default\" : \"Yes\",\n      \"description\" : \"Limit checks to physical structures of the database\",\n      \"allowedValues\" : [ \"Yes\", \"No\" ]\n    },\n    \"DataPurityCheck\" : {\n      \"type\" : \"String\",\n      \"default\" : \"No\",\n      \"description\" : \"Check column values for internal consistency\",\n      \"allowedValues\" : [ \"Yes\", \"No\" ]\n    },\n    \"NonClustedIndexCheck\" : {\n      \"type\" : \"String\",\n      \"default\" : \"Yes\",\n      \"description\" : \"Check non-clustered indexes\",\n      \"allowedValues\" : [ \"Yes\", \"No\" ]\n    },\n    \"PerformExtendedCheck\" : {\n      \"type\" : \"String\",\n      \"default\" : \"No\",\n      \"description\" : \"Perform extended checks\",\n      \"allowedValues\" : [ \"Yes\", \"No\" ]\n    },\n    \"UseLocks\" : {\n      \"type\" : \"String\",\n      \"default\" : \"No\",\n      \"description\" : \"Use locks instead of internal database snapshots\",\n      \"allowedValues\" : [ \"Yes\", \"No\" ]\n    }\n  },\n  \"mainSteps\" : [ {\n    \"name\" : \"GetInstanceOSInfo\",\n    \"action\" : \"aws:executeAwsApi\",\n    \"inputs\" : {\n      \"Service\" : \"ssm\",\n      \"Api\" : \"DescribeInstanceInformation\",\n      \"Filters\" : [ {\n        \"Key\" : \"InstanceIds\",\n        \"Values\" : [ \"{{ InstanceId }}\" ]\n      } ]\n    },\n    \"outputs\" : [ {\n      \"Name\" : \"platform\",\n      \"Selector\" : \"$.InstanceInformationList[0].PlatformType\",\n      \"Type\" : \"String\"\n    } ]\n  }, {\n    \"name\" : \"BranchOnWindowsOrLinux\",\n    \"action\" : \"aws:branch\",\n    \"inputs\" : {\n      \"Choices\" : [ {\n        \"NextStep\" : \"ExecuteDBCCChecks\",\n        \"Variable\" : \"{{GetInstanceOSInfo.platform}}\",\n        \"StringEquals\" : \"Windows\"\n      }, {\n        \"NextStep\" : \"InstallPowerShellOnLinux\",\n        \"Variable\" : \"{{GetInstanceOSInfo.platform}}\",\n        \"StringEquals\" : \"Linux\"\n      } ]\n    }\n  }, {\n    \"name\" : \"InstallPowerShellOnLinux\",\n    \"action\" : \"aws:runCommand\",\n    \"inputs\" : {\n      \"DocumentName\" : \"AWS-RunShellScript\",\n      \"InstanceIds\" : \"{{ InstanceId }}\",\n      \"Parameters\" : {\n        \"commands\" : \"if [ \\\"$(which pwsh > /dev/null 2>&1; echo $?)\\\" -ne \\\"0\\\" ]\\nthen\\n   sudo apt-get install -y powershell\\nfi\"\n      }\n    }\n  }, {\n    \"name\" : \"ExecuteDBCCChecks\",\n    \"action\" : \"aws:runCommand\",\n    \"inputs\" : {\n      \"DocumentName\" : \"AWS-RunPowerShellScript\",\n      \"InstanceIds\" : \"{{ InstanceId }}\",\n      \"Parameters\" : {\n        \"commands\" : [ \"function VerifySignature { param( [Parameter(Mandatory=$true)] $FilePath, [Parameter(Mandatory=$true)] $SignatureFilePath ) $code = \\\" using System; using System.IO; using System.Security.Cryptography; namespace Crypto { public class CryptoHelper { public static bool VerifySignature(string FilePath, string SignatureFilePath) { try { var modulus = Convert.FromBase64String(\\\"\\\"68hw9z3PIC7u5VkEoWeOI+f63hf3+FTDidjgEYkbsGVJ/8Yip0tIyk7rw84AEA9mlZ8c9k5U0dZo18fLGYhRkfgytLVwaXXU8083DwTGj5n8TvTrKss8ugschfGQJIanyWR7eRFLxuYZS5fo2lxur8K+6rc7yDgM+zQTzoOz2GDcTMm3MY3aST9/SShmJLoc6yoekXifyCebSFt8PZ0lmARFiHupepDrZlqXKY/490MlEiZz2fh7RjOORTDZo85Ai/prxxRuHnXrlIBDCbWfCqPCphJD9IMYcbFUxMfL1M7WXCheAtPpzJjMpdLQ+QIzOY1gdvTxx9ml4BtcdXyyE1BE0gFmR8QHBzJIE6KWE7OSEQpPnqwJ+zkA79Mr9/Ud4gdKeI2rGWN7quspSn7nCXcfbG+j9Rc0JMpKgaVLhfXxC0/xWS6JO4HCgrfh5rXWjAN+HVeHDI2iuPOALrHSUPK9hFudqDWSCEhBO3WcVTeg7dzU2M8rx92ypfbThEhczwXQ3yXGbojUzEPv8M24tOsjDZtPlyErE9xwtVY4UBUuJPsjbxLYx/Bq8Fg79liIVITRDH+UQFGws3YZe8EqSOpyk8hY6rOXXXU0uVLpjMny1tmxngdFRaTnQtNUoqV4NBT1wTTSNKEx/O04fEfU7Jha6oaeZ1NaL4F4wApmAh0=\\\"\\\"); var exponent = Convert.FromBase64String(\\\"\\\"AQAB\\\"\\\"); var rsa = RSA.Create(new RSAParameters {Exponent = exponent, Modulus = modulus}); using (var stream = File.OpenRead(FilePath)) { var signatureBytes = File.ReadAllBytes(SignatureFilePath); var bytesToVerify = SHA256.Create().ComputeHash(stream); return rsa.VerifyData(bytesToVerify, signatureBytes, HashAlgorithmName.SHA256, RSASignaturePadding.Pkcs1); } } catch (Exception e) { Console.WriteLine(e.ToString()); return false; } } } } \\\"; Add-Type -TypeDefinition $code -Language CSharp -ErrorAction Stop; return [Crypto.CryptoHelper]::VerifySignature($FilePath, $SignatureFilePath); }\\nfunction ExecuteScript { param( [Parameter(Mandatory=$true)] $ScriptFileName, [Parameter(Mandatory=$true)] $ScriptExpression )\\n$ExitCode = 1; $Result = \\\"\\\"; $TempFolder = Join-Path -Path ([System.IO.Path]::GetTempPath()) -ChildPath ([System.Guid]::NewGuid()); $null = New-Item -ItemType Directory -Path $TempFolder -ErrorAction Stop; try { $MaintenanceZip = \\\"aws-maintenance.zip\\\"; $MaintenanceZipSig = \\\"aws-maintenance.zip.sig\\\"; $Prefix = \\\"45985c0a-2152-4931-b859-74b2b5f26cb1\\\"; $Stage  = \\\"prod\\\"; $Region = \\\"{{global:REGION}}\\\"; $S3Domain = \\\"s3.amazonaws.com\\\"; if ($Region.Contains(\\\"gov\\\")) { $S3Domain = \\\"s3-$Region.amazonaws.com\\\"; } $URI=\\\"https://launchwizardscript-$Stage-$Region.$S3Domain/$Prefix/Maintenance/\\\"; $ZipFile = Join-Path -Path $TempFolder -ChildPath $MaintenanceZip; $ZipFileSig = Join-Path -Path $TempFolder -ChildPath $MaintenanceZipSig; $ScriptPath = Join-Path -Path $TempFolder -ChildPath \\\"Maintenance\\\"; $ScriptPath = Join-Path -Path $ScriptPath -ChildPath $ScriptFileName; $ProgressPreference = \\\"SilentlyContinue\\\"; $global:ProgressPreference = \\\"SilentlyContinue\\\"; $null = Invoke-WebRequest -Uri ($URI+$MaintenanceZip) -OutFile $ZipFile -ErrorAction Stop; $null = Invoke-WebRequest -Uri ($URI+$MaintenanceZipSig) -OutFile $ZipFileSig -ErrorAction Stop; if ((VerifySignature $ZipFile $ZipFileSig) -ne $true) { throw \\\"Signature validation failed\\\" }; $null = Expand-Archive -Path $ZipFile -DestinationPath $TempFolder -ErrorAction Stop; $ScriptBlock = [scriptblock]::Create(\\\". $ScriptPath; $ScriptExpression\\\"); $Result = Invoke-Command -ScriptBlock $ScriptBlock -ErrorAction Stop; } catch { Write-Output $_.Exception; } finally { $Null = Remove-Item $TempFolder -Recurse -Force -ErrorAction SilentlyContinue; if (($null -eq $Result) -or ($Result.GetType().FullName -eq \\\"System.String\\\")) { Write-Output \\\"Unknown execution failure $Result\\\"; exit(1) } else { $Len = $Result.Length-1; $ExitCode = $Result[$Len]; $Len2 = $Len-1; Write-Output $Result[0..$Len2]; exit($ExitCode) } } } try { Set-StrictMode -Version latest; $ScriptExpression = \\\"CheckDatabase -Databases {{Database}}  -SecretsManagerId {{SecretsMangerCredential}} \\\" + \\\"-CheckOptions TablesCheck={{TablesCheck}},FileGroupsCheck={{FileGroupsCheck}},\\\" + \\\"AllocationCheck={{AllocationCheck}},CatalogCheck={{CatalogCheck}},\\\" + \\\"PhysicalOnlyCheck={{PhysicalOnlyCheck}},DataPurityCheck={{DataPurityCheck}},\\\" + \\\"NonClustedIndexCheck={{NonClustedIndexCheck}},PerformExtendedCheck={{PerformExtendedCheck}},\\\" + \\\"UseLocks={{UseLocks}}\\\";\\nExecuteScript -ScriptFileName \\\"aws-sqldbcc.ps1\\\" -ScriptExpression $ScriptExpression; } catch { Write-Output $_.Exception; exit(1) }\" ],\n        \"executionTimeout\" : \"172800\"\n      }\n    },\n    \"timeoutSeconds\" : 172800\n  } ]\n}",
  "CreatedDate": "2022-04-23T01:44:50.137Z",
  "DisplayName": null,
  "DocumentFormat": {
    "Value": "JSON"
  },
  "DocumentType": {
    "Value": "Automation"
  },
  "DocumentVersion": "13",
  "Name": "AWSSQLServer-DBCC",
  "Requires": [],
  "ReviewStatus": null,
  "Status": {
    "Value": "Active"
  },
  "StatusInformation": null,
  "VersionName": null,
  "ResponseMetadata": {
    "RequestId": "9087e0d1-96e6-472d-bb03-7ab56648f7af",
    "Metadata": {},
    "ChecksumAlgorithm": 0,
    "ChecksumValidationStatus": 0
  },
  "ContentLength": 10508,
  "HttpStatusCode": 200,
  "LoggedAt": "2022-06-02T07:14:20.8197889+00:00"
}
