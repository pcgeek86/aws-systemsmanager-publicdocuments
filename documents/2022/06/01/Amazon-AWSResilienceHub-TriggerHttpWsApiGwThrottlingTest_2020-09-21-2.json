{
  "AttachmentsContent": [],
  "Content": "{\n  \"description\" : \"## Id\\nAWSResilienceHub-TriggerHttpWsApiGwThrottlingTest_2020-09-21\\n\\n## Intent\\nTest HTTP or WebSockets API Gateway behavior when hitting throttling threshold\\n\\n## Type\\nTEST\\n\\n## Risk\\nHigh\\n\\n## Requirements\\n  * HTTP or WebSockets API Gateway\\n  * Alarm for metric [4xx](https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-metrics.html) or [ClientError](https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-logging.html) setup for the specified API Gateway\\n  * There is constant traffic on API Gateway during test\\n\\n## Permissions required for AutomationAssumeRole\\n  * apigateway:GET\\n  * apigateway:PATCH\\n  * servicequotas:GetServiceQuota\\n  * cloudwatch:DescribeAlarms\\n  * ssm:GetAutomationExecution\\n  * ssm:StartAutomationExecution\\n  * ssm:GetParameters\\n  * iam:PassRole\\n\\n##### Permissions required to log output to CloudWatch\\n  * logs:PutLogEvents\\n  * logs:DescribeLogGroups\\n  * logs:DescribeLogStreams\\n\\n## Supports Rollback\\nYes, restore original throttling settings.\\n\\n## Cancellation behavior\\nRestore original throttling settings\\n\\n## Inputs\\n### (Required) AutomationAssumeRole\\n  * type: String\\n  * description: ARN of the IAM role with permissions listed above\\n\\n### (Required) HttpWsApiGwId\\n  * type: String\\n  * description: The ID of the HTTP or WS API Gateway\\n\\n### (Required) HttpWsStageName\\n  * type: String\\n  * description: The stage name of the HTTP or WS API Gateway\\n\\n### (Required) 4xxAlarmName\\n  * type: String\\n  * description: Alarm for metric [4xx](https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-metrics.html) or [ClientError](https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-logging.html) setup for the specified API Gateway\\n\\n### (Optional) IsRollback\\n  * type: String\\n  * description: Run the rollback steps of the document. True or False. If True, the parameter PreviousExecutionId should also be specified\\n  * default: false\\n\\n### (Optional) PreviousExecutionId\\n  * type: String\\n  * description: SSM execution ID of the previous execution of this document for which resources need to be cleaned up\\n\\n## Details\\nThe document injects failure by setting both throttling rate and trottling burst of the specified HTTP or WS API Gateway to 0. Alarm for metric [4xx](https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-metrics.html) or [ClientError](https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-logging.html) should be trigger by traffic on the gateway. In case of issues users should manually restore original throttling settings from backup.\\n\\n## Steps executed in normal flow\\n  * CheckIsRollback\\n  * AssertAlarmToBeGreenBeforeTest\\n  * BackupThrottlingConfiguration\\n  * ChangeThrottlingConfiguration\\n  * AssertAlarmToBeRed\\n  * RollbackCurrentExecution\\n  * AssertAlarmToBeGreen\\n\\n## Steps executed in rollback flow\\n  * CheckIsRollback\\n  * GetInputsFromPreviousExecution\\n  * PrepareRollbackOfPreviousExecution\\n  * AssertHttpWsApiGwId\\n  * RollbackPreviousExecution\\n\\n## Outputs\\nNone\",\n  \"schemaVersion\" : \"0.3\",\n  \"assumeRole\" : \"{{ AutomationAssumeRole }}\",\n  \"parameters\" : {\n    \"HttpWsApiGwId\" : {\n      \"type\" : \"String\",\n      \"description\" : \"(Required) The ID of the HTTP or WS API Gateway\"\n    },\n    \"HttpWsStageName\" : {\n      \"type\" : \"String\",\n      \"description\" : \"(Required) The stage name of the HTTP or WS API Gateway\"\n    },\n    \"AutomationAssumeRole\" : {\n      \"type\" : \"String\",\n      \"description\" : \"(Required) The ARN of the role that allows Automation to perform the actions on your behalf.\"\n    },\n    \"4xxAlarmName\" : {\n      \"type\" : \"String\",\n      \"description\" : \"(Required) Alarm for metric `4xx` or `ClientError` setup for the specified API Gateway\"\n    },\n    \"IsRollback\" : {\n      \"type\" : \"String\",\n      \"description\" : \"(Optional) Run rollback step of the given previous execution (parameter `PreviousExecutionId`). Can be either true or false.\",\n      \"default\" : \"false\"\n    },\n    \"PreviousExecutionId\" : {\n      \"type\" : \"String\",\n      \"description\" : \"(Optional) Previous execution id for which resources need to be cleaned up.\",\n      \"default\" : \"\"\n    }\n  },\n  \"mainSteps\" : [ {\n    \"name\" : \"CheckIsRollback\",\n    \"description\" : \"Check if document should be executed in rollback mode\",\n    \"action\" : \"aws:branch\",\n    \"inputs\" : {\n      \"Choices\" : [ {\n        \"NextStep\" : \"GetInputsFromPreviousExecution\",\n        \"Variable\" : \"{{IsRollback}}\",\n        \"StringEquals\" : \"true\"\n      } ],\n      \"Default\" : \"AssertAlarmToBeGreenBeforeTest\"\n    }\n  }, {\n    \"name\" : \"GetInputsFromPreviousExecution\",\n    \"description\" : \"Get input from previous execution. This will be used to validate that rollback is executed with the same input\",\n    \"action\" : \"aws:executeScript\",\n    \"outputs\" : [ {\n      \"Name\" : \"HttpWsApiGwId\",\n      \"Selector\" : \"$.Payload.HttpWsApiGwId[0]\",\n      \"Type\" : \"String\"\n    } ],\n    \"inputs\" : {\n      \"Runtime\" : \"python3.8\",\n      \"Handler\" : \"get_inputs_from_ssm_execution\",\n      \"InputPayload\" : {\n        \"ExecutionId\" : \"{{ PreviousExecutionId }}\"\n      },\n      \"Script\" : \"import json\\nimport boto3\\nfrom botocore.config import Config\\n\\n\\n\\n\\ndef get_inputs_from_ssm_execution(events, context):\\n    output = {}\\n    config = Config(retries={'max_attempts': 20, 'mode': 'standard'})\\n    ssm = boto3.client('ssm', config=config)\\n\\n    if 'ExecutionId' not in events:\\n        raise KeyError('Requires ExecutionId')\\n\\n    if not events['ExecutionId']:\\n        raise KeyError('Requires not empty ExecutionId')\\n\\n    response = ssm.get_automation_execution(AutomationExecutionId=events['ExecutionId'])\\n    response_parameters = response['AutomationExecution']['Parameters']\\n    # TODO DIG-853\\n    for parameter in response_parameters:\\n        output[parameter] = response_parameters[parameter]\\n\\n    return output\"\n    }\n  }, {\n    \"name\" : \"PrepareRollbackOfPreviousExecution\",\n    \"description\" : \"Get original throttling settings for rollback\",\n    \"action\" : \"aws:executeScript\",\n    \"outputs\" : [ {\n      \"Name\" : \"HttpWsThrottlingRateOriginalValue\",\n      \"Selector\" : \"$.Payload.HttpWsThrottlingRateOriginalValue[0]\",\n      \"Type\" : \"String\"\n    }, {\n      \"Name\" : \"HttpWsThrottlingBurstOriginalValue\",\n      \"Selector\" : \"$.Payload.HttpWsThrottlingBurstOriginalValue[0]\",\n      \"Type\" : \"String\"\n    } ],\n    \"inputs\" : {\n      \"Runtime\" : \"python3.8\",\n      \"Handler\" : \"get_output_from_ssm_step_execution\",\n      \"InputPayload\" : {\n        \"ExecutionId\" : \"{{ PreviousExecutionId }}\",\n        \"StepName\" : \"BackupThrottlingConfiguration\",\n        \"ResponseField\" : \"HttpWsThrottlingRateOriginalValue,HttpWsThrottlingBurstOriginalValue\"\n      },\n      \"Script\" : \"import json\\nimport boto3\\nfrom botocore.config import Config\\n\\n\\n\\ndef get_output_from_ssm_step_execution(events, context):\\n    config = Config(retries={'max_attempts': 20, 'mode': 'standard'})\\n    ssm = boto3.client('ssm', config=config)\\n\\n    if 'ExecutionId' not in events or 'StepName' not in events or 'ResponseField' not in events:\\n        raise KeyError('Requires ExecutionId, StepName and ResponseField in events')\\n\\n    ssm_response = ssm.get_automation_execution(AutomationExecutionId=events['ExecutionId'])\\n    for step in ssm_response['AutomationExecution']['StepExecutions']:\\n        if step['StepName'] == events['StepName']:\\n            response_fields = events['ResponseField'].split(',')\\n            output = {}\\n            for response_field in response_fields:\\n                if response_field in step['Outputs']:\\n                    # Sets values in string type regardless of what is the original value type. In order to set\\n                    # values with original types please use 'get_typed_output_from_ssm_step_execution'.\\n                    output[response_field] = step['Outputs'][response_field]\\n                else:\\n                    \\\"\\\"\\\"\\n                    By default SSM ignores empty values when encodes API outputs to JSON. It may result in\\n                    a situation when an empty value is a valid value but step output completely misses it.\\n                    Usually happens with SQS queue policies, default policy is returned by API as an empty value\\n                    and executeApi step output ignores it. As a result, further steps in rollback execution will fail.\\n                    Instead of ignoring this value we should use a default empty value in rollback, i.e. empty string\\n                    represents a default sqs policy\\n                    \\\"\\\"\\\"\\n                    output[response_field] = ['']\\n            return output\\n\\n    # Could not find step name\\n    raise Exception('Can not find step name % in ssm execution response', events['StepName'])\"\n    }\n  }, {\n    \"name\" : \"AssertHttpWsApiGwId\",\n    \"description\" : \"Validate that rollback is executed with the same input\",\n    \"action\" : \"aws:branch\",\n    \"inputs\" : {\n      \"Choices\" : [ {\n        \"NextStep\" : \"RollbackPreviousExecution\",\n        \"Variable\" : \"{{ GetInputsFromPreviousExecution.HttpWsApiGwId }}\",\n        \"StringEquals\" : \"{{ HttpWsApiGwId }}\"\n      } ]\n    },\n    \"isEnd\" : true\n  }, {\n    \"name\" : \"RollbackPreviousExecution\",\n    \"description\" : \"Restore original throttling settings for HTTP or WS API Gateway\",\n    \"maxAttempts\" : 5,\n    \"action\" : \"aws:executeScript\",\n    \"outputs\" : [ {\n      \"Name\" : \"HttpWsThrottlingRateNewValue\",\n      \"Selector\" : \"$.Payload.RateLimit\",\n      \"Type\" : \"Integer\"\n    }, {\n      \"Name\" : \"HttpWsThrottlingBurstNewValue\",\n      \"Selector\" : \"$.Payload.BurstLimit\",\n      \"Type\" : \"Integer\"\n    } ],\n    \"inputs\" : {\n      \"Runtime\" : \"python3.8\",\n      \"Handler\" : \"set_throttling_config\",\n      \"InputPayload\" : {\n        \"HttpWsApiGwId\" : \"{{ HttpWsApiGwId }}\",\n        \"HttpWsStageName\" : \"{{ HttpWsStageName }}\",\n        \"HttpWsThrottlingRate\" : \"{{ PrepareRollbackOfPreviousExecution.HttpWsThrottlingRateOriginalValue }}\",\n        \"HttpWsThrottlingBurst\" : \"{{ PrepareRollbackOfPreviousExecution.HttpWsThrottlingBurstOriginalValue }}\"\n      },\n      \"Script\" : \"import logging\\n\\nimport boto3\\nfrom botocore.config import Config\\n\\nlog = logging.getLogger()\\nlog.setLevel(logging.DEBUG)\\n\\n\\n\\ndef assert_https_status_code_200(response: dict, error_message: str) -> None:\\n    if not response['ResponseMetadata']['HTTPStatusCode'] == 200:\\n        raise ValueError(f'{error_message} Response is: {response}')\\n\\n\\n\\ndef get_service_quota(config: object, service_code: str, quota_code: str) -> dict:\\n    client = boto3.client('service-quotas', config=config)\\n    response = client.get_service_quota(ServiceCode=service_code, QuotaCode=quota_code)\\n    assert_https_status_code_200(response, f'Failed to perform get_service_quota with '\\n                                           f'ServiceCode: {service_code} and QuotaCode: {quota_code}')\\n    return response\\n\\n\\n\\ndef get_stage(gateway_id: str, stage_name: str) -> dict:\\n    config = Config(retries={'max_attempts': 20, 'mode': 'standard'})\\n    client = boto3.client('apigatewayv2', config=config)\\n    response = client.get_stage(ApiId=gateway_id, StageName=stage_name)\\n    assert_https_status_code_200(response, f'Failed to perform get_stage with '\\n                                           f'ApiId: {gateway_id} and StageName: {stage_name}')\\n    return response\\n\\n\\n\\ndef set_throttling_config(events: dict, context: dict) -> dict:\\n    if 'HttpWsApiGwId' not in events:\\n        raise KeyError('Requires HttpWsApiGwId in events')\\n\\n    if 'HttpWsThrottlingRate' not in events:\\n        raise KeyError('Requires HttpWsThrottlingRate in events')\\n\\n    if 'HttpWsThrottlingBurst' not in events:\\n        raise KeyError('Requires HttpWsThrottlingBurst in events')\\n\\n    if 'HttpWsStageName' not in events:\\n        raise KeyError('Requires HttpWsStageName in events')\\n\\n    new_rate_limit: float = float(events['HttpWsThrottlingRate'])\\n    new_burst_limit: int = int(events['HttpWsThrottlingBurst'])\\n    gateway_id: str = events.get('HttpWsApiGwId')\\n    stage_name: str = events.get('HttpWsStageName')\\n    route_key: str = events.get('HttpWsRouteKey', '*')\\n\\n    output: dict = {}\\n    quota_rate_limit_code: str = 'L-8A5B8E43'\\n    quota_burst_limit_code: str = 'L-CDF5615A'\\n\\n    boto3_config: object = Config(retries={'max_attempts': 20, 'mode': 'standard'})\\n    apigw2_client = boto3.client('apigatewayv2', config=boto3_config)\\n    quota_rate_limit: float = get_service_quota(boto3_config, 'apigateway', quota_rate_limit_code)['Quota']['Value']\\n    quota_burst_limit: float = get_service_quota(boto3_config, 'apigateway', quota_burst_limit_code)['Quota']['Value']\\n\\n    if new_rate_limit > quota_rate_limit:\\n        raise ValueError(f'Given value of HttpWsThrottlingRate: {new_rate_limit}, can not be more than '\\n                         f'service quota Throttle rate: {quota_rate_limit}')\\n\\n    if new_burst_limit > quota_burst_limit:\\n        raise ValueError(f'Given value of HttpWsThrottlingBurst: {new_burst_limit}, can not be more than '\\n                         f'service quota Throttle burst rate: {quota_burst_limit}')\\n\\n    stage = get_stage(gateway_id, stage_name)\\n\\n    if route_key != '*':\\n        stage_route_settings = stage['RouteSettings']\\n        if route_key not in stage_route_settings:\\n            stage_route_settings[route_key] = {}\\n        stage_route_settings[route_key]['ThrottlingRateLimit'] = new_rate_limit\\n        stage_route_settings[route_key]['ThrottlingBurstLimit'] = new_burst_limit\\n\\n        response = apigw2_client.update_stage(\\n            ApiId=gateway_id, StageName=stage_name, RouteSettings=stage_route_settings\\n        )\\n        output['RateLimit'] = response['RouteSettings'][route_key]['ThrottlingRateLimit']\\n        output['BurstLimit'] = response['RouteSettings'][route_key]['ThrottlingBurstLimit']\\n\\n    else:\\n        default_route_settings = {\\n            'ThrottlingRateLimit': new_rate_limit,\\n            'ThrottlingBurstLimit': new_burst_limit\\n        }\\n        response = apigw2_client.update_stage(\\n            ApiId=gateway_id, StageName=stage_name, DefaultRouteSettings=default_route_settings\\n        )\\n        output['RateLimit'] = response['DefaultRouteSettings']['ThrottlingRateLimit']\\n        output['BurstLimit'] = response['DefaultRouteSettings']['ThrottlingBurstLimit']\\n\\n    output['RateLimit'] = int(output['RateLimit'])\\n    return output\"\n    },\n    \"isEnd\" : true\n  }, {\n    \"name\" : \"AssertAlarmToBeGreenBeforeTest\",\n    \"description\" : \"Ensure alarm is green before starting test. Fail if alarm is not green within expected time.\",\n    \"action\" : \"aws:waitForAwsResourceProperty\",\n    \"maxAttempts\" : 1,\n    \"timeoutSeconds\" : 1200,\n    \"inputs\" : {\n      \"Service\" : \"cloudwatch\",\n      \"Api\" : \"DescribeAlarms\",\n      \"AlarmNames\" : [ \"{{4xxAlarmName}}\" ],\n      \"PropertySelector\" : \"$.MetricAlarms[0].StateValue\",\n      \"DesiredValues\" : [ \"OK\" ]\n    }\n  }, {\n    \"name\" : \"BackupThrottlingConfiguration\",\n    \"description\" : \"Backup original throttling settings for rollback\",\n    \"action\" : \"aws:executeAwsApi\",\n    \"outputs\" : [ {\n      \"Name\" : \"HttpWsThrottlingRateOriginalValue\",\n      \"Selector\" : \"$.DefaultRouteSettings.ThrottlingRateLimit\",\n      \"Type\" : \"Integer\"\n    }, {\n      \"Name\" : \"HttpWsThrottlingBurstOriginalValue\",\n      \"Selector\" : \"$.DefaultRouteSettings.ThrottlingBurstLimit\",\n      \"Type\" : \"Integer\"\n    } ],\n    \"inputs\" : {\n      \"Service\" : \"apigatewayv2\",\n      \"Api\" : \"GetStage\",\n      \"ApiId\" : \"{{ HttpWsApiGwId }}\",\n      \"StageName\" : \"{{ HttpWsStageName }}\"\n    }\n  }, {\n    \"name\" : \"ChangeThrottlingConfiguration\",\n    \"description\" : \"Inject failure by changing throttling settings for HTTP or WS API Gateway to 0\",\n    \"onFailure\" : \"step:RollbackCurrentExecution\",\n    \"onCancel\" : \"step:TriggerRollback\",\n    \"action\" : \"aws:executeScript\",\n    \"outputs\" : [ {\n      \"Name\" : \"HttpWsThrottlingRateNewValue\",\n      \"Selector\" : \"$.Payload.RateLimit\",\n      \"Type\" : \"Integer\"\n    }, {\n      \"Name\" : \"HttpWsThrottlingBurstNewValue\",\n      \"Selector\" : \"$.Payload.BurstLimit\",\n      \"Type\" : \"Integer\"\n    } ],\n    \"inputs\" : {\n      \"Runtime\" : \"python3.8\",\n      \"Handler\" : \"set_throttling_config\",\n      \"InputPayload\" : {\n        \"HttpWsApiGwId\" : \"{{ HttpWsApiGwId }}\",\n        \"HttpWsStageName\" : \"{{ HttpWsStageName }}\",\n        \"HttpWsThrottlingRate\" : 0,\n        \"HttpWsThrottlingBurst\" : 0.0\n      },\n      \"Script\" : \"import logging\\n\\nimport boto3\\nfrom botocore.config import Config\\n\\nlog = logging.getLogger()\\nlog.setLevel(logging.DEBUG)\\n\\n\\n\\ndef assert_https_status_code_200(response: dict, error_message: str) -> None:\\n    if not response['ResponseMetadata']['HTTPStatusCode'] == 200:\\n        raise ValueError(f'{error_message} Response is: {response}')\\n\\n\\n\\ndef get_service_quota(config: object, service_code: str, quota_code: str) -> dict:\\n    client = boto3.client('service-quotas', config=config)\\n    response = client.get_service_quota(ServiceCode=service_code, QuotaCode=quota_code)\\n    assert_https_status_code_200(response, f'Failed to perform get_service_quota with '\\n                                           f'ServiceCode: {service_code} and QuotaCode: {quota_code}')\\n    return response\\n\\n\\n\\ndef get_stage(gateway_id: str, stage_name: str) -> dict:\\n    config = Config(retries={'max_attempts': 20, 'mode': 'standard'})\\n    client = boto3.client('apigatewayv2', config=config)\\n    response = client.get_stage(ApiId=gateway_id, StageName=stage_name)\\n    assert_https_status_code_200(response, f'Failed to perform get_stage with '\\n                                           f'ApiId: {gateway_id} and StageName: {stage_name}')\\n    return response\\n\\n\\n\\ndef set_throttling_config(events: dict, context: dict) -> dict:\\n    if 'HttpWsApiGwId' not in events:\\n        raise KeyError('Requires HttpWsApiGwId in events')\\n\\n    if 'HttpWsThrottlingRate' not in events:\\n        raise KeyError('Requires HttpWsThrottlingRate in events')\\n\\n    if 'HttpWsThrottlingBurst' not in events:\\n        raise KeyError('Requires HttpWsThrottlingBurst in events')\\n\\n    if 'HttpWsStageName' not in events:\\n        raise KeyError('Requires HttpWsStageName in events')\\n\\n    new_rate_limit: float = float(events['HttpWsThrottlingRate'])\\n    new_burst_limit: int = int(events['HttpWsThrottlingBurst'])\\n    gateway_id: str = events.get('HttpWsApiGwId')\\n    stage_name: str = events.get('HttpWsStageName')\\n    route_key: str = events.get('HttpWsRouteKey', '*')\\n\\n    output: dict = {}\\n    quota_rate_limit_code: str = 'L-8A5B8E43'\\n    quota_burst_limit_code: str = 'L-CDF5615A'\\n\\n    boto3_config: object = Config(retries={'max_attempts': 20, 'mode': 'standard'})\\n    apigw2_client = boto3.client('apigatewayv2', config=boto3_config)\\n    quota_rate_limit: float = get_service_quota(boto3_config, 'apigateway', quota_rate_limit_code)['Quota']['Value']\\n    quota_burst_limit: float = get_service_quota(boto3_config, 'apigateway', quota_burst_limit_code)['Quota']['Value']\\n\\n    if new_rate_limit > quota_rate_limit:\\n        raise ValueError(f'Given value of HttpWsThrottlingRate: {new_rate_limit}, can not be more than '\\n                         f'service quota Throttle rate: {quota_rate_limit}')\\n\\n    if new_burst_limit > quota_burst_limit:\\n        raise ValueError(f'Given value of HttpWsThrottlingBurst: {new_burst_limit}, can not be more than '\\n                         f'service quota Throttle burst rate: {quota_burst_limit}')\\n\\n    stage = get_stage(gateway_id, stage_name)\\n\\n    if route_key != '*':\\n        stage_route_settings = stage['RouteSettings']\\n        if route_key not in stage_route_settings:\\n            stage_route_settings[route_key] = {}\\n        stage_route_settings[route_key]['ThrottlingRateLimit'] = new_rate_limit\\n        stage_route_settings[route_key]['ThrottlingBurstLimit'] = new_burst_limit\\n\\n        response = apigw2_client.update_stage(\\n            ApiId=gateway_id, StageName=stage_name, RouteSettings=stage_route_settings\\n        )\\n        output['RateLimit'] = response['RouteSettings'][route_key]['ThrottlingRateLimit']\\n        output['BurstLimit'] = response['RouteSettings'][route_key]['ThrottlingBurstLimit']\\n\\n    else:\\n        default_route_settings = {\\n            'ThrottlingRateLimit': new_rate_limit,\\n            'ThrottlingBurstLimit': new_burst_limit\\n        }\\n        response = apigw2_client.update_stage(\\n            ApiId=gateway_id, StageName=stage_name, DefaultRouteSettings=default_route_settings\\n        )\\n        output['RateLimit'] = response['DefaultRouteSettings']['ThrottlingRateLimit']\\n        output['BurstLimit'] = response['DefaultRouteSettings']['ThrottlingBurstLimit']\\n\\n    output['RateLimit'] = int(output['RateLimit'])\\n    return output\"\n    }\n  }, {\n    \"name\" : \"AssertAlarmToBeRed\",\n    \"description\" : \"Wait for expected alarm to be red after failure is injected\",\n    \"action\" : \"aws:waitForAwsResourceProperty\",\n    \"maxAttempts\" : 1,\n    \"timeoutSeconds\" : 900,\n    \"onFailure\" : \"step:RollbackCurrentExecution\",\n    \"onCancel\" : \"step:TriggerRollback\",\n    \"inputs\" : {\n      \"Service\" : \"cloudwatch\",\n      \"Api\" : \"DescribeAlarms\",\n      \"AlarmNames\" : [ \"{{4xxAlarmName}}\" ],\n      \"PropertySelector\" : \"$.MetricAlarms[0].StateValue\",\n      \"DesiredValues\" : [ \"ALARM\" ]\n    }\n  }, {\n    \"name\" : \"RollbackCurrentExecution\",\n    \"description\" : \"Restore original throttling settings for HTTP or WS API Gateway\",\n    \"maxAttempts\" : 5,\n    \"onCancel\" : \"step:TriggerRollback\",\n    \"action\" : \"aws:executeScript\",\n    \"outputs\" : [ {\n      \"Name\" : \"HttpWsThrottlingRateNewValue\",\n      \"Selector\" : \"$.Payload.RateLimit\",\n      \"Type\" : \"Integer\"\n    }, {\n      \"Name\" : \"HttpWsThrottlingBurstNewValue\",\n      \"Selector\" : \"$.Payload.BurstLimit\",\n      \"Type\" : \"Integer\"\n    } ],\n    \"inputs\" : {\n      \"Runtime\" : \"python3.8\",\n      \"Handler\" : \"set_throttling_config\",\n      \"InputPayload\" : {\n        \"HttpWsApiGwId\" : \"{{ HttpWsApiGwId }}\",\n        \"HttpWsStageName\" : \"{{ HttpWsStageName }}\",\n        \"HttpWsThrottlingRate\" : \"{{ BackupThrottlingConfiguration.HttpWsThrottlingRateOriginalValue }}\",\n        \"HttpWsThrottlingBurst\" : \"{{ BackupThrottlingConfiguration.HttpWsThrottlingBurstOriginalValue }}\"\n      },\n      \"Script\" : \"import logging\\n\\nimport boto3\\nfrom botocore.config import Config\\n\\nlog = logging.getLogger()\\nlog.setLevel(logging.DEBUG)\\n\\n\\n\\ndef assert_https_status_code_200(response: dict, error_message: str) -> None:\\n    if not response['ResponseMetadata']['HTTPStatusCode'] == 200:\\n        raise ValueError(f'{error_message} Response is: {response}')\\n\\n\\n\\ndef get_service_quota(config: object, service_code: str, quota_code: str) -> dict:\\n    client = boto3.client('service-quotas', config=config)\\n    response = client.get_service_quota(ServiceCode=service_code, QuotaCode=quota_code)\\n    assert_https_status_code_200(response, f'Failed to perform get_service_quota with '\\n                                           f'ServiceCode: {service_code} and QuotaCode: {quota_code}')\\n    return response\\n\\n\\n\\ndef get_stage(gateway_id: str, stage_name: str) -> dict:\\n    config = Config(retries={'max_attempts': 20, 'mode': 'standard'})\\n    client = boto3.client('apigatewayv2', config=config)\\n    response = client.get_stage(ApiId=gateway_id, StageName=stage_name)\\n    assert_https_status_code_200(response, f'Failed to perform get_stage with '\\n                                           f'ApiId: {gateway_id} and StageName: {stage_name}')\\n    return response\\n\\n\\n\\ndef set_throttling_config(events: dict, context: dict) -> dict:\\n    if 'HttpWsApiGwId' not in events:\\n        raise KeyError('Requires HttpWsApiGwId in events')\\n\\n    if 'HttpWsThrottlingRate' not in events:\\n        raise KeyError('Requires HttpWsThrottlingRate in events')\\n\\n    if 'HttpWsThrottlingBurst' not in events:\\n        raise KeyError('Requires HttpWsThrottlingBurst in events')\\n\\n    if 'HttpWsStageName' not in events:\\n        raise KeyError('Requires HttpWsStageName in events')\\n\\n    new_rate_limit: float = float(events['HttpWsThrottlingRate'])\\n    new_burst_limit: int = int(events['HttpWsThrottlingBurst'])\\n    gateway_id: str = events.get('HttpWsApiGwId')\\n    stage_name: str = events.get('HttpWsStageName')\\n    route_key: str = events.get('HttpWsRouteKey', '*')\\n\\n    output: dict = {}\\n    quota_rate_limit_code: str = 'L-8A5B8E43'\\n    quota_burst_limit_code: str = 'L-CDF5615A'\\n\\n    boto3_config: object = Config(retries={'max_attempts': 20, 'mode': 'standard'})\\n    apigw2_client = boto3.client('apigatewayv2', config=boto3_config)\\n    quota_rate_limit: float = get_service_quota(boto3_config, 'apigateway', quota_rate_limit_code)['Quota']['Value']\\n    quota_burst_limit: float = get_service_quota(boto3_config, 'apigateway', quota_burst_limit_code)['Quota']['Value']\\n\\n    if new_rate_limit > quota_rate_limit:\\n        raise ValueError(f'Given value of HttpWsThrottlingRate: {new_rate_limit}, can not be more than '\\n                         f'service quota Throttle rate: {quota_rate_limit}')\\n\\n    if new_burst_limit > quota_burst_limit:\\n        raise ValueError(f'Given value of HttpWsThrottlingBurst: {new_burst_limit}, can not be more than '\\n                         f'service quota Throttle burst rate: {quota_burst_limit}')\\n\\n    stage = get_stage(gateway_id, stage_name)\\n\\n    if route_key != '*':\\n        stage_route_settings = stage['RouteSettings']\\n        if route_key not in stage_route_settings:\\n            stage_route_settings[route_key] = {}\\n        stage_route_settings[route_key]['ThrottlingRateLimit'] = new_rate_limit\\n        stage_route_settings[route_key]['ThrottlingBurstLimit'] = new_burst_limit\\n\\n        response = apigw2_client.update_stage(\\n            ApiId=gateway_id, StageName=stage_name, RouteSettings=stage_route_settings\\n        )\\n        output['RateLimit'] = response['RouteSettings'][route_key]['ThrottlingRateLimit']\\n        output['BurstLimit'] = response['RouteSettings'][route_key]['ThrottlingBurstLimit']\\n\\n    else:\\n        default_route_settings = {\\n            'ThrottlingRateLimit': new_rate_limit,\\n            'ThrottlingBurstLimit': new_burst_limit\\n        }\\n        response = apigw2_client.update_stage(\\n            ApiId=gateway_id, StageName=stage_name, DefaultRouteSettings=default_route_settings\\n        )\\n        output['RateLimit'] = response['DefaultRouteSettings']['ThrottlingRateLimit']\\n        output['BurstLimit'] = response['DefaultRouteSettings']['ThrottlingBurstLimit']\\n\\n    output['RateLimit'] = int(output['RateLimit'])\\n    return output\"\n    }\n  }, {\n    \"name\" : \"AssertAlarmToBeGreen\",\n    \"description\" : \"Wait for the alarm to be green after test is complete\",\n    \"action\" : \"aws:waitForAwsResourceProperty\",\n    \"maxAttempts\" : 1,\n    \"timeoutSeconds\" : 1200,\n    \"inputs\" : {\n      \"Service\" : \"cloudwatch\",\n      \"Api\" : \"DescribeAlarms\",\n      \"AlarmNames\" : [ \"{{4xxAlarmName}}\" ],\n      \"PropertySelector\" : \"$.MetricAlarms[0].StateValue\",\n      \"DesiredValues\" : [ \"OK\" ]\n    },\n    \"isEnd\" : true\n  }, {\n    \"name\" : \"TriggerRollback\",\n    \"description\" : \"This step is executed when ssm document is cancelled while it was in progress. This step starts a new execution of document in rollback mode to rollback the changes made as part of normal execution\",\n    \"action\" : \"aws:executeScript\",\n    \"onFailure\" : \"Abort\",\n    \"outputs\" : [ {\n      \"Name\" : \"RollbackExecutionId\",\n      \"Selector\" : \"$.Payload.RollbackExecutionId\",\n      \"Type\" : \"String\"\n    } ],\n    \"inputs\" : {\n      \"Runtime\" : \"python3.8\",\n      \"Handler\" : \"start_rollback_execution\",\n      \"InputPayload\" : {\n        \"ExecutionId\" : \"{{automation:EXECUTION_ID}}\"\n      },\n      \"Script\" : \"import json\\nimport boto3\\nfrom botocore.config import Config\\n\\n\\n\\ndef start_rollback_execution(events, context):\\n    output = {}\\n    config = Config(retries={'max_attempts': 20, 'mode': 'standard'})\\n    ssm = boto3.client('ssm', config=config)\\n\\n    if 'ExecutionId' not in events or not events['ExecutionId']:\\n        raise KeyError('Requires not empty ExecutionId')\\n\\n    response = ssm.get_automation_execution(AutomationExecutionId=events['ExecutionId'])\\n\\n    # Get parameters for current execution and add IsRollback and PreviousExecutionId\\n    response_parameters = response['AutomationExecution']['Parameters']\\n    response_parameters['IsRollback'] = ['true']\\n    response_parameters['PreviousExecutionId'] = [events['ExecutionId']]\\n\\n    rollback_execution_response = ssm.start_automation_execution(\\n        DocumentName=response['AutomationExecution']['DocumentName'],\\n        DocumentVersion=response['AutomationExecution']['DocumentVersion'],\\n        Parameters=response_parameters\\n    )\\n    output['RollbackExecutionId'] = rollback_execution_response['AutomationExecutionId']\\n    return output\"\n    },\n    \"isEnd\" : true\n  } ]\n}",
  "CreatedDate": "2022-04-25T18:29:59.433Z",
  "DisplayName": null,
  "DocumentFormat": {
    "Value": "JSON"
  },
  "DocumentType": {
    "Value": "Automation"
  },
  "DocumentVersion": "2",
  "Name": "AWSResilienceHub-TriggerHttpWsApiGwThrottlingTest_2020-09-21",
  "Requires": [],
  "ReviewStatus": null,
  "Status": {
    "Value": "Active"
  },
  "StatusInformation": null,
  "VersionName": null,
  "ResponseMetadata": {
    "RequestId": "ca980741-d379-4ba7-9e5e-685a7fd487c7",
    "Metadata": {},
    "ChecksumAlgorithm": 0,
    "ChecksumValidationStatus": 0
  },
  "ContentLength": 30783,
  "HttpStatusCode": 200,
  "LoggedAt": "2022-06-01T07:15:40.0003702+00:00"
}
