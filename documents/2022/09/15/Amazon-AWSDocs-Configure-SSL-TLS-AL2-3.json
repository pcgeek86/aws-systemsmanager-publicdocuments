{
  "AttachmentsContent": [],
  "Content": "{\n  \"description\" : \"Tutorial: Configuring SSL/TLS with Amazon Linux 2\\n===\\n\\nThis procedure takes you through the process of setting up TLS on Amazon Linux 2 with a self-signed digital\\ncertificate.\\n\\nNote:  A self-signed certificate is acceptable for testing but not production. If you expose your self-signed\\ncertificate to the internet, visitors to your site are greeted by security warnings.\\n\\nPre-requisites\\n---\\n\\nTo run the following Automation document, you must have permissions to run Automation workflows. \\nThe Automation workflow runs in the context of the current Amazon Identity and Access Management (IAM) user.\\nAdditionally, you must run the Automation document [```AWS-InstallALAMPServer-AL2```](https://console.aws.amazon.com/systems-manager/documents/AWS-InstallALAMPServer-AL2/description)\\n before using this document. This document installs a WordPress blog on the instance \\nlaunched in ```AWS-InstallALAMPServer-AL2```.\\n\\nOutputs\\n---\\n\\nOnce the Automation has completed, you will be able to use HTTPS to connect to your web server by navigating to the public DNS address (or the public IP address) of the launched instance. For example:\\n\\n>https://my.public.dns.amazonaws.com/\\n\\nCleanup\\n---\\n\\nTo remove resources created by this Automation document. Navigate to the [CloudFormation console](https://console.aws.amazon.com/cloudformation/home) and delete the stack created by the preceding Automation document. \\n\\n**Important:**\\n\\nIf you delete the stack created, then you must run the document ```AWS-InstallALAMPServer-AL2``` again before using this Automation document.\\n\\n*Provide feedback [here](https://docs.aws.amazon.com/forms/aws-doc-feedback?feedback_destination_id=fdb9de10-9bb3-4e90-b330-df8c2533c9dd&topic_url=http://docs.aws.amazon.com/AutomatedTutorials/AWSDocs-Configure-SSL-TLS-AL2).*\",\n  \"mainSteps\" : [ {\n    \"action\" : \"aws:assertAwsResourceProperty\",\n    \"inputs\" : {\n      \"Api\" : \"DescribeStacks\",\n      \"DesiredValues\" : [ \"CREATE_COMPLETE\" ],\n      \"PropertySelector\" : \"$.Stacks[0].StackStatus\",\n      \"Service\" : \"cloudformation\",\n      \"StackName\" : \"LAMPStack-AL2\"\n    },\n    \"name\" : \"checkForCloudFormationStack\",\n    \"nextStep\" : \"outputPublicDNS\",\n    \"onFailure\" : \"step:RunInstallALAMPServerAL2\"\n  }, {\n    \"action\" : \"aws:executeAutomation\",\n    \"inputs\" : {\n      \"DocumentName\" : \"AWSDocs-InstallALAMPServer-AL2\"\n    },\n    \"maxAttempts\" : 3,\n    \"name\" : \"RunInstallALAMPServerAL2\",\n    \"nextStep\" : \"outputPublicDNS\",\n    \"onFailure\" : \"Abort\",\n    \"timeoutSeconds\" : 3600\n  }, {\n    \"action\" : \"aws:runCommand\",\n    \"description\" : \"**Output the public DNS address for the launched EC2 instance**\\n\\nThis step outputs the public DNS address for the EC2 instance launched. You can use this public DNS address to connect to the WordPress blog setup once the Automation workflow has completed. Select the radio button next to the Step execution ID to display the public DNS address of the EC2 instance.\",\n    \"inputs\" : {\n      \"Comment\" : \"Outputting public DNS address of EC2 instance\",\n      \"DocumentName\" : \"AWS-RunShellScript\",\n      \"Parameters\" : {\n        \"commands\" : [ \"curl -fsq http://169.254.169.254/latest/meta-data/public-hostname\" ],\n        \"executionTimeout\" : \"3600\",\n        \"workingDirectory\" : \"\"\n      },\n      \"Targets\" : [ {\n        \"Key\" : \"tag:Name\",\n        \"Values\" : [ \"Automation-LAMPStack-AL2\" ]\n      } ]\n    },\n    \"name\" : \"outputPublicDNS\"\n  }, {\n    \"action\" : \"aws:executeAwsApi\",\n    \"description\" : \"** List the security groups**\\n\\nIn order to add port 443 to the allowed ingress rules in the EC2 instance created by the LAMP stack CloudFormation template,\\nyou must determine the GroupId of the ingress rule since it won't be in the default VPC.\",\n    \"inputs\" : {\n      \"Api\" : \"DescribeSecurityGroups\",\n      \"Filters\" : [ {\n        \"Name\" : \"group-name\",\n        \"Values\" : [ \"Automation-LAMPStack-AL2-HTTP\" ]\n      } ],\n      \"Service\" : \"ec2\"\n    },\n    \"name\" : \"GetGroupId\",\n    \"outputs\" : [ {\n      \"Name\" : \"EC2GroupId\",\n      \"Selector\" : \"$.SecurityGroups[0].GroupId\",\n      \"Type\" : \"String\"\n    } ]\n  }, {\n    \"action\" : \"aws:executeAwsApi\",\n    \"description\" : \"** Add the security ingress **\\n\\nThis step adds port 443 to the allowed ingress rules for the VPC created by the LAMP stack CloudFormation template.\",\n    \"inputs\" : {\n      \"Api\" : \"AuthorizeSecurityGroupIngress\",\n      \"CidrIp\" : \"0.0.0.0/0\",\n      \"FromPort\" : 443,\n      \"GroupId\" : \"{{ GetGroupId.EC2GroupId }}\",\n      \"IpProtocol\" : \"tcp\",\n      \"Service\" : \"ec2\",\n      \"ToPort\" : 443\n    },\n    \"name\" : \"AddIngressRule\"\n  }, {\n    \"action\" : \"aws:runCommand\",\n    \"description\" : \"**Verify that Apache is running and enabled.**\\n\\nThis step verifies that Apache has been enabled on the AL2 stack. \",\n    \"inputs\" : {\n      \"Comment\" : \"Verifying that Apache HTTPd is enabled\",\n      \"DocumentName\" : \"AWS-RunShellScript\",\n      \"Parameters\" : {\n        \"commands\" : [ \"sudo systemctl start httpd\", \"sudo systemctl enable httpd\" ],\n        \"executionTimeout\" : \"3600\",\n        \"workingDirectory\" : \"\"\n      },\n      \"Targets\" : [ {\n        \"Key\" : \"tag:Name\",\n        \"Values\" : [ \"Automation-LAMPStack-AL2\" ]\n      } ]\n    },\n    \"name\" : \"verifyHTTPdEnabled\"\n  }, {\n    \"action\" : \"aws:runCommand\",\n    \"description\" : \"**Install mod_ssl**\\n\\nThis step updates any dependencies and installs mod_ssl. \",\n    \"inputs\" : {\n      \"Comment\" : \"Installing dependencies\",\n      \"DocumentName\" : \"AWS-RunShellScript\",\n      \"Parameters\" : {\n        \"commands\" : [ \"echo \\\"Cleaning up house...\\\"\", \"sudo yum-complete-transaction -y\", \"echo \\\"Updating any outstanding packages\\\"\", \"sudo yum update -y\", \"echo \\\"Installing mod_ssl\\\"\", \"sudo yum install -y mod_ssl\" ],\n        \"executionTimeout\" : \"3600\",\n        \"workingDirectory\" : \"\"\n      },\n      \"Targets\" : [ {\n        \"Key\" : \"tag:Name\",\n        \"Values\" : [ \"Automation-LAMPStack-AL2\" ]\n      } ]\n    },\n    \"name\" : \"InstallDependencies\"\n  }, {\n    \"action\" : \"aws:runCommand\",\n    \"description\" : \"**Create SSL certificate**\\n\\nThis step creates a self-signed certificate chain for use locally. \",\n    \"inputs\" : {\n      \"Comment\" : \"Creating SSL Certificate\",\n      \"DocumentName\" : \"AWS-RunShellScript\",\n      \"Parameters\" : {\n        \"commands\" : [ \"sudo ./make-dummy-cert localhost.crt\" ],\n        \"executionTimeout\" : \"3600\",\n        \"workingDirectory\" : \"/etc/pki/tls/certs\"\n      },\n      \"Targets\" : [ {\n        \"Key\" : \"tag:Name\",\n        \"Values\" : [ \"Automation-LAMPStack-AL2\" ]\n      } ]\n    },\n    \"name\" : \"CreateCertificate\"\n  }, {\n    \"action\" : \"aws:runCommand\",\n    \"description\" : \"**Modify the mod_ssl configuration**\\n\\nComment out the `SSLCertificateKeyFile` option in `ssl.conf` so that the httpd doesn't fail to\\nfind it.\\n\\nSince the SSL certificate created in the `CreateCertificate` step contains the key as a single file,\\nthe httpd won't find a separate key file. This is fine for a self-signed certificate, but the two\\nparts should be separated for use in production. \\n\\nThe HTTPD is then reloaded. \",\n    \"inputs\" : {\n      \"Comment\" : \"Modifying ssl.conf\",\n      \"DocumentName\" : \"AWS-RunShellScript\",\n      \"Parameters\" : {\n        \"commands\" : [ \"sudo sed -e '/SSLCertificateKeyFile/ s/^/#/' -i ssl.conf\", \"sudo systemctl reload httpd\" ],\n        \"executionTimeout\" : \"3600\",\n        \"workingDirectory\" : \"/etc/httpd/conf.d/\"\n      },\n      \"Targets\" : [ {\n        \"Key\" : \"tag:Name\",\n        \"Values\" : [ \"Automation-LAMPStack-AL2\" ]\n      } ]\n    },\n    \"name\" : \"ModifySSLConfAndReload\"\n  }, {\n    \"action\" : \"aws:runCommand\",\n    \"description\" : \"**Verify that HTTPS has been turned on**\\n\\nBecause the HTTPd configuration has been modified, it's important that the result of those modifications\\nbe verified. Using curl, the local configuration is checked to make sure that at least local TLS is turned on\\nand working properly.\",\n    \"inputs\" : {\n      \"Comment\" : \"Verifying SSL has been enabled.\",\n      \"DocumentName\" : \"AWS-RunShellScript\",\n      \"Parameters\" : {\n        \"commands\" : [ \"curl -k https://localhost/\" ]\n      },\n      \"Targets\" : [ {\n        \"Key\" : \"tag:Name\",\n        \"Values\" : [ \"Automation-LAMPStack-AL2\" ]\n      } ]\n    },\n    \"isEnd\" : true,\n    \"name\" : \"VerifyHTTPSLocally\"\n  }, {\n    \"action\" : \"aws:deleteStack\",\n    \"description\" : \"**Remove the CloudFormation Template and Associated Resources**\\n\\nThis step deletes the CloudFormation stack and the associated resources originally launched using the Automation document ```AWS-InstallALAMPServer-AL```.\\n\\n**Note**\\n\\nIf you run this step, the EC2 instance that was launched will be terminated.\",\n    \"inputs\" : {\n      \"StackName\" : \"LAMPStack-AL2\"\n    },\n    \"isEnd\" : true,\n    \"maxAttempts\" : 1,\n    \"name\" : \"deleteStackOnCompletion\"\n  } ],\n  \"schemaVersion\" : \"0.3\"\n}",
  "CreatedDate": "2021-05-07T22:32:39.362Z",
  "DisplayName": null,
  "DocumentFormat": {
    "Value": "JSON"
  },
  "DocumentType": {
    "Value": "Automation"
  },
  "DocumentVersion": "3",
  "Name": "AWSDocs-Configure-SSL-TLS-AL2",
  "Requires": [],
  "ReviewStatus": null,
  "Status": {
    "Value": "Active"
  },
  "StatusInformation": null,
  "VersionName": null,
  "ResponseMetadata": {
    "RequestId": "d567d9a0-85e6-4488-849d-e5b181336f69",
    "Metadata": {},
    "ChecksumAlgorithm": 0,
    "ChecksumValidationStatus": 0
  },
  "ContentLength": 9741,
  "HttpStatusCode": 200,
  "LoggedAt": "2022-09-15T07:28:08.7817236+00:00"
}
