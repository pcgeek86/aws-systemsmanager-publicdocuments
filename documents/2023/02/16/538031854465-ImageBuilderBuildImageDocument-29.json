{
  "AttachmentsContent": [],
  "Content": "{\"schemaVersion\": \"0.3\", \"description\": \"A composite document for building image with Image Builder\", \"parameters\": {\"arn\": {\"type\": \"String\", \"description\": \"The Image ARN\"}, \"platform\": {\"type\": \"String\", \"description\": \"The Image platform\"}, \"s3LogsBucketName\": {\"type\": \"String\", \"default\": \"imagebuilder-placeholder\"}, \"s3LogsKeyPrefix\": {\"type\": \"String\", \"default\": \"ImageBuilder-{{automation:EXECUTION_ID}}\"}, \"cloudWatchLogGroup\": {\"type\": \"String\"}, \"cloudWatchLogStream\": {\"type\": \"String\"}, \"imageVersionNumber\": {\"type\": \"String\", \"description\": \"The image version number\"}, \"imageBuildNumber\": {\"type\": \"String\", \"description\": \"The image build number\"}, \"isBuildWorkflow\": {\"type\": \"Boolean\", \"default\": false}, \"isTestWorkflow\": {\"type\": \"Boolean\", \"default\": false}, \"instanceId\": {\"type\": \"String\", \"description\": \"(Required) Launched Instance Id\"}, \"runCommandDocument\": {\"type\": \"String\"}, \"buildCommands\": {\"type\": \"String\", \"description\": \"The commands used to bootstrap the instance.\"}, \"workingDirectory\": {\"type\": \"String\"}, \"collectImageMetadata\": {\"type\": \"Boolean\", \"default\": false}, \"ssmUninstallCommands\": {\"type\": \"String\", \"description\": \"The commands used to uninstall SSM agent on the instance if required\", \"default\": \"\"}, \"imageName\": {\"type\": \"String\", \"description\": \"(Optional) An image name\", \"default\": \"{{imageName}}/{{imageVersionNumber}}/{{imageBuildNumber}}\"}, \"imageDescription\": {\"type\": \"String\", \"description\": \"(Optional) An image description\", \"default\": \"\"}, \"imageTagSpecification\": {\"type\": \"MapList\", \"description\": \"(Optional) Tags should be applied to the output image and snapshot\"}, \"terminateInstanceOnFailure\": {\"type\": \"Boolean\", \"description\": \"(Optional) Terminate the instance when build failed\", \"default\": true}}, \"mainSteps\": [{\"name\": \"WaitForInstanceToSpinUp\", \"action\": \"aws:waitForAwsResourceProperty\", \"onFailure\": \"step:WaitBeforeDescribingInstanceAgain\", \"timeoutSeconds\": 600, \"isCritical\": false, \"maxAttempts\": 3, \"nextStep\": \"VerifySSMAgentBranch\", \"inputs\": {\"Service\": \"ec2\", \"Api\": \"DescribeInstanceStatus\", \"InstanceIds\": [\"{{instanceId}}\"], \"PropertySelector\": \"$.InstanceStatuses[0].InstanceStatus.Details[0].Status\", \"DesiredValues\": [\"passed\"]}}, {\"name\": \"WaitBeforeDescribingInstanceAgain\", \"action\": \"aws:sleep\", \"maxAttempts\": 3, \"onFailure\": \"step:FailureHandling\", \"nextStep\": \"WaitForInstanceToSpinUpRetry\", \"inputs\": {\"Duration\": \"PT2M\"}}, {\"name\": \"WaitForInstanceToSpinUpRetry\", \"action\": \"aws:waitForAwsResourceProperty\", \"onFailure\": \"step:FailureHandling\", \"timeoutSeconds\": 600, \"maxAttempts\": 3, \"inputs\": {\"Service\": \"ec2\", \"Api\": \"DescribeInstanceStatus\", \"InstanceIds\": [\"{{instanceId}}\"], \"PropertySelector\": \"$.InstanceStatuses[0].InstanceStatus.Details[0].Status\", \"DesiredValues\": [\"passed\"]}}, {\"name\": \"VerifySSMAgentBranch\", \"action\": \"aws:branch\", \"inputs\": {\"Choices\": [{\"NextStep\": \"VerifySSMAgentLinux\", \"Variable\": \"{{platform}}\", \"StringEquals\": \"Linux\"}], \"Default\": \"VerifySSMAgentWindows\"}}, {\"name\": \"VerifySSMAgentLinux\", \"action\": \"aws:runCommand\", \"maxAttempts\": 3, \"timeoutSeconds\": 300, \"onFailure\": \"step:FailureHandling\", \"inputs\": {\"InstanceIds\": [\"{{instanceId}}\"], \"DocumentName\": \"{{runCommandDocument}}\", \"Parameters\": {\"workingDirectory\": \"{{workingDirectory}}\", \"commands\": [\"echo \\\"SSM Agent (Linux) is ready\\\"\\n\"], \"executionTimeout\": \"300\"}}, \"nextStep\": \"EndOfVerifySSMAgentBranch\"}, {\"name\": \"VerifySSMAgentWindows\", \"action\": \"aws:runCommand\", \"maxAttempts\": 3, \"timeoutSeconds\": 300, \"onFailure\": \"step:FailureHandling\", \"inputs\": {\"InstanceIds\": [\"{{instanceId}}\"], \"DocumentName\": \"{{runCommandDocument}}\", \"Parameters\": {\"workingDirectory\": \"{{workingDirectory}}\", \"commands\": [\"Write-Host \\\"SSM Agent (Windows) is ready\\\"\\n\"], \"executionTimeout\": \"300\"}}, \"nextStep\": \"EndOfVerifySSMAgentBranch\"}, {\"name\": \"EndOfVerifySSMAgentBranch\", \"action\": \"aws:sleep\", \"maxAttempts\": 3, \"onFailure\": \"step:FailureHandling\", \"inputs\": {\"Duration\": \"PT5S\"}}, {\"name\": \"RunBuildScriptsBranch\", \"action\": \"aws:branch\", \"inputs\": {\"Choices\": [{\"NextStep\": \"RunBuildScriptsWithoutLogging\", \"Variable\": \"{{s3LogsBucketName}}\", \"StringEquals\": \"imagebuilder-placeholder\"}], \"Default\": \"RunBuildScriptsWithLogging\"}}, {\"name\": \"RunBuildScriptsWithLogging\", \"action\": \"aws:runCommand\", \"maxAttempts\": 3, \"timeoutSeconds\": 43200, \"onFailure\": \"step:FailureHandling\", \"inputs\": {\"InstanceIds\": [\"{{instanceId}}\"], \"DocumentName\": \"{{runCommandDocument}}\", \"Parameters\": {\"workingDirectory\": \"{{workingDirectory}}\", \"commands\": \"{{buildCommands}}\", \"executionTimeout\": \"43200\"}, \"OutputS3BucketName\": \"{{s3LogsBucketName}}\", \"OutputS3KeyPrefix\": \"{{s3LogsKeyPrefix}}/{{imageName}}/{{imageVersionNumber}}/{{imageBuildNumber}}/Automations/RunBuildScripts\"}, \"nextStep\": \"EndOfRunBuildScriptsBranch\"}, {\"name\": \"RunBuildScriptsWithoutLogging\", \"action\": \"aws:runCommand\", \"maxAttempts\": 3, \"timeoutSeconds\": 43200, \"onFailure\": \"step:FailureHandling\", \"inputs\": {\"InstanceIds\": [\"{{instanceId}}\"], \"DocumentName\": \"{{runCommandDocument}}\", \"Parameters\": {\"workingDirectory\": \"{{workingDirectory}}\", \"commands\": \"{{buildCommands}}\", \"executionTimeout\": \"43200\"}}, \"nextStep\": \"EndOfRunBuildScriptsBranch\"}, {\"name\": \"EndOfRunBuildScriptsBranch\", \"action\": \"aws:sleep\", \"maxAttempts\": 3, \"onFailure\": \"step:FailureHandling\", \"inputs\": {\"Duration\": \"PT5S\"}}, {\"name\": \"CollectImageMetaDataBranch\", \"action\": \"aws:branch\", \"inputs\": {\"Choices\": [{\"NextStep\": \"CreateInventory\", \"Variable\": \"{{collectImageMetadata}}\", \"BooleanEquals\": true}], \"Default\": \"EndOfCollectImageMetaDataBranch\"}}, {\"name\": \"CreateInventory\", \"maxAttempts\": 3, \"onFailure\": \"step:FailureHandling\", \"action\": \"aws:executeAwsApi\", \"inputs\": {\"Service\": \"ssm\", \"Api\": \"CreateAssociation\", \"AssociationName\": \"AssociationFor{{ automation:EXECUTION_ID }}\", \"Name\": \"AWS-GatherSoftwareInventory\", \"Parameters\": {\"applications\": [\"Enabled\"], \"awsComponents\": [\"Enabled\"]}, \"Targets\": [{\"Key\": \"InstanceIds\", \"Values\": [\"{{ instanceId }}\"]}], \"ScheduleExpression\": \"rate(30 minutes)\"}, \"outputs\": [{\"Name\": \"AssociationId\", \"Selector\": \"$.AssociationDescription.AssociationId\", \"Type\": \"String\"}]}, {\"name\": \"WaitForInventoryAssociation\", \"action\": \"aws:waitForAwsResourceProperty\", \"maxAttempts\": 3, \"onFailure\": \"step:FailureHandling\", \"nextStep\": \"AssertInventoryCollection\", \"inputs\": {\"Service\": \"ssm\", \"Api\": \"DescribeAssociationExecutions\", \"AssociationId\": \"{{ CreateInventory.AssociationId }}\", \"PropertySelector\": \"$.AssociationExecutions[0].Status\", \"DesiredValues\": [\"Success\", \"Failed\"]}}, {\"name\": \"AssertInventoryCollection\", \"action\": \"aws:assertAwsResourceProperty\", \"isCritical\": true, \"onFailure\": \"step:FailureHandling\", \"maxAttempts\": 3, \"inputs\": {\"Service\": \"ssm\", \"Api\": \"DescribeAssociationExecutions\", \"AssociationId\": \"{{ CreateInventory.AssociationId }}\", \"PropertySelector\": \"$.AssociationExecutions[0].Status\", \"DesiredValues\": [\"Success\"]}}, {\"name\": \"TriggerMetaDataCollection\", \"action\": \"aws:sleep\", \"maxAttempts\": 3, \"onFailure\": \"step:FailureHandling\", \"inputs\": {\"Duration\": \"PT2M\"}}, {\"name\": \"PauseForInventoryCollection\", \"action\": \"aws:pause\", \"inputs\": {}}, {\"name\": \"DeleteInventoryAssociation\", \"action\": \"aws:executeAwsApi\", \"maxAttempts\": 3, \"onFailure\": \"step:FailureHandling\", \"inputs\": {\"Service\": \"ssm\", \"Api\": \"DeleteAssociation\", \"AssociationId\": \"{{ CreateInventory.AssociationId }}\"}}, {\"name\": \"EndOfCollectImageMetaDataBranch\", \"action\": \"aws:sleep\", \"maxAttempts\": 3, \"onFailure\": \"step:FailureHandling\", \"inputs\": {\"Duration\": \"PT5S\"}}, {\"name\": \"RunSysprepGeneralizeBranch\", \"action\": \"aws:branch\", \"inputs\": {\"Choices\": [{\"And\": [{\"Variable\": \"{{runCommandDocument}}\", \"StringEquals\": \"AWS-RunPowerShellScript\"}, {\"Variable\": \"{{s3LogsBucketName}}\", \"StringEquals\": \"imagebuilder-placeholder\"}], \"NextStep\": \"RunSysprepGeneralizeWithoutLogging\"}, {\"Variable\": \"{{runCommandDocument}}\", \"StringEquals\": \"AWS-RunPowerShellScript\", \"NextStep\": \"RunSysprepGeneralizeWithLogging\"}], \"Default\": \"EndOfRunSysprepGeneralizeBranch\"}}, {\"name\": \"RunSysprepGeneralizeWithLogging\", \"action\": \"aws:runCommand\", \"maxAttempts\": 3, \"timeoutSeconds\": 21600, \"onFailure\": \"step:FailureHandling\", \"inputs\": {\"InstanceIds\": [\"{{instanceId}}\"], \"DocumentName\": \"AWSEC2-RunSysprep\", \"Parameters\": {\"Id\": \"{{automation:EXECUTION_ID}}\"}, \"OutputS3BucketName\": \"{{s3LogsBucketName}}\", \"OutputS3KeyPrefix\": \"{{s3LogsKeyPrefix}}/{{imageName}}/{{imageVersionNumber}}/{{imageBuildNumber}}/Automations/RunSysprepGeneralize\"}, \"nextStep\": \"StopInstanceAfterSysprep\"}, {\"name\": \"RunSysprepGeneralizeWithoutLogging\", \"action\": \"aws:runCommand\", \"maxAttempts\": 3, \"timeoutSeconds\": 21600, \"onFailure\": \"step:FailureHandling\", \"inputs\": {\"InstanceIds\": [\"{{instanceId}}\"], \"DocumentName\": \"AWSEC2-RunSysprep\", \"Parameters\": {\"Id\": \"{{automation:EXECUTION_ID}}\"}}, \"nextStep\": \"StopInstanceAfterSysprep\"}, {\"name\": \"StopInstanceAfterSysprep\", \"action\": \"aws:changeInstanceState\", \"maxAttempts\": 3, \"onFailure\": \"step:FailureHandling\", \"inputs\": {\"InstanceIds\": [\"{{instanceId}}\"], \"DesiredState\": \"stopped\"}, \"nextStep\": \"EndOfRunSysprepGeneralizeBranch\"}, {\"name\": \"EndOfRunSysprepGeneralizeBranch\", \"action\": \"aws:sleep\", \"maxAttempts\": 3, \"onFailure\": \"step:FailureHandling\", \"inputs\": {\"Duration\": \"PT5S\"}}, {\"name\": \"RunSanitizeScriptBranch\", \"action\": \"aws:branch\", \"inputs\": {\"Choices\": [{\"And\": [{\"Variable\": \"{{runCommandDocument}}\", \"StringEquals\": \"AWS-RunShellScript\"}, {\"Variable\": \"{{s3LogsBucketName}}\", \"StringEquals\": \"imagebuilder-placeholder\"}], \"NextStep\": \"RunSanitizeScriptWithoutLogging\"}, {\"Variable\": \"{{runCommandDocument}}\", \"StringEquals\": \"AWS-RunShellScript\", \"NextStep\": \"RunSanitizeScriptWithLogging\"}], \"Default\": \"EndOfRunSanitizeScriptBranch\"}}, {\"name\": \"RunSanitizeScriptWithLogging\", \"action\": \"aws:runCommand\", \"maxAttempts\": 3, \"timeoutSeconds\": 14400, \"onFailure\": \"step:FailureHandling\", \"nextStep\": \"EndOfRunSanitizeScriptBranch\", \"inputs\": {\"InstanceIds\": [\"{{instanceId}}\"], \"DocumentName\": \"{{runCommandDocument}}\", \"Parameters\": {\"workingDirectory\": \"{{workingDirectory}}\", \"commands\": [\"#!/bin/bash\\nif [[ ! -f {{workingDirectory}}/perform_cleanup ]]; then\\n    echo \\\"Skipping cleanup\\\"\\n    exit 0\\nelse\\n    sudo rm -f {{workingDirectory}}/perform_cleanup\\nfi\\n\\nfunction cleanup() {\\n    FILES=(\\\"$@\\\")\\n    for FILE in \\\"${FILES[@]}\\\"; do\\n        if [[ -f \\\"$FILE\\\" ]]; then\\n            echo \\\"Deleting $FILE\\\";\\n            sudo shred -zuf $FILE;\\n        fi;\\n        if [[ -f $FILE ]]; then\\n            echo \\\"Failed to delete '$FILE'. Failing.\\\"\\n            exit 1\\n        fi;\\n    done\\n};\\n\\n\\n# Clean up for cloud-init files\\nCLOUD_INIT_FILES=(\\n    \\\"/etc/sudoers.d/90-cloud-init-users\\\"\\n    \\\"/etc/locale.conf\\\"\\n    \\\"/var/log/cloud-init.log\\\"\\n    \\\"/var/log/cloud-init-output.log\\\"\\n)\\nif [[ -f {{workingDirectory}}/skip_cleanup_cloudinit_files ]]; then\\n    echo \\\"Skipping cleanup of cloud init files\\\"\\nelse\\n    echo \\\"Cleaning up cloud init files\\\"\\n    cleanup \\\"${CLOUD_INIT_FILES[@]}\\\"\\n    if [[ $( sudo find /var/lib/cloud -type f | sudo wc -l ) -gt 0 ]]; then\\n        echo \\\"Deleting files within /var/lib/cloud/*\\\"\\n        sudo find /var/lib/cloud -type f -exec shred -zuf {} \\\\;\\n    fi;\\n\\n    if [[ $( sudo ls /var/lib/cloud | sudo wc -l ) -gt 0 ]]; then\\n        echo \\\"Deleting /var/lib/cloud/*\\\"\\n        sudo rm -rf /var/lib/cloud/* || true\\n    fi;\\nfi;\\n\\n\\n# Clean up for temporary instance files\\nINSTANCE_FILES=(\\n    \\\"/etc/.updated\\\"\\n    \\\"/etc/aliases.db\\\"\\n    \\\"/etc/hostname\\\"\\n    \\\"/var/lib/misc/postfix.aliasesdb-stamp\\\"\\n    \\\"/var/lib/postfix/master.lock\\\"\\n    \\\"/var/spool/postfix/pid/master.pid\\\"\\n    \\\"/var/.updated\\\"\\n    \\\"/var/cache/yum/x86_64/2/.gpgkeyschecked.yum\\\"\\n)\\nif [[ -f {{workingDirectory}}/skip_cleanup_instance_files ]]; then\\n    echo \\\"Skipping cleanup of instance files\\\"\\nelse\\n    echo \\\"Cleaning up instance files\\\"\\n    cleanup \\\"${INSTANCE_FILES[@]}\\\"\\nfi;\\n\\n\\n# Clean up for ssh files\\nSSH_FILES=(\\n    \\\"/etc/ssh/ssh_host_rsa_key\\\"\\n    \\\"/etc/ssh/ssh_host_rsa_key.pub\\\"\\n    \\\"/etc/ssh/ssh_host_ecdsa_key\\\"\\n    \\\"/etc/ssh/ssh_host_ecdsa_key.pub\\\"\\n    \\\"/etc/ssh/ssh_host_ed25519_key\\\"\\n    \\\"/etc/ssh/ssh_host_ed25519_key.pub\\\"\\n    \\\"/root/.ssh/authorized_keys\\\"\\n)\\nif [[ -f {{workingDirectory}}/skip_cleanup_ssh_files ]]; then\\n    echo \\\"Skipping cleanup of ssh files\\\"\\nelse\\n    echo \\\"Cleaning up ssh files\\\"\\n    cleanup \\\"${SSH_FILES[@]}\\\"\\n    USERS=$(ls /home/)\\n    for user in $USERS; do\\n        echo Deleting /home/\\\"$user\\\"/.ssh/authorized_keys;\\n        sudo find /home/\\\"$user\\\"/.ssh/authorized_keys -type f -exec shred -zuf {} \\\\;\\n    done\\n    for user in $USERS; do\\n        if [[ -f /home/\\\"$user\\\"/.ssh/authorized_keys ]]; then\\n            echo Failed to delete /home/\\\"$user\\\"/.ssh/authorized_keys;\\n            exit 1\\n        fi;\\n    done;\\nfi;\\n\\n\\n# Clean up for instance log files\\nINSTANCE_LOG_FILES=(\\n    \\\"/var/log/audit/audit.log\\\"\\n    \\\"/var/log/boot.log\\\"\\n    \\\"/var/log/dmesg\\\"\\n    \\\"/var/log/cron\\\"\\n)\\nif [[ -f {{workingDirectory}}/skip_cleanup_instance_log_files ]]; then\\n    echo \\\"Skipping cleanup of instance log files\\\"\\nelse\\n    echo \\\"Cleaning up instance log files\\\"\\n    cleanup \\\"${INSTANCE_LOG_FILES[@]}\\\"\\nfi;\\n\\n# Clean up for TOE files\\nif [[ -f {{workingDirectory}}/skip_cleanup_toe_files ]]; then\\n    echo \\\"Skipping cleanup of TOE files\\\"\\nelse\\n    echo \\\"Cleaning TOE files\\\"\\n    if [[ $( sudo find {{workingDirectory}}/TOE_* -type f | sudo wc -l) -gt 0 ]]; then\\n        echo \\\"Deleting files within {{workingDirectory}}/TOE_*\\\"\\n        sudo find {{workingDirectory}}/TOE_* -type f -exec shred -zuf {} \\\\;\\n    fi\\n    if [[ $( sudo find {{workingDirectory}}/TOE_* -type f | sudo wc -l) -gt 0 ]]; then\\n        echo \\\"Failed to delete {{workingDirectory}}/TOE_*\\\"\\n        exit 1\\n    fi\\n    if [[ $( sudo find {{workingDirectory}}/TOE_* -type d | sudo wc -l) -gt 0 ]]; then\\n        echo \\\"Deleting {{workingDirectory}}/TOE_*\\\"\\n        sudo rm -rf {{workingDirectory}}/TOE_*\\n    fi\\n    if [[ $( sudo find {{workingDirectory}}/TOE_* -type d | sudo wc -l) -gt 0 ]]; then\\n        echo \\\"Failed to delete {{workingDirectory}}/TOE_*\\\"\\n        exit 1\\n    fi\\nfi\\n\\n# Clean up for ssm log files\\nif [[ -f {{workingDirectory}}/skip_cleanup_ssm_log_files ]]; then\\n    echo \\\"Skipping cleanup of ssm log files\\\"\\nelse\\n    echo \\\"Cleaning up ssm log files\\\"\\n    if [[ $( sudo find /var/log/amazon/ssm -type f | sudo wc -l) -gt 0 ]]; then\\n        echo \\\"Deleting files within /var/log/amazon/ssm/*\\\"\\n        sudo find /var/log/amazon/ssm -type f -exec shred -zuf {} \\\\;\\n    fi\\n    if [[ $( sudo find /var/log/amazon/ssm -type f | sudo wc -l) -gt 0 ]]; then\\n        echo \\\"Failed to delete /var/log/amazon/ssm\\\"\\n        exit 1\\n    fi\\n    if [[ -d \\\"/var/log/amazon/ssm\\\" ]]; then\\n        echo \\\"Deleting /var/log/amazon/ssm/*\\\"\\n        sudo rm -rf /var/log/amazon/ssm\\n    fi\\n    if [[ -d \\\"/var/log/amazon/ssm\\\" ]]; then\\n        echo \\\"Failed to delete /var/log/amazon/ssm\\\"\\n        exit 1\\n    fi\\nfi\\n\\n\\nif [[ $( sudo find /var/log/sa/sa* -type f | sudo wc -l ) -gt 0 ]]; then\\n    echo \\\"Deleting /var/log/sa/sa*\\\"\\n    sudo shred -zuf /var/log/sa/sa*\\nfi\\nif [[ $( sudo find /var/log/sa/sa* -type f | sudo wc -l ) -gt 0 ]]; then\\n    echo \\\"Failed to delete /var/log/sa/sa*\\\"\\n    exit 1\\nfi\\n\\nif [[ $( sudo find /var/lib/dhclient/dhclient*.lease -type f | sudo wc -l ) -gt 0 ]]; then\\n        echo \\\"Deleting /var/lib/dhclient/dhclient*.lease\\\"\\n        sudo shred -zuf /var/lib/dhclient/dhclient*.lease\\nfi\\nif [[ $( sudo find /var/lib/dhclient/dhclient*.lease -type f | sudo wc -l ) -gt 0 ]]; then\\n        echo \\\"Failed to delete /var/lib/dhclient/dhclient*.lease\\\"\\n        exit 1\\nfi\\n\\nif [[ $( sudo find /var/tmp -type f | sudo wc -l) -gt 0 ]]; then\\n        echo \\\"Deleting files within /var/tmp/*\\\"\\n        sudo find /var/tmp -type f -exec shred -zuf {} \\\\;\\nfi\\nif [[ $( sudo find /var/tmp -type f | sudo wc -l) -gt 0 ]]; then\\n        echo \\\"Failed to delete /var/tmp\\\"\\n        exit 1\\nfi\\nif [[ $( sudo ls /var/tmp | sudo wc -l ) -gt 0 ]]; then\\n        echo \\\"Deleting /var/tmp/*\\\"\\n        sudo rm -rf /var/tmp/*\\nfi\\n\\n# Shredding is not guaranteed to work well on rolling logs\\n\\nif [[ -f \\\"/var/lib/rsyslog/imjournal.state\\\" ]]; then\\n        echo \\\"Deleting /var/lib/rsyslog/imjournal.state\\\"\\n        sudo shred -zuf /var/lib/rsyslog/imjournal.state\\n        sudo rm -f /var/lib/rsyslog/imjournal.state\\nfi\\n\\nif [[ $( sudo ls /var/log/journal/ | sudo wc -l ) -gt 0 ]]; then\\n        echo \\\"Deleting /var/log/journal/*\\\"\\n        sudo find /var/log/journal/ -type f -exec shred -zuf {} \\\\;\\n        sudo rm -rf /var/log/journal/*\\nfi\\n\\nsudo touch /etc/machine-id\\n\", \"{{ssmUninstallCommands}}\"]}, \"OutputS3BucketName\": \"{{s3LogsBucketName}}\", \"OutputS3KeyPrefix\": \"{{s3LogsKeyPrefix}}/{{imageName}}/{{imageVersionNumber}}/{{imageBuildNumber}}/Automations/RunSanitizeScript\"}}, {\"name\": \"RunSanitizeScriptWithoutLogging\", \"action\": \"aws:runCommand\", \"maxAttempts\": 3, \"timeoutSeconds\": 14400, \"onFailure\": \"step:FailureHandling\", \"nextStep\": \"EndOfRunSanitizeScriptBranch\", \"inputs\": {\"InstanceIds\": [\"{{instanceId}}\"], \"DocumentName\": \"{{runCommandDocument}}\", \"Parameters\": {\"workingDirectory\": \"{{workingDirectory}}\", \"commands\": [\"#!/bin/bash\\nif [[ ! -f {{workingDirectory}}/perform_cleanup ]]; then\\n    echo \\\"Skipping cleanup\\\"\\n    exit 0\\nelse\\n    sudo rm -f {{workingDirectory}}/perform_cleanup\\nfi\\n\\nfunction cleanup() {\\n    FILES=(\\\"$@\\\")\\n    for FILE in \\\"${FILES[@]}\\\"; do\\n        if [[ -f \\\"$FILE\\\" ]]; then\\n            echo \\\"Deleting $FILE\\\";\\n            sudo shred -zuf $FILE;\\n        fi;\\n        if [[ -f $FILE ]]; then\\n            echo \\\"Failed to delete '$FILE'. Failing.\\\"\\n            exit 1\\n        fi;\\n    done\\n};\\n\\n\\n# Clean up for cloud-init files\\nCLOUD_INIT_FILES=(\\n    \\\"/etc/sudoers.d/90-cloud-init-users\\\"\\n    \\\"/etc/locale.conf\\\"\\n    \\\"/var/log/cloud-init.log\\\"\\n    \\\"/var/log/cloud-init-output.log\\\"\\n)\\nif [[ -f {{workingDirectory}}/skip_cleanup_cloudinit_files ]]; then\\n    echo \\\"Skipping cleanup of cloud init files\\\"\\nelse\\n    echo \\\"Cleaning up cloud init files\\\"\\n    cleanup \\\"${CLOUD_INIT_FILES[@]}\\\"\\n    if [[ $( sudo find /var/lib/cloud -type f | sudo wc -l ) -gt 0 ]]; then\\n        echo \\\"Deleting files within /var/lib/cloud/*\\\"\\n        sudo find /var/lib/cloud -type f -exec shred -zuf {} \\\\;\\n    fi;\\n\\n    if [[ $( sudo ls /var/lib/cloud | sudo wc -l ) -gt 0 ]]; then\\n        echo \\\"Deleting /var/lib/cloud/*\\\"\\n        sudo rm -rf /var/lib/cloud/* || true\\n    fi;\\nfi;\\n\\n\\n# Clean up for temporary instance files\\nINSTANCE_FILES=(\\n    \\\"/etc/.updated\\\"\\n    \\\"/etc/aliases.db\\\"\\n    \\\"/etc/hostname\\\"\\n    \\\"/var/lib/misc/postfix.aliasesdb-stamp\\\"\\n    \\\"/var/lib/postfix/master.lock\\\"\\n    \\\"/var/spool/postfix/pid/master.pid\\\"\\n    \\\"/var/.updated\\\"\\n    \\\"/var/cache/yum/x86_64/2/.gpgkeyschecked.yum\\\"\\n)\\nif [[ -f {{workingDirectory}}/skip_cleanup_instance_files ]]; then\\n    echo \\\"Skipping cleanup of instance files\\\"\\nelse\\n    echo \\\"Cleaning up instance files\\\"\\n    cleanup \\\"${INSTANCE_FILES[@]}\\\"\\nfi;\\n\\n\\n# Clean up for ssh files\\nSSH_FILES=(\\n    \\\"/etc/ssh/ssh_host_rsa_key\\\"\\n    \\\"/etc/ssh/ssh_host_rsa_key.pub\\\"\\n    \\\"/etc/ssh/ssh_host_ecdsa_key\\\"\\n    \\\"/etc/ssh/ssh_host_ecdsa_key.pub\\\"\\n    \\\"/etc/ssh/ssh_host_ed25519_key\\\"\\n    \\\"/etc/ssh/ssh_host_ed25519_key.pub\\\"\\n    \\\"/root/.ssh/authorized_keys\\\"\\n)\\nif [[ -f {{workingDirectory}}/skip_cleanup_ssh_files ]]; then\\n    echo \\\"Skipping cleanup of ssh files\\\"\\nelse\\n    echo \\\"Cleaning up ssh files\\\"\\n    cleanup \\\"${SSH_FILES[@]}\\\"\\n    USERS=$(ls /home/)\\n    for user in $USERS; do\\n        echo Deleting /home/\\\"$user\\\"/.ssh/authorized_keys;\\n        sudo find /home/\\\"$user\\\"/.ssh/authorized_keys -type f -exec shred -zuf {} \\\\;\\n    done\\n    for user in $USERS; do\\n        if [[ -f /home/\\\"$user\\\"/.ssh/authorized_keys ]]; then\\n            echo Failed to delete /home/\\\"$user\\\"/.ssh/authorized_keys;\\n            exit 1\\n        fi;\\n    done;\\nfi;\\n\\n\\n# Clean up for instance log files\\nINSTANCE_LOG_FILES=(\\n    \\\"/var/log/audit/audit.log\\\"\\n    \\\"/var/log/boot.log\\\"\\n    \\\"/var/log/dmesg\\\"\\n    \\\"/var/log/cron\\\"\\n)\\nif [[ -f {{workingDirectory}}/skip_cleanup_instance_log_files ]]; then\\n    echo \\\"Skipping cleanup of instance log files\\\"\\nelse\\n    echo \\\"Cleaning up instance log files\\\"\\n    cleanup \\\"${INSTANCE_LOG_FILES[@]}\\\"\\nfi;\\n\\n# Clean up for TOE files\\nif [[ -f {{workingDirectory}}/skip_cleanup_toe_files ]]; then\\n    echo \\\"Skipping cleanup of TOE files\\\"\\nelse\\n    echo \\\"Cleaning TOE files\\\"\\n    if [[ $( sudo find {{workingDirectory}}/TOE_* -type f | sudo wc -l) -gt 0 ]]; then\\n        echo \\\"Deleting files within {{workingDirectory}}/TOE_*\\\"\\n        sudo find {{workingDirectory}}/TOE_* -type f -exec shred -zuf {} \\\\;\\n    fi\\n    if [[ $( sudo find {{workingDirectory}}/TOE_* -type f | sudo wc -l) -gt 0 ]]; then\\n        echo \\\"Failed to delete {{workingDirectory}}/TOE_*\\\"\\n        exit 1\\n    fi\\n    if [[ $( sudo find {{workingDirectory}}/TOE_* -type d | sudo wc -l) -gt 0 ]]; then\\n        echo \\\"Deleting {{workingDirectory}}/TOE_*\\\"\\n        sudo rm -rf {{workingDirectory}}/TOE_*\\n    fi\\n    if [[ $( sudo find {{workingDirectory}}/TOE_* -type d | sudo wc -l) -gt 0 ]]; then\\n        echo \\\"Failed to delete {{workingDirectory}}/TOE_*\\\"\\n        exit 1\\n    fi\\nfi\\n\\n# Clean up for ssm log files\\nif [[ -f {{workingDirectory}}/skip_cleanup_ssm_log_files ]]; then\\n    echo \\\"Skipping cleanup of ssm log files\\\"\\nelse\\n    echo \\\"Cleaning up ssm log files\\\"\\n    if [[ $( sudo find /var/log/amazon/ssm -type f | sudo wc -l) -gt 0 ]]; then\\n        echo \\\"Deleting files within /var/log/amazon/ssm/*\\\"\\n        sudo find /var/log/amazon/ssm -type f -exec shred -zuf {} \\\\;\\n    fi\\n    if [[ $( sudo find /var/log/amazon/ssm -type f | sudo wc -l) -gt 0 ]]; then\\n        echo \\\"Failed to delete /var/log/amazon/ssm\\\"\\n        exit 1\\n    fi\\n    if [[ -d \\\"/var/log/amazon/ssm\\\" ]]; then\\n        echo \\\"Deleting /var/log/amazon/ssm/*\\\"\\n        sudo rm -rf /var/log/amazon/ssm\\n    fi\\n    if [[ -d \\\"/var/log/amazon/ssm\\\" ]]; then\\n        echo \\\"Failed to delete /var/log/amazon/ssm\\\"\\n        exit 1\\n    fi\\nfi\\n\\n\\nif [[ $( sudo find /var/log/sa/sa* -type f | sudo wc -l ) -gt 0 ]]; then\\n    echo \\\"Deleting /var/log/sa/sa*\\\"\\n    sudo shred -zuf /var/log/sa/sa*\\nfi\\nif [[ $( sudo find /var/log/sa/sa* -type f | sudo wc -l ) -gt 0 ]]; then\\n    echo \\\"Failed to delete /var/log/sa/sa*\\\"\\n    exit 1\\nfi\\n\\nif [[ $( sudo find /var/lib/dhclient/dhclient*.lease -type f | sudo wc -l ) -gt 0 ]]; then\\n        echo \\\"Deleting /var/lib/dhclient/dhclient*.lease\\\"\\n        sudo shred -zuf /var/lib/dhclient/dhclient*.lease\\nfi\\nif [[ $( sudo find /var/lib/dhclient/dhclient*.lease -type f | sudo wc -l ) -gt 0 ]]; then\\n        echo \\\"Failed to delete /var/lib/dhclient/dhclient*.lease\\\"\\n        exit 1\\nfi\\n\\nif [[ $( sudo find /var/tmp -type f | sudo wc -l) -gt 0 ]]; then\\n        echo \\\"Deleting files within /var/tmp/*\\\"\\n        sudo find /var/tmp -type f -exec shred -zuf {} \\\\;\\nfi\\nif [[ $( sudo find /var/tmp -type f | sudo wc -l) -gt 0 ]]; then\\n        echo \\\"Failed to delete /var/tmp\\\"\\n        exit 1\\nfi\\nif [[ $( sudo ls /var/tmp | sudo wc -l ) -gt 0 ]]; then\\n        echo \\\"Deleting /var/tmp/*\\\"\\n        sudo rm -rf /var/tmp/*\\nfi\\n\\n# Shredding is not guaranteed to work well on rolling logs\\n\\nif [[ -f \\\"/var/lib/rsyslog/imjournal.state\\\" ]]; then\\n        echo \\\"Deleting /var/lib/rsyslog/imjournal.state\\\"\\n        sudo shred -zuf /var/lib/rsyslog/imjournal.state\\n        sudo rm -f /var/lib/rsyslog/imjournal.state\\nfi\\n\\nif [[ $( sudo ls /var/log/journal/ | sudo wc -l ) -gt 0 ]]; then\\n        echo \\\"Deleting /var/log/journal/*\\\"\\n        sudo find /var/log/journal/ -type f -exec shred -zuf {} \\\\;\\n        sudo rm -rf /var/log/journal/*\\nfi\\n\\nsudo touch /etc/machine-id\\n\", \"{{ssmUninstallCommands}}\"]}}}, {\"name\": \"EndOfRunSanitizeScriptBranch\", \"action\": \"aws:sleep\", \"maxAttempts\": 3, \"onFailure\": \"step:FailureHandling\", \"inputs\": {\"Duration\": \"PT180S\"}}, {\"name\": \"StopInstance\", \"action\": \"aws:changeInstanceState\", \"maxAttempts\": 3, \"onFailure\": \"step:FailureHandling\", \"inputs\": {\"InstanceIds\": [\"{{instanceId}}\"], \"DesiredState\": \"stopped\"}}, {\"name\": \"CreateImage\", \"action\": \"aws:executeAwsApi\", \"maxAttempts\": 3, \"inputs\": {\"Service\": \"ec2\", \"Api\": \"CreateImage\", \"InstanceId\": \"{{instanceId}}\", \"Name\": \"{{imageName}}\", \"Description\": \"{{imageDescription}}\", \"TagSpecifications\": \"{{imageTagSpecification}}\"}, \"outputs\": [{\"Name\": \"ImageId\", \"Selector\": \"$.ImageId\", \"Type\": \"String\"}], \"onFailure\": \"step:FailureHandling\"}, {\"name\": \"VerifyBranch\", \"action\": \"aws:branch\", \"inputs\": {\"Choices\": [{\"NextStep\": \"VerifyImage\", \"Variable\": \"{{isBuildWorkflow}}\", \"BooleanEquals\": true}, {\"NextStep\": \"TerminateInstanceOnSuccess\", \"Variable\": \"{{isTestWorkflow}}\", \"BooleanEquals\": true}], \"Default\": \"EndOfVerifyBranch\"}}, {\"name\": \"VerifyImage\", \"action\": \"aws:waitForAwsResourceProperty\", \"isCritical\": true, \"onFailure\": \"step:FailureHandling\", \"nextStep\": \"GetImageState\", \"timeoutSeconds\": 14400, \"maxAttempts\": 3, \"inputs\": {\"Service\": \"ec2\", \"Api\": \"DescribeImages\", \"Filters\": [{\"Name\": \"image-id\", \"Values\": [\"{{CreateImage.ImageId}}\"]}], \"Owners\": [\"self\"], \"PropertySelector\": \"$.Images[0].State\", \"DesiredValues\": [\"available\", \"failed\", \"error\"]}}, {\"name\": \"GetImageState\", \"action\": \"aws:assertAwsResourceProperty\", \"isCritical\": true, \"onFailure\": \"step:FailureHandling\", \"nextStep\": \"TerminateInstanceOnSuccess\", \"maxAttempts\": 3, \"inputs\": {\"Service\": \"ec2\", \"Api\": \"DescribeImages\", \"Filters\": [{\"Name\": \"image-id\", \"Values\": [\"{{CreateImage.ImageId}}\"]}], \"Owners\": [\"self\"], \"PropertySelector\": \"$.Images[0].State\", \"DesiredValues\": [\"available\"]}}, {\"name\": \"TerminateInstanceOnSuccess\", \"action\": \"aws:changeInstanceState\", \"maxAttempts\": 3, \"isCritical\": false, \"onFailure\": \"Continue\", \"inputs\": {\"InstanceIds\": [\"{{ instanceId }}\"], \"DesiredState\": \"terminated\"}}, {\"name\": \"EndOfVerifyBranch\", \"action\": \"aws:sleep\", \"maxAttempts\": 3, \"isCritical\": false, \"isEnd\": true, \"onFailure\": \"Continue\", \"inputs\": {\"Duration\": \"PT5S\"}}, {\"name\": \"FailureHandling\", \"action\": \"aws:branch\", \"inputs\": {\"Choices\": [{\"NextStep\": \"DeleteInventoryAssociationOnFailure\", \"Variable\": \"{{terminateInstanceOnFailure}}\", \"BooleanEquals\": true}], \"Default\": \"EndOfFailureHandling\"}}, {\"name\": \"DeleteInventoryAssociationOnFailure\", \"action\": \"aws:executeAwsApi\", \"maxAttempts\": 3, \"isCritical\": false, \"onFailure\": \"Continue\", \"nextStep\": \"TerminateInstanceOnFailure\", \"inputs\": {\"Service\": \"ssm\", \"Api\": \"DeleteAssociation\", \"AssociationId\": \"{{ CreateInventory.AssociationId }}\"}}, {\"name\": \"TerminateInstanceOnFailure\", \"action\": \"aws:changeInstanceState\", \"maxAttempts\": 3, \"isCritical\": false, \"onFailure\": \"Continue\", \"nextStep\": \"EndOfFailureHandling\", \"inputs\": {\"InstanceIds\": [\"{{ instanceId }}\"], \"DesiredState\": \"terminated\"}}, {\"name\": \"EndOfFailureHandling\", \"action\": \"aws:sleep\", \"maxAttempts\": 3, \"isCritical\": false, \"isEnd\": true, \"onFailure\": \"Continue\", \"inputs\": {\"Duration\": \"PT5S\"}}]}",
  "CreatedDate": "2021-10-26T15:13:49.92Z",
  "DisplayName": null,
  "DocumentFormat": {
    "Value": "JSON"
  },
  "DocumentType": {
    "Value": "Automation"
  },
  "DocumentVersion": "29",
  "Name": "arn:aws:ssm:us-west-2:538031854465:document/ImageBuilderBuildImageDocument",
  "Requires": [],
  "ReviewStatus": null,
  "Status": {
    "Value": "Active"
  },
  "StatusInformation": null,
  "VersionName": null,
  "ResponseMetadata": {
    "RequestId": "4c4b4625-1777-4167-a7d5-855d586b149d",
    "Metadata": {},
    "ChecksumAlgorithm": 0,
    "ChecksumValidationStatus": 0
  },
  "ContentLength": 30136,
  "HttpStatusCode": 200,
  "LoggedAt": "2023-02-16T07:12:19.0218266+00:00"
}
