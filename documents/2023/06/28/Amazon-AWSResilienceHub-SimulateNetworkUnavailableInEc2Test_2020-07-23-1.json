{
  "AttachmentsContent": [],
  "Content": "{\n  \"schemaVersion\" : \"0.3\",\n  \"description\" : \"## Intent\\nTest that the application correctly alerts if an Amazon EC2 instance's network is unavailable.\\n\\n## Type\\nTest\\n\\n## Risk\\nMedium\\n\\n## Requirements\\n* EC2 instance with Linux OS \\n* There is a synthetic alarm setup for application\\n\\n## Permission required for AutomationAssumeRole\\n* ssm:SendCommand\\n* ssm:ListCommands\\n* ssm:ListCommandInvocations\\n* ssm:DescribeInstanceInformation\\n* ssm:GetAutomationExecution\\n* ssm:CancelCommand\\n* cloudwatch:DescribeAlarms\\n* ec2:RebootInstances\\n\\n## Supports Rollback\\nYes. Reboots instance to cancel impact\\n\\n## Inputs\\n### AutomationAssumeRole:\\n  * type: String\\n  * description: (Required) The ARN of the role that allows Automation to perform the actions on your behalf\\n  * allowedPattern: arn:aws:iam::\\\\d+:\\\\S+\\n### InstanceId:\\n  * type: String\\n  * description: (Required) EC2 instance id\\n  * allowedPattern: ^i-[a-z0-9]{8,17}$\\n### HealthCheckAlarmName:\\n  * type: String\\n  * description: (Required) An alarm which should be triggered when the EC2 instance's network becomes unavailable\\n### DurationInMinutes:\\n  * type: String\\n  * description: (Optional) The duration of the attack in seconds (default/recommended 300)\\n  * default: '300'\\n  * allowedPattern: ^\\\\d+$\\n### IsRollback:\\n  * type: String\\n  * description: (Optional) Provide true to rollback previous execution\\n  * default: 'false'\\n### PreviousExecutionId:\\n  * type: String\\n  * description: (Optional) Previous execution id for which test should be rolled back (need in case of rollback)\\n  * default: ''\\n\\n## Steps executed in normal flow\\n  * SelectExecutionMode\\n  * AssertAlarmToBeGreenBeforeTest\\n  * SimulateNetworkUnavailable\\n  * WaitForTestDuration\\n  * AssertAlarmToBeRed\\n  * AssertAlarmToBeGreen\\n\\n## Steps executed in rollback flow\\n  * SelectExecutionMode\\n  * GetPreviousExecutionInstanceId\\n  * AssertInstanceId\\n  * RebootInstancePreviousExecution\\n\\n## Details\\n  * Drop all outgoing/incoming network traffic on instance for X minutes\\n  * Verify alarm is triggered\\n  * After test duration, alarm should go back to green\\n\\n## Outputs\\nThe automation execution has no outputs\",\n  \"assumeRole\" : \"{{AutomationAssumeRole}}\",\n  \"parameters\" : {\n    \"AutomationAssumeRole\" : {\n      \"type\" : \"String\",\n      \"description\" : \"(Required) The ARN of the role that allows Automation to perform the actions on your behalf\",\n      \"allowedPattern\" : \"arn:aws:iam::\\\\d+:\\\\S+\"\n    },\n    \"InstanceId\" : {\n      \"type\" : \"String\",\n      \"description\" : \"(Required) EC2 instance id\",\n      \"allowedPattern\" : \"^i-[a-z0-9]{8,17}$\"\n    },\n    \"HealthCheckAlarmName\" : {\n      \"type\" : \"String\",\n      \"description\" : \"(Required) An alarm which should be triggered when the EC2 instance's network becomes unavailable\"\n    },\n    \"DurationInMinutes\" : {\n      \"type\" : \"String\",\n      \"description\" : \"(Optional) The duration of the attack in minutes (default 5)\",\n      \"default\" : \"5\",\n      \"allowedPattern\" : \"^\\\\d+$\"\n    },\n    \"IsRollback\" : {\n      \"type\" : \"String\",\n      \"description\" : \"(Optional) Provide true to rollback instances in previous execution\",\n      \"default\" : \"false\"\n    },\n    \"PreviousExecutionId\" : {\n      \"type\" : \"String\",\n      \"description\" : \"(Optional) Previous execution id for which rollback should be performed (need in case of rollback)\",\n      \"default\" : \"\"\n    }\n  },\n  \"mainSteps\" : [ {\n    \"name\" : \"SelectExecutionMode\",\n    \"action\" : \"aws:branch\",\n    \"inputs\" : {\n      \"Choices\" : [ {\n        \"NextStep\" : \"AssertAlarmToBeGreenBeforeTest\",\n        \"Variable\" : \"{{IsRollback}}\",\n        \"StringEquals\" : \"false\"\n      } ],\n      \"Default\" : \"GetPreviousExecutionInstanceId\"\n    }\n  }, {\n    \"name\" : \"AssertAlarmToBeGreenBeforeTest\",\n    \"action\" : \"aws:waitForAwsResourceProperty\",\n    \"maxAttempts\" : 1,\n    \"timeoutSeconds\" : 300,\n    \"inputs\" : {\n      \"Service\" : \"cloudwatch\",\n      \"Api\" : \"DescribeAlarms\",\n      \"AlarmNames\" : [ \"{{HealthCheckAlarmName}}\" ],\n      \"PropertySelector\" : \"$.MetricAlarms[0].StateValue\",\n      \"DesiredValues\" : [ \"OK\" ]\n    }\n  }, {\n    \"name\" : \"SimulateNetworkUnavailable\",\n    \"action\" : \"aws:runCommand\",\n    \"onFailure\" : \"Continue\",\n    \"onCancel\" : \"step:TriggerRollback\",\n    \"timeoutSeconds\" : 60,\n    \"inputs\" : {\n      \"DocumentName\" : \"AWSResilienceHub-NetworkUnavailableCommand_2020-07-23\",\n      \"InstanceIds\" : [ \"{{InstanceId}}\" ],\n      \"Parameters\" : {\n        \"DurationInMinutes\" : \"{{DurationInMinutes}}\"\n      },\n      \"TimeoutSeconds\" : 60\n    }\n  }, {\n    \"name\" : \"AssertAlarmToBeRed\",\n    \"description\" : \"Wait for expected alarm to be red after failure is injected\",\n    \"action\" : \"aws:waitForAwsResourceProperty\",\n    \"onFailure\" : \"step:RebootInstance\",\n    \"onCancel\" : \"step:TriggerRollback\",\n    \"maxAttempts\" : 1,\n    \"timeoutSeconds\" : 600,\n    \"inputs\" : {\n      \"Service\" : \"cloudwatch\",\n      \"Api\" : \"DescribeAlarms\",\n      \"AlarmNames\" : [ \"{{HealthCheckAlarmName}}\" ],\n      \"PropertySelector\" : \"$.MetricAlarms[0].StateValue\",\n      \"DesiredValues\" : [ \"ALARM\" ]\n    }\n  }, {\n    \"name\" : \"WaitForTestDuration\",\n    \"action\" : \"aws:sleep\",\n    \"onFailure\" : \"step:RebootInstance\",\n    \"onCancel\" : \"step:TriggerRollback\",\n    \"inputs\" : {\n      \"Duration\" : \"PT{{DurationInMinutes}}M\"\n    }\n  }, {\n    \"name\" : \"AssertAlarmToBeGreen\",\n    \"action\" : \"aws:assertAwsResourceProperty\",\n    \"onFailure\" : \"step:RebootInstance\",\n    \"onCancel\" : \"step:TriggerRollback\",\n    \"timeoutSeconds\" : 900,\n    \"inputs\" : {\n      \"Service\" : \"cloudwatch\",\n      \"Api\" : \"DescribeAlarms\",\n      \"AlarmNames\" : [ \"{{HealthCheckAlarmName}}\" ],\n      \"PropertySelector\" : \"$.MetricAlarms[0].StateValue\",\n      \"DesiredValues\" : [ \"OK\" ]\n    },\n    \"isEnd\" : true\n  }, {\n    \"name\" : \"RebootInstance\",\n    \"action\" : \"aws:executeAwsApi\",\n    \"inputs\" : {\n      \"Service\" : \"ec2\",\n      \"Api\" : \"RebootInstances\",\n      \"InstanceIds\" : [ \"{{InstanceId}}\" ]\n    },\n    \"isEnd\" : true\n  }, {\n    \"name\" : \"GetPreviousExecutionInstanceId\",\n    \"action\" : \"aws:executeScript\",\n    \"onFailure\" : \"Abort\",\n    \"outputs\" : [ {\n      \"Name\" : \"InstanceId\",\n      \"Selector\" : \"$.Payload.InstanceIds[0]\",\n      \"Type\" : \"String\"\n    } ],\n    \"inputs\" : {\n      \"Runtime\" : \"python3.8\",\n      \"Handler\" : \"get_inputs_from_ssm_step_execution\",\n      \"InputPayload\" : {\n        \"ExecutionId\" : \"{{PreviousExecutionId}}\",\n        \"StepName\" : \"SimulateNetworkUnavailable\",\n        \"ResponseField\" : \"InstanceIds\"\n      },\n      \"Script\" : \"import json\\n\\nimport boto3\\nfrom botocore.config import Config\\n\\n\\n\\n\\ndef get_inputs_from_ssm_step_execution(events, context):\\n    config = Config(retries={'max_attempts': 20, 'mode': 'standard'})\\n    ssm = boto3.client('ssm', config=config)\\n\\n    if 'ExecutionId' not in events or 'StepName' not in events or 'ResponseField' not in events:\\n        raise KeyError('Requires ExecutionId, StepName and ResponseField in events')\\n\\n    ssm_response = ssm.get_automation_execution(AutomationExecutionId=events['ExecutionId'])\\n    for step in ssm_response['AutomationExecution']['StepExecutions']:\\n        if step['StepName'] == events['StepName']:\\n            response_fields = events['ResponseField'].split(',')\\n            output = {}\\n            for response_field in response_fields:\\n                step_output = step['Inputs'][response_field]\\n                output[response_field] = json.loads(step_output)\\n            return output\\n\\n    # Could not find step name\\n    raise Exception('Can not find step name % in ssm execution response', events['StepName'])\"\n    }\n  }, {\n    \"name\" : \"AssertInstanceId\",\n    \"action\" : \"aws:branch\",\n    \"inputs\" : {\n      \"Choices\" : [ {\n        \"NextStep\" : \"RebootInstancePreviousExecution\",\n        \"Variable\" : \"{{ GetPreviousExecutionInstanceId.InstanceId }}\",\n        \"StringEquals\" : \"{{ InstanceId }}\"\n      } ]\n    },\n    \"isEnd\" : true\n  }, {\n    \"name\" : \"RebootInstancePreviousExecution\",\n    \"action\" : \"aws:executeAwsApi\",\n    \"inputs\" : {\n      \"Service\" : \"ec2\",\n      \"Api\" : \"RebootInstances\",\n      \"InstanceIds\" : [ \"{{GetPreviousExecutionInstanceId.InstanceId}}\" ]\n    },\n    \"isEnd\" : true\n  }, {\n    \"name\" : \"TriggerRollback\",\n    \"action\" : \"aws:executeScript\",\n    \"onFailure\" : \"Abort\",\n    \"outputs\" : [ {\n      \"Name\" : \"RollbackExecutionId\",\n      \"Selector\" : \"$.Payload.RollbackExecutionId\",\n      \"Type\" : \"String\"\n    } ],\n    \"inputs\" : {\n      \"Runtime\" : \"python3.8\",\n      \"Handler\" : \"start_rollback_execution\",\n      \"InputPayload\" : {\n        \"ExecutionId\" : \"{{automation:EXECUTION_ID}}\"\n      },\n      \"Script\" : \"import json\\n\\nimport boto3\\nfrom botocore.config import Config\\n\\n\\n\\n\\ndef start_rollback_execution(events, context):\\n    output = {}\\n    config = Config(retries={'max_attempts': 20, 'mode': 'standard'})\\n    ssm = boto3.client('ssm', config=config)\\n\\n    if 'ExecutionId' not in events or not events['ExecutionId']:\\n        raise KeyError('Requires not empty ExecutionId')\\n\\n    response = ssm.get_automation_execution(AutomationExecutionId=events['ExecutionId'])\\n\\n    # Get parameters for current execution and add IsRollback and PreviousExecutionId\\n    response_parameters = response['AutomationExecution']['Parameters']\\n    response_parameters['IsRollback'] = ['true']\\n    response_parameters['PreviousExecutionId'] = [events['ExecutionId']]\\n\\n    rollback_execution_response = ssm.start_automation_execution(\\n        DocumentName=response['AutomationExecution']['DocumentName'],\\n        DocumentVersion=response['AutomationExecution']['DocumentVersion'],\\n        Parameters=response_parameters\\n    )\\n    output['RollbackExecutionId'] = rollback_execution_response['AutomationExecutionId']\\n    return output\"\n    },\n    \"isEnd\" : true\n  } ]\n}",
  "CreatedDate": "2023-06-27T13:56:52.256Z",
  "DisplayName": null,
  "DocumentFormat": {
    "Value": "JSON"
  },
  "DocumentType": {
    "Value": "Automation"
  },
  "DocumentVersion": "1",
  "Name": "AWSResilienceHub-SimulateNetworkUnavailableInEc2Test_2020-07-23",
  "Requires": [],
  "ReviewStatus": null,
  "Status": {
    "Value": "Active"
  },
  "StatusInformation": null,
  "VersionName": null,
  "ResponseMetadata": {
    "RequestId": "23dd88a3-ae31-48a8-91c8-52631d5fb87b",
    "Metadata": {},
    "ChecksumAlgorithm": 0,
    "ChecksumValidationStatus": 0
  },
  "ContentLength": 10822,
  "HttpStatusCode": 200,
  "LoggedAt": "2023-06-28T07:12:42.4203677+00:00"
}
