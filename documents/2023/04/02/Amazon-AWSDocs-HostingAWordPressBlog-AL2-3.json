{
  "AttachmentsContent": [],
  "Content": "{\n  \"description\" : \"Tutorial: Hosting a WordPress Blog with Amazon Linux 2\\n===\\n\\nThis Automation document helps you install, configure, and secure a WordPress blog on your Amazon Linux 2 instance created by using the Automation document [```AWS-InstallALAMPServer-AL2```](https://console.aws.amazon.com/systems-manager/documents/AWS-InstallALAMPServer-AL2/description). This tutorial is a good introduction to using Amazon EC2 in that you have full control over a web server that hosts your WordPress blog, which is not typical with a traditional hosting service. This Automation document automates the procedure described in [Tutorial: Hosting a WordPress Blog with Amazon Linux](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/hosting-wordpress.html) in the *Amazon Elastic Compute Cloud User Guide for Linux Instances*.\\n\\nPre-requisites\\n---\\n\\nTo run the following Automation document, you must have permissions to run Automation workflows. The Automation workflow runs in the context of the current Amazon Identity and Access Management (IAM) user. Additionally, you must run the Automation document [```AWS-InstallALAMPServer-AL2```](https://console.aws.amazon.com/systems-manager/documents/AWS-InstallALAMPServer-AL2/description) before using this document. This document installs a WordPress blog on the instance launched in ```AWS-InstallALAMPServer-AL2```.\\n\\nOutputs\\n---\\n\\nOnce the Automation has completed, you will be able to navigate to the WordPress blog dashboard by navigating to the public DNS address (or the public IP address) of the launched instance. For example:\\n\\n>http://my.public.dns.amazonaws.com/\\n\\nCleanup\\n---\\n\\nTo remove resources created by this Automation document. Navigate to the [CloudFormation console](https://console.aws.amazon.com/cloudformation/home) and delete the stack created by the preceding Automation document. \\n\\n**Important:**\\n\\nIf you delete the stack created, then you must run the document ```AWS-InstallALAMPServer-AL2``` again before using this Automation document.\\n\\n*Provide feedback [here](https://docs.aws.amazon.com/forms/aws-doc-feedback?feedback_destination_id=fdb9de10-9bb3-4e90-b330-df8c2533c9dd&topic_url=http://docs.aws.amazon.com/AutomatedTutorials/AWSDocs-HostingAWordPressBlog-AL2).*\",\n  \"mainSteps\" : [ {\n    \"action\" : \"aws:assertAwsResourceProperty\",\n    \"inputs\" : {\n      \"Api\" : \"DescribeStacks\",\n      \"DesiredValues\" : [ \"CREATE_COMPLETE\" ],\n      \"PropertySelector\" : \"$.Stacks[0].StackStatus\",\n      \"Service\" : \"cloudformation\",\n      \"StackName\" : \"LAMPStack-AL2\"\n    },\n    \"name\" : \"checkForCloudFormationStack\",\n    \"nextStep\" : \"outputPublicDNS\",\n    \"onFailure\" : \"step:RunInstallALAMPServerAL2\"\n  }, {\n    \"action\" : \"aws:executeAutomation\",\n    \"inputs\" : {\n      \"DocumentName\" : \"AWSDocs-InstallALAMPServer-AL2\"\n    },\n    \"maxAttempts\" : 3,\n    \"name\" : \"RunInstallALAMPServerAL2\",\n    \"nextStep\" : \"outputPublicDNS\",\n    \"onFailure\" : \"Abort\",\n    \"timeoutSeconds\" : 3600\n  }, {\n    \"action\" : \"aws:runCommand\",\n    \"description\" : \"**Output the public DNS address for the launched EC2 instance**\\n\\nThis step outputs the public DNS address for the EC2 instance launched. You can use this public DNS address to connect to the WordPress blog setup once the Automation workflow has completed. Select the radio button next to the Step execution ID to display the public DNS address of the EC2 instance.\",\n    \"inputs\" : {\n      \"Comment\" : \"Outputting public DNS address of EC2 instance\",\n      \"DocumentName\" : \"AWS-RunShellScript\",\n      \"Parameters\" : {\n        \"commands\" : [ \"curl -fsq http://169.254.169.254/latest/meta-data/public-hostname\" ],\n        \"executionTimeout\" : \"3600\",\n        \"workingDirectory\" : \"\"\n      },\n      \"Targets\" : [ {\n        \"Key\" : \"tag:Name\",\n        \"Values\" : [ \"Automation-LAMPStack-AL2\" ]\n      } ]\n    },\n    \"name\" : \"outputPublicDNS\",\n    \"onFailure\" : \"step:deleteStackOnCompletion\"\n  }, {\n    \"action\" : \"aws:runCommand\",\n    \"description\" : \"**Download and Unzip WordPress**\\n\\nThis step downloads the latest WordPress installation package and unzips the package.\",\n    \"inputs\" : {\n      \"Comment\" : \"Downloading WordPress\",\n      \"DocumentName\" : \"AWS-RunShellScript\",\n      \"Parameters\" : {\n        \"commands\" : [ \"wget https://wordpress.org/latest.tar.gz\", \"tar -xzf latest.tar.gz\" ],\n        \"executionTimeout\" : \"3600\",\n        \"workingDirectory\" : \"\"\n      },\n      \"Targets\" : [ {\n        \"Key\" : \"tag:Name\",\n        \"Values\" : [ \"Automation-LAMPStack-AL2\" ]\n      } ]\n    },\n    \"name\" : \"downloadWordPress\",\n    \"onFailure\" : \"step:deleteStackOnCompletion\"\n  }, {\n    \"action\" : \"aws:runCommand\",\n    \"description\" : \"**Create a Database User and Database for WordPress**\\n\\nThis step create your blog's database and a user that is authorized to read and save information to it. After this step completes, you can access your WordPress blog by entering the public DNS address (or the public IP address of your instance). For example:\\n\\n>http://my.public.dns.amazonaws.com/\\n\\nYou should see the WordPress login page. To login, enter ```wpuser``` as the user name and the value of the Parameter Store parameter [```/Tutorials/Passwords/AL/MySQL/wpuser```](https://console.aws.amazon.com/systems-manager/parameters/%252FTutorials%252FPasswords%252FAL%252FMySQL%252Fwpuser/description).\",\n    \"inputs\" : {\n      \"Comment\" : \"Creating a WordPress user and database\",\n      \"DocumentName\" : \"AWS-RunShellScript\",\n      \"Parameters\" : {\n        \"commands\" : [ \"sudo systemctl start mariadb\", \"az=$(wget -q -O - http://169.254.169.254/latest/meta-data/placement/availability-zone)\", \"root=$(aws ssm get-parameter --name \\\"/Tutorials/Passwords/AL2/MySQL/root\\\" --with-decryption --region \\\"${az::-1}\\\" --output text --query 'Parameter.Value')\", \"wpuserpw=$(tr -cd '[:alnum:]' < /dev/urandom | fold -w30 | head -n1)\", \"mysql --user=root --password=$root <<_EOF_\", \"CREATE USER \\\"wpuser\\\"@\\\"localhost\\\" IDENTIFIED BY \\\"$wpuserpw\\\";\", \"CREATE DATABASE wordpressdb;\", \"GRANT ALL PRIVILEGES ON wordpressdb.* TO \\\"wpuser\\\"@\\\"localhost\\\";\", \"FLUSH PRIVILEGES;\", \"_EOF_\", \"aws ssm put-parameter --name \\\"/Tutorials/Passwords/AL2/MySQL/wpuser\\\" --type \\\"SecureString\\\" --value $wpuserpw --description \\\"MySQL wp-user DB Password\\\" --region \\\"${az::-1}\\\" --overwrite\" ],\n        \"executionTimeout\" : \"3600\"\n      },\n      \"Targets\" : [ {\n        \"Key\" : \"tag:Name\",\n        \"Values\" : [ \"Automation-LAMPStack-AL2\" ]\n      } ]\n    },\n    \"name\" : \"createDatabaseforWordPress\",\n    \"onFailure\" : \"step:deleteStackOnCompletion\"\n  }, {\n    \"action\" : \"aws:runCommand\",\n    \"description\" : \"**Create and configure the wp-config.php file**\\n\\nThe WordPress installation folder contains a sample configuration file called wp-config-sample.php. In this step, you copy this file and edit it to fit your specific configuration.\",\n    \"inputs\" : {\n      \"Comment\" : \"Creating wp-config.php file\",\n      \"DocumentName\" : \"AWS-RunShellScript\",\n      \"Parameters\" : {\n        \"commands\" : [ \"cp wordpress/wp-config-sample.php wordpress/wp-config.php\", \"lineNo=23\", \"var=\\\"define( 'DB_NAME', 'wordpressdb' );\\\"\", \"sed -i \\\"${lineNo}s/.*/$var/\\\" wordpress/wp-config.php\", \"lineNo=26\", \"var=\\\"define( 'DB_USER', 'wpuser' );\\\"\", \"sed -i \\\"${lineNo}s/.*/$var/\\\" wordpress/wp-config.php\", \"az=$(wget -q -O - http://169.254.169.254/latest/meta-data/placement/availability-zone)\", \"wpuserpw=$(aws ssm get-parameter --name \\\"/Tutorials/Passwords/AL2/MySQL/wpuser\\\" --with-decryption --region \\\"${az::-1}\\\" --output text --query 'Parameter.Value')\", \"lineNo=29\", \"var=\\\"define( 'DB_PASSWORD', '$wpuserpw' );\\\"\", \"sed -i \\\"${lineNo}s/.*/$var/\\\" wordpress/wp-config.php\", \"curl https://api.wordpress.org/secret-key/1.1/salt/ > salt.txt\", \"sed -i -e '49r salt.txt' -e '49,56d' wordpress/wp-config.php\", \"cat wordpress/wp-config.php\", \"cat salt.txt\" ],\n        \"executionTimeout\" : \"3600\"\n      },\n      \"Targets\" : [ {\n        \"Key\" : \"tag:Name\",\n        \"Values\" : [ \"Automation-LAMPStack-AL2\" ]\n      } ]\n    },\n    \"name\" : \"createWordPressConfig\"\n  }, {\n    \"action\" : \"aws:runCommand\",\n    \"description\" : \"**Install your WordPress files under the Apache document root**\\n\\nThis step configures WordPress to run at the document root, ```/var/www/html/```. Following this, this step allows WordPress to use permalinks.\",\n    \"inputs\" : {\n      \"Comment\" : \"Installing WordPress files to Apache document root\",\n      \"DocumentName\" : \"AWS-RunShellScript\",\n      \"Parameters\" : {\n        \"commands\" : [ \"cp -r wordpress/* /var/www/html/\", \"lineNo=151\", \"var=\\\"    AllowOverride All\\\"\", \"sed -i \\\"${lineNo}s/.*/$var/\\\" /etc/httpd/conf/httpd.conf\" ],\n        \"executionTimeout\" : \"3600\"\n      },\n      \"Targets\" : [ {\n        \"Key\" : \"tag:Name\",\n        \"Values\" : [ \"Automation-LAMPStack-AL2\" ]\n      } ]\n    },\n    \"name\" : \"installWordpress\"\n  }, {\n    \"action\" : \"aws:runCommand\",\n    \"description\" : \"**Fix file permissions for the Apache web server**\\n\\nThis step provides WordPress write access to the Apache document root which features such as uploading media through the Administrative screen.\",\n    \"inputs\" : {\n      \"Comment\" : \"Fixing file permissions for the Apache web server\",\n      \"DocumentName\" : \"AWS-RunShellScript\",\n      \"Parameters\" : {\n        \"commands\" : [ \"sudo chown -R apache /var/www\", \"sudo chgrp -R apache /var/www\", \"sudo systemctl restart httpd\" ],\n        \"executionTimeout\" : \"3600\"\n      },\n      \"Targets\" : [ {\n        \"Key\" : \"tag:Name\",\n        \"Values\" : [ \"Automation-LAMPStack-AL2\" ]\n      } ]\n    },\n    \"name\" : \"fixFilePermissions\"\n  }, {\n    \"action\" : \"aws:runCommand\",\n    \"description\" : \"**Fix file permissions for the Apache web server**\\n\\nThis step runs the WordPress installation script. Following this step, you can continue the installation process for WordPress by navigating to the public DNS address of your EC2 instance. This will be available as output from the step **outputPublicDNS**.\",\n    \"inputs\" : {\n      \"Comment\" : \"Running the WordPress installation script\",\n      \"DocumentName\" : \"AWS-RunShellScript\",\n      \"Parameters\" : {\n        \"commands\" : [ \"sudo systemctl enable httpd && sudo systemctl enable mariadb\", \"sudo systemctl start mariadb\", \"sudo systemctl start httpd\" ],\n        \"executionTimeout\" : \"3600\"\n      },\n      \"Targets\" : [ {\n        \"Key\" : \"tag:Name\",\n        \"Values\" : [ \"Automation-LAMPStack-AL2\" ]\n      } ]\n    },\n    \"isEnd\" : true,\n    \"name\" : \"runWordPressInstallationScript\"\n  }, {\n    \"action\" : \"aws:deleteStack\",\n    \"description\" : \"**Remove the CloudFormation Template and Associated Resources**\\n\\nThis step deletes the CloudFormation stack and the associated resources originally launched using the Automation document ```AWS-InstallALAMPServer-AL2```.\\n\\n**Note**\\n\\nIf you run this step, the WordPress blog instance will be removed. If you would like to keep the resources running, choose **Complete and view results**. \",\n    \"inputs\" : {\n      \"StackName\" : \"LAMPStack-AL2\"\n    },\n    \"isEnd\" : true,\n    \"maxAttempts\" : 1,\n    \"name\" : \"deleteStackOnCompletion\"\n  } ],\n  \"schemaVersion\" : \"0.3\"\n}",
  "CreatedDate": "2021-05-07T22:32:33.321Z",
  "DisplayName": null,
  "DocumentFormat": {
    "Value": "JSON"
  },
  "DocumentType": {
    "Value": "Automation"
  },
  "DocumentVersion": "3",
  "Name": "AWSDocs-HostingAWordPressBlog-AL2",
  "Requires": [],
  "ReviewStatus": null,
  "Status": {
    "Value": "Active"
  },
  "StatusInformation": null,
  "VersionName": null,
  "ResponseMetadata": {
    "RequestId": "f15a8e8f-3faa-4230-a1e5-86f07732e3ac",
    "Metadata": {},
    "ChecksumAlgorithm": 0,
    "ChecksumValidationStatus": 0
  },
  "ContentLength": 12077,
  "HttpStatusCode": 200,
  "LoggedAt": "2023-04-02T07:10:06.9987283+00:00"
}
