{
  "AttachmentsContent": [],
  "Content": "{\n  \"schemaVersion\" : \"2.2\",\n  \"description\" : \"Command Document YAML Example\",\n  \"mainSteps\" : [ {\n    \"action\" : \"aws:runPowerShellScript\",\n    \"name\" : \"example\",\n    \"precondition\" : {\n      \"StringEquals\" : [ \"platformType\", \"Windows\" ]\n    },\n    \"inputs\" : {\n      \"runCommand\" : [ \"#Get the AWS region and store it as a variable\\n$webclient = new-object net.webclient\\n$instanceid = $webclient.Downloadstring('http://169.254.169.254/latest/meta-data/instance-id')\\n#$hostname = $webclient.Downloadstring('http://169.254.169.254/latest/meta-data/local-hostname')\\necho \\\"For interacting with aws, our Instance ID is $instanceid\\\"\\n$AWS_REGION = (irm http://169.254.169.254/latest/dynamic/instance-identity/document | % region) \\necho \\\"$AWS_REGION is the region this exists in.\\\"\\n$RegionTag = 'nada'\\n$RegionTag =  Get-EC2Tag | ` Where-Object {$_.ResourceId -eq $instanceid -and $_.Key -eq 'RegionALB'}\\n$C1ENV = $RegionTag.Value\\n$RoleTag = \\\"\\\"\\n$RoleTag =  Get-EC2Tag | ` Where-Object {$_.ResourceId -eq $instanceid -and $_.Key -eq 'Role'}\\n$C1TYPE = $RoleTag.Value\\necho \\\"Role is $C1TYPE\\\"\\necho \\\"Region is $RegionTag\\\"\\n\\nif ($C1TYPE -eq \\\"web\\\") {\\n    $ServiceName = \\\"ciWFOApache\\\" \\n    Set-Service $ServiceName -StartupType Automatic\\n    echo \\\"Set $ServiceName to automatic\\\" \\n    Start-Service $ServiceName\\n    start-sleep -Seconds 15\\n    echo \\\"$C1ENV is our environment prefix. Determining ALB names\\\" \\n    #not currently used, a drain time from previous script\\n    #$TGRP_CHANGE_WAIT=90\\n    #append some variables that turn into your target group ALB names\\n    $HTTP_TGRP = $C1ENV+'-http'\\n    $HTTPS_TGRP = $C1ENV+'-https'\\n    #echo \\\"HTTP Target Group is $HTTP_TGRP\\\" \\n    #echo \\\"HTTPS Target Group is $HTTPS_TGRP\\\" \\n    #$TMP = & { aws elbv2 describe-target-groups --name \\\"$T_TGRP\\\" --region $AWS_REGION --output text }\\n    $HTTPTMP = & { aws elbv2 describe-target-groups --name $HTTP_TGRP --region $AWS_REGION --output text } \\n    $HTTPSTMP = & { aws elbv2 describe-target-groups --name $HTTPS_TGRP --region $AWS_REGION --output text } \\n    $HTTPTMP_PARTS = $HTTPTMP.split(\\\"\\t\\\") # Results delimited by tabs\\n    $HTTPSTMP_PARTS = $HTTPSTMP.split(\\\"\\t\\\") # Results delimited by tabs\\n    #echo $HTTPTMP_PARTS\\n    #echo $HTTPSTMP_PARTS\\n    $HTTP_ARN = $HTTPTMP_PARTS[9]\\n    $HTTPS_ARN = $HTTPSTMP_PARTS[9]\\n    #echo \\\"HTTP_ARN is $HTTP_ARN\\\"\\n    #echo \\\"HTTPS_ARN is $HTTPS_ARN\\\"\\n    echo \\\"Calling healthcheck.txt, waiting\\\" \\n    $restarttime = $(get-date -f yyyy-MM-dd-HH-mm-ss)\\n    $HTTP_Request = [System.Net.WebRequest]::Create('http://localhost/resources/healthcheck.txt')\\n    $HTTP_Response = $HTTP_Request.GetResponse()\\n    $HTTP_Status = [int]$HTTP_Response.StatusCode\\n    If ($HTTP_Status -eq 200) \\n        {\\techo \\\"200 Status for Web returned, adding to ALB at $restarttime\\\" \\n            aws elbv2 register-targets --target-group-arn $HTTP_ARN --targets Id=$instanceid --region $AWS_REGION --output text\\n            aws elbv2 register-targets --target-group-arn $HTTPS_ARN --targets Id=$instanceid --region $AWS_REGION --output text\\n        }\\n    Else\\n        {\\n        echo \\\"Web Server didn't return a health check, didn't re-add to ALB, please investigate\\\"\\n        }\\n}\\n\\n    \\n\\nif ($RoleTag.Value -eq \\\"app\\\") {\\n    $ServiceName = \\\"ciWFOTomcat\\\"\\n    Set-Service $ServiceName -StartupType Automatic\\n    echo \\\"Set $ServiceName to automatic\\\"\\n    #similiar to above but for app server API's\\n    Start-Service $ServiceName\\n    echo \\\"waiting 90 seconds for app to start\\\"\\n    start-sleep -Seconds 90\\n    $API_TGRP = $C1ENV+'-api'\\n    $APIWS_TGRP = $C1ENV+'-apiws'\\n    echo \\\"API Target Group is $API_TGRP\\\" \\n    echo \\\"APIWS Target Group is $APIWS_TGRP\\\" \\n\\n    $APITMP = & { aws elbv2 describe-target-groups --name $API_TGRP --region $AWS_REGION --output text } \\n    $APIWSTMP = & { aws elbv2 describe-target-groups --name $APIWS_TGRP --region $AWS_REGION --output text } \\n\\n    $APITMP_PARTS = $APITMP.split(\\\"\\t\\\") # Results delimited by tabs\\n    $APIWSTMP_PARTS = $APIWSTMP.split(\\\"\\t\\\") # Results delimited by tabs\\n    #echo $APITMP_PARTS\\n    #echo $APIWSTMP_PARTS\\n    $API_ARN = $APITMP_PARTS[9]\\n    $APIWS_ARN = $APIWSTMP_PARTS[9]\\n\\n    #echo \\\"API_ARN is $API_ARN\\\"\\n    #echo \\\"APIWS_ARN is $APIWS_ARN\\\"\\n\\n    #$ServiceName = \\\"ciWFOTomcat\\\"\\n    #$arrService = Get-Service -Name $ServiceName{\\n    # First we create the request.\\n    $HTTP_Request = [System.Net.WebRequest]::Create('http://localhost:8888/api/system/prerequisites')\\n    # We then get a response from the site.\\n    $HTTP_Response = $HTTP_Request.GetResponse()\\n    # We then get the HTTP code as an integer.\\n    $HTTP_Status = [int]$HTTP_Response.StatusCode\\n\\n    If ($HTTP_Status -eq 200) {\\n    $HTTP_Response.Close()\\n    $restarttime = $(get-date -f yyyy-MM-dd-HH-mm-ss)\\n    Echo \\\"200 HTTP status recieved at $restarttime. Adding instance to API and APIWS target groups\\\"\\n    aws elbv2 register-targets --target-group-arn $API_ARN --targets Id=$instanceid --region $AWS_REGION --output text\\n    aws elbv2 register-targets --target-group-arn $APIWS_ARN --targets Id=$instanceid --region $AWS_REGION --output text\\n    echo \\\"C1 is started, welcome to the jungle!\\\"\\n                        \\n    Else \\t{ \\n        Write-Host \\\"The App server didn't return a health check in 90 seconds, please check!\\\"\\n        exit\\n            }\\n        }\\t\\n    \\n    #}\\n}\\n\\nif ($RoleTag.Value -eq \\\"bro\\\") {\\n    $ServiceName = \\\"ciWFOBroker\\\" \\n    Set-Service $ServiceName -StartupType Automatic\\n    echo \\\"Set $ServiceName to automatic\\\"\\n    Start-Service $ServiceName\\t\\n}\\n\\nif ($RoleTag.Value -eq \\\"grid\\\") {\\n    $ServiceName = \\\"ciWFOGrid\\\" \\n    Set-Service $ServiceName -StartupType Automatic\\n    echo \\\"Set $ServiceName to automatic\\\"\\n    Start-Service $ServiceName\\t\\n}\\n    \\nif ($RoleTag.Value -eq \\\"wfm\\\") {\\n    $ServiceName = \\\"ciWFOScheduler\\\" \\n    $ServiceName1 = \\\"ciWFOForecast\\\" \\n    $ServiceName2 = \\\"ciWFOCompile\\\"\\n    Set-Service $ServiceName -StartupType Automatic\\n    Set-Service $ServiceName1 -StartupType Automatic\\n    Set-Service $ServiceName2 -StartupType Automatic\\n    echo \\\"Set $ServiceName, $ServiceName1, ServiceName2 to automatic\\\"\\n    Start-Service $ServiceName\\t\\n    Start-Service $ServiceName1\\n    Start-Service $ServiceName2\\n}\\n\\nif ($RoleTag.Value -eq \\\"data\\\") {\\n    $DataServiceName = \\\"ciWFOGathering\\\"\\n    $DataServiceName1 = \\\"ciWFOCTISignaling\\\"\\n    $DataServiceName2 = \\\"ciDSWFOTomcat\\\"\\n    $DataServiceName3 = \\\"ciWFORecording\\\"\\n    $DataServiceName4 = \\\"ciWFOSipRec\\\"\\n    Set-Service $DataServiceName -StartupType Automatic\\n    echo \\\"Set $ServiceName to automatic\\\"\\n    Start-Service $DataServiceName\\t\\n    echo \\\"Starting Data Server\\\"\\n    Stop-Service $DataServiceName1\\n    Set-Service $DataServiceName1 -StartupType Disabled\\n    Stop-Service $DataServiceName2\\n    Set-Service $DataServiceName2 -StartupType Disabled\\n    Stop-Service $DataServiceName3\\n    Set-Service $DataServiceName3 -StartupType Disabled\\n    Stop-Service $DataServiceName4\\n    Set-Service $DataServiceName4 -StartupType Disabled\\n    echo \\\"Stopped all services and set all services disabled except ciWFOGathering\\\"\\n}\" ]\n    }\n  } ]\n}",
  "CreatedDate": "2020-03-06T15:28:11.862Z",
  "DisplayName": null,
  "DocumentFormat": {
    "Value": "JSON"
  },
  "DocumentType": {
    "Value": "Command"
  },
  "DocumentVersion": "1",
  "Name": "arn:aws:ssm:us-west-2:303795061870:document/EnableC1byTag-AddtoTG",
  "Requires": [],
  "ReviewStatus": null,
  "Status": {
    "Value": "Active"
  },
  "StatusInformation": null,
  "VersionName": null,
  "ResponseMetadata": {
    "RequestId": "cd7aa6fc-9abe-4f7d-956e-0654cc66ba1a",
    "Metadata": {},
    "ChecksumAlgorithm": 0,
    "ChecksumValidationStatus": 0
  },
  "ContentLength": 7904,
  "HttpStatusCode": 200,
  "LoggedAt": "2022-05-31T07:14:14.6810286+00:00"
}
