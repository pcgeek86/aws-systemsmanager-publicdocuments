{
  "AttachmentsContent": [
    {
      "Hash": "e663fd7f234e1bc5dbf75e3d61f2e1779d1d78ba639ebc895cbc5cbfbab1d3b6",
      "HashType": {
        "Value": "Sha256"
      },
      "Name": "attachment.zip",
      "Size": 9731,
      "Url": "https://aws-ssm-document-attachments-us-west-2.s3.us-west-2.amazonaws.com/0fe/190294270367/Automation/AWSSupport-TroubleshootCloudWatchAgent%2153867eee-25bf-42f8-aa06-aed3f8d92d4f/1/attachment.zip?x-attachment-size=9731&x-requester-accountId=987868780346&X-Amz-Security-Token=IQoJb3JpZ2luX2VjEO7%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLXdlc3QtMiJHMEUCIGjAHEnPwXP4JslCS34hyW7opBaMEgGZMwmu1TLYG70tAiEA5G7jsIvqoUdVIukmkTjfYh4c5Y9y2PK%2BFOvE%2FgiRuxQqwgUI5%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FARADGgwyNDk5MjQ1Mjc0MTAiDCfrm03lPDKkwPUVGyqWBcFoH4EkN1cNrJDp%2B4t4Eyz%2Bz%2Bhbl6ngRpbq5oSoATtKgTWf217uRWn26X%2BajXuMIzThQkS07PWUSxMbn8H7zy7FRj87mqeHEusFXHCDVqTZhKgLyH61F83Z4bBZmjjgGfq073LyjHUjFtDurSdXHuhtAUBkXIImPh4Luj8JYE%2Ff2j%2Bbf7sGFMWoL1N2GX%2B1GwWkAxVKyiulLWCxz8XYtwBp9QYGfEuLmxgGlZHO2OYxiJyN4fVaB1s0eR9WtGY72XjB%2BAKV0ojiUDa9ofiRRaKZ8zF9l7HWiXlsurwPkBvrLUT4ztXI4wbj1IUwlPtEnnV44EbBeN31sjwBxKM43IkTAB6ljcxML%2BlF3b6aWfHbZxiudYbtCHJcZ1jwGk3RGtOkm8rLpUyFvmYV9%2BqJNDqBgsjP0HSdwbKEqRElyYWVHB9sbDfmVSEexGwhxP3HBomScA%2FUFO7BQAbwZVPJ80aP3pzyxGNm6BidJjY1pn%2F%2Fpn4QcxwvXqUnpwT7Rq03U%2FiOjuulnZM3O9WF8OJnX1qEcp90nsZHKsIp3Lrvyz8mzTCsU%2FlZOH%2BnU8gPwmvrqTxyNlCU39Bd%2F65cL%2FnISepDkWpWwIxsqsTnKoWxPx56JqVBsB%2F4B0Yc9R6AW3wcpOVHLZkmBNxfV%2FmcCGZUgBSawQ4isgu7mHWjhxf6IBX4Iq%2FaP9g%2BGFmEZFcDovWFKNKvnfH%2B6pkCifh3KnWdXGXlvKKVnb7sEenjAI6ZGGjhh0Ee%2FQPC53C1aRXdixUmTRxsxA%2FnSP7tfhP29wQSD2cDl%2BXLOJ48mUAv2lqPgNAst2ZrdME68KKu21BLTBGvdERhckFscJFEJji1CXNvT3NbpQS2LUvo%2BcQ1xKnAqqb6V3wRbux8MMmqmKIGOrEBonXRD%2F%2BCEdlHhzBf6bpHtIQ8jE94pOUfZ1GuUsc6oO0%2F1%2F2zCliY6nENCxqC91DEkAQGiF5GCSGJV%2FuFC5q4QYj6FNvW9lXL4%2B9jheO%2F1nTWXg2NnNP0nqVRLRhA9efsCPFA4vsYbckxjJlND%2FptS68Z4L7S0sqaZeCo0IN0rUAsUlHyp9LL9ahrpk0w5STyiFtnhr%2B36w3GovRUNqKa4tYjUuqCmM%2FYs0%2FceOtuXlSP&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Date=20230424T071234Z&X-Amz-SignedHeaders=host&X-Amz-Expires=86400&X-Amz-Credential=ASIATUMFJUUZIXCSPGNR%2F20230424%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Signature=ff35652bdbbf6c934d28ac6d6a7708bd475719aeb769cb87ddeb4bab1564c2c7"
    }
  ],
  "Content": "{\n  \"description\": \"The **AWSSupport-TroubleshootCloudWatchAgent** runbook automates troubleshooting the Amazon CloudWatch agent on your Amazon Elastic Compute Cloud (EC2) instances. The runbook performs this troubleshooting through a series of basic, and (optional) extended checks.\\n\\nThe basic checks include the following:\\n\\n\\t1. Check for an AWS Identity and Access Management (IAM) instance profile\\n\\t2. Verify if the necessary CloudWatch Agent IAM permissions are attached to the EC2 instance\\n\\nThe extended checks are only performed if the EC2 instance ID provided is an AWS Systems Manager (SSM) managed instance. These extended checks include the following:\\n\\n\\t1. Check the status of the CloudWatch Agent on the instance\\n\\t2. Analyze the logs of the CloudWatch Agent for common issues and relevant troubleshooting steps\\n\\t3. Zip the relevant logs and configuration files on the EC2 instance and optionally upload them to an Amazon Simple Storage Service (S3) bucket of your choosing\\n\\t4. Perform a connectivity check between the instance and the required endpoints\\n\\nWhen the 'RunVpcReachabilityAnalyzer' parameter is set to 'true', this runbook will determine if there is a need to call the child runbook, **AWSSupport-AnalyzeAWSEndpointReachabilityFromEC2**. It does this if one of two criteria are satisfied:\\n\\n\\t1. The instance is not an SSM managed instance\\n\\t2. The instance is an SSM manged instance, and one of the connectivity checks between the instance and the required endpoints resulted in a 'failed' message output.\\nIf either of these situations occur, this child runbook can help diagnose DNS configuration issues, VPC endpoint issues, or reachability between the instance and the IGW/NAT.\\n\\n### Workflow Specifications\\nFor information on the IAM permissions and input parameters required to run this Automation, please refer to the documentation [here](https://docs.aws.amazon.com/systems-manager-automation-runbooks/latest/userguide/automation-awssupport-troubleshoot-cloudwatch-agent.html).\\n\\n### Important\\nThe child runbook, **AWSSupport-AnalyzeAWSEndpointReachabilityFromEC2** does not directly perform any connectivity checks to the required endpoints. Instead, it uses 'Reachability Analyzer' which has an associated cost. For more information on pricing, refer to the documentation [here](https://aws.amazon.com/vpc/pricing/).\\nIf you have a complex Amazon Virtual Private Cloud (VPC) routing setup that includes peering connections or resources such as transit gateways, this may not provide an accurate assessment of the reachability to the AWS endpoints. For more information on this child runbook, please refer to the documentation [here](https://docs.aws.amazon.com/systems-manager-automation-runbooks/latest/userguide/automation-awssupport-analyzeawsendpointreachabilityfromec2.html).\\n\\nThis runbook only checks your IAM instance profile role for the necessary permissions. If you instead rely on credentials defined in a [.aws/credentials file](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch-Agent-common-scenarios.html#CloudWatch-Agent-run-as-user), the results of the 'verifyIamPermissions' step may be inaccurate.\",\n  \"schemaVersion\": \"0.3\",\n  \"assumeRole\": \"{{ AutomationAssumeRole }}\",\n  \"parameters\": {\n    \"AutomationAssumeRole\": {\n      \"type\": \"AWS::IAM::Role::Arn\",\n      \"description\": \"(Optional) The Amazon Resource Name (ARN) of the AWS Identity and Access Management (IAM) role that allows Systems Manager Automation to perform the actions on your behalf. If no role is specified, Systems Manager Automation uses the permissions of the user that starts this runbook.\",\n      \"default\": \"\"\n    },\n    \"InstanceId\": {\n      \"type\": \"AWS::EC2::Instance::Id\",\n      \"description\": \"(Required) The ID of the Amazon Elastic Compute Cloud (EC2) instance you want to troubleshoot the CloudWatch agent on.\"\n    },\n    \"S3UploadBucket\": {\n      \"type\": \"AWS::S3::Bucket::Name\",\n      \"description\": \"(Optional) The name of an Amazon Simple Storage Service (S3) bucket to upload the collected Amazon CloudWatch agent logs. The EC2 instance profile must have correct permissions to upload files to this bucket. This also requires the target EC2 instance to be an AWS Systems Manager (SSM) managed instance.\",\n      \"default\": \"\"\n    },\n    \"S3BucketOwnerAccountId\": {\n      \"type\": \"String\",\n      \"description\": \"(Optional) The AWS Account Number that owns the Amazon S3 bucket where you want to upload the Amazon CloudWatch agent logs. If you do not modify this parameter, the runbooks uses the AWS account ID of the user or role in which the Automation runs.\",\n      \"allowedPattern\": \"^\\\\{\\\\{ global:ACCOUNT_ID \\\\}\\\\}$|^[0-9]{12}$\",\n      \"default\": \"{{ global:ACCOUNT_ID }}\"\n    },\n    \"CheckEC2Endpoint\": {\n      \"type\": \"String\",\n      \"description\": \"(Optional) Specify 'true' if your agent configuration uses the option 'append_dimensions' to append EC2 metric dimensions to the metrics collected by the agent. When 'append_dimensions' is used, the CloudWatch Agent requires connectivity to the EC2 endpoint, so an additional connectivity tests will be performed via the extended checks. This parameter defaults to 'false'.\",\n      \"allowedValues\": [\n        \"false\",\n        \"true\"\n      ],\n      \"default\": \"false\"\n    },\n    \"RunVpcReachabilityAnalyzer\": {\n      \"type\": \"Boolean\",\n      \"description\": \"(Optional) Specify 'true' to run the AWSSupport-AnalyzeAWSEndpointReachabilityFromEC2 child automation if a network issue is determined by the extended checks, or if the instance ID specified is not a managed instance. For more information on this child automation, please refer to the documentation above. This parameter defaults to 'false'.\",\n      \"default\": false\n    },\n    \"RetainVpcReachabilityAnalysis\": {\n      \"type\": \"Boolean\",\n      \"description\": \"(Optional) Only relevant if 'RunVpcReachabilityAnalyzer' is true. Specify 'true' to retain the network insight path and related analyses created by VPC Reachability Analyzer. By default, those resources are deleted after successful analysis.\\nIf you choose to retain the analysis, the child runbook does not delete the analysis and you can visualize it in the VPC console. The console link will be available in the child automation output. This parameter defaults to 'false'\",\n      \"default\": false\n    }\n  },\n  \"mainSteps\": [\n    {\n      \"name\": \"getInstanceProfile\",\n      \"action\": \"aws:executeAwsApi\",\n      \"inputs\": {\n        \"Service\": \"ec2\",\n        \"Api\": \"DescribeInstances\",\n        \"InstanceIds\": [\n          \"{{ InstanceId }}\"\n        ]\n      },\n      \"outputs\": [\n        {\n          \"Name\": \"InstanceProfileArn\",\n          \"Selector\": \"$.Reservations[0].Instances[0].IamInstanceProfile.Arn\",\n          \"Type\": \"String\"\n        }\n      ],\n      \"description\": \"Verify if the provided EC2 instance has an IAM instance profile attached.\",\n      \"nextStep\": \"branchOnInstanceProfileStatus\",\n      \"onFailure\": \"Abort\",\n      \"isCritical\": true\n    },\n    {\n      \"name\": \"branchOnInstanceProfileStatus\",\n      \"action\": \"aws:branch\",\n      \"inputs\": {\n        \"Default\": \"getInstanceInformation\",\n        \"Choices\": [\n          {\n            \"NextStep\": \"verifyIamPermissions\",\n            \"Variable\": \"{{ getInstanceProfile.InstanceProfileArn}}\",\n            \"Contains\": \"arn:{{ global:AWS_PARTITION }}:iam::\"\n          }\n        ]\n      },\n      \"description\": \"Branches the automation to check for necessary instance profile permissions if the instance profile is attached to the instance.\",\n      \"onFailure\": \"Abort\",\n      \"isCritical\": true\n    },\n    {\n      \"name\": \"verifyIamPermissions\",\n      \"action\": \"aws:executeScript\",\n      \"inputs\": {\n        \"Runtime\": \"python3.8\",\n        \"Handler\": \"check_permissions.script_handler\",\n        \"InputPayload\": {\n          \"InstanceProfileArn\": \"{{ getInstanceProfile.InstanceProfileArn }}\"\n        },\n        \"Attachment\": \"attachment.zip\"\n      },\n      \"outputs\": [\n        {\n          \"Name\": \"ManagedPolicies\",\n          \"Selector\": \"$.Payload.ManagedPolicies\",\n          \"Type\": \"StringMap\"\n        },\n        {\n          \"Name\": \"SimulationResults\",\n          \"Selector\": \"$.Payload.SimulationResults\",\n          \"Type\": \"StringMap\"\n        }\n      ],\n      \"description\": \"Checks the instance profile associated with the instance to determine if the necessary permissions are applied.\",\n      \"nextStep\": \"getInstanceInformation\",\n      \"onFailure\": \"Continue\",\n      \"isCritical\": false\n    },\n    {\n      \"name\": \"getInstanceInformation\",\n      \"action\": \"aws:executeAwsApi\",\n      \"inputs\": {\n        \"Service\": \"ssm\",\n        \"Api\": \"DescribeInstanceInformation\",\n        \"Filters\": [\n          {\n            \"Key\": \"InstanceIds\",\n            \"Values\": [\n              \"{{ InstanceId }}\"\n            ]\n          }\n        ]\n      },\n      \"outputs\": [\n        {\n          \"Name\": \"PingStatus\",\n          \"Selector\": \"$.InstanceInformationList[0].PingStatus\",\n          \"Type\": \"String\"\n        },\n        {\n          \"Name\": \"OS\",\n          \"Selector\": \"$.InstanceInformationList[0].PlatformType\",\n          \"Type\": \"String\"\n        }\n      ],\n      \"description\": \"Checks if the instance has an active SSM agent, and fetches the OS type of the instance.\",\n      \"nextStep\": \"branchOnManagedInstance\",\n      \"onFailure\": \"step:branchOnRunVpcReachabilityAnalyzer\",\n      \"isCritical\": false\n    },\n    {\n      \"name\": \"branchOnManagedInstance\",\n      \"action\": \"aws:branch\",\n      \"inputs\": {\n        \"Default\": \"branchOnRunVpcReachabilityAnalyzer\",\n        \"Choices\": [\n          {\n            \"NextStep\": \"getAgentStatus\",\n            \"Variable\": \"{{ getInstanceInformation.PingStatus }}\",\n            \"StringEquals\": \"Online\"\n          }\n        ]\n      },\n      \"description\": \"Branches the automation to perform extended checks if the instance is managed.\",\n      \"onFailure\": \"step:branchOnRunVpcReachabilityAnalyzer\",\n      \"isCritical\": true\n    },\n    {\n      \"name\": \"getAgentStatus\",\n      \"timeoutSeconds\": 600,\n      \"action\": \"aws:runCommand\",\n      \"inputs\": {\n        \"DocumentName\": \"AmazonCloudWatch-ManageAgent\",\n        \"InstanceIds\": [\n          \"{{ InstanceId }}\"\n        ],\n        \"Parameters\": {\n          \"action\": \"status\"\n        }\n      },\n      \"description\": \"Check the status of the CloudWatch agent on the instance.\",\n      \"nextStep\": \"branchOnInstanceOsType\",\n      \"onFailure\": \"Continue\",\n      \"isCritical\": false\n    },\n    {\n      \"name\": \"branchOnInstanceOsType\",\n      \"action\": \"aws:branch\",\n      \"inputs\": {\n        \"Default\": \"analyzeLogs\",\n        \"Choices\": [\n          {\n            \"NextStep\": \"analyzeLogsWindows\",\n            \"Variable\": \"{{ getInstanceInformation.OS}}\",\n            \"StringEquals\": \"Windows\"\n          }\n        ]\n      },\n      \"description\": \"Branches the automation to run a specific log collection/analysis command based on the OS.\",\n      \"onFailure\": \"step:outputFindings\",\n      \"isCritical\": true\n    },\n    {\n      \"name\": \"analyzeLogs\",\n      \"timeoutSeconds\": 600,\n      \"action\": \"aws:runCommand\",\n      \"inputs\": {\n        \"DocumentName\": \"AWS-RunShellScript\",\n        \"TimeoutSeconds\": 600,\n        \"InstanceIds\": [\n          \"{{ InstanceId }}\"\n        ],\n        \"Parameters\": {\n          \"commands\": [\n            \"#!/bin/bash\",\n            \"# Copyright 2023 Amazon.com, Inc. or its affiliates. All Rights Reserved.\",\n            \"# This script requires bash v4 or later\",\n            \"\",\n            \"function throw() {\",\n            \"    echo -e \\\"Error: $1\\\"\",\n            \"    exit 1\",\n            \"}\",\n            \"\",\n            \"CLOUDWATCH_AGENT_CONFIG=\\\"/opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.toml\\\"\",\n            \"if [ ! -f \\\"$CLOUDWATCH_AGENT_CONFIG\\\" ]; then\",\n            \"    throw \\\"Can't find CloudWatch Agent config TOML file. This could occur if you haven't started the agent before.\\\"\",\n            \"fi\",\n            \"AGENT_LOG=`sed -n 's/.*logfile = \\\"\\\\(.*\\\\)\\\"/\\\\1/p' ${CLOUDWATCH_AGENT_CONFIG}`\",\n            \"\",\n            \"TIMESTAMP_REGEX=\\\"[1-9][0-9]{3}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])T([0-1][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]Z \\\"\",\n            \"REQUEST_ID_REGEX=\\\"[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}\\\"\",\n            \"\",\n            \"if [ \\\"3\\\" -ge \\\"${BASH_VERSION:0:1}\\\" ]; then\",\n            \"    throw \\\"The current version of bash, ${BASH_VERSION}, is incompatbile with this script. Please review the log file manually and reach out to AWS support for any help.\\\"\",\n            \"fi\",\n            \"\",\n            \"# Construct list of common errors and generate outputs\",\n            \"ERROR_TYPES=( 'mount_target' 'imds' 'firewall' 'file_deleted' 'socket_fd' 'os_user' 'ec2_metrics' 'system_clock' 'permissions' 'connectivity' )\",\n            \"MATCHERS=( \\\"took\\\\ longer\\\\ to\\\\ collect\\\\ than\\\\ collection\\\\ interval\\\"\",\n            \"                 \\\"169\\\\.254\\\\.169\\\\.254\\\"\",\n            \"                 \\\"No\\\\ connection\\\\ could\\\\ be\\\\ made\\\\ because\\\\ the\\\\ target\\\\ machine\\\\ actively\\\\ refused\\\\ it\\\"\",\n            \"                 \\\"file\\\\ no\\\\ longer\\\\ exists\\\"\",\n            \"                 \\\"socket:\\\\ too\\\\ many\\\\ open\\\\ files\\\"\",\n            \"                 \\\"operation\\\\ not\\\\ permitted\\\"\",\n            \"                 \\\"metrics\\\\ will\\\\ be\\\\ dropped\\\"\",\n            \"                 \\\"AuthFailure\\\"\",\n            \"                 \\\"(AccessDeniedException)|(UnauthorizedOperation)\\\"\",\n            \"                 \\\"i\\\\/o\\\\ timeout\\\" )\",\n            \"\",\n            \"KC_ARTICLE=\\\"https://aws.amazon.com/premiumsupport/knowledge-center/cloudwatch-unified-agent-metrics-issues/\\\"\",\n            \"IMDS=\\\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-metadata.html\\\"\",\n            \"NTP=\\\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/set-time.html\\\"\",\n            \"declare -A OUTPUTS=( ['mount_target']=\\\"The CloudWatch agent stops sending all 'disk' metrics if a mount target is unreachable. Please check whether any mounted disks on your instance are unreachable and, if necessary, unmount them.\\\"                            \",\n            \"                     ['imds']=\\\"The EC2 metadata service appears to be unreachable. Please ensure the instance is able to reach the metadata service at '169.254.169.254'. For more information you can review the docs on IMDS here:\\\\n\\\\t${IMDS}\\\"                                                                       \",\n            \"                     ['firewall']=\\\"The local firewall, or firewall in between the host and endpoint is blocking the connection to the remote IP's. Please ensure there is a valid route to the endpoint.\\\"\",\n            \"                     ['file_deleted']=\\\"The log file to be collected as per CloudWatch Agent config no longer exists. Please review your config file for errors if you need to stream this log file, or remove the entry if it's no longer needed.\\\"                                                         \",\n            \"                     ['socket_fd']=\\\"The CloudWatch agent's process has reached the maximum number of open file descriptors. Please review the 'Max open files' limit of the process on your system via the command 'sudo cat /proc/<pid>/limits'.\\\"                                                     \",\n            \"                     ['os_user']=\\\"The user specified in the 'run_as_user' section of your CloudWatch agent config is not able to open the specified file. Please review file and directory permission on the OS.\\\"   \",\n            \"                     ['ec2_metrics']=\\\"The CloudWatch agent has failed to deliver EC2 Metrics due to an endpoint failure. Confirm connectivity to the EC2 endpoint and review our public knowledge article for more troubleshooting steps:\\\\n\\\\t${KC_ARTICLE}\\\"                                                          \",\n            \"                     ['system_clock']=\\\"The system credentials have failed to be validated. A common cause of this is due to an out of sync system clock. Please review the docs here for assistance in configuring the system clock:\\\\n\\\\t${NTP}\\\"                                                                         \",\n            \"                     ['permissions']=\\\"The attached IAM instance profile role but does not have sufficient permissions. Please refer to the section 'Confirm that the host has permissions to publish metrics and logs' in our public knowledge article for more information:\\\\n\\\\t${KC_ARTICLE}\\\"                                   \",\n            \"                     ['connectivity']=\\\"The agent has failed to connect to one of the required endpoints. Please ensure the instance (and any proxy - if configured) is able to connect to all required endpoints.\\\\nFor more information on the required endpoints, please refer to our public knowledge article:\\\\n\\\\t${KC_ARTICLE}\\\" )                \",\n            \"\",\n            \"# Read log into 'errors' array without duplicate error keys\",\n            \"# Change multi-line logs into single record errors, drop empty errors\",\n            \"# Read unique \\\"Error\\\" or \\\"Warning\\\" logs into array\",\n            \"readarray -t errors < <(awk -v timestamp=$TIMESTAMP_REGEX -v rid=$REQUEST_ID_REGEX \\\\\",\n            \"                            'BEGIN{RS=timestamp}                                   \\\\\",\n            \"                            !/retrying|(I!)|(D!)/ && NF > 0                        \\\\\",\n            \"                            {                                                      \\\\\",\n            \"                                if($NF~rid){                                       \\\\\",\n            \"                                    OUT=$1;                                        \\\\\",\n            \"                                    for( i=2; i<NF; i++ ){                         \\\\\",\n            \"                                        if( $i == \\\"\\\\n\\\"){                           \\\\\",\n            \"                                            $i = \\\" \\\"                               \\\\\",\n            \"                                        }                                          \\\\\",\n            \"                                        OUT=OUT OFS $i                             \\\\\",\n            \"                                    }                                              \\\\\",\n            \"                                }                                                  \\\\\",\n            \"                                else{                                              \\\\\",\n            \"                                    OUT=$1;                                        \\\\\",\n            \"                                    for( i=2; i<=NF; i++ ){                        \\\\\",\n            \"                                        if( $i == \\\"\\\\n\\\"){                           \\\\\",\n            \"                                            $i = \\\" \\\"                               \\\\\",\n            \"                                        }                                          \\\\\",\n            \"                                        OUT=OUT OFS $i                             \\\\\",\n            \"                                    }                                              \\\\\",\n            \"                                }                                                  \\\\\",\n            \"                                { print OUT }                                      \\\\\",\n            \"                            }'                                                     \\\\\",\n            \"                            $AGENT_LOG | sort | uniq)                              \\\\\",\n            \"                || throw \\\"Internal Failure while parsing log file\\\"                                          \",\n            \"\",\n            \"# Loop through errors array and output recommendation action based on the matching regex - will start with more\",\n            \"# specific errors and then output broader errors like i/o timeout if the specific ones havent matched\",\n            \"# The 'errors' array may have stale errors or duplicate root causes but we will match all of these anyways and provide that information\",\n            \"matches=0\",\n            \"for error in \\\"${errors[@]}\\\";\",\n            \"do\",\n            \"    # ERROR_TYPES array and MATCHERS array have same length/elem positions\",\n            \"    for (( i=0; i<${#ERROR_TYPES[@]}; i++ ));\",\n            \"    do\",\n            \"        if [[ \\\"$error\\\" =~ ${MATCHERS[i]} ]]; then\",\n            \"            ((matches+=1))\",\n            \"            echo \\\"---------------Log Finding---------------\\\"\",\n            \"            echo -e \\\"The following error was found in your logs:\\\\n===> ${error}\\\"\",\n            \"            echo -e \\\"\\\\n${OUTPUTS[${ERROR_TYPES[i]}]}\\\\n\\\\n\\\"\",\n            \"            break\",\n            \"        fi\",\n            \"    done\",\n            \"done\",\n            \"\",\n            \"if [ \\\"${#errors[@]}\\\" -ne \\\"$matches\\\" ]; then\",\n            \"    echo \\\"---------------Log Finding---------------\\\"\",\n            \"    echo -e \\\"Some errors in the logs were unable to be matched. Please review your CloudWatch agent logs, and reach out to AWS support if you need further help.\\\"\",\n            \"elif [ \\\"${#errors[@]}\\\" -eq \\\"0\\\" ]; then\",\n            \"    echo \\\"No errors found while analyzing CloudWatch agent logs.\\\"\",\n            \"fi\"\n          ]\n        }\n      },\n      \"description\": \"Analyze and output findings of CloudWatch agent logs on Linux OSs.\",\n      \"nextStep\": \"collectLogs\",\n      \"onFailure\": \"step:collectLogs\",\n      \"isCritical\": false\n    },\n    {\n      \"name\": \"collectLogs\",\n      \"timeoutSeconds\": 600,\n      \"action\": \"aws:runCommand\",\n      \"inputs\": {\n        \"DocumentName\": \"AWS-RunShellScript\",\n        \"TimeoutSeconds\": 600,\n        \"InstanceIds\": [\n          \"{{ InstanceId }}\"\n        ],\n        \"Parameters\": {\n          \"commands\": [\n            \"#!/bin/bash\",\n            \"# Copyright 2023 Amazon.com, Inc. or its affiliates. All Rights Reserved.\",\n            \"\",\n            \"function throw() {\",\n            \"    echo -e \\\"Error: $1\\\"\",\n            \"    exit 1\",\n            \"}\",\n            \"\",\n            \"# Zip file constants\",\n            \"DATE=`date +\\\"%Y-%m-%dT%H:%M:%SZ\\\"`\",\n            \"ZIP_FILE_NAME=\\\"TroubleshootCloudWatchAgentLogs_{{automation:EXECUTION_ID}}_${DATE}.zip\\\"\",\n            \"THRESHOLD=75\",\n            \"\",\n            \"# S3 upload constants\",\n            \"S3_BUCKET={{S3UploadBucket}}\",\n            \"REGION={{global:REGION}}\",\n            \"PUBLIC_ACL_INDICATOR='http://acs.amazonaws.com/groups/global/AllUsers'\",\n            \"\",\n            \"## Configuration file path constants\",\n            \"CLOUDWATCH_AGENT_CONFIG=\\\"/opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.toml\\\"\",\n            \"CLOUDWATCH_LOG_CONFIGS=\\\"/opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.d/*\\\"\",\n            \"CLOUDWATCH_AGENT_COMMON_CONFIG=\\\"/opt/aws/amazon-cloudwatch-agent/etc/common-config.toml\\\"\",\n            \"\",\n            \"# The below are locations of configs that may or may not be in use depending on how the agent was started\",\n            \"# These may be relevant to troubleshooting, but the above locations are the source of truth for actual configuration\",\n            \"AGENT_CREATED_CONFIG=\\\"/opt/aws/amazon-cloudwatch-agent/bin/config.json\\\"\",\n            \"SSM_DOWNLOADED_CONFIG=\\\"/opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json\\\"\",\n            \"\",\n            \"# Log file path constants - the agent log can have a modified log location so we can parse this from the config\",\n            \"# Agent log can be rotated - https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch-Agent-Configuration-File-Details.html#CloudWatch-Agent-Configuration-File-Agentsection\",\n            \"CONFIGURATION_VALIDATION_LOG=\\\"/opt/aws/amazon-cloudwatch-agent/logs/configuration-validation.log\\\"\",\n            \"if [ ! -f \\\"$CLOUDWATCH_AGENT_CONFIG\\\" ]; then\",\n            \"    throw \\\"Can't find CloudWatch Agent config TOML file. This could occur if you haven't started the agent before.\\\"\",\n            \"fi\",\n            \"AGENT_LOG=`sed -n 's/.*logfile = \\\"\\\\(.*\\\\)\\\"/\\\\1/p' ${CLOUDWATCH_AGENT_CONFIG}`\",\n            \"ROTATED_AGENT_LOGS=`echo $AGENT_LOG | sed 's/\\\\.log/*.gz/'`\",\n            \"\",\n            \"if [ ! -f \\\"$AGENT_CREATED_CONFIG\\\" ]; then\",\n            \"    echo \\\"No wizard-created config files found. Skipping...\\\"\",\n            \"fi\",\n            \"\",\n            \"if [ ! -f \\\"$SSM_DOWNLOADED_CONFIG\\\" ]; then\",\n            \"    echo \\\"No SSM-downloaded config files found. Skipping...\\\"\",\n            \"fi\",\n            \"\",\n            \"ALL_FILES=(${CLOUDWATCH_AGENT_CONFIG} ${CLOUDWATCH_LOG_CONFIGS} ${CLOUDWATCH_AGENT_COMMON_CONFIG} ${AGENT_CREATED_CONFIG} ${SSM_DOWNLOADED_CONFIG} ${CONFIGURATION_VALIDATION_LOG} ${AGENT_LOG} ${ROTATED_AGENT_LOGS})\",\n            \"\",\n            \"# Check server disk space before zipping\",\n            \"result=$(df | grep -ve \\\"Filesystem\\\\|loop\\\" | awk '{print $5}' | sed 's/%//g')\",\n            \"partition_name=($(df | grep -ve \\\"Filesystem\\\\|loop\\\" | awk '{print $1}'))\",\n            \"exceeded=0\",\n            \"\",\n            \"partition_index=0\",\n            \"for percent in ${result}; do\",\n            \"    if [[ \\\"${percent}\\\" -gt \\\"${THRESHOLD}\\\" ]]; then\",\n            \"        echo \\\"${partition_name[partition_index]} is ${percent}% full, please ensure your partitions are less than ${THRESHOLD}% full to collect and store the log files.\\\"\",\n            \"        ((exceeded+=1))\",\n            \"    fi\",\n            \"    ((partition_index+=1))\",\n            \"done\",\n            \"\",\n            \"if [ \\\"$exceeded\\\" -gt 0 ]; then\",\n            \"    throw \\\"Exiting early due to disk usage. Please cleanup disk partitions and run the automation again, or manually bundle/inspect your CloudWatch Agent logs.\\\"\",\n            \"fi\",\n            \"\",\n            \"cd /tmp/\",\n            \"zip -q -r $ZIP_FILE_NAME ${ALL_FILES[@]} && echo -e \\\"Files zipped successfully to location $(pwd)/${ZIP_FILE_NAME}\\\" || throw \\\"Failed to zip files\\\"\",\n            \"\",\n            \"# Upload zipfile to S3 if a bucket was provided\",\n            \"if [ ! -z \\\"$S3_BUCKET\\\" ]; then\",\n            \"    which aws &> /dev/null \\\\\",\n            \"        || throw \\\"The AWS CLI is not installed, or not on the system path. For information on installing the AWS CLI, please refer to the below link:\\\\n\\\\thttps://docs.aws.amazon.com/cli/latest/userguide/getting-started-install.html\\\"\",\n            \"\",\n            \"    aws s3api head-bucket --bucket $S3_BUCKET --expected-bucket-owner \\\"{{S3BucketOwnerAccountId}}\\\" --region $REGION &> /dev/null \\\\\",\n            \"        || throw \\\"The specified bucket could not be found in the account, or an error occurred while listing the bucket.\\\\nLeaving zipfile on instance, please cleanup manually if you want it removed.\\\"\",\n            \"\",\n            \"    if ! aws s3api get-bucket-policy-status --bucket $S3_BUCKET --region $REGION 2>&1 | grep -q \\\"does not exist\\\"; then\",\n            \"        policy_status=`aws s3api get-bucket-policy-status --bucket $S3_BUCKET --output text --region $REGION 2> /dev/null` \\\\\",\n            \"            || throw \\\"Failed to get bucket policy status. Please make sure the instance profile has the s3:GetBucketPolicyStatus permission.\\\\nLeaving zipfile on instance, please cleanup manually if you want it removed.\\\"\",\n            \"        \",\n            \"        test \\\"$(echo $policy_status | cut -d \\\" \\\" -f2)\\\" = \\\"True\\\" \\\\\",\n            \"            && throw \\\"The bucket policy allows public access. Cannot upload when bucket is public.\\\\nLeaving zipfile on instance, please cleanup manually if you want it removed.\\\" \\\\\",\n            \"            || echo \\\"Bucket policy not public\\\" > /dev/null\",\n            \"    fi\",\n            \"\",\n            \"    bucket_acls=`aws s3api get-bucket-acl --output text --bucket $S3_BUCKET --region $REGION 2> /dev/null` \\\\\",\n            \"        || throw \\\"Failed to get bucket ACL. Please make sure the instance profile has the s3:GetBucketAcl permission.\\\\nLeaving zipfile on instance, please cleanup manually if you want it removed.\\\"\",\n            \"\",\n            \"    echo \\\"$bucket_acls\\\" | grep -A1 'READ\\\\|WRITE' | grep -q \\\"${PUBLIC_ACL_INDICATOR}\\\" \\\\\",\n            \"        && throw \\\"The bucket ACLs allow public access. Cannot upload when bucket is public.\\\\nLeaving zipfile on instance, please cleanup manually if you want it removed.\\\" \\\\\",\n            \"        || echo \\\"Bucket ACLs not public\\\" > /dev/null\",\n            \"\",\n            \"    aws s3 cp --quiet $(pwd)/${ZIP_FILE_NAME} s3://${S3_BUCKET}/AWSSupport-TroubleshootCloudWatchAgent/Execution_ID_{{automation:EXECUTION_ID}}/${ZIP_FILE_NAME} --region $REGION \\\\\",\n            \"        && echo -e \\\"Successfully uploaded the log zipfile to the S3 bucket. This can be found in the following S3 path:\\\\n\\\\ts3://${S3_BUCKET}/AWSSupport-TroubleshootCloudWatchAgent/Execution_ID_{{automation:EXECUTION_ID}}/\\\" \\\\\",\n            \"        || throw \\\"S3 upload command failed. Please ensure the instance profile associated with your instance has proper permissions to upload to this bucket.\\\\nLeaving zipfile on instance, please cleanup manually if you want it removed.\\\"\",\n            \"\",\n            \"    rm ${ZIP_FILE_NAME} && echo \\\"Cleaned up zipfile on the instance.\\\" \\\\\",\n            \"        || throw \\\"Couldn't cleanup zipfile on instance. Please cleanup manually.\\\"\",\n            \"else\",\n            \"    echo \\\"No S3 bucket provided. Skipping zip upload...\\\"\",\n            \"fi\"\n          ]\n        }\n      },\n      \"description\": \"Bundle and output the relevant CloudWatch agent troubleshooting files on Linux OSs.\",\n      \"nextStep\": \"checkEndpointReachability\",\n      \"onFailure\": \"step:checkEndpointReachability\",\n      \"isCritical\": false\n    },\n    {\n      \"name\": \"checkEndpointReachability\",\n      \"timeoutSeconds\": 600,\n      \"action\": \"aws:runCommand\",\n      \"inputs\": {\n        \"DocumentName\": \"AWS-RunShellScript\",\n        \"TimeoutSeconds\": 600,\n        \"InstanceIds\": [\n          \"{{ InstanceId }}\"\n        ],\n        \"Parameters\": {\n          \"commands\": [\n            \"#!/bin/bash\",\n            \"# Copyright 2023 Amazon.com, Inc. or its affiliates. All Rights Reserved.\",\n            \"\",\n            \"function get_suffix() {\",\n            \"    if [[ \\\"$1\\\" == \\\"aws-cn\\\" ]]; then\",\n            \"        eval \\\"$2='amazonaws.com.cn'\\\"\",\n            \"    else\",\n            \"        eval \\\"$2='amazonaws.com'\\\"\",\n            \"    fi;\",\n            \"}\",\n            \"\",\n            \"# Set endpoint constants\",\n            \"SUFFIX=''\",\n            \"get_suffix \\\"{{global:AWS_PARTITION}}\\\" SUFFIX\",\n            \"USES_EC2_ENDPOINT=\\\"{{CheckEC2Endpoint}}\\\"\",\n            \"LOGS_ENDPOINT=\\\"logs.{{global:REGION}}.${SUFFIX}\\\"\",\n            \"CLOUDWATCH_ENDPOINT=\\\"monitoring.{{global:REGION}}.${SUFFIX}\\\"\",\n            \"EC2_ENDPOINT=\\\"ec2.{{global:REGION}}.${SUFFIX}\\\"\",\n            \"\",\n            \"logs_status=''\",\n            \"cloudwatch_status=''\",\n            \"ec2_status=''\",\n            \"\",\n            \"function check_endpoint() {\",\n            \"    if `which curl &> /dev/null`; then\",\n            \"        curl -I https://$1 --connect-timeout 10 &> /dev/null\",\n            \"    elif `which wget &> /dev/null`; then\",\n            \"        wget -S https://$1 --timeout 10 -t 1 &> /dev/null\",\n            \"    else\",\n            \"        echo \\\"Neither curl nor wget are installed, or they're missing on the system path. Can't run connection test.\\\" && exit 1\",\n            \"    fi;\",\n            \"}\",\n            \"\",\n            \"function test_success() {\",\n            \"    # wget exits with return status of 8 if server returns 404\",\n            \"    if [[ \\\"$1\\\" != \\\"0\\\" && \\\"$1\\\" != \\\"8\\\" ]]; then\",\n            \"        eval \\\"$2='failed'\\\"\",\n            \"    else\",\n            \"        eval \\\"$2='success'\\\"\",\n            \"    fi;\",\n            \"}\",\n            \"\",\n            \"check_endpoint $LOGS_ENDPOINT \",\n            \"test_success $? logs_status\",\n            \"check_endpoint $CLOUDWATCH_ENDPOINT\",\n            \"test_success $? cloudwatch_status\",\n            \"\",\n            \"if [[ \\\"$USES_EC2_ENDPOINT\\\" == \\\"true\\\" ]]; then\",\n            \"    check_endpoint $EC2_ENDPOINT\",\n            \"    test_success $? ec2_status\",\n            \"else\",\n            \"    ec2_status=\\\"not_run\\\"\",\n            \"fi;\",\n            \"\",\n            \"echo -e \\\"{\\\\n  \\\\\\\"logs\\\\\\\":\\\\\\\"${logs_status}\\\\\\\",\\\\n  \\\\\\\"monitoring\\\\\\\":\\\\\\\"${cloudwatch_status}\\\\\\\",\\\\n  \\\\\\\"ec2\\\\\\\":\\\\\\\"${ec2_status}\\\\\\\"\\\\n}\\\"\"\n          ]\n        }\n      },\n      \"description\": \"Check if the instance can reach the required endpoints on Linux OSs.\",\n      \"nextStep\": \"branchOnRunVpcReachabilityAnalyzer\",\n      \"onFailure\": \"step:outputFindings\",\n      \"isCritical\": false\n    },\n    {\n      \"name\": \"analyzeLogsWindows\",\n      \"timeoutSeconds\": 600,\n      \"action\": \"aws:runCommand\",\n      \"inputs\": {\n        \"DocumentName\": \"AWS-RunPowerShellScript\",\n        \"TimeoutSeconds\": 600,\n        \"InstanceIds\": [\n          \"{{ InstanceId }}\"\n        ],\n        \"Parameters\": {\n          \"commands\": [\n            \"# Copyright 2023 Amazon.com, Inc. or its affiliates. All Rights Reserved.\",\n            \"\",\n            \"$CloudWatchAgentConfig=\\\"$Env:ProgramData\\\\Amazon\\\\AmazonCloudWatchAgent\\\\amazon-cloudwatch-agent.toml\\\"\",\n            \"# CloudWatch Agent Logging Location\",\n            \"try {\",\n            \"    $Match = Select-String -Path $CloudWatchAgentConfig -pattern \\\"(?:\\\\\\\\\\\\\\\\[^\\\\\\\\]+|[a-zA-Z]:)((?:\\\\\\\\[^\\\\\\\\\\\\n]+)+\\\\\\\\)?([^<>:\\\\n]*.log)\\\"\",\n            \"    $AgentLog=$Match.Matches.groups[0].value\",\n            \"} catch {\",\n            \"    Write-Host \\\"Can't find CloudWatch Agent config TOML file. This could occur if you haven't started the agent before. Exiting log analyzer now.\\\"\",\n            \"    Exit 1\",\n            \"}\",\n            \"\",\n            \"# Variables containing troubleshooting links\",\n            \"$KcArticle=\\\"https://aws.amazon.com/premiumsupport/knowledge-center/cloudwatch-unified-agent-metrics-issues/\\\"\",\n            \"$Imds=\\\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-metadata.html\\\"\",\n            \"$Ntp=\\\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/set-time.html\\\"\",\n            \"\",\n            \"# Hashtable of matchers:errortypes/descriptions\",\n            \"$Outputs = @{ \",\n            \"    \\\"took longer to collect than collection interval\\\"=\\\"The CloudWatch agent stops sending all 'disk' metrics if a mount target is unreachable. Please check whether any mounted disks on your instance are unreachable and, if necessary, unmount them.\\\"\",\n            \"    \\\"169.254.169.254\\\"=\\\"The EC2 metadata service appears to be unreachable. Please ensure the instance is able to reach the metadata service at '169.254.169.254'. For more information you can review the docs on IMDS here: ${Imds}.\\\"\",\n            \"    \\\"No connection could be made because the target machine actively refused it\\\"=\\\"The local firewall, or firewall in between the host and endpoint is blocking the connection to the remote IP's. Please ensure there is a valid route to the endpoint.\\\"\",\n            \"    \\\"file no longer exists\\\"=\\\"The log file to be collected as per CloudWatch Agent config no longer exists. Please review your config file for errors if you need to stream this log file, or remove the entry if it's no longer needed.\\\"\",\n            \"    \\\"socket: too many open files\\\"=\\\"The CloudWatch agent's process has reached the maximum number of open file descriptors. Please review the 'Max open files' limit of the process on your system via the command 'sudo cat /proc/<pid>/limits'.\\\"\",\n            \"    \\\"operation not permitted\\\"=\\\"The user specified in the 'run_as_user' section of your CloudWatch agent config is not able to open the specified file. Please review file and directory permission on the OS.\\\"\",\n            \"    \\\"metrics will be dropped\\\"=\\\"The CloudWatch agent has failed to deliver EC2 Metrics due to an endpoint failure. Confirm connectivity to the EC2 endpoint and review our public knowledge article for more troubleshooting steps: ${KcArticle}.\\\"\",\n            \"    \\\"AuthFailure\\\"=\\\"The system credentials have failed to be validated. A common cause of this is due to an out of sync system clock. Please review the docs here for assistance in configuring the system clock: ${Ntp}.\\\"\",\n            \"    \\\"UnauthorizedOperation\\\"=\\\"The attached IAM instance profile role but does not have sufficient permission. Please refer to the section 'Confirm that the host has permissions to publish metrics and logs' in our public knowledge article for more information: ${KcArticle}.\\\"\",\n            \"    \\\"AccessDenied\\\"=\\\"The attached IAM instance profile role but does not have sufficient permission. Please refer to the section 'Confirm that the host has permissions to publish metrics and logs' in our public knowledge article for more information: ${KcArticle}.\\\"\",\n            \"    \\\"i/o timeout\\\"=\\\"The agent has failed to connect to one of the required endpoints. Please ensure the instance (and any proxy - if configured) is able to connect to all required endpoints. For more information on the required endpoints, please refer to our public knowledge article: ${KcArticle}.\\\"\",\n            \"}\",\n            \"\",\n            \"# Strings to parse the log for\",\n            \"$ErrorsTypes = @(\",\n            \"    'took longer to collect than collection interval', \",\n            \"    '169.254.169.254', \",\n            \"    'No connection could be made because the target machine actively refused it', \",\n            \"    'file no longer exists', \",\n            \"    'socket: too many open files', \",\n            \"    'operation not permitted', \",\n            \"    'metrics will be dropped', \",\n            \"    'AuthFailure', \",\n            \"    'UnauthorizedOperation', \",\n            \"    'AccessDenied', \",\n            \"    'i/o timeout'\",\n            \")\",\n            \"\",\n            \"# Selects all single and multi-line errors and drops the timestamps at the beginning\",\n            \"$TimeStampRegex = \\\"\\\\d{4}-\\\\d{2}-\\\\d{2}T\\\\d{2}:\\\\d{2}:\\\\d{2}Z\\\"\",\n            \"$ErrorMessageRegex = \\\"(?<=${TimeStampRegex} )(W!|E!).*\\\\r?\\\\n((?:(?!${TimeStampRegex}).*(?:\\\\r?\\\\n|$))*)\\\"\",\n            \"$RequestIdRegex = \\\"[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}\\\"\",\n            \"\",\n            \"try {\",\n            \"    $ErrorMatches = @(Get-Content $AgentLog -Raw | Select-String -Pattern $ErrorMessageRegex -AllMatches)\",\n            \"    # Drop request-ids, non-unique errs, and retries\",\n            \"    $LogEntries = @(ForEach ($Match in $ErrorMatches) {$Match.Matches.Value -NotMatch \\\"retrying\\\" -Replace '\\\\n', ' ' -Replace $RequestIdRegex, ''})\",\n            \"    $LogEntries = $LogEntries | Sort-Object -Unique\",\n            \"    $Counter=0\",\n            \"\",\n            \"    ForEach ($Log in $LogEntries) {\",\n            \"        $LogResult = New-Object PSObject\",\n            \"        ForEach ($ErrorType in $ErrorsTypes) {\",\n            \"            if ($Log -Match $ErrorType){\",\n            \"                Write-Host \\\"---------------Log Finding---------------\\\"\",\n            \"                Write-Host \\\"The following error was found in your logs:`n===> ${Log}\\\"\",\n            \"                $Output = $Outputs[$ErrorType]\",\n            \"                Write-Host \\\"`n$Output`n`n\\\" \",\n            \"                $Counter++\",\n            \"                break\",\n            \"            }\",\n            \"        }\",\n            \"    }\",\n            \"\",\n            \"    if ($LogEntries.Count -ne $Counter) {\",\n            \"        Write-Host \\\"---------------Log Finding---------------\\\"\",\n            \"        Write-Host \\\"Some errors in the logs were unable to be matched. Please review your CloudWatch agent logs, and reach out to AWS support if you need further help.\\\"\",\n            \"    } elseif ($LogEntries.Count -eq 0) {\",\n            \"        Write-Host \\\"No errors found while analyzing CloudWatch agent logs.\\\"\",\n            \"    }\",\n            \"    \",\n            \"} catch {\",\n            \"    Write-Host \\\"Error! Could not process logs on instance. Please review your CloudWatch agent logs, and reach out to AWS support if you need further help\\\"\",\n            \"    Exit 1\",\n            \"}\"\n          ]\n        }\n      },\n      \"description\": \"Analyze and output findings of CloudWatch agent logs on Windows OSs.\",\n      \"nextStep\": \"collectLogsWindows\",\n      \"onFailure\": \"step:collectLogsWindows\",\n      \"isCritical\": false\n    },\n    {\n      \"name\": \"collectLogsWindows\",\n      \"timeoutSeconds\": 600,\n      \"action\": \"aws:runCommand\",\n      \"inputs\": {\n        \"DocumentName\": \"AWS-RunPowerShellScript\",\n        \"TimeoutSeconds\": 600,\n        \"InstanceIds\": [\n          \"{{ InstanceId }}\"\n        ],\n        \"Parameters\": {\n          \"commands\": [\n            \"# Copyright 2023 Amazon.com, Inc. or its affiliates. All Rights Reserved.\",\n            \"\",\n            \"# File/Dir consts\",\n            \"$BasePath = \\\"$Env:WinDir\\\\Temp\\\"\",\n            \"# Create unique LogDir on every run to prevent \\\"directory already exists\\\" errors in the event the zip file is left over\",\n            \"$LogDir=\\\"$BasePath\\\\TroubleshootCloudWatchAgent_{{automation:EXECUTION_ID}}\\\"\",\n            \"$Date=Get-Date (Get-Date).ToUniversalTime() -UFormat '+%Y_%m_%dT%H_%M_%S'\",\n            \"$ZipFileName=\\\"TroubleshootCloudWatchAgentLogs_${Date}.zip\\\"\",\n            \"$ZipFile=\\\"$LogDir\\\\$ZipFileName\\\"\",\n            \"\",\n            \"# Configuration file path consts\",\n            \"$CloudWatchAgentConfig=\\\"$Env:ProgramData\\\\Amazon\\\\AmazonCloudWatchAgent\\\\amazon-cloudwatch-agent.toml\\\"\",\n            \"$CloudWatchAgentCommonConfig=\\\"$Env:ProgramData\\\\Amazon\\\\AmazonCloudWatchAgent\\\\common-config.toml\\\"\",\n            \"$CloudWatchLogConfigs=\\\"$Env:ProgramData\\\\Amazon\\\\AmazonCloudWatchAgent\\\\Configs\\\\*.json\\\"\",\n            \"\",\n            \"# The below are locations of configs that may or may not be in use depending on how the agent was started\",\n            \"# These may be relevant to troubleshooting, but the above locations are the source of truth for actual configuration\",\n            \"$AgentCreatedConfig= Test-Path -Path \\\"$Env:ProgramFiles\\\\Amazon\\\\AmazonCloudWatchAgent\\\\config.json\\\" -PathType Leaf\",\n            \"$SSMDownloadedConfig= Test-Path -Path \\\"$Env:ProgramData\\\\Amazon\\\\AmazonCloudWatchAgent\\\\amazon-cloudwatch-agent.json\\\" -PathType Leaf\",\n            \"\",\n            \"# Log file consts\",\n            \"$AgentLog=\\\"\\\"\",\n            \"$ConfigurationValidationLog=\\\"$Env:ProgramData\\\\Amazon\\\\AmazonCloudWatchAgent\\\\Logs\\\\configuration-validation.log\\\"\",\n            \"\",\n            \"# S3 consts\",\n            \"$S3Bucket = \\\"{{S3UploadBucket}}\\\"\",\n            \"$Region = \\\"{{global:REGION}}\\\"\",\n            \"\",\n            \"# Check disk space\",\n            \"function Get-DiskUsage {\",\n            \"    $threshold = 75\",\n            \"    try {\",\n            \"        $drive = Get-WmiObject Win32_LogicalDisk -Filter \\\"DeviceID='$Env:SystemDrive'\\\"\",\n            \"        $percent = 100 - ([math]::round($drive.FreeSpace/1GB, 0) / ([math]::round($drive.Size/1GB, 0)) * 100)\",\n            \"    } catch {\",\n            \"        Write-Host \\\"Error! Unable to Determine Free Disk Space\\\"\",\n            \"        Exit 1\",\n            \"    } if ($percent -gt $threshold){\",\n            \"        Write-Host \\\"$Env:SystemDrive drive is $percent% full, please ensure the disk is less than $threshold% full to collect and store the log files. Exiting early.\\\" \",\n            \"        Exit 1\",\n            \"    }\",\n            \"}\",\n            \"\",\n            \"# Creates a directory to store the files\",\n            \"Function New-TempDir{\",\n            \"    try {\",\n            \"        Write-Host \\\"Creating temporary directory\\\"\",\n            \"        New-Item -type directory -path $script:LogDir -Force > $null\",\n            \"    } catch {\",\n            \"        Write-Host \\\"Error! Unable to create temporary directory. This is required to zip the files. Exiting...\\\"\",\n            \"        Exit 1\",\n            \"    }\",\n            \"}\",\n            \"\",\n            \"# Check to see if the intial agent config files exists\",\n            \"# Whichever method was used i.e. via the Wizard or via SSM, it stores the path in the $AgentConfig variable for collection\",\n            \"function Get-OptionalConfigs {\",\n            \"    If ($AgentCreatedConfig -eq $True) {\",\n            \"        $script:AgentConfig=\\\"$Env:ProgramFiles\\\\Amazon\\\\AmazonCloudWatchAgent\\\\config.json\\\"\",\n            \"        Write-Host \\\"Wizard Config is present! and located at $AgentConfig\\\"\",\n            \"    } elseif ($SSMDownloadedConfig -eq $True) {\",\n            \"        $script:AgentConfig=\\\"$Env:ProgramData\\\\Amazon\\\\AmazonCloudWatchAgent\\\\amazon-cloudwatch-agent.json\\\"\",\n            \"        write-host \\\"SSM Config File is present! and located at $AgentConfig\\\"\",\n            \"    } else {\",\n            \"        write-Host \\\"Config Files cannot be found!\\\"\",\n            \"    }\",\n            \"        \",\n            \"}\",\n            \"\",\n            \"# Log file path constants - the agent log can have a modified log location so we will parse this from the TOML config\",\n            \"# Regex to match the file pertaining that '.log' is used as the extension \\\"(?:\\\\\\\\\\\\\\\\[^\\\\\\\\]+|[a-zA-Z]:)((?:\\\\\\\\[^\\\\\\\\\\\\n]+)+\\\\\\\\)?([^<>:\\\\n]*.log)\\\"\",\n            \"function Get-LoggingLocation() {\",\n            \"    try {\",\n            \"        $Match = Select-String -Path $CloudWatchAgentConfig -pattern \\\"(?:\\\\\\\\\\\\\\\\[^\\\\\\\\]+|[a-zA-Z]:)((?:\\\\\\\\[^\\\\\\\\\\\\n]+)+\\\\\\\\)?([^<>:\\\\n]*.log)\\\"\",\n            \"        $script:AgentLog=$Match.Matches.groups[0].value\",\n            \"        $script:AgentLogsRotated = $script:AgentLog.Split('.')[0] + \\\"*.gz\\\"\",\n            \"    } catch {\",\n            \"        Write-Host \\\"Error! Unable to find logging location. This could occur if you haven't started the agent before. Exiting...\\\"\",\n            \"        Exit 1\",\n            \"    }\",\n            \"}\",\n            \"\",\n            \"# Remove temp directory and any copied items\",\n            \"Function Remove-TempItems([bool]$RemoveZip) {\",\n            \"    try {\",\n            \"        if ( $RemoveZip -AND (Test-Path -Path $LogDir -Type Container) ) {\",\n            \"            Remove-Item -Recurse -Force $LogDir\",\n            \"        } elseif (-NOT $RemoveZip -AND (Test-Path -Path $LogDir -Type Container) ) {\",\n            \"            Remove-Item -Recurse -Force \\\"${LogDir}/*\\\" -Exclude $ZipFileName\",\n            \"        } else {\",\n            \"            Write-Host \\\"Unable to cleanup $LogDir, Please cleanup manually!\\\" \",\n            \"            Exit 1\",\n            \"        }\",\n            \"    } catch {\",\n            \"        Write-Host \\\"Unable to cleanup $LogDir, Please cleanup manually!\\\" \",\n            \"        Exit 1\",\n            \"    }\",\n            \"}\",\n            \"\",\n            \"# Compresses the agent files to the new location i.e. $LogDir\\\\$ZipFileName\",\n            \"function New-Zip {\",\n            \"    try {\",\n            \"        $Files = @($script:CloudWatchAgentConfig, $script:CloudWatchAgentCommonConfig, $script:AgentConfig, $script:CloudWatchLogConfigs, $script:AgentLog, $script:ConfigurationValidationLog, $script:AgentLogsRotated)\",\n            \"        # Get rid of any null or empty strings when zipping to avoid errors\",\n            \"        $Files = $Files.where({ ($null -ne $_) -AND ('' -ne $_) })\",\n            \"        Copy-Item $Files -Destination $LogDir\",\n            \"        # Create temp directory where we can bundle logs\",\n            \"        $script:S3ZipFile=\\\"$LogDir\\\\$ZipFileName\\\"\",\n            \"        Compress-Archive -Path $LogDir -CompressionLevel Optimal -DestinationPath $script:S3ZipFile\",\n            \"        Write-Host \\\"Files zipped successfully to location $LogDir\\\\$ZipFileName\\\"\",\n            \"    } catch {\",\n            \"        Write-Host \\\"Error! Zip command failed due to an Internal Failure - Unable to archive data.\\\"\",\n            \"        Remove-TempItems $True\",\n            \"        Write-Host \\\"Temp folder cleaned up. Exiting...\\\"\",\n            \"        Exit 1\",\n            \"    }\",\n            \"}\",\n            \"\",\n            \"Get-DiskUsage\",\n            \"Get-OptionalConfigs\",\n            \"Get-LoggingLocation\",\n            \"New-TempDir\",\n            \"New-Zip\",\n            \"\",\n            \"function Eval-BucketPolicy {\",\n            \"    try {\",\n            \"        $bucketPolicy = Get-S3BucketPolicyStatus -BucketName $S3Bucket -ExpectedBucketOwner \\\"{{S3BucketOwnerAccountId}}\\\" -Region $script:Region\",\n            \"    } catch {\",\n            \"        if ($_.Exception.Message -eq \\\"The bucket policy does not exist\\\") {\",\n            \"            return $False\",\n            \"        } else {\",\n            \"            Write-Host \\\"There was an error while verifying S3 bucket policy:\\\" $_.Exception.Message\",\n            \"            return $True\",\n            \"        }\",\n            \"    }\",\n            \"    if($bucketPolicy.IsPublic) {\",\n            \"        Write-Host \\\"Verifying bucket Policy: Bucket is public, cannot Upload to a public bucket!\\\"\",\n            \"        return $True\",\n            \"    }\",\n            \"    return $False\",\n            \"}\",\n            \"\",\n            \"function Eval-BucketAcl {\",\n            \"    try {\",\n            \"        $bucketAcl = Get-S3ACL -Bucketname $S3Bucket -ExpectedBucketOwner \\\"{{S3BucketOwnerAccountId}}\\\" -Region $script:Region\",\n            \"        foreach ($grant in $bucketAcl.Grants) {\",\n            \"            if ($grant.Grantee.URI -eq \\\"http://acs.amazonaws.com/groups/global/AllUsers\\\") {\",\n            \"                Write-Host \\\"Verifying bucket ACL: Bucket is public, cannot Upload to a public bucket!\\\"\",\n            \"                return $True\",\n            \"            }\",\n            \"        }\",\n            \"    } catch{\",\n            \"        Write-Host \\\"There was an error while verifying S3 bucket ACL:\\\" $_.Exception.Message\",\n            \"        return $True\",\n            \"    }\",\n            \"    return $False\",\n            \"}\",\n            \"\",\n            \"function Check-Module($ModuleName) {\",\n            \"    return [bool](Get-Module -ListAvailable -Name $ModuleName -ErrorAction SilentlyContinue)\",\n            \"}\",\n            \"\",\n            \"if ($S3Bucket) {\",\n            \"    if (Check-Module AWSPowershell) {\",\n            \"        Import-Module AWSPowershell -Force\",\n            \"        if (Test-S3Bucket -BucketName $S3Bucket -Region $Region) {\",\n            \"            if ( (Eval-BucketPolicy) -or (Eval-BucketAcl) ) {\",\n            \"                Write-Host \\\"Error! Specified S3 bucket is public, doesn't belong to this account, or an error occurred while checking the bucket properties.`nLeaving the zip file on the instance, please cleanup this file if you want it removed.\\\"\",\n            \"                Remove-TempItems $False\",\n            \"                Write-Host \\\"Temp file clean-up completed. Exiting...\\\"\",\n            \"                Exit 1\",\n            \"            } else {\",\n            \"                try{\",\n            \"                    Write-S3Object -BucketName $S3Bucket -Key \\\"AWSSupport-TroubleshootCloudWatchAgent/Execution_ID_{{automation:EXECUTION_ID}}/${ZipFileName}\\\" -File $S3ZipFile -Region $Region\",\n            \"                    Write-Host \\\"Successfully uploaded the log zipfile to the S3 bucket. This can be found in the following S3 path:`n`t's3://$S3Bucket/AWSSupport-TroubleshootCloudWatchAgent/Execution_ID_{{automation:EXECUTION_ID}}/'\\\"\",\n            \"                    Remove-TempItems $True\",\n            \"                    Write-Host \\\"Temp folder and zip cleaned up. Exiting...\\\"\",\n            \"                } catch {\",\n            \"                    Write-Host \\\"Error! Failed to upload log file to S3 bucket 's3://$S3Bucket/AWSSupport-TroubleshootCloudWatchAgent/Execution_ID_{{automation:EXECUTION_ID}}/'. Please ensure the instance profile has the required permissions.\\\"\",\n            \"                    Write-Host \\\"Leaving the Zip file on the instance, please cleanup this file if you want it removed.\\\"\",\n            \"                    Remove-TempItems $False\",\n            \"                    Write-Host \\\"Temp file clean-up completed. Exiting...\\\"\",\n            \"                    Exit 1\",\n            \"                }\",\n            \"            }    \",\n            \"        }\",\n            \"        else{\",\n            \"            Write-Host \\\"No S3 bucket called '$S3Bucket' found in the current AWS account, or access denied. Please specify a S3 bucket in your account that the instance can access.\\\"\",\n            \"            Write-Host \\\"Leaving the Zip file on the instance, please cleanup this file if you want it removed.\\\"\",\n            \"            Remove-TempItems $False\",\n            \"            Write-Host \\\"Temp file clean-up completed. Exiting...\\\"\",\n            \"            Exit 1\",\n            \"        }\",\n            \"    } else {\",\n            \"        Write-Host \\\"AWS Tools for Windows PowerShell not installed. Please install the latest version of the AWS Tools for Windows PowerShell and try again.\\\"\",\n            \"        Write-Host \\\"Download location: https://aws.amazon.com/powershell/\\\"\",\n            \"        Write-Host \\\"Leaving the Zip file on the instance, please cleanup this file if you want it removed.\\\"\",\n            \"        Remove-TempItems $False\",\n            \"        Write-Host \\\"Temp file clean-up completed. Exiting...\\\"\",\n            \"        Exit 1\",\n            \"    }\",\n            \"} else {\",\n            \"    Write-Host \\\"No S3 Bucket provided. Skipping upload.\\\"\",\n            \"    Remove-TempItems $False\",\n            \"    Write-Host \\\"Temp file clean-up completed. Exiting...\\\"\",\n            \"}\"\n          ]\n        }\n      },\n      \"description\": \"Bundle and output the relevant CloudWatch agent troubleshooting files on Windows OSs.\",\n      \"nextStep\": \"checkEndpointReachabilityWindows\",\n      \"onFailure\": \"step:checkEndpointReachabilityWindows\",\n      \"isCritical\": false\n    },\n    {\n      \"name\": \"checkEndpointReachabilityWindows\",\n      \"timeoutSeconds\": 600,\n      \"action\": \"aws:runCommand\",\n      \"inputs\": {\n        \"DocumentName\": \"AWS-RunPowerShellScript\",\n        \"TimeoutSeconds\": 600,\n        \"InstanceIds\": [\n          \"{{ InstanceId }}\"\n        ],\n        \"Parameters\": {\n          \"commands\": [\n            \"# Copyright 2023 Amazon.com, Inc. or its affiliates. All Rights Reserved.\",\n            \"\",\n            \"function Check-Command($cmdname) {\",\n            \"    return [bool](Get-Command -Name $cmdname -ErrorAction SilentlyContinue)\",\n            \"}\",\n            \"\",\n            \"if (-NOT(Check-Command Invoke-WebRequest)) {\",\n            \"    throw \\\"Error! Invoke-WebRequest Cmdlet not available on server. Exiting.\\\"\",\n            \"}\",\n            \"\",\n            \"function Get-Suffix($partition) {\",\n            \"    if ($partition -eq 'aws-cn') {\",\n            \"        return \\\"amazonaws.com.cn\\\"\",\n            \"    } else {\",\n            \"        return \\\"amazonaws.com\\\"\",\n            \"    }\",\n            \"}\",\n            \"\",\n            \"# Set endpoint constants\",\n            \"$Suffix=Get-Suffix \\\"{{global:AWS_PARTITION}}\\\"\",\n            \"$UsesEc2Endpoint=\\\"{{CheckEC2Endpoint}}\\\"\",\n            \"$LogsEndpoint=\\\"logs.{{global:REGION}}.${Suffix}\\\"\",\n            \"$CloudWatchEndpoint=\\\"monitoring.{{global:REGION}}.${Suffix}\\\"\",\n            \"$Ec2Endpoint=\\\"ec2.{{global:REGION}}.${Suffix}\\\"\",\n            \"\",\n            \"function Check-Endpoint($endpoint) {\",\n            \"    try {\",\n            \"        $Response = Invoke-WebRequest -Uri https://$endpoint -TimeoutSec 10 -Method HEAD -UseBasicParsing\",\n            \"        # This will only execute if the Invoke-WebRequest is successful.\",\n            \"        $StatusCode = $Response.StatusCode\",\n            \"    } catch {\",\n            \"        $StatusCode = $_.Exception.Response.StatusCode.value__\",\n            \"        # If no return code assume the response failed and set to -1\",\n            \"        if ($StatusCode -eq $null) {\",\n            \"            $StatusCode = -1\",\n            \"        }\",\n            \"    }\",\n            \"    return $StatusCode\",\n            \"}\",\n            \"\",\n            \"function Test-Success {\",\n            \"    [CmdletBinding()]\",\n            \"        param (\",\n            \"            [Parameter(Mandatory,\",\n            \"                   ValueFromPipeline)]\",\n            \"            [int]$status\",\n            \"        )\",\n            \"    if ($status -gt 0){\",\n            \"        return \\\"success\\\"\",\n            \"    }\",\n            \"    return \\\"failed\\\"\",\n            \"}\",\n            \"\",\n            \"$LogsStatus=Check-Endpoint $LogsEndpoint | Test-Success\",\n            \"$CloudWatchStatus=Check-Endpoint $CloudWatchEndpoint | Test-Success\",\n            \"$Ec2Status=''\",\n            \"if ($UsesEc2Endpoint -eq \\\"true\\\") {\",\n            \"    $Ec2Status=Check-Endpoint $Ec2Endpoint | Test-Success\",\n            \"} else {\",\n            \"    $Ec2Status=\\\"not_run\\\"\",\n            \"}\",\n            \"\",\n            \"Write-Host \\\"{`n  \\\"\\\"logs\\\"\\\":\\\"\\\"${LogsStatus}\\\"\\\",`n  \\\"\\\"monitoring\\\"\\\":\\\"\\\"${CloudWatchStatus}\\\"\\\",`n  \\\"\\\"ec2\\\"\\\":\\\"\\\"${Ec2Status}\\\"\\\"`n}\\\"\"\n          ]\n        }\n      },\n      \"description\": \"Check if the instance can reach the required endpoints on Windows OSs.\",\n      \"nextStep\": \"branchOnRunVpcReachabilityAnalyzer\",\n      \"onFailure\": \"step:outputFindings\",\n      \"isCritical\": false\n    },\n    {\n      \"name\": \"branchOnRunVpcReachabilityAnalyzer\",\n      \"action\": \"aws:branch\",\n      \"inputs\": {\n        \"Default\": \"outputFindings\",\n        \"Choices\": [\n          {\n            \"And\": [\n              {\n                \"Variable\": \"{{ RunVpcReachabilityAnalyzer}}\",\n                \"BooleanEquals\": true\n              },\n              {\n                \"Variable\": \"{{ checkEndpointReachabilityWindows.Output }}\",\n                \"Contains\": \"failed\"\n              }\n            ],\n            \"NextStep\": \"generateEndpoints\"\n          },\n          {\n            \"And\": [\n              {\n                \"Variable\": \"{{ RunVpcReachabilityAnalyzer}}\",\n                \"BooleanEquals\": true\n              },\n              {\n                \"Variable\": \"{{ checkEndpointReachability.Output }}\",\n                \"Contains\": \"failed\"\n              }\n            ],\n            \"NextStep\": \"generateEndpoints\"\n          },\n          {\n            \"And\": [\n              {\n                \"Variable\": \"{{ RunVpcReachabilityAnalyzer}}\",\n                \"BooleanEquals\": true\n              },\n              {\n                \"Not\": {\n                  \"Variable\": \"{{ checkEndpointReachability.Status }}\",\n                  \"StringEquals\": \"Success\"\n                }\n              },\n              {\n                \"Not\": {\n                  \"Variable\": \"{{ checkEndpointReachabilityWindows.Status }}\",\n                  \"StringEquals\": \"Success\"\n                }\n              }\n            ],\n            \"NextStep\": \"generateEndpoints\"\n          }\n        ]\n      },\n      \"description\": \"Branches the automation to run a specific log collection/analysis command based on the OS.\",\n      \"onFailure\": \"step:outputFindings\",\n      \"isCritical\": true\n    },\n    {\n      \"name\": \"generateEndpoints\",\n      \"action\": \"aws:executeScript\",\n      \"inputs\": {\n        \"Runtime\": \"python3.8\",\n        \"Handler\": \"generate_endpoints.script_handler\",\n        \"InputPayload\": {\n          \"CheckEC2Endpoint\": \"{{ CheckEC2Endpoint }}\",\n          \"EndpointConnectionResults\": \"{{ checkEndpointReachability.Output }}\",\n          \"EndpointConnectionResultsWindows\": \"{{ checkEndpointReachabilityWindows.Output }}\"\n        },\n        \"Attachment\": \"attachment.zip\"\n      },\n      \"outputs\": [\n        {\n          \"Name\": \"Endpoints\",\n          \"Selector\": \"$.Payload.Endpoints\",\n          \"Type\": \"StringList\"\n        },\n        {\n          \"Name\": \"Domain\",\n          \"Selector\": \"$.Payload.Domain\",\n          \"Type\": \"String\"\n        }\n      ],\n      \"description\": \"Generates an endpoint to check from the extended check failures and the value of 'CheckEC2Endpoint'\",\n      \"nextStep\": \"analyzeAwsEndpointReachabilityFromEC2\",\n      \"onFailure\": \"step:outputFindings\",\n      \"isCritical\": true\n    },\n    {\n      \"name\": \"analyzeAwsEndpointReachabilityFromEC2\",\n      \"action\": \"aws:executeAutomation\",\n      \"timeoutSeconds\": 3600,\n      \"inputs\": {\n        \"DocumentName\": \"AWSSupport-AnalyzeAWSEndpointReachabilityFromEC2\",\n        \"MaxErrors\": \"100%\",\n        \"TargetParameterName\": \"ServiceEndpoint\",\n        \"Targets\": [\n          {\n            \"Key\": \"ParameterValues\",\n            \"Values\": \"{{ generateEndpoints.Endpoints }}\"\n          }\n        ],\n        \"RuntimeParameters\": {\n          \"Source\": \"{{ InstanceId }}\",\n          \"RetainVpcReachabilityAnalysis\": \"{{ RetainVpcReachabilityAnalysis }}\",\n          \"AutomationAssumeRole\": \"{{ AutomationAssumeRole }}\"\n        }\n      },\n      \"description\": \"Calls the automation runbook, `AWSSupport-AnalyzeAWSEndpointReachabilityFromEC2` to check the reachability of the selected instance to the required endpoints.\",\n      \"nextStep\": \"outputFindings\",\n      \"onFailure\": \"step:outputFindings\",\n      \"isCritical\": false\n    },\n    {\n      \"name\": \"outputFindings\",\n      \"action\": \"aws:executeScript\",\n      \"inputs\": {\n        \"Runtime\": \"python3.8\",\n        \"Handler\": \"output_findings.script_handler\",\n        \"InputPayload\": {\n          \"InstanceId\": \"{{ InstanceId }}\"\n        },\n        \"Attachment\": \"attachment.zip\"\n      },\n      \"outputs\": [\n        {\n          \"Name\": \"Results\",\n          \"Selector\": \"$.Payload.Output\",\n          \"Type\": \"String\"\n        }\n      ],\n      \"description\": \"Output results of the automation execution steps.\",\n      \"onFailure\": \"Abort\",\n      \"isCritical\": true,\n      \"isEnd\": true\n    }\n  ],\n  \"outputs\": [\n    \"outputFindings.Results\"\n  ],\n  \"files\": {\n    \"attachment.zip\": {\n      \"checksums\": {\n        \"sha256\": \"e663fd7f234e1bc5dbf75e3d61f2e1779d1d78ba639ebc895cbc5cbfbab1d3b6\"\n      }\n    }\n  }\n}",
  "CreatedDate": "2023-04-14T17:49:29.214Z",
  "DisplayName": null,
  "DocumentFormat": {
    "Value": "JSON"
  },
  "DocumentType": {
    "Value": "Automation"
  },
  "DocumentVersion": "1",
  "Name": "AWSSupport-TroubleshootCloudWatchAgent",
  "Requires": [],
  "ReviewStatus": null,
  "Status": {
    "Value": "Active"
  },
  "StatusInformation": null,
  "VersionName": null,
  "ResponseMetadata": {
    "RequestId": "babfd5f6-5893-4a08-b224-e3aa1f1a0d53",
    "Metadata": {},
    "ChecksumAlgorithm": 0,
    "ChecksumValidationStatus": 0
  },
  "ContentLength": 69720,
  "HttpStatusCode": 200,
  "LoggedAt": "2023-04-24T07:12:35.0000394+00:00"
}
