{
  "AttachmentsContent": [],
  "Content": "{\n  \"description\" : \"## Intent\\n'Test that the application can withstand az outage in ASG.'\\n\\n## Type\\nTest\\n\\n## Requirements\\n  * ASG has more than 1 instance\\n  * There is a synthetic alarm setup for application\\n  * Application should be scaled sufficiently to handle expected traffic with one az loss\\n\\n## Permissions required for AutomationAssumeRole\\n  * autoscaling:DescribeAutoScalingGroups\\n  * autoscaling:SuspendProcesses\\n  * autoscaling:ResumeProcesses\\n  * ec2:TerminateInstances\\n  * ec2:DescribeInstanceStatus\\n  * cloudwatch:DescribeAlarms\\n  * ssm:GetAutomationExecution\\n  * ssm:StartAutomationExecution\\n  * iam:PassRole (restricted to same role)\\n\\n## Supports Rollback\\n  Yes. If executed in rollback mode, any previous suspended launch processes in ASG will be resumed.\\n\\n## Cancellation behavior\\n  Suspended launch processes in ASG will be resumed.\\n\\n## Inputs\\n### (Required) AutoScalingGroupName:\\n  * type: String\\n  * description: Name of AutoScalingGroup.\\n\\n### (Required) SyntheticAlarmName:\\n  * type: String\\n  * description: Synthetic Canary Alarm for the application which should stay green during this test.\\n\\n### (Required) AutomationAssumeRole:\\n  * type: String\\n  * description: The ARN of the role that allows Automation to perform the actions on your behalf.\\n\\n### (Optional) TestDurationInMinutes:\\n  * type: String\\n  * description: Test duration in minutes.\\n  * default: \\\"10\\\"\\n\\n### (Optional) IsRollback:\\n  * type: String\\n  * description: Run the rollback steps of the document. True or False. If True, the parameter PreviousExecutionId should also be specified.\\n  * default: 'false'\\n\\n### (Optional) PreviousExecutionId:\\n  * type: String\\n  * description: (Optional) SSM execution ID of the previous execution of this document for which resources need to be cleaned up.\\n  * default: ''\\n\\n## Details\\n  * Select AZ where majority of instances are in.\\n  * Prevent new instances in AZ from turning on (use suspendLaunch API)\\n  * Inject an error to all instances in AZ together (terminate all instances in az)\\n  * Verify alarms alert in (alarms a)\\n  * Verify that Synthetic monitor stays green / turns green within x minutes.\\n\\n## Steps executed in normal flow\\n  * SelectExecutionMode\\n  * AssertNoSuspendedProcesses\\n  * AssertAlarmToBeGreenBeforeTest\\n  * SuspendLaunchProcessInAsg\\n  * GetInstancesInRandomAz\\n  * TerminateInstances\\n  * WaitForTestCompletion\\n  * AssertAlarmToBeGreen\\n  * ResumeLaunchProcessInAsg\\n\\n## Steps executed in rollback flow\\n  * SelectExecutionMode\\n  * GetInputsFromPreviousExecution\\n  * AssertAutoScalingGroupName\\n  * ResumeLaunchProcessInAsg\\n\\n## Outputs\\nNone\",\n  \"schemaVersion\" : \"0.3\",\n  \"assumeRole\" : \"{{ AutomationAssumeRole }}\",\n  \"parameters\" : {\n    \"AutoScalingGroupName\" : {\n      \"type\" : \"String\",\n      \"description\" : \"(Required) Name of AutoScalingGroup.\"\n    },\n    \"CanaryAlarmName\" : {\n      \"type\" : \"String\",\n      \"description\" : \"(Required) Synthetic Canary Alarm for the application which should stay green during this test.\"\n    },\n    \"TestDurationInMinutes\" : {\n      \"type\" : \"String\",\n      \"description\" : \"(Optional) Test duration in minutes.\",\n      \"default\" : \"10\"\n    },\n    \"AutomationAssumeRole\" : {\n      \"type\" : \"String\",\n      \"description\" : \"(Required) The ARN of the role that allows Automation to perform the actions on your behalf.\"\n    },\n    \"IsRollback\" : {\n      \"type\" : \"String\",\n      \"description\" : \"(Optional) Run the rollback steps of the document. True or False. If True, the parameter PreviousExecutionId should also be specified.\",\n      \"default\" : \"false\"\n    },\n    \"PreviousExecutionId\" : {\n      \"type\" : \"String\",\n      \"description\" : \"(Optional) SSM execution ID of the previous execution of this document for which resources need to be cleaned up.\",\n      \"default\" : \"\"\n    }\n  },\n  \"mainSteps\" : [ {\n    \"name\" : \"SelectExecutionMode\",\n    \"description\" : \"Check if document should be executed in rollback mode\",\n    \"action\" : \"aws:branch\",\n    \"inputs\" : {\n      \"Choices\" : [ {\n        \"NextStep\" : \"AssertNoSuspendedProcesses\",\n        \"Variable\" : \"{{IsRollback}}\",\n        \"StringEquals\" : \"false\"\n      } ],\n      \"Default\" : \"GetInputsFromPreviousExecution\"\n    }\n  }, {\n    \"name\" : \"AssertNoSuspendedProcesses\",\n    \"description\" : \"Check that there are no suspended processes before proceeding.\",\n    \"action\" : \"aws:executeScript\",\n    \"onFailure\" : \"Abort\",\n    \"inputs\" : {\n      \"Runtime\" : \"python3.6\",\n      \"Handler\" : \"assert_no_suspended_process\",\n      \"InputPayload\" : {\n        \"AutoScalingGroupName\" : \"{{AutoScalingGroupName}}\"\n      },\n      \"Script\" : \"import logging\\nimport random\\nimport time\\nfrom math import ceil\\n\\nimport boto3\\nfrom botocore.config import Config\\n\\nlogger = logging.getLogger(__name__)\\nlogger.setLevel(logging.INFO)\\n\\n\\n\\n\\ndef assert_no_suspended_process(events, context):\\n    if 'AutoScalingGroupName' not in events:\\n        raise KeyError('Requires AutoScalingGroupName in events')\\n    config = Config(retries={'max_attempts': 20, 'mode': 'standard'})\\n    autoscaling = boto3.client('autoscaling', config=config)\\n    auto_scaling_groups = autoscaling.describe_auto_scaling_groups(\\n        AutoScalingGroupNames=[\\n            events['AutoScalingGroupName']\\n        ]\\n    )\\n\\n    if len(auto_scaling_groups['AutoScalingGroups'][0]['SuspendedProcesses']) > 0:\\n        raise Exception('ASG % has suspended processes', events['AutoScalingGroupName'])\"\n    }\n  }, {\n    \"name\" : \"AssertAlarmToBeGreenBeforeTest\",\n    \"description\" : \"Ensure alarm is green before starting test. Fail if alarm is not green within expected time.\",\n    \"action\" : \"aws:waitForAwsResourceProperty\",\n    \"onFailure\" : \"Abort\",\n    \"inputs\" : {\n      \"Service\" : \"cloudwatch\",\n      \"Api\" : \"DescribeAlarms\",\n      \"AlarmNames\" : [ \"{{CanaryAlarmName}}\" ],\n      \"PropertySelector\" : \"$.MetricAlarms[0].StateValue\",\n      \"DesiredValues\" : [ \"OK\" ]\n    }\n  }, {\n    \"name\" : \"SuspendLaunchProcessInAsg\",\n    \"description\" : \"Suspend launch process in asg to simulate AZ outage when instances are terminated.\",\n    \"action\" : \"aws:executeAwsApi\",\n    \"onFailure\" : \"Abort\",\n    \"inputs\" : {\n      \"Service\" : \"autoscaling\",\n      \"Api\" : \"SuspendProcesses\",\n      \"AutoScalingGroupName\" : \"{{AutoScalingGroupName}}\",\n      \"ScalingProcesses\" : [ \"Launch\" ]\n    }\n  }, {\n    \"name\" : \"GetInstancesInRandomAz\",\n    \"description\" : \"Get all instances in a random AZ.\",\n    \"action\" : \"aws:executeScript\",\n    \"onFailure\" : \"step:ResumeLaunchProcessInAsg\",\n    \"onCancel\" : \"step:TriggerRollback\",\n    \"maxAttempts\" : 10,\n    \"timeoutSeconds\" : 900,\n    \"outputs\" : [ {\n      \"Name\" : \"InstanceIds\",\n      \"Selector\" : \"$.Payload.InstanceIds\",\n      \"Type\" : \"StringList\"\n    } ],\n    \"inputs\" : {\n      \"Runtime\" : \"python3.6\",\n      \"Handler\" : \"get_instance_ids_in_asg_random_az\",\n      \"InputPayload\" : {\n        \"AutoScalingGroupName\" : \"{{AutoScalingGroupName}}\"\n      },\n      \"Script\" : \"import logging\\nimport random\\nimport time\\nfrom math import ceil\\n\\nimport boto3\\nfrom botocore.config import Config\\n\\nlogger = logging.getLogger(__name__)\\nlogger.setLevel(logging.INFO)\\n\\n\\n\\n\\ndef get_instance_ids_in_asg_random_az(events, context):\\n    if 'AutoScalingGroupName' not in events:\\n        raise KeyError('Requires AutoScalingGroupName in events')\\n    config = Config(retries={'max_attempts': 20, 'mode': 'standard'})\\n    autoscaling = boto3.client('autoscaling', config=config)\\n\\n    auto_scaling_groups = autoscaling.describe_auto_scaling_groups(\\n        AutoScalingGroupNames=[\\n            events['AutoScalingGroupName']\\n        ]\\n    )\\n\\n    instances_by_az = {}\\n    for instance in auto_scaling_groups['AutoScalingGroups'][0]['Instances']:\\n        instances_by_az.setdefault(instance['AvailabilityZone'], []).append(instance['InstanceId'])\\n\\n    output = {}\\n    output['InstanceIds'] = random.choice(list(instances_by_az.values()))\\n    return output\"\n    }\n  }, {\n    \"name\" : \"TerminateInstances\",\n    \"description\" : \"Terminate all instances from GetInstancesInRandomAz step output.\",\n    \"action\" : \"aws:changeInstanceState\",\n    \"onFailure\" : \"step:ResumeLaunchProcessInAsg\",\n    \"onCancel\" : \"step:TriggerRollback\",\n    \"inputs\" : {\n      \"InstanceIds\" : \"{{GetInstancesInRandomAz.InstanceIds}}\",\n      \"DesiredState\" : \"terminated\"\n    }\n  }, {\n    \"name\" : \"WaitForTestCompletion\",\n    \"description\" : \"Wait for test duration specified in input.\",\n    \"action\" : \"aws:sleep\",\n    \"onFailure\" : \"step:ResumeLaunchProcessInAsg\",\n    \"onCancel\" : \"step:TriggerRollback\",\n    \"inputs\" : {\n      \"Duration\" : \"PT{{TestDurationInMinutes}}M\"\n    }\n  }, {\n    \"name\" : \"AssertAlarmToBeGreen\",\n    \"description\" : \"Wait for the alarm to be green after test is complete\",\n    \"action\" : \"aws:assertAwsResourceProperty\",\n    \"maxAttempts\" : 10,\n    \"timeoutSeconds\" : 600,\n    \"onFailure\" : \"step:ResumeLaunchProcessInAsg\",\n    \"onCancel\" : \"step:TriggerRollback\",\n    \"inputs\" : {\n      \"Service\" : \"cloudwatch\",\n      \"Api\" : \"DescribeAlarms\",\n      \"AlarmNames\" : [ \"{{CanaryAlarmName}}\" ],\n      \"PropertySelector\" : \"$.MetricAlarms[0].StateValue\",\n      \"DesiredValues\" : [ \"OK\" ]\n    }\n  }, {\n    \"name\" : \"ResumeLaunchProcessInAsg\",\n    \"description\" : \"Resume launch process after test is over or test fails to remove AZ outage simulation.\",\n    \"action\" : \"aws:executeAwsApi\",\n    \"onCancel\" : \"step:TriggerRollback\",\n    \"inputs\" : {\n      \"Service\" : \"autoscaling\",\n      \"Api\" : \"ResumeProcesses\",\n      \"AutoScalingGroupName\" : \"{{AutoScalingGroupName}}\",\n      \"ScalingProcesses\" : [ \"Launch\" ]\n    },\n    \"isEnd\" : true\n  }, {\n    \"name\" : \"GetInputsFromPreviousExecution\",\n    \"description\" : \"Get input from previous execution. This will be used to validate that rollback is executed with the same input\",\n    \"action\" : \"aws:executeScript\",\n    \"outputs\" : [ {\n      \"Name\" : \"AutoScalingGroupName\",\n      \"Selector\" : \"$.Payload.AutoScalingGroupName[0]\",\n      \"Type\" : \"String\"\n    } ],\n    \"inputs\" : {\n      \"Runtime\" : \"python3.6\",\n      \"Handler\" : \"get_inputs_from_ssm_execution\",\n      \"InputPayload\" : {\n        \"ExecutionId\" : \"{{ PreviousExecutionId }}\"\n      },\n      \"Script\" : \"import json\\nimport boto3\\nfrom botocore.config import Config\\n\\n\\n\\n\\ndef get_inputs_from_ssm_execution(events, context):\\n    output = {}\\n    config = Config(retries={'max_attempts': 20, 'mode': 'standard'})\\n    ssm = boto3.client('ssm', config=config)\\n\\n    if 'ExecutionId' not in events:\\n        raise KeyError('Requires ExecutionId')\\n\\n    if not events['ExecutionId']:\\n        raise KeyError('Requires not empty ExecutionId')\\n\\n    response = ssm.get_automation_execution(AutomationExecutionId=events['ExecutionId'])\\n    response_parameters = response['AutomationExecution']['Parameters']\\n    # TODO DIG-853\\n    for parameter in response_parameters:\\n        output[parameter] = response_parameters[parameter]\\n\\n    return output\"\n    }\n  }, {\n    \"name\" : \"AssertAutoScalingGroupName\",\n    \"description\" : \"Validate that rollback is executed with the same input\",\n    \"action\" : \"aws:branch\",\n    \"inputs\" : {\n      \"Choices\" : [ {\n        \"NextStep\" : \"ResumeLaunchProcessInAsg\",\n        \"Variable\" : \"{{ GetInputsFromPreviousExecution.AutoScalingGroupName }}\",\n        \"StringEquals\" : \"{{ AutoScalingGroupName }}\"\n      } ]\n    },\n    \"isEnd\" : true\n  }, {\n    \"name\" : \"TriggerRollback\",\n    \"description\" : \"This step is executed when ssm document is cancelled while it was in progress and starts a new execution of document in rollback mode to rollback the changes made as part of normal execution\",\n    \"action\" : \"aws:executeScript\",\n    \"onFailure\" : \"Abort\",\n    \"outputs\" : [ {\n      \"Name\" : \"RollbackExecutionId\",\n      \"Selector\" : \"$.Payload.RollbackExecutionId\",\n      \"Type\" : \"String\"\n    } ],\n    \"inputs\" : {\n      \"Runtime\" : \"python3.6\",\n      \"Handler\" : \"start_rollback_execution\",\n      \"InputPayload\" : {\n        \"ExecutionId\" : \"{{automation:EXECUTION_ID}}\"\n      },\n      \"Script\" : \"import json\\nimport boto3\\nfrom botocore.config import Config\\n\\n\\n\\n\\ndef start_rollback_execution(events, context):\\n    output = {}\\n    config = Config(retries={'max_attempts': 20, 'mode': 'standard'})\\n    ssm = boto3.client('ssm', config=config)\\n\\n    if 'ExecutionId' not in events or not events['ExecutionId']:\\n        raise KeyError('Requires not empty ExecutionId')\\n\\n    response = ssm.get_automation_execution(AutomationExecutionId=events['ExecutionId'])\\n\\n    # Get parameters for current execution and add IsRollback and PreviousExecutionId\\n    response_parameters = response['AutomationExecution']['Parameters']\\n    response_parameters['IsRollback'] = ['true']\\n    response_parameters['PreviousExecutionId'] = [events['ExecutionId']]\\n\\n    rollback_execution_response = ssm.start_automation_execution(\\n        DocumentName=response['AutomationExecution']['DocumentName'],\\n        DocumentVersion=response['AutomationExecution']['DocumentVersion'],\\n        Parameters=response_parameters\\n    )\\n    output['RollbackExecutionId'] = rollback_execution_response['AutomationExecutionId']\\n    return output\"\n    },\n    \"isEnd\" : true\n  } ]\n}",
  "CreatedDate": "2022-01-18T14:35:13.176Z",
  "DisplayName": null,
  "DocumentFormat": {
    "Value": "JSON"
  },
  "DocumentType": {
    "Value": "Automation"
  },
  "DocumentVersion": "4",
  "Name": "AWSResilienceHub-SimulateAzOutageInAsgTest_2020-07-23",
  "Requires": [],
  "ReviewStatus": null,
  "Status": {
    "Value": "Active"
  },
  "StatusInformation": null,
  "VersionName": null,
  "ResponseMetadata": {
    "RequestId": "bc2417d1-d40b-4c79-b44d-307389fe8679",
    "Metadata": {},
    "ChecksumAlgorithm": 0,
    "ChecksumValidationStatus": 0
  },
  "ContentLength": 14389,
  "HttpStatusCode": 200,
  "LoggedAt": "2022-03-03T07:16:53.4311778+00:00"
}
