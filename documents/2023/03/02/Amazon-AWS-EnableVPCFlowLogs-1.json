{
  "AttachmentsContent": [],
  "Content": "{\n  \"description\" : \"### Document Name - AWS-EnableVPCFlowLogs\\n\\n## What does this document do?\\nThis document creates a flow log for a VPC to capture information about its IP traffic. The logs can be published to CloudWatch or S3.\\nWhen publishing to CloudWatch logs, the flow log records are published to a log group and each network interface has a unique log stream in the log group.\\nWhen publishing to Amazon S3, the flow log records for all of the monitored network interfaces are published to a single log file object that is stored in the specified bucket.\\n\\n## Notes\\nThis document will execute successfully even if enabling flow logs fails for one or more VPCs. Please check the execution output for complete information on successes and failures.\\n\\n## Input Parameters\\n* VPCIds: (Required) A comma separated list of the VPC IDs.\\n* LogDestinationType: (Optional) The destination type to which the flow log data should be published.\\n  * Allowed Values: cloud-watch-logs | s3\\n  * Default: cloud-watch-logs\\n* LogDestinationArn: (Required) The destination to which the flow log data should be published. Flow log data\\n  can be published to a CloudWatch Logs log group or an Amazon S3 bucket. The value specified for this parameter depends on the value specified for LogDestinationType.\\n* DeliverLogsPermissionArn: (Optional) The ARN for the IAM role that permits Amazon EC2 to publish flow logs to a CloudWatch Logs log group in your account.\\n  If you specified LogDestinationType as `s3`, do not specify DeliverLogsPermissionArn.\\n* TrafficType: (Optional) The type of traffic to log. You can log traffic that the resource accepts or rejects, or all traffic.\\n  * Allowed Values: ALL | ACCEPT | REJECT\\n  * Default: ALL\\n* AutomationAssumeRole: (Optional) The ARN of the role that allows Automation to perform the actions on your behalf.\\n\\n## Output Parameters\\n* EnableVPCFlowLogs.SuccessfulVPCs: A list of VPC IDs for which flow logs were successfully enabled.\\n* EnableVPCFlowLogs.FailedVPCs: A mapList of VPC IDs for which flow logs could not be enabled and the reason for the failure.\\n\",\n  \"schemaVersion\" : \"0.3\",\n  \"assumeRole\" : \"{{AutomationAssumeRole}}\",\n  \"outputs\" : [ \"EnableVPCFlowLogs.SuccessfulVPCs\", \"EnableVPCFlowLogs.FailedVPCs\" ],\n  \"parameters\" : {\n    \"VPCIds\" : {\n      \"type\" : \"StringList\",\n      \"description\" : \"(Required) A comma separated list of the VPC IDs.\",\n      \"allowedPattern\" : \"^(vpc-.*\\\\S.*)\"\n    },\n    \"LogDestinationType\" : {\n      \"type\" : \"String\",\n      \"allowedValues\" : [ \"cloud-watch-logs\", \"s3\" ],\n      \"description\" : \"(Optional) The destination type to which the flow log data should be published.\",\n      \"default\" : \"cloud-watch-logs\"\n    },\n    \"LogDestinationArn\" : {\n      \"type\" : \"String\",\n      \"description\" : \"(Required) The destination to which the flow log data should be published.\",\n      \"allowedPattern\" : \"^(arn:aws(-cn|-us-gov)?:.*\\\\S.*)\"\n    },\n    \"DeliverLogsPermissionArn\" : {\n      \"type\" : \"String\",\n      \"description\" : \"(Optional) The ARN for the IAM role that permits Amazon EC2 to publish flow logs to a CloudWatch Logs log group in your account.\",\n      \"default\" : \"\",\n      \"allowedPattern\" : \"^(arn:aws(-cn|-us-gov)?:.*\\\\S.*)|^$\"\n    },\n    \"TrafficType\" : {\n      \"type\" : \"String\",\n      \"description\" : \"(Optional) The type of traffic to log.\",\n      \"allowedValues\" : [ \"ACCEPT\", \"REJECT\", \"ALL\" ],\n      \"default\" : \"ALL\"\n    },\n    \"AutomationAssumeRole\" : {\n      \"type\" : \"String\",\n      \"description\" : \"(Optional) The ARN of the role that allows Automation to perform the actions on your behalf.\",\n      \"default\" : \"\",\n      \"allowedPattern\" : \"^arn:aws(-cn|-us-gov)?:iam::\\\\d{12}:role\\\\/[\\\\w+=,.@_\\\\/-]+|^$\"\n    }\n  },\n  \"mainSteps\" : [ {\n    \"name\" : \"EnableVPCFlowLogs\",\n    \"action\" : \"aws:executeScript\",\n    \"onFailure\" : \"Abort\",\n    \"isCritical\" : true,\n    \"isEnd\" : true,\n    \"timeoutSeconds\" : 600,\n    \"description\" : \"## EnableVPCFlowLogs\\nEnables flow logs for the target VPCs.\\n## Inputs\\n* VPCIds: A comma separated list of the VPC IDs.\\n* LogDestinationType: The destination type to which the flow log data should be published.\\n* LogDestinationArn: The destination to which the flow log data should be published.\\n* DeliverLogsPermissionArn: The ARN for the IAM role that permits Amazon EC2 to publish flow logs to a CloudWatch Logs log group in your account.\\n* TrafficType: The type of traffic to log.\\n## Output parameters\\n* SuccessfulVPCs: A list of VPC IDs for which flow logs were successfully enabled.\\n* FailedVPCs: A mapList of VPC IDs for which flow logs could not be enabled and the reason for the failure.\\n\",\n    \"inputs\" : {\n      \"Runtime\" : \"python3.7\",\n      \"Handler\" : \"enable_VPC_FlowLogs\",\n      \"InputPayload\" : {\n        \"VPCIds\" : \"{{VPCIds}}\",\n        \"LogDestinationType\" : \"{{LogDestinationType}}\",\n        \"LogDestinationArn\" : \"{{LogDestinationArn}}\",\n        \"DeliverLogsPermissionArn\" : \"{{DeliverLogsPermissionArn}}\",\n        \"TrafficType\" : \"{{TrafficType}}\"\n      },\n      \"Script\" : \"import json\\nimport boto3\\n\\ndef enable_VPC_FlowLogs(event, context):\\n  client = boto3.client('ec2')\\n\\n  FailedVPCs = []\\n  SuccessesVPCs = []\\n\\n  VPCIds = event['VPCIds']\\n  LogDestinationType  = event['LogDestinationType']\\n  LogDestinationArn  = event['LogDestinationArn']\\n  TrafficType = event['TrafficType']\\n\\n  if 'DeliverLogsPermissionArn' in event.keys():\\n      DeliverLogsPermissionArn  = event['DeliverLogsPermissionArn']\\n\\n  for vpcid in VPCIds:\\n      try:\\n          if LogDestinationType.lower() == \\\"cloud-watch-logs\\\".lower():\\n              response = client.create_flow_logs(\\n                  LogDestinationType = 'cloud-watch-logs',\\n                  ResourceIds = [vpcid],\\n                  ResourceType = 'VPC',\\n                  TrafficType = TrafficType,\\n                  LogDestination = LogDestinationArn,\\n                  DeliverLogsPermissionArn = DeliverLogsPermissionArn\\n              )\\n\\n          elif LogDestinationType.lower() == \\\"s3\\\".lower():\\n              response = client.create_flow_logs(\\n                  LogDestinationType = 's3',\\n                  ResourceIds = [vpcid],\\n                  ResourceType = 'VPC',\\n                  TrafficType = TrafficType,\\n                  LogDestination = LogDestinationArn,\\n              )\\n\\n          if not response['FlowLogIds']:\\n              errorMsg = response['Unsuccessful'][0]['Error']['Message']\\n              FailedVPCs.append({\\\"VPCId\\\": vpcid , \\\"error\\\": errorMsg})\\n          else:\\n              SuccessesVPCs.append(vpcid)\\n      except Exception as e :\\n          FailedVPCs.append({\\\"VPCId\\\": vpcid , \\\"error\\\":  str(e)})\\n\\n  return {\\n      'FailedVPCs': FailedVPCs,\\n      'SuccessfulVPCs': SuccessesVPCs\\n  }\\n\"\n    },\n    \"outputs\" : [ {\n      \"Name\" : \"SuccessfulVPCs\",\n      \"Selector\" : \"$.Payload.SuccessfulVPCs\",\n      \"Type\" : \"StringList\"\n    }, {\n      \"Name\" : \"FailedVPCs\",\n      \"Selector\" : \"$.Payload.FailedVPCs\",\n      \"Type\" : \"MapList\"\n    } ]\n  } ]\n}",
  "CreatedDate": "2021-05-25T17:41:30.426Z",
  "DisplayName": null,
  "DocumentFormat": {
    "Value": "JSON"
  },
  "DocumentType": {
    "Value": "Automation"
  },
  "DocumentVersion": "1",
  "Name": "AWS-EnableVPCFlowLogs",
  "Requires": [],
  "ReviewStatus": null,
  "Status": {
    "Value": "Active"
  },
  "StatusInformation": null,
  "VersionName": null,
  "ResponseMetadata": {
    "RequestId": "945fb768-bbaa-4d42-a148-2d8efffb4fab",
    "Metadata": {},
    "ChecksumAlgorithm": 0,
    "ChecksumValidationStatus": 0
  },
  "ContentLength": 7632,
  "HttpStatusCode": 200,
  "LoggedAt": "2023-03-02T07:12:18.5302136+00:00"
}
