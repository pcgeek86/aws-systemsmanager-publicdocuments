{
  "AttachmentsContent": [],
  "Content": "{\n  \"description\" : \"Scale up an ec2 to the successor instance type\",\n  \"schemaVersion\" : \"0.3\",\n  \"assumeRole\" : \"{{ AutomationAssumeRole }}\",\n  \"outputs\" : [ \"OutputRecoveryTime.RecoveryTime\", \"CalculateTargetType.TargetInstanceType\" ],\n  \"parameters\" : {\n    \"EC2InstanceIdentifier\" : {\n      \"type\" : \"String\",\n      \"allowedPattern\" : \"^i-[a-z0-9]{8,17}$\",\n      \"description\" : \"(Required) EC2InstanceIdentifier\"\n    },\n    \"EC2InstanceTargetInstanceType\" : {\n      \"type\" : \"String\",\n      \"description\" : \"(Optional) EC2InstanceTargetInstanceType\",\n      \"default\" : \"\"\n    },\n    \"AutomationAssumeRole\" : {\n      \"type\" : \"String\",\n      \"description\" : \"(Required) The ARN of the role that allows Automation to perform the actions on your behalf.\"\n    }\n  },\n  \"mainSteps\" : [ {\n    \"name\" : \"RecordStartTime\",\n    \"action\" : \"aws:executeScript\",\n    \"outputs\" : [ {\n      \"Name\" : \"StartTime\",\n      \"Selector\" : \"$.Payload\",\n      \"Type\" : \"String\"\n    } ],\n    \"inputs\" : {\n      \"Runtime\" : \"python3.8\",\n      \"Handler\" : \"start_time\",\n      \"Script\" : \"import boto3\\nimport logging\\nfrom datetime import datetime, timezone\\nimport time\\n\\nfrom botocore.exceptions import ClientError\\nfrom dateutil import parser\\n\\nlogger = logging.getLogger()\\nlogger.setLevel(logging.INFO)\\n\\n\\n\\ndef start_time(events, context):\\n    return datetime.now(timezone.utc).isoformat()\"\n    }\n  }, {\n    \"name\" : \"AssertInstanceInAvailableState\",\n    \"action\" : \"aws:assertAwsResourceProperty\",\n    \"onFailure\" : \"Abort\",\n    \"inputs\" : {\n      \"Service\" : \"ec2\",\n      \"Api\" : \"DescribeInstanceStatus\",\n      \"InstanceIds\" : [ \"{{ EC2InstanceIdentifier }}\" ],\n      \"IncludeAllInstances\" : true,\n      \"PropertySelector\" : \"$.InstanceStatuses..InstanceState.Name\",\n      \"DesiredValues\" : [ \"running\", \"stopped\" ]\n    }\n  }, {\n    \"name\" : \"DescribeEC2Instance\",\n    \"action\" : \"aws:executeAwsApi\",\n    \"onFailure\" : \"Abort\",\n    \"inputs\" : {\n      \"Service\" : \"ec2\",\n      \"Api\" : \"DescribeInstances\",\n      \"InstanceIds\" : [ \"{{ EC2InstanceIdentifier }}\" ]\n    },\n    \"outputs\" : [ {\n      \"Selector\" : \"$.Reservations[0].Instances[0].InstanceType\",\n      \"Name\" : \"InstanceType\",\n      \"Type\" : \"String\"\n    } ]\n  }, {\n    \"name\" : \"CalculateTargetType\",\n    \"description\" : \"Calculates the target instance type\",\n    \"action\" : \"aws:executeScript\",\n    \"outputs\" : [ {\n      \"Name\" : \"OriginalInstanceType\",\n      \"Selector\" : \"$.Payload.OriginalInstanceType\",\n      \"Type\" : \"String\"\n    }, {\n      \"Name\" : \"TargetInstanceType\",\n      \"Selector\" : \"$.Payload.TargetInstanceType\",\n      \"Type\" : \"String\"\n    } ],\n    \"inputs\" : {\n      \"Runtime\" : \"python3.8\",\n      \"Handler\" : \"get_bigger_instance\",\n      \"Script\" : \"import boto3\\nfrom botocore.config import Config\\n\\n\\n\\ndef get_bigger_instance(events, context):\\n    config = Config(retries={'max_attempts': 20, 'mode': 'standard'})\\n    ec2 = boto3.client('ec2', config=config)\\n    requested_instance_type = events[\\\"RequestInstanceType\\\"] or \\\"\\\"\\n    if requested_instance_type:\\n        instance_types_response = ec2.describe_instance_type_offerings(\\n            Filters=[{'Name': 'instance-type', \\\"Values\\\": [requested_instance_type]}])\\n        if instance_types_response:\\n            return {**{'TargetInstanceType': requested_instance_type}}\\n        else:\\n            raise Exception(\\\"Requested instance type is not valid: \\\" + requested_instance_type)\\n\\n    current_instance_type = events[\\\"CurrentInstanceType\\\"]\\n    instance_type_size = current_instance_type.rsplit(\\\".\\\", 1)\\n    instance_sizes = [\\\"nano\\\", \\\"micro\\\", \\\"small\\\", \\\"medium\\\", \\\"large\\\", \\\"xlarge\\\", \\\"2xlarge\\\", \\\"3xlarge\\\", \\\"4xlarge\\\",\\n                      \\\"6xlarge\\\", \\\"8xlarge\\\", \\\"9xlarge\\\", \\\"10xlarge\\\", \\\"12xlarge\\\", \\\"16xlarge\\\", \\\"18xlarge\\\", \\\"24xlarge\\\",\\n                      \\\"32xlarge\\\", \\\"56xlarge\\\", \\\"112xlarge\\\"]\\n    bigger_size_start_idx = instance_sizes.index(instance_type_size[1]) + 1\\n    possible_instance_types = []\\n    for i in range(len(instance_sizes) - bigger_size_start_idx):\\n        possible_instance_types.append(instance_type_size[0] + \\\".\\\" + instance_sizes[bigger_size_start_idx + i])\\n    instance_types_response = ec2.describe_instance_type_offerings(\\n        MaxResults=1000,\\n        Filters=[{'Name': 'instance-type', \\\"Values\\\": [instance_type_size[0] + \\\".*\\\"]}])\\n    all_instance_types = [offering['InstanceType'] for offering in instance_types_response['InstanceTypeOfferings']]\\n    bigger_instances = [candidate for candidate in possible_instance_types if candidate in all_instance_types]\\n    if bigger_instances:\\n        return {**{'OriginalInstanceType': current_instance_type}, **{'TargetInstanceType': bigger_instances[0]}}\\n    else:\\n        raise Exception(\\\"Could not identify bigger instance type than current instance type: \\\" + current_instance_type)\\n\",\n      \"InputPayload\" : {\n        \"RequestInstanceType\" : \"{{ EC2InstanceTargetInstanceType }}\",\n        \"CurrentInstanceType\" : \"{{ DescribeEC2Instance.InstanceType }}\"\n      }\n    }\n  }, {\n    \"name\" : \"StopEC2Instance\",\n    \"action\" : \"aws:executeAwsApi\",\n    \"onFailure\" : \"Abort\",\n    \"inputs\" : {\n      \"Service\" : \"ec2\",\n      \"Api\" : \"StopInstances\",\n      \"InstanceIds\" : [ \"{{ EC2InstanceIdentifier }}\" ]\n    }\n  }, {\n    \"name\" : \"ValidateInstanceIsStopped\",\n    \"action\" : \"aws:waitForAwsResourceProperty\",\n    \"timeoutSeconds\" : 900,\n    \"onFailure\" : \"Abort\",\n    \"inputs\" : {\n      \"Service\" : \"ec2\",\n      \"Api\" : \"DescribeInstanceStatus\",\n      \"InstanceIds\" : [ \"{{ EC2InstanceIdentifier }}\" ],\n      \"IncludeAllInstances\" : true,\n      \"PropertySelector\" : \"$.InstanceStatuses..InstanceState.Name\",\n      \"DesiredValues\" : [ \"stopped\" ]\n    }\n  }, {\n    \"name\" : \"ModifyInstanceAttribute\",\n    \"action\" : \"aws:executeAwsApi\",\n    \"onFailure\" : \"Abort\",\n    \"inputs\" : {\n      \"Service\" : \"ec2\",\n      \"Api\" : \"ModifyInstanceAttribute\",\n      \"InstanceId\" : \"{{ EC2InstanceIdentifier }}\",\n      \"InstanceType\" : {\n        \"Value\" : \"{{ CalculateTargetType.TargetInstanceType }}\"\n      }\n    },\n    \"outputs\" : [ {\n      \"Selector\" : \"$.InstanceType\",\n      \"Name\" : \"InstanceType\",\n      \"Type\" : \"String\"\n    } ]\n  }, {\n    \"name\" : \"StartEC2Instance\",\n    \"action\" : \"aws:executeAwsApi\",\n    \"onFailure\" : \"Abort\",\n    \"inputs\" : {\n      \"Service\" : \"ec2\",\n      \"Api\" : \"StartInstances\",\n      \"InstanceIds\" : [ \"{{ EC2InstanceIdentifier }}\" ]\n    }\n  }, {\n    \"name\" : \"ValidateInstanceIsAvailable\",\n    \"action\" : \"aws:waitForAwsResourceProperty\",\n    \"timeoutSeconds\" : 900,\n    \"onFailure\" : \"Abort\",\n    \"inputs\" : {\n      \"Service\" : \"ec2\",\n      \"Api\" : \"DescribeInstanceStatus\",\n      \"InstanceIds\" : [ \"{{ EC2InstanceIdentifier }}\" ],\n      \"PropertySelector\" : \"$.InstanceStatuses..InstanceState.Name\",\n      \"DesiredValues\" : [ \"running\" ]\n    }\n  }, {\n    \"name\" : \"AssertInstanceType\",\n    \"action\" : \"aws:assertAwsResourceProperty\",\n    \"onFailure\" : \"Abort\",\n    \"inputs\" : {\n      \"Service\" : \"ec2\",\n      \"Api\" : \"DescribeInstances\",\n      \"InstanceIds\" : [ \"{{ EC2InstanceIdentifier }}\" ],\n      \"PropertySelector\" : \"$.Reservations[0].Instances[0].InstanceType\",\n      \"DesiredValues\" : [ \"{{ CalculateTargetType.TargetInstanceType }}\" ]\n    }\n  }, {\n    \"name\" : \"OutputRecoveryTime\",\n    \"action\" : \"aws:executeScript\",\n    \"outputs\" : [ {\n      \"Name\" : \"RecoveryTime\",\n      \"Selector\" : \"$.Payload\",\n      \"Type\" : \"Integer\"\n    } ],\n    \"inputs\" : {\n      \"Runtime\" : \"python3.8\",\n      \"Handler\" : \"recovery_time\",\n      \"Script\" : \"import boto3\\nimport logging\\nfrom datetime import datetime, timezone\\nimport time\\n\\nfrom botocore.exceptions import ClientError\\nfrom dateutil import parser\\n\\nlogger = logging.getLogger()\\nlogger.setLevel(logging.INFO)\\n\\n\\n\\ndef recovery_time(events, context):\\n    return (datetime.now(timezone.utc) - parser.parse(events['StartTime'])).seconds\",\n      \"InputPayload\" : {\n        \"StartTime\" : \"{{ RecordStartTime.StartTime }}\"\n      }\n    }\n  } ]\n}",
  "CreatedDate": "2022-04-25T18:32:20.301Z",
  "DisplayName": null,
  "DocumentFormat": {
    "Value": "JSON"
  },
  "DocumentType": {
    "Value": "Automation"
  },
  "DocumentVersion": "2",
  "Name": "AWSResilienceHub-ScaleUpEc2SOP_2020-05-20",
  "Requires": [],
  "ReviewStatus": null,
  "Status": {
    "Value": "Active"
  },
  "StatusInformation": null,
  "VersionName": null,
  "ResponseMetadata": {
    "RequestId": "35153e63-def1-4caf-be2f-5918a51cca43",
    "Metadata": {},
    "ChecksumAlgorithm": 0,
    "ChecksumValidationStatus": 0
  },
  "ContentLength": 9027,
  "HttpStatusCode": 200,
  "LoggedAt": "2022-12-31T07:10:35.3806197+00:00"
}
