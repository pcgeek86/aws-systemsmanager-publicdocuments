{
  "AttachmentsContent": [],
  "Content": "{\n  \"description\" : \"SOP By AWS ResilienceHub: Digito_EBSRestoreFromBackup_2020_05_26\",\n  \"schemaVersion\" : \"0.3\",\n  \"assumeRole\" : \"{{ AutomationAssumeRole }}\",\n  \"parameters\" : {\n    \"EBSSnapshotIdentifier\" : {\n      \"type\" : \"String\",\n      \"description\" : \"(Required) The identifier of the snapshot to restore\"\n    },\n    \"TargetAvailabilityZone\" : {\n      \"type\" : \"String\",\n      \"description\" : \"(Required) Availability Zone in which to create the volume\"\n    },\n    \"VolumeType\" : {\n      \"type\" : \"String\",\n      \"description\" : \"(Optional) The Volume Type. (If omitted the default would be gp2)\",\n      \"default\" : \"\"\n    },\n    \"VolumeIOPS\" : {\n      \"type\" : \"Integer\",\n      \"description\" : \"(Optional) The number of I/O operations per second (IOPS). Not used for gp2. Setting at 0 will use default value.\",\n      \"default\" : 0\n    },\n    \"AutomationAssumeRole\" : {\n      \"type\" : \"String\",\n      \"description\" : \"(Required) The ARN of the role that allows Automation to perform the actions on your behalf.\"\n    }\n  },\n  \"outputs\" : [ \"CreateEbsVolume.CreatedVolumeId\", \"OutputRecoveryTime.RecoveryTime\", \"EbsDescribeSnapshot.RecoveryPoint\" ],\n  \"mainSteps\" : [ {\n    \"description\" : \"Start the timer when SOP starts\",\n    \"name\" : \"RecordStartTime\",\n    \"action\" : \"aws:executeScript\",\n    \"inputs\" : {\n      \"Runtime\" : \"python3.6\",\n      \"Handler\" : \"script_handler\",\n      \"Script\" : \"from datetime import datetime, timezone\\n\\ndef script_handler(params: dict, context):\\n    return get_current_time().isoformat()\\n\\ndef get_current_time():\\n    return datetime.now(timezone.utc)\\n\",\n      \"InputPayload\" : { }\n    },\n    \"outputs\" : [ {\n      \"Name\" : \"StartTime\",\n      \"Selector\" : \"$.Payload\",\n      \"Type\" : \"String\"\n    } ]\n  }, {\n    \"description\" : \"Get current snapshot information, validate that the state is \\\"completed\\\" by calling [DescribeSnapshot](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribeSnapshots.html)\",\n    \"name\" : \"EbsDescribeSnapshot\",\n    \"action\" : \"aws:executeScript\",\n    \"inputs\" : {\n      \"Runtime\" : \"python3.6\",\n      \"Handler\" : \"script_handler\",\n      \"Script\" : \"import boto3\\n\\ndef script_handler(params: dict, context):\\n    response = boto3.client('ec2').describe_snapshots(Filters=[{\\n        'Name': 'snapshot-id',\\n        'Values': [params['EBSSnapshotIdentifier']]}])\\n    return {\\n        'VolumeId': response['Snapshots'][0]['VolumeId'],\\n        'State': response['Snapshots'][0]['State'],\\n        'RecoveryPoint': response['Snapshots'][0]['StartTime'].isoformat()\\n    }\\n\",\n      \"InputPayload\" : {\n        \"EBSSnapshotIdentifier\" : \"{{ EBSSnapshotIdentifier }}\"\n      }\n    },\n    \"outputs\" : [ {\n      \"Name\" : \"VolumeId\",\n      \"Selector\" : \"$.Payload.VolumeId\",\n      \"Type\" : \"String\"\n    }, {\n      \"Name\" : \"State\",\n      \"Selector\" : \"$.Payload.State\",\n      \"Type\" : \"String\"\n    }, {\n      \"Name\" : \"RecoveryPoint\",\n      \"Selector\" : \"$.Payload.RecoveryPoint\",\n      \"Type\" : \"String\"\n    } ]\n  }, {\n    \"description\" : \"Calculate the target VolumeType and IOPS. Requested Params override Original params, use defaults if neither exists\",\n    \"name\" : \"CalculateIopsAndVolType\",\n    \"action\" : \"aws:executeScript\",\n    \"inputs\" : {\n      \"Runtime\" : \"python3.6\",\n      \"Handler\" : \"script_handler\",\n      \"Script\" : \"from botocore.config import Config\\nimport boto3\\n\\ndef script_handler(params: dict, context) -> dict:\\n    if params['VolumeId'] != \\\"vol-ffffffff\\\":\\n        config = Config(retries={'max_attempts': 20, 'mode': 'standard'})\\n        ec2_client = boto3.client('ec2', config=config)\\n        describe_response = ec2_client.describe_volumes(VolumeIds=[params['VolumeId']])\\n        default_vol_type = describe_response['Volumes'][0]['VolumeType']\\n        default_vol_iops = describe_response['Volumes'][0]['Iops']\\n    else:\\n        default_vol_type = 'gp2'\\n        default_vol_iops = 3000\\n    volumeType = params['VolumeType'] if params['VolumeType'] != '' else default_vol_type\\n    targetOps = params['VolumeIOPS'] if params['VolumeIOPS'] > 0 else default_vol_iops\\n    return {\\n        'TargetVolumeType': volumeType,\\n        'TargetVolumeIOPS': targetOps\\n    }\\n\",\n      \"InputPayload\" : {\n        \"VolumeId\" : \"{{ EbsDescribeSnapshot.VolumeId }}\",\n        \"VolumeType\" : \"{{ VolumeType }}\",\n        \"VolumeIOPS\" : \"{{ VolumeIOPS }}\"\n      }\n    },\n    \"outputs\" : [ {\n      \"Name\" : \"TargetVolumeType\",\n      \"Selector\" : \"$.Payload.TargetVolumeType\",\n      \"Type\" : \"String\"\n    }, {\n      \"Name\" : \"TargetVolumeIOPS\",\n      \"Selector\" : \"$.Payload.TargetVolumeIOPS\",\n      \"Type\" : \"Integer\"\n    } ]\n  }, {\n    \"description\" : \"Create the new volume by calling [CreateVolume](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateVolume.html)\",\n    \"name\" : \"CreateEbsVolume\",\n    \"action\" : \"aws:executeScript\",\n    \"inputs\" : {\n      \"Runtime\" : \"python3.6\",\n      \"Handler\" : \"script_handler\",\n      \"Script\" : \"import boto3\\n\\ndef script_handler(params: dict, context) -> dict:\\n    if params['TargetVolumeType'] == 'gp2':\\n        response = boto3.client('ec2').create_volume(\\n            SnapshotId=params['EBSSnapshotIdentifier'],\\n            AvailabilityZone=params['TargetAvailabilityZone'],\\n            VolumeType=params['TargetVolumeType']\\n        )\\n    else:\\n        response = boto3.client('ec2').create_volume(\\n            SnapshotId=params['EBSSnapshotIdentifier'],\\n            AvailabilityZone=params['TargetAvailabilityZone'],\\n            VolumeType=params['TargetVolumeType'],\\n            Iops=params['TargetVolumeIOPS']\\n        )\\n    return {'VolumeId': response['VolumeId']}\\n\",\n      \"InputPayload\" : {\n        \"EBSSnapshotIdentifier\" : \"{{ EBSSnapshotIdentifier }}\",\n        \"TargetAvailabilityZone\" : \"{{ TargetAvailabilityZone }}\",\n        \"TargetVolumeType\" : \"{{ CalculateIopsAndVolType.TargetVolumeType }}\",\n        \"TargetVolumeIOPS\" : \"{{ CalculateIopsAndVolType.TargetVolumeIOPS }}\"\n      }\n    },\n    \"outputs\" : [ {\n      \"Name\" : \"CreatedVolumeId\",\n      \"Selector\" : \"$.Payload.VolumeId\",\n      \"Type\" : \"String\"\n    } ]\n  }, {\n    \"description\" : \"Wait until EBS volume status is running\",\n    \"name\" : \"WaitUntilVolumeAvailable\",\n    \"action\" : \"aws:waitForAwsResourceProperty\",\n    \"inputs\" : {\n      \"Service\" : \"ec2\",\n      \"Api\" : \"DescribeVolumes\",\n      \"PropertySelector\" : \"$.Volumes[0].State\",\n      \"DesiredValues\" : [ \"available\", \"in-use\" ],\n      \"VolumeIds\" : [ \"{{ CreateEbsVolume.CreatedVolumeId }}\" ]\n    }\n  }, {\n    \"description\" : \"Record the runtime in seconds\",\n    \"name\" : \"OutputRecoveryTime\",\n    \"action\" : \"aws:executeScript\",\n    \"inputs\" : {\n      \"Runtime\" : \"python3.6\",\n      \"Handler\" : \"script_handler\",\n      \"Script\" : \"from datetime import datetime, timezone\\nfrom dateutil import parser\\n\\ndef script_handler(params: dict, context):\\n    return (get_current_time() - parser.parse(params['StartTime'])).seconds\\n\\ndef get_current_time():\\n    return datetime.now(timezone.utc)\\n\",\n      \"InputPayload\" : {\n        \"StartTime\" : \"{{ RecordStartTime.StartTime }}\"\n      }\n    },\n    \"outputs\" : [ {\n      \"Name\" : \"RecoveryTime\",\n      \"Selector\" : \"$.Payload\",\n      \"Type\" : \"Integer\"\n    } ]\n  } ]\n}",
  "CreatedDate": "2022-01-18T14:39:31.291Z",
  "DisplayName": null,
  "DocumentFormat": {
    "Value": "JSON"
  },
  "DocumentType": {
    "Value": "Automation"
  },
  "DocumentVersion": "2",
  "Name": "AWSResilienceHub-RestoreFromBackupEbsSOP_2020-05-26",
  "Requires": [],
  "ReviewStatus": null,
  "Status": {
    "Value": "Active"
  },
  "StatusInformation": null,
  "VersionName": null,
  "ResponseMetadata": {
    "RequestId": "b9b40a15-013a-4888-bcfe-e466f221646b",
    "Metadata": {},
    "ChecksumAlgorithm": 0,
    "ChecksumValidationStatus": 0
  },
  "ContentLength": 8037,
  "HttpStatusCode": 200,
  "LoggedAt": "2022-11-14T07:15:00.7784486+00:00"
}
