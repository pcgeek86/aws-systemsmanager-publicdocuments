{
  "AttachmentsContent": [],
  "Content": "{\n  \"schemaVersion\": \"0.3\",\n  \"description\": \"The AWSSupport-ManageWindowsService automation document enables a user to stop, start, restart, pause, or disable any Windows service on the target instance.\",\n  \"assumeRole\": \"{{ AutomationAssumeRole }}\",\n  \"parameters\": {\n    \"InstanceId\": {\n      \"type\": \"String\",\n      \"description\": \"(Required) The ID of the managed instance to manage the RDP settings of.\",\n      \"allowedPattern\": \"^[m]{0,1}i-[a-z0-9]{8,17}$\"\n    },\n    \"WindowsServiceName\": {\n      \"type\": \"String\",\n      \"description\": \"(Required) A valid Windows service name.\",\n      \"allowedPattern\": \"^[a-zA-Z0-9\\\\- ._]{1,256}$\",\n      \"maxChars\": 256\n    },\n    \"StartupType\": {\n      \"type\": \"String\",\n      \"description\": \"(Required) A startup type to apply to the Windows service: Auto, Demand (Manual), Disabled, DelayAutoStart, Check.\",\n      \"default\": \"Check\",\n      \"allowedValues\": [\n        \"Check\",\n        \"Auto\",\n        \"Demand\",\n        \"Disabled\",\n        \"DelayedAutoStart\"\n      ]\n    },\n    \"ServiceAction\": {\n      \"type\": \"String\",\n      \"description\": \"(Required) An action to apply to the Windows service: Restart, Force-Restart, Start, Stop, Force-Stop, Pause, Check. Note: Force-Restart and Force-Stop can be used to restart and to stop a service that has dependent services.\",\n      \"default\": \"Check\",\n      \"allowedValues\": [\n        \"Check\",\n        \"Restart\",\n        \"Force-Restart\",\n        \"Start\",\n        \"Stop\",\n        \"Force-Stop\",\n        \"Pause\"\n      ]\n    },\n    \"AutomationAssumeRole\": {\n      \"type\": \"String\",\n      \"description\": \"(Optional) The IAM role for this execution. If no role is specified, AWS Systems Manager Automation will use the permissions of the user that executes this document.\",\n      \"default\": \"\"\n    }\n  },\n  \"mainSteps\": [\n    {\n      \"name\": \"assertInstanceIsManagedInstance\",\n      \"action\": \"aws:assertAwsResourceProperty\",\n      \"onFailure\": \"Abort\",\n      \"inputs\": {\n        \"Service\": \"ssm\",\n        \"Api\": \"DescribeInstanceInformation\",\n        \"InstanceInformationFilterList\": [\n          {\n            \"key\": \"InstanceIds\",\n            \"valueSet\": [\n              \"{{ InstanceId }}\"\n            ]\n          }\n        ],\n        \"PropertySelector\": \"$.InstanceInformationList[0].PingStatus\",\n        \"DesiredValues\": [\n          \"Online\"\n        ]\n      },\n      \"isCritical\": \"true\",\n      \"nextStep\": \"assertInstanceIsWindows\"\n    },\n    {\n      \"name\": \"assertInstanceIsWindows\",\n      \"action\": \"aws:assertAwsResourceProperty\",\n      \"onFailure\": \"Abort\",\n      \"inputs\": {\n        \"Service\": \"ssm\",\n        \"Api\": \"DescribeInstanceInformation\",\n        \"InstanceInformationFilterList\": [\n          {\n            \"key\": \"InstanceIds\",\n            \"valueSet\": [\n              \"{{ InstanceId }}\"\n            ]\n          }\n        ],\n        \"PropertySelector\": \"$.InstanceInformationList[0].PlatformType\",\n        \"DesiredValues\": [\n          \"Windows\"\n        ]\n      },\n      \"isCritical\": \"true\",\n      \"nextStep\": \"manageWindowsService\"\n    },\n    {\n      \"name\": \"manageWindowsService\",\n      \"action\": \"aws:runCommand\",\n      \"onFailure\": \"Abort\",\n      \"inputs\": {\n        \"DocumentName\": \"AWS-RunPowerShellScript\",\n        \"InstanceIds\": [\n          \"{{ InstanceId }}\"\n        ],\n        \"Parameters\": {\n          \"commands\": [\n            \"Function Get-ServiceStatus {\",\n            \"    Param (\",\n            \"        [Parameter(Mandatory = $true)]\",\n            \"        [String]$ServiceName\",\n            \"    )\",\n            \"\",\n            \"    $serviceInfo = Get-WmiObject -Class Win32_Service -Filter \\\"Name='${ServiceName}'\\\"\",\n            \"       \",\n            \"    if ($serviceInfo) {\",\n            \"   \",\n            \"        return $serviceInfo.State\",\n            \"\",\n            \"    }\",\n            \"    else {\",\n            \"        \",\n            \"        throw \\\"Service $ServiceName does not exist.\\\"\",\n            \"        \",\n            \"    } \",\n            \"   \",\n            \"}\",\n            \"\",\n            \"Function Get-ServiceStartupType {  \",\n            \"    Param (\",\n            \"        [Parameter(Mandatory = $true)]\",\n            \"        [String]$ServiceName\",\n            \"    )\",\n            \"    \",\n            \"    $serviceInfo = Get-WmiObject -Class Win32_Service -Filter \\\"Name='${ServiceName}'\\\"\",\n            \"    \",\n            \"    if ($serviceInfo) {\",\n            \"            \",\n            \"        return $serviceInfo.StartMode\",\n            \"    \",\n            \"    }\",\n            \"    else {\",\n            \"    \",\n            \"        throw \\\"Service $ServiceName does not exist.\\\"\",\n            \"    } \",\n            \"\",\n            \"}\",\n            \"\",\n            \"Function Set-ServiceStatus { \",\n            \"    Param (\",\n            \"        [Parameter(Mandatory = $true)]\",\n            \"        [ValidateSet(\\\"Start\\\", \\\"Stop\\\", \\\"Force-Stop\\\", \\\"Pause\\\", \\\"Restart\\\", \\\"Force-Restart\\\")] \",\n            \"        [String]$Status,\",\n            \"\",\n            \"        [Parameter(Mandatory = $true)]\",\n            \"        [String]$ServiceName\",\n            \"    )\",\n            \"    \",\n            \"    try {\",\n            \"\",\n            \"        switch ($Status) {\",\n            \"\",\n            \"            Start {\",\n            \"\",\n            \"                Start-Service -Name $ServiceName -ErrorAction Stop\",\n            \"                Write-Host \\\"$ServiceName was successfully started.\\\"\",\n            \"\",\n            \"            }\",\n            \"            Stop {\",\n            \"\",\n            \"                Stop-Service -Name $ServiceName -ErrorAction Stop\",\n            \"                Write-Host \\\"$ServiceName was successfully stopped.\\\"\",\n            \"\",\n            \"            }\",\n            \"            Force-Stop {\",\n            \"\",\n            \"                Stop-Service -Name $ServiceName -Force -ErrorAction Stop\",\n            \"                Write-Host \\\"$ServiceName was successfully stopped.\\\"\",\n            \"\",\n            \"            }\",\n            \"            Pause {\",\n            \"\",\n            \"                Suspend-Service -Name $ServiceName -ErrorAction Stop\",\n            \"                Write-Host \\\"$ServiceName was successfully paused.\\\"\",\n            \"\",\n            \"            }\",\n            \"            Restart { \",\n            \"\",\n            \"                Restart-Service -Name $ServiceName -ErrorAction Stop\",\n            \"                Write-Host \\\"$ServiceName was successfully restarted.\\\" \",\n            \"\",\n            \"            }\",\n            \"            Force-Restart { \",\n            \"\",\n            \"                Restart-Service -Name $ServiceName -Force -ErrorAction Stop\",\n            \"                Write-Host \\\"$ServiceName was successfully restarted.\\\" \",\n            \"\",\n            \"            }\",\n            \"\",\n            \"        }\",\n            \"\",\n            \"    }\",\n            \"    catch {\",\n            \"\",\n            \"        throw \\\"Unable to set $ServiceName status to $Status. Reason: \\\" + $_.Exception.Message\",\n            \"\",\n            \"    }\",\n            \"}\",\n            \"\",\n            \"Function Set-ServiceStartupType {\",\n            \"    Param (\",\n            \"        [Parameter(Mandatory = $true)]\",\n            \"        [ValidateSet(\\\"Auto\\\", \\\"Demand\\\", \\\"Disabled\\\", \\\"DelayedAutoStart\\\")] \",\n            \"        [String]$StartupType,\",\n            \"\",\n            \"        [Parameter(Mandatory = $true)]\",\n            \"        [String]$ServiceName\",\n            \"    )\",\n            \"\",\n            \"    try {\",\n            \"        \",\n            \"        if ($StartupType -eq \\\"DelayedAutoStart\\\") {\",\n            \"\",\n            \"            $result = & \\\"${env:SYSTEMROOT}\\\\system32\\\\sc.exe\\\" config $ServiceName Start= delayed-auto \",\n            \"            \",\n            \"            if ($?) {\",\n            \"            \",\n            \"                Write-Host \\\"Startup type changed to Automatic (Delayed Start).\\\"\",\n            \"            \",\n            \"            }\",\n            \"            else {\",\n            \"            \",\n            \"                throw($result)\",\n            \"            \",\n            \"            }\",\n            \"\",\n            \"        }\",\n            \"        else {\",\n            \"            \",\n            \"            $result = & \\\"${env:SYSTEMROOT}\\\\system32\\\\sc.exe\\\" config $ServiceName Start= $StartupType\",\n            \"            \",\n            \"            if ($?) {\",\n            \"            \",\n            \"                Write-Host \\\"Startup type changed to $StartupType.\\\"\",\n            \"            \",\n            \"            }\",\n            \"            else {\",\n            \"            \",\n            \"                throw($result)\",\n            \"            \",\n            \"            }\",\n            \"\",\n            \"        }\",\n            \"\",\n            \"    }\",\n            \"    catch {\",\n            \"\",\n            \"        throw($_.Exception.Message)\",\n            \"\",\n            \"    }\",\n            \"\",\n            \"}\",\n            \"\",\n            \"try {\",\n            \"    \",\n            \"    $service = \\\"{{ WindowsServiceName }}\\\"\",\n            \"    $serviceStatus = \\\"{{ ServiceAction }}\\\"\",\n            \"    $serviceStartupType = \\\"{{ StartupType }}\\\"\",\n            \"\",\n            \"    if ($serviceStartupType -eq \\\"Check\\\") {\",\n            \"\",\n            \"        $currentServiceStartupType = Get-ServiceStartupType -ServiceName $service\",\n            \"        Write-Host \\\"$service startup type: $currentServiceStartupType\\\"\",\n            \"\",\n            \"    }\",\n            \"    else {\",\n            \"\",\n            \"        Set-ServiceStartupType -ServiceName $service -StartupType $serviceStartupType\",\n            \"\",\n            \"    }\",\n            \"\",\n            \"    if ($serviceStatus -eq \\\"Check\\\") {\",\n            \"\",\n            \"        $currentServiceStatus = Get-ServiceStatus -ServiceName $service\",\n            \"        Write-Host \\\"$service status: $currentServiceStatus\\\"\",\n            \"\",\n            \"    }\",\n            \"    else {\",\n            \"\",\n            \"        Set-ServiceStatus -ServiceName $service -Status $serviceStatus\",\n            \"\",\n            \"    }\",\n            \"\",\n            \"}\",\n            \"catch {\",\n            \"\",\n            \"    Write-Host $_.Exception.Message\",\n            \"    exit 1   \",\n            \"\",\n            \"}\"\n          ]\n        }\n      },\n      \"isCritical\": \"true\",\n      \"isEnd\": \"true\"\n    }\n  ],\n  \"outputs\": [\n    \"manageWindowsService.Output\"\n  ]\n}",
  "CreatedDate": "2020-06-18T23:38:44.219Z",
  "DisplayName": null,
  "DocumentFormat": {
    "Value": "JSON"
  },
  "DocumentType": {
    "Value": "Automation"
  },
  "DocumentVersion": "4",
  "Name": "AWSSupport-ManageWindowsService",
  "Requires": [],
  "ReviewStatus": null,
  "Status": {
    "Value": "Active"
  },
  "StatusInformation": null,
  "VersionName": null,
  "ResponseMetadata": {
    "RequestId": "066fbdfa-1edc-47e7-877a-9855c445ba52",
    "Metadata": {},
    "ChecksumAlgorithm": 0,
    "ChecksumValidationStatus": 0
  },
  "ContentLength": 11896,
  "HttpStatusCode": 200,
  "LoggedAt": "2022-09-20T07:25:21.2125989+00:00"
}
