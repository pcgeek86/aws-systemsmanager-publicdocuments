{
  "AttachmentsContent": [],
  "Content": "{\n  \"description\" : \"## Name\\n  AWS-UpdateEKSManagedNodeGroup\\n\\n## What does this document do?\\n  Automation document to update EKS managed node group, you can choose if you want to update the node group version or configurations.\\n\\n## Input Parameters\\n    * ClusterName: (Required) The name of your cluster.\\n    * NodeGroupName: (Required) The name of your nodegroup.\\n    * UpdateType : (Required) Specify the update type.\\n    * ForceUpdate: (Optional)(Update Version) Force the update if the existing node group's pods are unable to be drained due to a pod disruption budget issue.\\n    * LaunchTemplateId: (Optional)(Update Version) The ID of the launch template.\\n    * LaunchTemplateName: (Optional)(Update Version) The name of the launch template.\\n    * LaunchTemplateVersion: (Optional)(Update Version) The version of the launch template to use. If no version is specified, then the template's default version is used.\\n    * AMIReleaseVersion: (Optional)(Update Version) The AMI version of the Amazon EKS optimized AMI to use for the update. By default, the latest available AMI version for the node group's Kubernetes version is used.\\n    * KubernetesVersion: (Optional)(Update Version) The Kubernetes version to update to.\\n    * AddOrUpdateNodeGroupLabels: (Optional)(Update configuration) Kubernetes labels to be added or updated.\\n    * RemoveNodeGroupLabels: (Optional)(Update configuration) Kubernetes labels to be removed.\\n    * NodeGroupDesiredSize: (Optional)(Update configuration) The current number of nodes that the managed node group should maintain.\\n    * NodeGroupMaxSize: (Optional)(Update configuration) The maximum number of nodes that the managed node group can scale out to.\\n    * NodeGroupMinSize: (Optional)(Update configuration) The minimum number of nodes that the managed node group can scale in to.\\n    * AddOrUpdateKubernetesTaintsEffect: (Optional)(Update configuration) The the Kubernetes taints to be added or updated.\\n    * RemoveKubernetesTaintsEffect: (Optional)(Update configuration) The the Kubernetes taints to be removed.\\n    * MaxUnavailableNodeGroups: (Optional)(Update configuration) The maximum number of nodes unavailable at once during a version update.\\n    * MaxUnavailablePercentageNodeGroup: (Optional)(Update configuration) The maximum percentage of nodes unavailable during a version update.\\n    * AutomationAssumeRole: (Optional) The ARN of the role that allows the document to perform the actions on your behalf.\\n## Minimum Permissions Required\\n  * `eks:UpdateNodegroupConfig`\\n  * `eks:UpdateNodegroupVersion`\\n## Output parameters\\n  None\",\n  \"schemaVersion\" : \"0.3\",\n  \"assumeRole\" : \"{{ AutomationAssumeRole }}\",\n  \"parameters\" : {\n    \"ClusterName\" : {\n      \"type\" : \"String\",\n      \"description\" : \"(Required) The name of your cluster.\",\n      \"allowedPattern\" : \"^[0-9A-Za-z][A-Za-z0-9\\\\-_]*\"\n    },\n    \"NodeGroupName\" : {\n      \"type\" : \"String\",\n      \"description\" : \"(Required) The name of your nodegroup.\",\n      \"allowedPattern\" : \"^[0-9A-Za-z][A-Za-z0-9\\\\-_]*\"\n    },\n    \"UpdateType\" : {\n      \"type\" : \"String\",\n      \"description\" : \"(Required) Specify the update type.\",\n      \"allowedValues\" : [ \"Update Node Group Version\", \"Update Node Group Configurations\" ],\n      \"default\" : \"Update Node Group Version\"\n    },\n    \"ForceUpdate\" : {\n      \"type\" : \"Boolean\",\n      \"description\" : \"(Optional)(Update Version) Force the update if the existing node group's pods are unable to be drained due to a pod disruption budget issue.\",\n      \"allowedValues\" : [ true, false ],\n      \"default\" : false\n    },\n    \"LaunchTemplateId\" : {\n      \"type\" : \"String\",\n      \"description\" : \"(Optional) Specify one or more security groups with comma separation for the cross-account elastic network interfaces that Amazon EKS creates to use that allow communication between your nodes and the Kubernetes control plane.\",\n      \"default\" : \"\",\n      \"allowedPattern\" : \"^$|[-_a-zA-Z0-9\\\\/\\\\s\\\\.\\\",\\\\-]*$\"\n    },\n    \"LaunchTemplateName\" : {\n      \"type\" : \"String\",\n      \"description\" : \"(Optional)(Update Version) The name of the launch template.\",\n      \"default\" : \"\",\n      \"allowedPattern\" : \"^$|[-_a-zA-Z0-9\\\\/\\\\s\\\\.\\\"\\\\-]*$\"\n    },\n    \"LaunchTemplateVersion\" : {\n      \"type\" : \"String\",\n      \"description\" : \"(Optional)(Update Version) The version of the launch template to use. If no version is specified, then the template's default version is used.\",\n      \"default\" : \"\",\n      \"allowedPattern\" : \"^$|^[A-Za-z0-9\\\\/\\\\s\\\\.\\\"\\\\-]+$\"\n    },\n    \"AMIReleaseVersion\" : {\n      \"type\" : \"String\",\n      \"description\" : \"(Optional)(Update Version) The AMI version of the Amazon EKS optimized AMI to use for the update. By default, the latest available AMI version for the node group's Kubernetes version is used.\",\n      \"default\" : \"\",\n      \"allowedPattern\" : \"^$|^[A-Za-z0-9\\\\/\\\\s\\\\.\\\"\\\\-]+$\"\n    },\n    \"KubernetesVersion\" : {\n      \"type\" : \"String\",\n      \"description\" : \"(Optional)(Update Version) The Kubernetes version to update to.\",\n      \"default\" : \"\",\n      \"allowedPattern\" : \"^$|^[A-Za-z0-9\\\\/\\\\s\\\\.\\\"\\\\-]+$\"\n    },\n    \"AddOrUpdateNodeGroupLabels\" : {\n      \"type\" : \"StringMap\",\n      \"description\" : \"(Optional)(Update configuration) Kubernetes labels to be added or updated.\",\n      \"default\" : { },\n      \"allowedPattern\" : \"[-_a-zA-Z0-9]*\\\\{[^\\\\]]*\\\\}\"\n    },\n    \"RemoveNodeGroupLabels\" : {\n      \"type\" : \"StringList\",\n      \"description\" : \"(Optional)(Update configuration) Kubernetes labels to be removed written in separated commas.\",\n      \"default\" : [ \"\" ],\n      \"allowedPattern\" : \"^$|[-_a-zA-Z\\\\/\\\\s\\\\.\\\"\\\\-]*|[-_a-zA-Z\\\\/\\\\s\\\\.\\\"\\\\-]*\\\\[[^\\\\]]*\\\\]|^\\\\w$\"\n    },\n    \"NodeGroupDesiredSize\" : {\n      \"type\" : \"Integer\",\n      \"description\" : \"(Optional)(Update configuration) The current number of nodes that the managed node group should maintain.\",\n      \"default\" : 0,\n      \"allowedPattern\" : \"[0-9]*$\"\n    },\n    \"NodeGroupMaxSize\" : {\n      \"type\" : \"Integer\",\n      \"description\" : \"(Optional)(Update configuration) The maximum number of nodes that the managed node group can scale out to.\",\n      \"default\" : 0,\n      \"allowedPattern\" : \"[0-9]*$\"\n    },\n    \"NodeGroupMinSize\" : {\n      \"type\" : \"Integer\",\n      \"description\" : \"(Optional)(Update configuration) The minimum number of nodes that the managed node group can scale in to.\",\n      \"default\" : 0,\n      \"allowedPattern\" : \"[0-9]*$\"\n    },\n    \"AddOrUpdateKubernetesTaintsEffect\" : {\n      \"type\" : \"StringList\",\n      \"description\" : \"(Optional)(Update configuration) The the Kubernetes taints to be added or updated.\",\n      \"default\" : [ \"\" ],\n      \"allowedPattern\" : \"^$|[-_a-zA-Z\\\\/\\\\s\\\\.“\\\\-]*|[-_a-zA-Z\\\\/\\\\s\\\\.\\\"\\\\-]*\\\\[[^\\\\]]*\\\\]|^\\\\w$\"\n    },\n    \"RemoveKubernetesTaintsEffect\" : {\n      \"type\" : \"StringList\",\n      \"description\" : \"(Optional)(Update configuration) The the Kubernetes taints to be removed written in separated commas.\",\n      \"default\" : [ \"\" ],\n      \"allowedPattern\" : \"^$|[-_a-zA-Z\\\\/\\\\s\\\\.“\\\\-]*|[-_a-zA-Z\\\\/\\\\s\\\\.\\\"\\\\-]*\\\\[[^\\\\]]*\\\\]|^\\\\w$\"\n    },\n    \"MaxUnavailableNodeGroups\" : {\n      \"type\" : \"Integer\",\n      \"description\" : \"(Optional)(Update configuration) The maximum number of nodes unavailable at once during a version update.\",\n      \"default\" : 0,\n      \"allowedPattern\" : \"[0-9]*$\"\n    },\n    \"MaxUnavailablePercentageNodeGroup\" : {\n      \"type\" : \"Integer\",\n      \"description\" : \"(Optional)(Update configuration) The maximum percentage of nodes unavailable during a version update.\",\n      \"default\" : 0,\n      \"allowedPattern\" : \"[0-9]*$\"\n    },\n    \"AutomationAssumeRole\" : {\n      \"type\" : \"AWS::IAM::Role::Arn\",\n      \"description\" : \"(Optional) The ARN of the role that allows the document to perform the actions on your behalf.\",\n      \"default\" : \"\",\n      \"allowedPattern\" : \"^$|arn:(aws[a-zA-Z-]*)?:iam::\\\\d{12}:role\\\\/?[a-zA-Z_0-9+=,.@\\\\-_\\\\/]+\"\n    }\n  },\n  \"mainSteps\" : [ {\n    \"name\" : \"UpdateEKSManagedNodeGroup\",\n    \"description\" : \"## Update Amazon EKS cluster node group action.\\n\",\n    \"timeoutSeconds\" : 1000,\n    \"action\" : \"aws:executeScript\",\n    \"onFailure\" : \"Abort\",\n    \"inputs\" : {\n      \"Runtime\" : \"python3.8\",\n      \"Handler\" : \"updateNodeGroup\",\n      \"InputPayload\" : {\n        \"ClusterName\" : \"{{ ClusterName }}\",\n        \"NodeGroupName\" : \"{{ NodeGroupName }}\",\n        \"UpdateType\" : \"{{ UpdateType }}\",\n        \"ForceUpdate\" : \"{{ ForceUpdate }}\",\n        \"LaunchTemplateId\" : \"{{ LaunchTemplateId }}\",\n        \"LaunchTemplateName\" : \"{{ LaunchTemplateName }}\",\n        \"LaunchTemplateVersion\" : \"{{ LaunchTemplateVersion }}\",\n        \"AMIReleaseVersion\" : \"{{ AMIReleaseVersion }}\",\n        \"KubernetesVersion\" : \"{{ KubernetesVersion }}\",\n        \"AddOrUpdateNodeGroupLabels\" : \"{{ AddOrUpdateNodeGroupLabels }}\",\n        \"RemoveNodeGroupLabels\" : \"{{ RemoveNodeGroupLabels }}\",\n        \"NodeGroupDesiredSize\" : \"{{ NodeGroupDesiredSize }}\",\n        \"NodeGroupMaxSize\" : \"{{ NodeGroupMaxSize }}\",\n        \"NodeGroupMinSize\" : \"{{ NodeGroupMinSize }}\",\n        \"AddOrUpdateKubernetesTaintsEffect\" : \"{{ AddOrUpdateKubernetesTaintsEffect }}\",\n        \"RemoveKubernetesTaintsEffect\" : \"{{ RemoveKubernetesTaintsEffect }}\",\n        \"MaxUnavailableNodeGroups\" : \"{{ MaxUnavailableNodeGroups }}\",\n        \"MaxUnavailablePercentageNodeGroup\" : \"{{ MaxUnavailablePercentageNodeGroup }}\"\n      },\n      \"Script\" : \"import boto3\\n\\nclient = boto3.client(\\\"ec2\\\")\\nclient_eks = boto3.client(\\\"eks\\\")\\n\\n\\ndef defineJsonField(field, requestJson):\\n    if field in requestJson:\\n        return requestJson\\n    else:\\n        requestJson[field] = {}\\n    return requestJson\\n\\n\\ndef updateNodeGroup(events, context):\\n    if events[\\\"UpdateType\\\"] == \\\"Update Node Group Version\\\":\\n        return updateNodeGroupVersion(events, context)\\n    else:\\n        return updateNodeGroupConfigurations(events, context)\\n\\n\\ndef updateNodeGroupConfigurations(events, context):\\n    successful = True\\n    msg = \\\"Success\\\"\\n    errorCode = \\\"\\\"\\n    updateUUID = \\\"\\\"\\n    # Building the request\\n\\n    requestJson = {\\n        \\\"clusterName\\\": events[\\\"ClusterName\\\"],\\n        \\\"nodegroupName\\\": events[\\\"NodeGroupName\\\"],\\n    }\\n\\n    if events[\\\"AddOrUpdateNodeGroupLabels\\\"]:\\n        requestJson = defineJsonField(\\\"labels\\\", requestJson)\\n        requestJson[\\\"labels\\\"][\\\"addOrUpdateLabels\\\"] = events[\\n            \\\"AddOrUpdateNodeGroupLabels\\\"\\n        ]\\n    if events[\\\"RemoveNodeGroupLabels\\\"][0]:\\n        requestJson = defineJsonField(\\\"labels\\\", requestJson)\\n        requestJson[\\\"labels\\\"][\\\"removeLabels\\\"] = events[\\\"RemoveNodeGroupLabels\\\"]\\n    if events[\\\"AddOrUpdateKubernetesTaintsEffect\\\"][0]:\\n        requestJson = defineJsonField(\\\"taints\\\", requestJson)\\n        requestJson[\\\"taints\\\"][\\\"addOrUpdateTaints\\\"] = events[\\n            \\\"AddOrUpdateKubernetesTaintsEffect\\\"\\n        ]\\n    if events[\\\"RemoveKubernetesTaintsEffect\\\"][0]:\\n        requestJson = defineJsonField(\\\"taints\\\", requestJson)\\n        requestJson[\\\"taints\\\"][\\\"removeTaints\\\"] = events[\\n            \\\"RemoveKubernetesTaintsEffect\\\"\\n        ]  # noqa\\n    if events[\\\"NodeGroupDesiredSize\\\"] > 0:\\n        requestJson = defineJsonField(\\\"scalingConfig\\\", requestJson)\\n        requestJson[\\\"scalingConfig\\\"][\\\"desiredSize\\\"] = events[\\n            \\\"NodeGroupDesiredSize\\\"\\n        ]  # noqa\\n    if events[\\\"NodeGroupMaxSize\\\"] > 0:\\n        requestJson = defineJsonField(\\\"scalingConfig\\\", requestJson)\\n        requestJson[\\\"scalingConfig\\\"][\\\"maxSize\\\"] = events[\\\"NodeGroupMaxSize\\\"]\\n    if events[\\\"NodeGroupMinSize\\\"] > 0:\\n        requestJson = defineJsonField(\\\"scalingConfig\\\", requestJson)\\n        requestJson[\\\"scalingConfig\\\"][\\\"minSize\\\"] = events[\\\"NodeGroupMinSize\\\"]\\n    if events[\\\"MaxUnavailableNodeGroups\\\"] > 0:\\n        requestJson = defineJsonField(\\\"updateConfig\\\", requestJson)\\n        requestJson[\\\"updateConfig\\\"][\\\"maxUnavailable\\\"] = events[\\n            \\\"MaxUnavailableNodeGroups\\\"\\n        ]\\n    if events[\\\"MaxUnavailablePercentageNodeGroup\\\"] > 0:\\n        requestJson = defineJsonField(\\\"updateConfig\\\", requestJson)\\n        requestJson[\\\"updateConfig\\\"][\\\"maxUnavailablePercentage\\\"] = events[\\n            \\\"MaxUnavailablePercentageNodeGroup\\\"\\n        ]\\n\\n    try:\\n        response = client_eks.update_nodegroup_config(**requestJson)\\n        if (\\n            response[\\\"update\\\"][\\\"status\\\"] == \\\"InProgress\\\"\\n            or response[\\\"update\\\"][\\\"status\\\"] == \\\"Successful\\\"\\n        ):\\n            updateUUID = response[\\\"update\\\"][\\\"id\\\"]\\n        elif response[\\\"update\\\"][errors][0]:\\n            msg = str([\\\"update\\\"][errors][0][\\\"errorMessage\\\"])\\n            errorCode = str([\\\"update\\\"][errors][0][\\\"errorCode\\\"])\\n            successful = False\\n    except Exception as e:\\n        msg = str(e)\\n        successful = False\\n    if not successful:\\n        raise Exception(\\n            \\\"Unable to update the node group errorCode: '{}', error message: '{}'\\\".format(\\n                errorCode, msg\\n            )\\n        )\\n    return updateUUID\\n\\n\\ndef updateNodeGroupVersion(events, context):\\n    successful = True\\n    msg = \\\"Success\\\"\\n    errorCode = \\\"\\\"\\n    updateUUID = \\\"\\\"\\n    # Building the request\\n\\n    requestJson = {\\n        \\\"clusterName\\\": events[\\\"ClusterName\\\"],\\n        \\\"nodegroupName\\\": events[\\\"NodeGroupName\\\"],\\n    }\\n\\n    if events[\\\"KubernetesVersion\\\"]:\\n        requestJson[\\\"version\\\"] = events[\\\"KubernetesVersion\\\"]\\n    if events[\\\"AMIReleaseVersion\\\"]:\\n        requestJson[\\\"releaseVersion\\\"] = events[\\\"AMIReleaseVersion\\\"]\\n    if events[\\\"ForceUpdate\\\"]:\\n        requestJson[\\\"force\\\"] = events[\\\"ForceUpdate\\\"]\\n    if events[\\\"LaunchTemplateId\\\"]:\\n        requestJson = defineJsonField(\\\"launchTemplate\\\", requestJson)\\n        requestJson[\\\"launchTemplate\\\"][\\\"id\\\"] = events[\\\"LaunchTemplateId\\\"]\\n    if events[\\\"LaunchTemplateName\\\"]:\\n        requestJson = defineJsonField(\\\"launchTemplate\\\", requestJson)\\n        requestJson[\\\"launchTemplate\\\"][\\\"name\\\"] = events[\\\"LaunchTemplateName\\\"]\\n    if events[\\\"LaunchTemplateVersion\\\"]:\\n        requestJson = defineWorkspacePropField(\\\"launchTemplate\\\", requestJson)\\n        requestJson[\\\"launchTemplate\\\"][\\\"version\\\"] = events[\\\"LaunchTemplateVersion\\\"]\\n    try:\\n        response = client_eks.update_nodegroup_version(**requestJson)\\n        if (\\n            response[\\\"update\\\"][\\\"status\\\"] == \\\"InProgress\\\"\\n            or response[\\\"update\\\"][\\\"status\\\"] == \\\"Successful\\\"\\n        ):\\n            updateUUID = response[\\\"update\\\"][\\\"id\\\"]\\n        elif response[\\\"update\\\"][errors][0]:\\n            msg = str([\\\"update\\\"][errors][0][\\\"errorMessage\\\"])\\n            errorCode = str([\\\"update\\\"][errors][0][\\\"errorCode\\\"])\\n            successful = False\\n    except Exception as e:\\n        msg = str(e)\\n        successful = False\\n    if not successful:\\n        raise Exception(\\n            \\\"Unable to update the node group errorCode: '{}', error message: '{}'\\\".format(\\n                errorCode, msg\\n            )\\n        )\\n    return updateUUID\"\n    },\n    \"outputs\" : [ {\n      \"Name\" : \"UpdateUUID\",\n      \"Selector\" : \"$.Payload\",\n      \"Type\" : \"String\"\n    } ]\n  }, {\n    \"name\" : \"verifyUpdate\",\n    \"description\" : \"## Verify Amazon EKS cluster node group Update.\\n\",\n    \"action\" : \"aws:waitForAwsResourceProperty\",\n    \"onFailure\" : \"Abort\",\n    \"timeoutSeconds\" : 900,\n    \"inputs\" : {\n      \"Service\" : \"eks\",\n      \"Api\" : \"DescribeUpdate\",\n      \"name\" : \"{{ ClusterName }}\",\n      \"nodegroupName\" : \"{{ NodeGroupName }}\",\n      \"updateId\" : \"{{ UpdateEKSManagedNodeGroup.UpdateUUID }}\",\n      \"PropertySelector\" : \"$.update.status\",\n      \"DesiredValues\" : [ \"Successful\" ]\n    }\n  } ]\n}",
  "CreatedDate": "2023-02-21T17:08:43.695Z",
  "DisplayName": null,
  "DocumentFormat": {
    "Value": "JSON"
  },
  "DocumentType": {
    "Value": "Automation"
  },
  "DocumentVersion": "1",
  "Name": "AWS-UpdateEKSManagedNodeGroup",
  "Requires": [],
  "ReviewStatus": null,
  "Status": {
    "Value": "Active"
  },
  "StatusInformation": null,
  "VersionName": null,
  "ResponseMetadata": {
    "RequestId": "0fe330ef-3f91-4829-b637-bdab10dae2b7",
    "Metadata": {},
    "ChecksumAlgorithm": 0,
    "ChecksumValidationStatus": 0
  },
  "ContentLength": 17395,
  "HttpStatusCode": 200,
  "LoggedAt": "2023-03-20T07:12:01.1900324+00:00"
}
