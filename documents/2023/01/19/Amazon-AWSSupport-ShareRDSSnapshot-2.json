{
  "AttachmentsContent": [],
  "Content": "{\n  \"schemaVersion\": \"0.3\",\n  \"description\": \"The AWSSupport-ShareRDSSnapshot will allow to automatically perform the operation described here:  https://aws.amazon.com/premiumsupport/knowledge-center/share-encrypted-rds-snapshot-kms-key/. If you have an encrypted snapshot of an Amazon Relational Database Service (Amazon RDS) instance  or cluster that uses the default AWS Key Management Service (AWS KMS) key, you can't share a snapshot that's encrypted with it. You need to copy the snapshot using a customer managed key, and then share the snapshot with the target account. This automation document will perform these steps for you. You can provide a snapshot to be copied and shared with the target account -or- you can provide database instance/cluster id for which the latest snapshot will be shared.\",\n  \"assumeRole\": \"{{ AutomationAssumeRole }}\",\n  \"parameters\": {\n    \"Database\": {\n      \"type\": \"String\",\n      \"description\": \"(Optional) The name of the database instance or cluster to share with the given account. This field is optional if SnapshotName is provided.\",\n      \"default\": \"\",\n      \"allowedPattern\": \"^$|^[A-Za-z0-9]+(-[A-Za-z0-9]+)*$\",\n      \"maxChars\": 63\n    },\n    \"SnapshotName\": {\n      \"type\": \"String\",\n      \"description\": \"(Optional) The name (SnapshotIdentifier) of the manual/system generated database instance/cluster snapshot to share with the given account. This field is optional if Database is provided.\",\n      \"default\": \"\",\n      \"allowedPattern\": \"^$|^[A-Za-z0-9]+(-[A-Za-z0-9]+)*$|^rds:[A-Za-z0-9]+(-[A-Za-z0-9]+)*$\",\n      \"maxChars\": 255\n    },\n    \"KmsKey\": {\n      \"type\": \"String\",\n      \"description\": \"(Optional) ARN of the shared KMS Key. If no key is provided, the automation creates the key as per https://docs.aws.amazon.com/kms/latest/developerguide/key-policy-modifying-external-accounts.html#cross-account-key-policy on the current account with principal target accounts root account\",\n      \"allowedPattern\": \"^$|^arn:aws:kms:[-a-z0-9]*:[0-9]*:key/[-a-z0-9]*$\",\n      \"default\": \"\"\n    },\n    \"AccountIds\": {\n      \"type\": \"StringList\",\n      \"allowedPattern\": \"^[0-9]{12}(,[0-9]{12})*$\",\n      \"description\": \"(Required) Comma-separated list of Account Ids for sharing the Snapshot.\"\n    },\n    \"AutomationAssumeRole\": {\n      \"type\": \"String\",\n      \"description\": \"(Optional) The ARN of the role that allows Automation to perform the actions on your behalf.\",\n      \"allowedPattern\": \"^$|^arn:aws:iam::[0-9]*:role/[/\\\\w+=,.@-]+$\",\n      \"default\": \"\"\n    }\n  },\n  \"mainSteps\": [\n    {\n      \"name\": \"CheckOrCreateKey\",\n      \"onFailure\": \"Abort\",\n      \"isCritical\": true,\n      \"action\": \"aws:executeScript\",\n      \"description\": \"Validate if key is missing from the input parameters\\nand create key with required policy, if needed\\n\",\n      \"inputs\": {\n        \"Runtime\": \"python3.7\",\n        \"Handler\": \"create_key\",\n        \"InputPayload\": {\n          \"account_ids\": \"{{AccountIds}}\",\n          \"account_current\": \"{{global:ACCOUNT_ID}}\",\n          \"kms_key_provided\": \"{{KmsKey}}\",\n          \"automation_id\": \"{{automation:EXECUTION_ID}}\",\n          \"database\": \"{{Database}}\",\n          \"snapshot_name\": \"{{SnapshotName}}\"\n        },\n        \"Script\": \"import json\\nimport boto3\\n\\ndef create_key(event, context):\\n  #validate if snapshot and database both are blank\\n  if event['database'] == \\\"\\\" and event['snapshot_name'] == \\\"\\\":\\n    #nothing to go on, return failure\\n    raise ValueError('Please provide either Database or SnapshotName to start with')\\n\\n  key_created = False\\n  if event['kms_key_provided'] == \\\"\\\":\\n    #key is missing in input parameter - create\\n    #create policy for the key as per sample https://docs.aws.amazon.com/kms/latest/developerguide/key-policy-modifying-external-accounts.html#cross-account-key-policy\\n    samplePolicy = ('{\\\"Id\\\":\\\"key-policy\\\",\\\"Version\\\":\\\"2012-10-17\\\",\\\"Statement\\\":[{\\\"Sid\\\":\\\"Allow Key usage - external account\\\",\\\"Effect\\\":\\\"Allow\\\",'\\n        '\\\"Principal\\\":{\\\"AWS\\\":\\\"arn:aws:iam::123456789012:root\\\"},\\\"Action\\\":[\\\"kms:Encrypt\\\",\\\"kms:Decrypt\\\",\\\"kms:ReEncrypt*\\\",\\\"kms:GenerateDataKey*\\\",\\\"kms:DescribeKey\\\"],\\\"Resource\\\":\\\"*\\\"},{\\\"Sid\\\":\\\"Allow attachment of persistent resources - external account\\\",\\\"Effect\\\":\\\"Allow\\\",'\\n        '\\\"Principal\\\":{\\\"AWS\\\":\\\"arn:aws:iam::123456789012:root\\\"},\\\"Action\\\":[\\\"kms:CreateGrant\\\",\\\"kms:ListGrants\\\",\\\"kms:RevokeGrant\\\"],\\\"Resource\\\":\\\"*\\\",\\\"Condition\\\":{\\\"Bool\\\":{\\\"kms:GrantIsForAWSResource\\\":\\\"true\\\"}}},{\\\"Sid\\\":\\\"Allow administration of the key - local account\\\",\\\"Effect\\\":\\\"Allow\\\",'\\n        '\\\"Principal\\\":{\\\"AWS\\\":\\\"arn:aws:iam::123456789012:root\\\"},\\\"Action\\\":[\\\"kms:Create*\\\",\\\"kms:Describe*\\\",\\\"kms:Enable*\\\",\\\"kms:List*\\\",\\\"kms:Put*\\\",\\\"kms:Update*\\\",\\\"kms:Revoke*\\\",\\\"kms:Disable*\\\",\\\"kms:Get*\\\",\\\"kms:Delete*\\\",\\\"kms:ScheduleKeyDeletion\\\",\\\"kms:CancelKeyDeletion\\\"],\\\"Resource\\\":\\\"*\\\"}]}'\\n    )           \\n    policyTemplate =json.loads(samplePolicy)\\n    policyStatement = policyTemplate['Statement']\\n    \\n    exAccountsInPrincipal = []\\n    homeAccountInPrincipal = \\\"arn:aws:iam::\\\"+ event['account_current'] +\\\":root\\\"\\n    for acc in event['account_ids']:\\n      exAccountsInPrincipal.append(\\\"arn:aws:iam::\\\"+ acc +\\\":root\\\")\\n    \\n    #Update policy admin(local) and usage principals(external)\\n    policyStatement[0]['Principal']['AWS'] = exAccountsInPrincipal\\n    policyStatement[1]['Principal']['AWS'] = exAccountsInPrincipal\\n    policyStatement[2]['Principal']['AWS'] = homeAccountInPrincipal\\n    returnPolicy = json.dumps(policyTemplate, indent=2)\\n\\n    #we have the policy, create key\\n    kms = boto3.client('kms')\\n\\n    tagKey = 'Name'\\n    tagValue = 'AWSSupport-ShareRDSSnapshot: '+ event['automation_id']\\n    resp = kms.create_key(\\n      Policy = returnPolicy,\\n      Description = \\\"Key created for the document AWSSupport-ShareRDSSnapshot Document\\\",\\n      Tags = [\\n        {\\n          'TagKey': tagKey,\\n          'TagValue': tagValue\\n        }\\n      ]\\n    )\\n    returnKey = resp['KeyMetadata']['Arn']\\n    key_created = True\\n  else:\\n    #key is present, using the same\\n    returnKey = event['kms_key_provided']\\n\\n  return {\\n    'key_arn': returnKey,\\n    'key_created': key_created\\n  }\\n\"\n      },\n      \"outputs\": [\n        {\n          \"Name\": \"Key\",\n          \"Selector\": \"$.Payload.key_arn\",\n          \"Type\": \"String\"\n        }\n      ]\n    },\n    {\n      \"name\": \"BranchIfSnapshotProvided\",\n      \"onFailure\": \"step:CleanupKmsKey\",\n      \"isCritical\": true,\n      \"action\": \"aws:branch\",\n      \"inputs\": {\n        \"Choices\": [\n          {\n            \"Not\": {\n              \"Variable\": \"{{SnapshotName}}\",\n              \"StringEquals\": \"\"\n            },\n            \"NextStep\": \"IsDBInstanceSnapshot\"\n          }\n        ],\n        \"Default\": \"IsDBInstance\"\n      }\n    },\n    {\n      \"name\": \"IsDBInstanceSnapshot\",\n      \"onFailure\": \"step:IsDBClusterSnapshot\",\n      \"isCritical\": false,\n      \"nextStep\": \"FormatInstanceSnapshotName\",\n      \"action\": \"aws:executeAwsApi\",\n      \"inputs\": {\n        \"Service\": \"rds\",\n        \"Api\": \"DescribeDBSnapshots\",\n        \"DBSnapshotIdentifier\": \"{{SnapshotName}}\"\n      },\n      \"outputs\": [\n        {\n          \"Name\": \"DBSnapshotIdentifier\",\n          \"Selector\": \"$.DBSnapshots[0].DBSnapshotIdentifier\",\n          \"Type\": \"String\"\n        }\n      ]\n    },\n    {\n      \"name\": \"FormatInstanceSnapshotName\",\n      \"action\": \"aws:executeScript\",\n      \"nextStep\": \"CopyCustomerDBSnapshot\",\n      \"timeoutSeconds\": 45,\n      \"onFailure\": \"step:CleanupKmsKey\",\n      \"isCritical\": true,\n      \"outputs\": [\n        {\n          \"Name\": \"SnapshotName\",\n          \"Selector\": \"$.Payload.snapshot_name\",\n          \"Type\": \"String\"\n        }\n      ],\n      \"inputs\": {\n        \"Runtime\": \"python3.7\",\n        \"Handler\": \"handler\",\n        \"InputPayload\": {\n          \"snapshotId\": \"{{ IsDBInstanceSnapshot.DBSnapshotIdentifier }}\"\n        },\n        \"Script\": \"def handler(events, context):\\n    snapshot_id = events['snapshotId']\\n    #Obtain the snapshot name clean, in case of system generated.\\n    if ':' in snapshot_id:\\n        snapshot_id = snapshot_id.replace(':','-')\\n    return {\\n    'snapshot_name': snapshot_id\\n    }\\n\"\n      }\n    },\n    {\n      \"name\": \"CopyCustomerDBSnapshot\",\n      \"action\": \"aws:executeAwsApi\",\n      \"onFailure\": \"step:CleanupKmsKey\",\n      \"isCritical\": true,\n      \"inputs\": {\n        \"Service\": \"rds\",\n        \"Api\": \"CopyDBSnapshot\",\n        \"SourceDBSnapshotIdentifier\": \"{{ SnapshotName }}\",\n        \"TargetDBSnapshotIdentifier\": \"{{FormatInstanceSnapshotName.SnapshotName}}-{{automation:EXECUTION_ID}}\",\n        \"KmsKeyId\": \"{{CheckOrCreateKey.Key}}\"\n      },\n      \"outputs\": [\n        {\n          \"Name\": \"DBSnapshotIdentifier\",\n          \"Selector\": \"$.DBSnapshot.DBSnapshotIdentifier\",\n          \"Type\": \"String\"\n        }\n      ]\n    },\n    {\n      \"name\": \"WaitForAvailableStateCustomerDBSnapshot\",\n      \"action\": \"aws:waitForAwsResourceProperty\",\n      \"maxAttempts\": 10,\n      \"timeoutSeconds\": 600,\n      \"onFailure\": \"step:CleanupKmsKey\",\n      \"isCritical\": true,\n      \"inputs\": {\n        \"Service\": \"rds\",\n        \"Api\": \"DescribeDBSnapshots\",\n        \"DBSnapshotIdentifier\": \"{{CopyCustomerDBSnapshot.DBSnapshotIdentifier}}\",\n        \"PropertySelector\": \"$.DBSnapshots[0].Status\",\n        \"DesiredValues\": [\n          \"available\"\n        ]\n      }\n    },\n    {\n      \"name\": \"ShareCustomerDBSnapshot\",\n      \"action\": \"aws:executeAwsApi\",\n      \"inputs\": {\n        \"Service\": \"rds\",\n        \"Api\": \"ModifyDBSnapshotAttribute\",\n        \"DBSnapshotIdentifier\": \"{{CopyCustomerDBSnapshot.DBSnapshotIdentifier}}\",\n        \"AttributeName\": \"restore\",\n        \"ValuesToAdd\": \"{{ AccountIds }}\"\n      },\n      \"isEnd\": true\n    },\n    {\n      \"name\": \"IsDBClusterSnapshot\",\n      \"onFailure\": \"step:CleanupKmsKey\",\n      \"isCritical\": true,\n      \"action\": \"aws:executeAwsApi\",\n      \"inputs\": {\n        \"Service\": \"rds\",\n        \"Api\": \"DescribeDBClusterSnapshots\",\n        \"DBClusterSnapshotIdentifier\": \"{{ SnapshotName }}\"\n      },\n      \"nextStep\": \"FormatClusterSnapshotName\",\n      \"outputs\": [\n        {\n          \"Name\": \"DBClusterSnapshotIdentifier\",\n          \"Selector\": \"$.DBClusterSnapshots[0].DBClusterSnapshotIdentifier\",\n          \"Type\": \"String\"\n        }\n      ]\n    },\n    {\n      \"name\": \"FormatClusterSnapshotName\",\n      \"action\": \"aws:executeScript\",\n      \"nextStep\": \"CopyCustomerDBClusterSnapshot\",\n      \"timeoutSeconds\": 45,\n      \"onFailure\": \"step:CleanupKmsKey\",\n      \"isCritical\": true,\n      \"outputs\": [\n        {\n          \"Name\": \"SnapshotName\",\n          \"Selector\": \"$.Payload.snapshot_name\",\n          \"Type\": \"String\"\n        }\n      ],\n      \"inputs\": {\n        \"Runtime\": \"python3.7\",\n        \"Handler\": \"handler\",\n        \"InputPayload\": {\n          \"snapshotId\": \"{{ IsDBClusterSnapshot.DBClusterSnapshotIdentifier }}\"\n        },\n        \"Script\": \"def handler(events, context):\\n  snapshot_id = events['snapshotId']\\n  #Obtain the snapshot name clean, in case of system generated.\\n  if ':' in snapshot_id:\\n    snapshot_id = snapshot_id.replace(':','-')\\n  return {'snapshot_name': snapshot_id}\\n\"\n      }\n    },\n    {\n      \"name\": \"CopyCustomerDBClusterSnapshot\",\n      \"action\": \"aws:executeAwsApi\",\n      \"onFailure\": \"step:CleanupKmsKey\",\n      \"isCritical\": true,\n      \"inputs\": {\n        \"Service\": \"rds\",\n        \"Api\": \"CopyDBClusterSnapshot\",\n        \"SourceDBClusterSnapshotIdentifier\": \"{{ SnapshotName }}\",\n        \"TargetDBClusterSnapshotIdentifier\": \"{{FormatClusterSnapshotName.SnapshotName}}-{{automation:EXECUTION_ID}}\",\n        \"KmsKeyId\": \"{{CheckOrCreateKey.Key}}\"\n      },\n      \"outputs\": [\n        {\n          \"Name\": \"DBClusterSnapshotIdentifier\",\n          \"Selector\": \"$.DBClusterSnapshot.DBClusterSnapshotIdentifier\",\n          \"Type\": \"String\"\n        }\n      ]\n    },\n    {\n      \"name\": \"WaitForAvailableStateCustomerDBClusterSnapshot\",\n      \"action\": \"aws:waitForAwsResourceProperty\",\n      \"maxAttempts\": 10,\n      \"timeoutSeconds\": 600,\n      \"onFailure\": \"step:CleanupKmsKey\",\n      \"isCritical\": true,\n      \"inputs\": {\n        \"Service\": \"rds\",\n        \"Api\": \"DescribeDBClusterSnapshots\",\n        \"DBClusterSnapshotIdentifier\": \"{{CopyCustomerDBClusterSnapshot.DBClusterSnapshotIdentifier}}\",\n        \"PropertySelector\": \"$.DBClusterSnapshots[0].Status\",\n        \"DesiredValues\": [\n          \"available\"\n        ]\n      }\n    },\n    {\n      \"name\": \"ShareCustomerDBClusterSnapshot\",\n      \"action\": \"aws:executeAwsApi\",\n      \"inputs\": {\n        \"Service\": \"rds\",\n        \"Api\": \"ModifyDBClusterSnapshotAttribute\",\n        \"DBClusterSnapshotIdentifier\": \"{{CopyCustomerDBClusterSnapshot.DBClusterSnapshotIdentifier}}\",\n        \"AttributeName\": \"restore\",\n        \"ValuesToAdd\": \"{{ AccountIds }}\"\n      },\n      \"isEnd\": true\n    },\n    {\n      \"name\": \"IsDBInstance\",\n      \"onFailure\": \"step:IsDBCluster\",\n      \"isCritical\": false,\n      \"action\": \"aws:executeAwsApi\",\n      \"inputs\": {\n        \"Service\": \"rds\",\n        \"Api\": \"DescribeDBInstances\",\n        \"DBInstanceIdentifier\": \"{{Database}}\"\n      },\n      \"nextStep\": \"DBSnapshots\"\n    },\n    {\n      \"name\": \"IsDBCluster\",\n      \"onFailure\": \"step:CleanupKmsKey\",\n      \"isCritical\": true,\n      \"action\": \"aws:executeAwsApi\",\n      \"inputs\": {\n        \"Service\": \"rds\",\n        \"Api\": \"DescribeDBClusters\",\n        \"DBClusterIdentifier\": \"{{Database}}\"\n      },\n      \"nextStep\": \"DBClusterSnapshots\"\n    },\n    {\n      \"name\": \"DBSnapshots\",\n      \"onFailure\": \"step:CleanupKmsKey\",\n      \"isCritical\": true,\n      \"action\": \"aws:executeAwsApi\",\n      \"inputs\": {\n        \"Service\": \"rds\",\n        \"Api\": \"DescribeDBSnapshots\",\n        \"DBInstanceIdentifier\": \"{{Database}}\"\n      },\n      \"outputs\": [\n        {\n          \"Name\": \"DBSnapshots\",\n          \"Selector\": \"$.DBSnapshots\",\n          \"Type\": \"MapList\"\n        }\n      ]\n    },\n    {\n      \"name\": \"LatestDBSnapshot\",\n      \"action\": \"aws:executeScript\",\n      \"timeoutSeconds\": 45,\n      \"onFailure\": \"step:CleanupKmsKey\",\n      \"isCritical\": true,\n      \"inputs\": {\n        \"Runtime\": \"python3.7\",\n        \"Handler\": \"lambda_handler\",\n        \"InputPayload\": {\n          \"snapshots\": \"{{ DBSnapshots.DBSnapshots }}\"\n        },\n        \"Script\": \"def lambda_handler(events, context):\\n  snapshots = events['snapshots']\\n  return {'message': sorted(snapshots, key = lambda i: i['SnapshotCreateTime'], reverse=True)[0]['DBSnapshotIdentifier']}\\n\"\n      },\n      \"outputs\": [\n        {\n          \"Name\": \"SnapshotIdentifier\",\n          \"Selector\": \"$.Payload.message\",\n          \"Type\": \"String\"\n        }\n      ]\n    },\n    {\n      \"name\": \"CopyDBSnapshot\",\n      \"action\": \"aws:executeAwsApi\",\n      \"onFailure\": \"step:CleanupKmsKey\",\n      \"isCritical\": true,\n      \"inputs\": {\n        \"Service\": \"rds\",\n        \"Api\": \"CopyDBSnapshot\",\n        \"SourceDBSnapshotIdentifier\": \"{{ LatestDBSnapshot.SnapshotIdentifier }}\",\n        \"TargetDBSnapshotIdentifier\": \"{{Database}}-{{automation:EXECUTION_ID}}\",\n        \"KmsKeyId\": \"{{CheckOrCreateKey.Key}}\"\n      },\n      \"outputs\": [\n        {\n          \"Name\": \"DBSnapshotIdentifier\",\n          \"Selector\": \"$.DBSnapshot.DBSnapshotIdentifier\",\n          \"Type\": \"String\"\n        }\n      ]\n    },\n    {\n      \"name\": \"WaitForAvailableStateDBSnapshot\",\n      \"action\": \"aws:waitForAwsResourceProperty\",\n      \"maxAttempts\": 10,\n      \"timeoutSeconds\": 600,\n      \"onFailure\": \"step:CleanupKmsKey\",\n      \"isCritical\": true,\n      \"inputs\": {\n        \"Service\": \"rds\",\n        \"Api\": \"DescribeDBSnapshots\",\n        \"DBSnapshotIdentifier\": \"{{CopyDBSnapshot.DBSnapshotIdentifier}}\",\n        \"PropertySelector\": \"$.DBSnapshots[0].Status\",\n        \"DesiredValues\": [\n          \"available\"\n        ]\n      }\n    },\n    {\n      \"name\": \"ShareDBSnapshot\",\n      \"action\": \"aws:executeAwsApi\",\n      \"inputs\": {\n        \"Service\": \"rds\",\n        \"Api\": \"ModifyDBSnapshotAttribute\",\n        \"DBSnapshotIdentifier\": \"{{CopyDBSnapshot.DBSnapshotIdentifier}}\",\n        \"AttributeName\": \"restore\",\n        \"ValuesToAdd\": \"{{ AccountIds }}\"\n      },\n      \"isEnd\": true\n    },\n    {\n      \"name\": \"DBClusterSnapshots\",\n      \"onFailure\": \"step:CleanupKmsKey\",\n      \"isCritical\": true,\n      \"action\": \"aws:executeAwsApi\",\n      \"inputs\": {\n        \"Service\": \"rds\",\n        \"Api\": \"DescribeDBClusterSnapshots\",\n        \"DBClusterIdentifier\": \"{{Database}}\"\n      },\n      \"outputs\": [\n        {\n          \"Name\": \"DBClusterSnapshots\",\n          \"Selector\": \"$.DBClusterSnapshots\",\n          \"Type\": \"MapList\"\n        }\n      ]\n    },\n    {\n      \"name\": \"LatestDBClusterSnapshot\",\n      \"action\": \"aws:executeScript\",\n      \"timeoutSeconds\": 45,\n      \"onFailure\": \"step:CleanupKmsKey\",\n      \"isCritical\": true,\n      \"inputs\": {\n        \"Runtime\": \"python3.7\",\n        \"Handler\": \"lambda_handler\",\n        \"InputPayload\": {\n          \"snapshots\": \"{{ DBClusterSnapshots.DBClusterSnapshots }}\"\n        },\n        \"Script\": \"def lambda_handler(events, context):\\n  snapshots = events['snapshots']\\n  return {'message': sorted(snapshots, key = lambda i: i['SnapshotCreateTime'], reverse=True)[0]['DBClusterSnapshotIdentifier']}\\n\"\n      },\n      \"outputs\": [\n        {\n          \"Name\": \"SnapshotIdentifier\",\n          \"Selector\": \"$.Payload.message\",\n          \"Type\": \"String\"\n        }\n      ]\n    },\n    {\n      \"name\": \"CopyDBClusterSnapshot\",\n      \"action\": \"aws:executeAwsApi\",\n      \"onFailure\": \"step:CleanupKmsKey\",\n      \"isCritical\": true,\n      \"inputs\": {\n        \"Service\": \"rds\",\n        \"Api\": \"CopyDBClusterSnapshot\",\n        \"SourceDBClusterSnapshotIdentifier\": \"{{ LatestDBClusterSnapshot.SnapshotIdentifier }}\",\n        \"TargetDBClusterSnapshotIdentifier\": \"{{Database}}-{{automation:EXECUTION_ID}}\",\n        \"KmsKeyId\": \"{{CheckOrCreateKey.Key}}\"\n      },\n      \"outputs\": [\n        {\n          \"Name\": \"DBClusterSnapshotIdentifier\",\n          \"Selector\": \"$.DBClusterSnapshot.DBClusterSnapshotIdentifier\",\n          \"Type\": \"String\"\n        }\n      ]\n    },\n    {\n      \"name\": \"WaitForAvailableStateDBClusterSnapshot\",\n      \"action\": \"aws:waitForAwsResourceProperty\",\n      \"maxAttempts\": 10,\n      \"timeoutSeconds\": 600,\n      \"onFailure\": \"step:CleanupKmsKey\",\n      \"isCritical\": true,\n      \"inputs\": {\n        \"Service\": \"rds\",\n        \"Api\": \"DescribeDBClusterSnapshots\",\n        \"DBClusterSnapshotIdentifier\": \"{{CopyDBClusterSnapshot.DBClusterSnapshotIdentifier}}\",\n        \"PropertySelector\": \"$.DBClusterSnapshots[0].Status\",\n        \"DesiredValues\": [\n          \"available\"\n        ]\n      }\n    },\n    {\n      \"name\": \"ShareDBClusterSnapshot\",\n      \"action\": \"aws:executeAwsApi\",\n      \"inputs\": {\n        \"Service\": \"rds\",\n        \"Api\": \"ModifyDBClusterSnapshotAttribute\",\n        \"DBClusterSnapshotIdentifier\": \"{{CopyDBClusterSnapshot.DBClusterSnapshotIdentifier}}\",\n        \"AttributeName\": \"restore\",\n        \"ValuesToAdd\": \"{{ AccountIds }}\"\n      },\n      \"isEnd\": true\n    },\n    {\n      \"name\": \"CleanupKmsKey\",\n      \"action\": \"aws:executeScript\",\n      \"description\": \"Remove the key if created via this automation execution\\nThis step schedules for deletion of the key\\nThe pending window for deletion is 30 days\\n\",\n      \"inputs\": {\n        \"Runtime\": \"python3.7\",\n        \"Handler\": \"remove_key\",\n        \"InputPayload\": {\n          \"kms_key_provided\": \"{{KmsKey}}\",\n          \"kms_key_created\": \"{{CheckOrCreateKey.Key}}\"\n        },\n        \"Script\": \"import boto3\\n\\ndef remove_key(event, context):\\n  if event['kms_key_provided'] == \\\"\\\":\\n    kms = boto3.client('kms')\\n\\n    resp = kms.schedule_key_deletion(\\n      KeyId = event['kms_key_created']\\n    )\\n\\n    return {\\n      'message': \\\"The key {} is scheduled to delete on {}\\\".format(resp['KeyId'],resp['DeletionDate']),\\n      'scheduled_for_deletion': True\\n    }\\n  else:\\n    return {\\n      'message': \\\"The key {} is pre-existing, no actions taken for the key.\\\".format(event['kms_key_provided']),\\n      'scheduled_for_deletion': False\\n    }\\n\"\n      },\n      \"outputs\": [\n        {\n          \"Name\": \"CleanupMessage\",\n          \"Selector\": \"$.Payload.message\",\n          \"Type\": \"String\"\n        }\n      ],\n      \"isEnd\": true,\n      \"isCritical\": true\n    }\n  ]\n}",
  "CreatedDate": "2020-09-21T18:40:48.291Z",
  "DisplayName": null,
  "DocumentFormat": {
    "Value": "JSON"
  },
  "DocumentType": {
    "Value": "Automation"
  },
  "DocumentVersion": "2",
  "Name": "AWSSupport-ShareRDSSnapshot",
  "Requires": [],
  "ReviewStatus": null,
  "Status": {
    "Value": "Active"
  },
  "StatusInformation": null,
  "VersionName": null,
  "ResponseMetadata": {
    "RequestId": "bd0bfca0-5f41-4553-8b50-d0d778ba726d",
    "Metadata": {},
    "ChecksumAlgorithm": 0,
    "ChecksumValidationStatus": 0
  },
  "ContentLength": 22530,
  "HttpStatusCode": 200,
  "LoggedAt": "2023-01-19T07:12:26.6140498+00:00"
}
