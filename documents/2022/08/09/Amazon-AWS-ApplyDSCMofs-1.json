{
  "AttachmentsContent": [],
  "Content": "{\n  \"schemaVersion\": \"2.2\",\n  \"description\": \"SSM Document to apply one or more DSC MOFs\",\n  \"parameters\": {\n    \"MofsToApply\": {\n      \"type\": \"String\",\n      \"description\": \"A comma seperated list of MOF files to apply. Files can be from S3 (e.g. s3:bucketName:fileKey or s3:bucketRegion:bucketName:fileKey), HTTP/S (e.g. https://mydomain.com/MyMof.mof) or File System (e.g. \\\\\\\\MyServer\\\\MyShare\\\\MyMof.mof)\",\n      \"default\": \"https://s3-us-west-1.amazonaws.com/aws-ssm-us-west-1/statemanagerdocumentspayload/AWS-ApplyDSCMofs/HelloWorld.mof\",\n      \"allowedPattern\": \"[a-zA-Z0-9\\\\:\\\\-_/\\\\.,\\\\\\\\]+\"\n    },\n    \"ServicePath\": {\n      \"type\": \"String\",\n      \"description\": \"The prefix used when writing reports and status to S3.\",\n      \"default\": \"default\",\n      \"allowedPattern\": \"[a-zA-Z0-9\\\\-_/\\\\.]+\"\n    },\n    \"MofOperationMode\": {\n      \"type\": \"String\",\n      \"description\": \"The mode to use when applying the MOFs, either 'Apply' (will correct non-compliant resources) or 'ReportOnly' (will not correct non-compliant resources).\",\n      \"default\": \"Apply\",\n      \"allowedValues\": [\n        \"Apply\",\n        \"ReportOnly\"\n      ]\n    },\n    \"ReportBucketName\": {\n      \"type\": \"String\",\n      \"description\": \"(Optional) The name of the S3 bucket to write compliance reports to. This is the bucket that the JSON formatted reports will be saved in, using the ServicePath as the key prefix. This should be in the format bucketregion:bucketname e.g. us-west-2:mybucket\",\n      \"default\": \"\",\n      \"allowedPattern\": \"[a-z0-9\\\\-_/\\\\.\\\\:]*\"\n    },\n    \"StatusBucketName\": {\n      \"type\": \"String\",\n      \"description\": \"(Optional) The name of the S3 bucket to write status reports to. These are singleton summaries of the most recent compliance run of an instance. It should be in the format bucketregion:bucketname e.g. us-west-2:mybucket\",\n      \"default\": \"\",\n      \"allowedPattern\": \"[a-z0-9\\\\-_/\\\\.\\\\:]*\"\n    },\n    \"ModuleSourceBucketName\": {\n      \"type\": \"String\",\n      \"description\": \"(Optional) The name of the S3 bucket containing module files. If no bucket is to be used, specify 'NONE' and ensure the 'AllowPSGalleryModuleSource' parameter is set to 'True'. It should be in the format bucketregion:bucketname e.g. us-west-2:mybucket\",\n      \"default\": \"NONE\",\n      \"allowedPattern\": \"(NONE)|[a-z0-9\\\\-_/\\\\.\\\\:]+\"\n    },\n    \"AllowPSGalleryModuleSource\": {\n      \"type\": \"String\",\n      \"description\": \"(Optional) True if modules can be downloaded from PSGallery. If this is false, the 'ModuleSourceBucketName' parameter should be used.\",\n      \"default\": \"True\",\n      \"allowedValues\": [\n        \"True\",\n        \"False\"\n      ]\n    },\n    \"ProxyUri\": {\n      \"type\": \"String\",\n      \"description\": \"(Optional) The Uri of a proxy server to use\",\n      \"default\": \"\",\n      \"allowedPattern\": \"[a-zA-Z0-9\\\\:\\\\-_/\\\\.]*\"\n    },\n    \"RebootBehavior\": {\n      \"type\": \"String\",\n      \"description\": \"(Optional) The reboot behavior that the script will have should it need to reboot the machine. Default is 'AfterMof'\",\n      \"default\": \"AfterMof\",\n      \"allowedValues\": [\n        \"AfterMof\",\n        \"Immediately\",\n        \"Never\"\n      ]\n    },\n    \"UseComputerNameForReporting\": {\n      \"type\": \"String\",\n      \"description\": \"(Optional) Use the ComputerName for reporting instead of the Instance Id. Default is 'False'\",\n      \"default\": \"False\",\n      \"allowedValues\": [\n        \"True\",\n        \"False\"\n      ]\n    },\n    \"EnableVerboseLogging\": {\n      \"type\": \"String\",\n      \"description\": \"(Optional) Enables Verbose logging, useful when deploying MOFs for the first time. Make sure you have lifecycle policies enabled on your logging bucket if you use this all the time.\",\n      \"default\": \"False\",\n      \"allowedValues\": [\n        \"True\",\n        \"False\"\n      ]\n    },\n    \"EnableDebugLogging\": {\n      \"type\": \"String\",\n      \"description\": \"(Optional) Enables Debug logging, useful when troubleshooting a failing MOF. Don't use in day to day operation.\",\n      \"default\": \"False\",\n      \"allowedValues\": [\n        \"True\",\n        \"False\"\n      ]\n    },\n    \"ComplianceType\": {\n      \"type\": \"String\",\n      \"description\": \"(Optional) The compliance type to use when reporting compliance. Default is 'Custom:DSC'. Each association should have a different ComplianceType value.\",\n      \"default\": \"Custom:DSC\",\n      \"allowedPattern\": \"Custom\\\\:[a-zA-Z0-9\\\\-_\\\\.]+\"\n    },\n    \"PreRebootScript\": {\n      \"type\": \"String\",\n      \"description\": \"(Optional) A script to execute prior to the instance rebooting if the configuration has indicated that a reboot is necessary. Your script must be a single line, but can be separated by semi-colons.\",\n      \"default\": \"\",\n      \"allowedPattern\": \".*\"\n    }\n  },\n  \"mainSteps\": [\n    {\n      \"action\": \"aws:runPowerShellScript\",\n      \"name\": \"RunPowerShell\",\n      \"inputs\": {\n        \"timeoutSeconds\": 10800,\n        \"runCommand\": [\n          \"##################################################################################\",\n          \"# License\",\n          \"##################################################################################\",\n          \"\",\n          \"# This Document is protected under the Amazon Software License.\",\n          \"# https://aws.amazon.com/asl/\",\n          \"\",\n          \"##################################################################################\",\n          \"# Basic environment validation\",\n          \"##################################################################################\",\n          \"\",\n          \"if (-not $env:SSM_DOCUMENT_NAME) {\",\n          \"    [Environment]::SetEnvironmentVariable('SSM_DOCUMENT_NAME', 'AWS-ApplyDSCMofs')\",\n          \"}\",\n          \"#Requires -Version 5.1\",\n          \"#Requires -Module PackageManagement,PowerShellGet\",\n          \"if ($env:AWS_SSM_INSTANCE_ID -and $env:AWS_SSM_INSTANCE_ID.StartsWith('mi-')) {\",\n          \"    [Environment]::SetEnvironmentVariable('AWS_REGION', $env:AWS_SSM_REGION_NAME)\",\n          \"}\",\n          \"\",\n          \"\",\n          \"##################################################################################\",\n          \"# Network Configuration\",\n          \"##################################################################################\",\n          \"\",\n          \"if (-not [Net.ServicePointManager]::SecurityProtocol.HasFlag([Net.SecurityProtocolType]::Tls12)) {\",\n          \"    [Net.ServicePointManager]::SecurityProtocol = ([Net.ServicePointManager]::SecurityProtocol + [Net.SecurityProtocolType]::Tls12)\",\n          \"}\",\n          \"$global:ProxyUri = '{{ProxyUri}}'\",\n          \"\",\n          \"##################################################################################\",\n          \"# Error handler\",\n          \"##################################################################################\",\n          \"\",\n          \"$ErrorActionPreference = 'Stop'\",\n          \"$global:stackt = New-Object 'System.Collections.Generic.Stack[string]'\",\n          \"\",\n          \"trap\",\n          \"{\",\n          \"    $separator = '##################################################################'\",\n          \"    $err = New-Object System.Text.StringBuilder([Environment]::NewLine)\",\n          \"    [Void]$err.AppendLine($separator)\",\n          \"    [Void]$err.AppendLine('# Error Message')\",\n          \"    [Void]$err.AppendLine($separator)\",\n          \"    [Void]$err.AppendFormat('{0} (line {1}){2}', $_.Exception.Message, $_.InvocationInfo.ScriptLineNumber, [Environment]::NewLine)\",\n          \"    [Void]$err.AppendLine($separator)\",\n          \"    [Void]$err.AppendLine('# Failing command')\",\n          \"    [Void]$err.AppendLine($separator)\",\n          \"    [Void]$err.AppendLine($_.InvocationInfo.Line.Trim())\",\n          \"    [Void]$err.AppendLine($separator)\",\n          \"    [Void]$err.AppendLine('# Base Exception')\",\n          \"    [Void]$err.AppendLine($separator)\",\n          \"    [Void]$err.AppendLine($_.Exception.GetBaseException())\",\n          \"    [Void]$err.AppendLine($separator)\",\n          \"\",\n          \"    if ($global:stackt.Count -gt 0)\",\n          \"    {\",\n          \"        [Void]$err.AppendLine('# Script stack trace')\",\n          \"        [Void]$err.AppendLine($separator)\",\n          \"        [Void]$err.AppendLine(([String]::Join([Environment]::NewLine, $global:stackt)))\",\n          \"        [Void]$err.AppendLine($separator)\",\n          \"    }\",\n          \"\",\n          \"    [Void]$err.AppendLine('# PSGarbage')\",\n          \"    [Void]$err.AppendLine($separator)\",\n          \"    Write-Error $err.ToString() -ErrorAction Continue\",\n          \"    $exitCode = $_.InvocationInfo.ScriptLineNumber\",\n          \"    if ($null -eq $exitCode -or $exitCode -eq 0) { $exitCode = 1 }\",\n          \"\",\n          \"    if ($global:ShouldPostMetrics)\",\n          \"    {\",\n          \"        PostDocumentMetric -DocumentName $env:SSM_DOCUMENT_NAME -ExitCode $exitCode\",\n          \"    }\",\n          \"\",\n          \"    if ($env:SSMDocumentLogFileName)\",\n          \"    {\",\n          \"        $err.ToString() | Add-Content -Path $env:SSMDocumentLogFileName -Force -EA SilentlyContinue\",\n          \"    }\",\n          \"\",\n          \"    \\\"Exiting with code '$exitCode'\\\"\",\n          \"    [Environment]::Exit($exitCode)\",\n          \"}\",\n          \"\",\n          \"##################################################################################\",\n          \"# Logging functions\",\n          \"##################################################################################\",\n          \"\",\n          \"# If the global variable for enabling verbose logging is set to false, each function will return immediately.\",\n          \"# Verbose logging can be a little intense for large documents, so this option may be desirable to reduce S3 storage costs.\",\n          \"\",\n          \"Function LogFunction\",\n          \"{\",\n          \"    [CmdletBinding()]\",\n          \"    param\",\n          \"    (\",\n          \"        [System.Management.Automation.InvocationInfo]$Info,\",\n          \"        [ValidateSet('Start','End')]\",\n          \"        [String]$Stage,\",\n          \"        [Switch]$DebugOnly\",\n          \"    )\",\n          \"    \",\n          \"    if ($false -eq $global:EnableVerboseLogging) { return }\",\n          \"\",\n          \"    switch ($Stage)\",\n          \"    {\",\n          \"        'Start' {\",\n          \"            $sb = New-Object System.Text.StringBuilder\",\n          \"            [Void]$sb.AppendFormat(' from Function: {0} (called from line {1})', $Info.MyCommand.Name.Trim(), $Info.ScriptLineNumber)\",\n          \"            if ($Info.BoundParameters.Count -gt 0)\",\n          \"            {\",\n          \"                [Void]$sb.AppendFormat(' with params: {0}', ($Info.BoundParameters | ConvertTo-Json -Depth 4 -Compress))\",\n          \"            }\",\n          \"\",\n          \"            $global:stackt.Push($sb.ToString())\",\n          \"            $spaces = ''.PadRight($global:stackt.Count, ' ')\",\n          \"            $msg = '[{0:yyyy-MM-dd HH:mm:ss.fff}]{1}Starting function {2}' -f [DateTime]::Now, $spaces, $sb.ToString().Substring(16)\",\n          \"            if ($DebugOnly) { Write-Debug $msg } else { Write-Verbose $msg }\",\n          \"        }\",\n          \"        'End' {\",\n          \"            [Void]$global:stackt.Pop()\",\n          \"            $spaces = ''.PadRight($global:stackt.Count, ' ')\",\n          \"            $msg = '[{0:yyyy-MM-dd HH:mm:ss.fff}] {1}Ending function {2}' -f [DateTime]::Now, $spaces, $Info.MyCommand\",\n          \"            if ($DebugOnly) { Write-Debug $msg } else { Write-Verbose $msg }\",\n          \"        }\",\n          \"    }\",\n          \"\",\n          \"    if ($env:SSMDocumentLogFileName)\",\n          \"    {\",\n          \"        $msg | Add-Content -Path $env:SSMDocumentLogFileName -Force -EA SilentlyContinue\",\n          \"    }\",\n          \"}\",\n          \"\",\n          \"Function LogMessage\",\n          \"{\",\n          \"    [CmdletBinding()]\",\n          \"    param\",\n          \"    (\",\n          \"        [String]$Message,\",\n          \"        [Switch]$DebugOnly\",\n          \"    )\",\n          \"\",\n          \"    if ($false -eq $global:EnableVerboseLogging) { return }\",\n          \"\",\n          \"    $spaces = ''.PadRight($global:stackt.Count, ' ')\",\n          \"    $msg = '[{0:yyyy-MM-dd HH:mm:ss.fff}] {1}{2}' -f [DateTime]::Now, $spaces, $Message\",\n          \"    if ($DebugOnly) { Write-Debug $Message } else { Write-Verbose $msg -Verbose }\",\n          \"\",\n          \"    if ($env:SSMDocumentLogFileName)\",\n          \"    {\",\n          \"        $msg | Add-Content -Path $env:SSMDocumentLogFileName -Force -EA SilentlyContinue\",\n          \"    }\",\n          \"}\",\n          \"\",\n          \"##################################################################################\",\n          \"# Document variables\",\n          \"##################################################################################\",\n          \"\",\n          \"$scriptPath = \\\"$env:TMP\\\\AWS-ApplyDSCMofs-20201118.ps1\\\"\",\n          \"$bucketName = 'aws-ssm-{0}' -f $env:AWS_SSM_REGION_NAME\",\n          \"$key = 'statemanagerdocumentspayload/AWS-ApplyDSCMofs/AWS-ApplyDSCMofs-20201118.ps1'\",\n          \"$functionsHash = '924b0ba31b92e62194de9e5c84018e90da62b61da23096be1f52a7f109a4782e'\",\n          \"if ($env:AWS_SSM_REGION_NAME.StartsWith(\\\"cn-\\\")) {\",\n          \"    $uri = [Uri]\\\"https://s3.$env:AWS_SSM_REGION_NAME.amazonaws.com.cn/$bucketName/$key\\\"\",\n          \"} else {\",\n          \"    $uri = [Uri]\\\"https://$bucketName.s3.$env:AWS_SSM_REGION_NAME.amazonaws.com/$key\\\"\",\n          \"}\",\n          \"##################################################################################\",\n          \"# Download Script Function\",\n          \"##################################################################################\",\n          \"\",\n          \"# NOTE: This library was added to .NET in version 4.5. Any Document that uses this library\",\n          \"# will only run on systems that have .NET 4.5 or greater installed.\",\n          \"# Server 2012 R2 comes with 4.5.1 pre-installed, which is the minimum we will support.\",\n          \"[Void][System.Reflection.Assembly]::LoadWithPartialName('System.Net.Http')\",\n          \"$global:HttpLoaded = $true\",\n          \"\",\n          \"$shouldDownload = $true\",\n          \"if ($functionsHash -and ([IO.File]::Exists($scriptPath)))\",\n          \"{\",\n          \"    $downloadedFileHash = (Get-FileHash -Path $scriptPath -Algorithm SHA256).Hash.ToLower()\",\n          \"    if ($functionsHash -eq $downloadedFileHash)\",\n          \"    {\",\n          \"        $shouldDownload = $false\",\n          \"    }\",\n          \"}\",\n          \"\",\n          \"if ($shouldDownload)\",\n          \"{\",\n          \"    $handler = New-Object System.Net.Http.HttpClientHandler\",\n          \"\",\n          \"    if (-not [String]::IsNullOrWhiteSpace($global:ProxyUri))\",\n          \"    {\",\n          \"        $handler.Proxy = New-Object System.Net.WebProxy($global:ProxyUri, $true)\",\n          \"    }\",\n          \"\",\n          \"    $wc = New-Object System.Net.Http.HttpClient($handler, $true)\",\n          \"\",\n          \"    try\",\n          \"    {\",\n          \"        $request = New-Object System.Net.Http.HttpRequestMessage('Get', $uri)\",\n          \"\",\n          \"        LogMessage \\\"Sending HTTP Get request to '$uri'\\\"\",\n          \"        $response = $wc.SendAsync($request).Result\",\n          \"\",\n          \"        LogMessage ('Received response with status code {0}' -f $response.StatusCode)\",\n          \"        if ($response.StatusCode -eq 'BadRequest')\",\n          \"        {\",\n          \"            $er = $response.Content.ReadAsStringAsync().Result\",\n          \"            throw \\\"Failed to download file: $er\\\"\",\n          \"        }\",\n          \"        elseif ($response.StatusCode -ne 'Ok')\",\n          \"        {\",\n          \"            throw \\\"Received non-success status code '$($response.StatusCode)' when attempting to download file '$uri'.\\\"\",\n          \"        }\",\n          \"        else\",\n          \"        {\",\n          \"            $fs = New-Object System.IO.FileStream($scriptPath, [IO.FileMode]::OpenOrCreate, [IO.FileAccess]::ReadWrite, [IO.FileShare]::Read)\",\n          \"            $response.Content.CopyToAsync($fs).Wait()\",\n          \"        }\",\n          \"    }\",\n          \"    finally\",\n          \"    {\",\n          \"        $wc.Dispose()\",\n          \"        if ($request) { $request.Dispose() }\",\n          \"        if ($response) { $response.Dispose() }\",\n          \"        if ($fs) { $fs.Dispose() }\",\n          \"    }\",\n          \"\",\n          \"    if ($functionsHash)\",\n          \"    {\",\n          \"        $downloadedFileHash = (Get-FileHash -Path $scriptPath -Algorithm SHA256).Hash.ToLower()\",\n          \"        if ($functionsHash -ne $downloadedFileHash)\",\n          \"        {\",\n          \"            throw \\\"Downloaded Functions file hash should have been '$functionsHash', but it was '$downloadedFileHash'. Script will terminate.\\\"\",\n          \"        }\",\n          \"    }\",\n          \"}\",\n          \"\",\n          \"LogMessage 'Importing script functions'\",\n          \". $scriptPath\",\n          \"\",\n          \"##################################################################################\",\n          \"# Start Script\",\n          \"##################################################################################\",\n          \"\",\n          \"# Here we sub all of the script inputs from SSM document parameters.\",\n          \"# Some are set to inputs to the main function (InvokeComplianceRun), while others\",\n          \"# are set to global variables (when they need to be referenced by support functions)\",\n          \"# Any code that references a global variable set here will expect a null variable\",\n          \"# or empty string value as a legit input. This is to prevent null reference\",\n          \"# exceptions in unit tests, and because not all of these inputs MUST have values.\",\n          \"\",\n          \"[Ref]$bool = $false\",\n          \"if ([Boolean]::TryParse('{{AllowPSGalleryModuleSource}}', $bool))\",\n          \"{\",\n          \"    $global:AllowPSGalleryModuleSource = $bool.Value\",\n          \"}\",\n          \"\",\n          \"if ([Boolean]::TryParse('{{UseComputerNameForReporting}}', $bool))\",\n          \"{\",\n          \"    $global:UseComputerNameForReporting = $bool.Value\",\n          \"}\",\n          \"\",\n          \"$global:ModuleSourceBucketName = '{{ModuleSourceBucketName}}'\",\n          \"if ($global:ModuleSourceBucketName -eq 'NONE') { $global:ModuleSourceBucketName = [String]::Empty }\",\n          \"\",\n          \"$global:ProxyUri = '{{ProxyUri}}'\",\n          \"\",\n          \"# Ensure that all of the dependencies of the script are met\",\n          \"EnsureScriptDependencies\",\n          \"\",\n          \"# If a ProxyUri is set, run the Set-AWSProxy so that all of the AWS Cmdlets\",\n          \"# automatically use the specified proxy. Needs to run after EnsureScriptDependencies.\",\n          \"if (-not [String]::IsNullOrWhiteSpace($global:ProxyUri))\",\n          \"{\",\n          \"    $proxy = [Uri]$global:ProxyUri\",\n          \"    Set-AWSProxy -Hostname $proxy.Host -Port $proxy.Port\",\n          \"}\",\n          \"\",\n          \"# Run these AFTER EnsuringScriptDependencies to avoid a TON of garbage messages.\",\n          \"# Enabling DebugLogging will also enable Verbose logging, regardless of the settings.\",\n          \"if ([Boolean]::TryParse('{{EnableDebugLogging}}', $bool) -and $bool.Value)\",\n          \"{\",\n          \"    $global:EnableDebugLogging = $true\",\n          \"    $global:EnableVerboseLogging = $true\",\n          \"    $DebugPreference = 'Continue'\",\n          \"    $VerbosePreference = 'Continue'\",\n          \"    [Environment]::SetEnvironmentVariable('SSMDocumentLogFileName', \\\"$env:ProgramData\\\\SSMDocumentLogs\\\\$env:SSM_DOCUMENT_NAME.txt\\\")\",\n          \"    $null = New-Item -ItemType File -Path $env:SSMDocumentLogFileName -Force\",\n          \"}\",\n          \"elseif ([Boolean]::TryParse('{{EnableVerboseLogging}}', $bool) -and $bool.Value)\",\n          \"{\",\n          \"    $global:EnableVerboseLogging = $true\",\n          \"    $VerbosePreference = 'Continue'\",\n          \"}\",\n          \"\",\n          \"# Since the PreRebootScript parameter will almost certainly have quotes in it, we need to\",\n          \"# inject it inside a multiline variable so that it doesn't cause the document to fail parsing.\",\n          \"$preRebootScript = @'\",\n          \"{{PreRebootScript}}\",\n          \"'@.Trim()\",\n          \"\",\n          \"if (-not [String]::IsNullOrWhiteSpace($preRebootScript))\",\n          \"{\",\n          \"    try\",\n          \"    {\",\n          \"        LogMessage 'Parsing PreRebootScript into ScriptBlock'\",\n          \"        $preRebootScriptBlock = [ScriptBlock]::Create($preRebootScript)\",\n          \"    }\",\n          \"    catch\",\n          \"    {\",\n          \"        throw \\\"Failed to parse PreRebootScript: $_\\\"\",\n          \"    }\",\n          \"}\",\n          \"\",\n          \"$mofsToApply = @('{{MofsToApply}}'.Trim() -split ',\\\\s*')\",\n          \"if ($mofsToApply.Count -eq 1 -and $mofsToApply[0].EndsWith('.instructions'))\",\n          \"{\",\n          \"    $paramObject = Get-Content -Path $mofsToApply[0] | ConvertFrom-Json\",\n          \"    $params = @{}\",\n          \"    foreach ($param in $paramObject.PSObject.Properties)\",\n          \"    {\",\n          \"        $params.Add($param.Name, $param.Value)\",\n          \"    }\",\n          \"}\",\n          \"else\",\n          \"{\",\n          \"    # These variables all must have values, but we've left it to SSM parameter\",\n          \"    # validation to ensure they are set.\",\n          \"    $params = @{\",\n          \"        MofsToApply = $mofsToApply\",\n          \"        MofOperationMode = '{{MofOperationMode}}'\",\n          \"        RebootBehavior = '{{RebootBehavior}}'\",\n          \"        ServicePath = '{{ServicePath}}'\",\n          \"        ReportBucketName = '{{ReportBucketName}}'\",\n          \"        StatusBucketName = '{{StatusBucketName}}'\",\n          \"        ComplianceType = '{{ComplianceType}}'\",\n          \"    }\",\n          \"}\",\n          \"\",\n          \"# Since default values in SSM documents don't apply to invocations triggered by the API,\",\n          \"# we're going to have to sub in default values if they were not supplied.\",\n          \"$defaultValues = @{\",\n          \"    ServicePath = 'default'\",\n          \"    ComplianceType = 'Custom:DSC'\",\n          \"    MofOperationMode = 'Apply'\",\n          \"    RebootBehavior = 'AfterMof'\",\n          \"}\",\n          \"\",\n          \"foreach ($parameterName in $defaultValues.Keys)\",\n          \"{\",\n          \"    if ([String]::IsNullOrWhiteSpace($params[$parameterName]))\",\n          \"    {\",\n          \"        $params[$parameterName] = $defaultValues[$parameterName]\",\n          \"    }\",\n          \"}\",\n          \"\",\n          \"# InvokeComplianceRun will return the number of non-compliant resources, or, if the machine requires a reboot, \",\n          \"# it will return a 3010 code. We want to pass it through so that the SSM agent will reboot the machine and rerun the document.\",\n          \"\",\n          \"# If the script fails due to any other reason it will exit with the line number at which the error occurred (i.e. non-zero).\",\n          \"# This is handled by the global error handler in the Document.\",\n          \"\",\n          \"$exitCode = InvokeComplianceRun @params\",\n          \"if ($exitCode -eq 3010)\",\n          \"{\",\n          \"    LogMessage 'Exit code indicates reboot is required'\",\n          \"\",\n          \"    if ($preRebootScriptBlock)\",\n          \"    {\",\n          \"        # InvokePreRebootScript returns true if machine should reboot,\",\n          \"        # false if the reboot was cancelled within the reboot script.\",\n          \"        # If reboot was cancelled, we will fail the association.\",\n          \"        if (-not (InvokePreRebootScript -ScriptBlock $preRebootScriptBlock))\",\n          \"        {\",\n          \"            [Environment]::Exit(1)\",\n          \"        }\",\n          \"    }\",\n          \"\",\n          \"    [Environment]::Exit(3010)\",\n          \"}\",\n          \"\",\n          \"##################################################################################\",\n          \"# End Script\",\n          \"##################################################################################\"\n        ]\n      }\n    }\n  ]\n}\n",
  "CreatedDate": "2021-05-25T17:38:44.855Z",
  "DisplayName": null,
  "DocumentFormat": {
    "Value": "JSON"
  },
  "DocumentType": {
    "Value": "Command"
  },
  "DocumentVersion": "1",
  "Name": "AWS-ApplyDSCMofs",
  "Requires": [],
  "ReviewStatus": null,
  "Status": {
    "Value": "Active"
  },
  "StatusInformation": null,
  "VersionName": null,
  "ResponseMetadata": {
    "RequestId": "b7944434-2b38-4853-a2e1-8ac56053c8c9",
    "Metadata": {},
    "ChecksumAlgorithm": 0,
    "ChecksumValidationStatus": 0
  },
  "ContentLength": 26129,
  "HttpStatusCode": 200,
  "LoggedAt": "2022-08-09T07:11:58.2598579+00:00"
}
