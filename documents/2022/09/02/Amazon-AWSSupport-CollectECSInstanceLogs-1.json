{
  "AttachmentsContent": [],
  "Content": "{\n  \"description\": \"This document will collect ECS logs from a specified ECS instance and upload it to a specified S3 bucket.\",\n  \"schemaVersion\": \"0.3\",\n  \"assumeRole\": \"{{ AutomationAssumeRole }}\",\n  \"parameters\": {\n    \"ECSInstanceId\": {\n      \"type\": \"String\",\n      \"allowedPattern\": \"^[i|mi]-[a-z0-9]{8,17}$\",\n      \"description\": \"(Required) The ID of the ECS EC2 instance you want to collect logs from.\"\n    },\n    \"LogDestination\": {\n      \"type\": \"String\",\n      \"description\": \"(Optional) The Amazon Simple Storage Service (S3) bucket in your account to upload the logs to. Please make sure the bucket policy does not grant unnecessary read/write permissions to parties that do not need access to the collected logs.\",\n      \"allowedPattern\": \"^$|^(?!(^(([0-9]{1,3}[.]){3}[0-9]{1,3}$)))^((?!xn--)(?!.*-s3alias))[a-z0-9][-.a-z0-9]{1,61}[a-z0-9]$\",\n      \"default\": \"\"\n    },\n    \"AutomationAssumeRole\": {\n      \"type\": \"String\",\n      \"description\": \"(Optional) The ARN of the role that allows Automation to perform the actions on your behalf. If no role is specified, Systems Manager Automation uses the permissions of the user that runs this document.\",\n      \"default\": \"\"\n    }\n  },\n  \"mainSteps\": [\n    {\n      \"name\": \"assertInstanceIsManaged\",\n      \"action\": \"aws:assertAwsResourceProperty\",\n      \"onFailure\": \"Abort\",\n      \"inputs\": {\n        \"Service\": \"ssm\",\n        \"Api\": \"DescribeInstanceInformation\",\n        \"Filters\": [\n          {\n            \"Key\": \"InstanceIds\",\n            \"Values\": [\n              \"{{ ECSInstanceId }}\"\n            ]\n          }\n        ],\n        \"PropertySelector\": \"$.InstanceInformationList[0].PingStatus\",\n        \"DesiredValues\": [\n          \"Online\"\n        ]\n      },\n      \"isCritical\": \"true\",\n      \"nextStep\": \"getInstancePlatform\"\n    },\n    {\n      \"name\": \"getInstancePlatform\",\n      \"action\": \"aws:executeAwsApi\",\n      \"onFailure\": \"Abort\",\n      \"inputs\": {\n        \"Service\": \"ssm\",\n        \"Api\": \"DescribeInstanceInformation\",\n        \"Filters\": [\n          {\n            \"Key\": \"InstanceIds\",\n            \"Values\": [\n              \"{{ECSInstanceId}}\"\n            ]\n          }\n        ]\n      },\n      \"outputs\": [\n        {\n          \"Name\": \"platformType\",\n          \"Selector\": \"$.InstanceInformationList[0].PlatformType\",\n          \"Type\": \"String\"\n        }\n      ],\n      \"isCritical\": \"true\",\n      \"nextStep\": \"verifyInstancePlatform\"\n    },\n    {\n      \"name\": \"verifyInstancePlatform\",\n      \"action\": \"aws:branch\",\n      \"inputs\": {\n        \"Choices\": [\n          {\n            \"NextStep\": \"runLogCollectionScriptOnWindows\",\n            \"Variable\": \"{{getInstancePlatform.platformType}}\",\n            \"StringEquals\": \"Windows\"\n          },\n          {\n            \"NextStep\": \"runLogCollectionScriptOnLinux\",\n            \"Variable\": \"{{getInstancePlatform.platformType}}\",\n            \"StringEquals\": \"Linux\"\n          }\n        ]\n      }\n    },\n    {\n      \"name\": \"runLogCollectionScriptOnLinux\",\n      \"action\": \"aws:runCommand\",\n      \"onFailure\": \"Abort\",\n      \"inputs\": {\n        \"DocumentName\": \"AWS-RunShellScript\",\n        \"InstanceIds\": [\n          \"{{ECSInstanceId}}\"\n        ],\n        \"Parameters\": {\n          \"commands\": [\n            \"#!/usr/bin/env bash\",\n            \"#\",\n            \"# Copyright 2016-2018 Amazon.com, Inc. or its affiliates.\",\n            \"# All Rights Reserved.\",\n            \"#\",\n            \"# Licensed under the Apache License, Version 2.0 (the \\\"License\\\").\",\n            \"# You may not use this file except in compliance with the License.\",\n            \"# A copy of the License is located at\",\n            \"#\",\n            \"#    http://aws.amazon.com/apache2.0/\",\n            \"#\",\n            \"# or in the \\\"license\\\" file accompanying this file.\",\n            \"# This file is distributed on an \\\"AS IS\\\" BASIS, WITHOUT WARRANTIES OR\",\n            \"# CONDITIONS OF ANY KIND, either express or implied. See the License for the\",\n            \"# specific language governing permissions and limitations under the License.\",\n            \"#\",\n            \"#\",\n            \"# - Collects Docker daemon and Amazon ECS Container Agent logs on Amazon Linux,\",\n            \"#   Redhat 7, Debian 8.\",\n            \"# - Collects general operating system logs.\",\n            \"# - For usage information, see --help.\",\n            \"\",\n            \"export LANG=\\\"C\\\"\",\n            \"export LC_ALL=\\\"C\\\"\",\n            \"\",\n            \"# Collection configuration\",\n            \"# collectdir is where all collected informaton is placed under. This\",\n            \"# services as the top level for this script's operation.\",\n            \"readonly collectdir=\\\"/var/log/collectECSlogs_{{ECSInstanceId}}\\\"\",\n            \"readonly collectdirpath=\\\"/var/log/\\\"\",\n            \"readonly logdir=\\\"/var/log/collectECSlogs\\\"\",\n            \"\",\n            \"# Shared check variables\",\n            \"\",\n            \"# info_system is where the checks' data is placed.\",\n            \"info_system=\\\"${collectdir}/system\\\"\",\n            \"# pkgtype is the detected packaging system used on the host (eg: yum, deb)\",\n            \"pkgtype=''  # defined in get_pkgtype\",\n            \"# init_type is the operating system type used for casing check behavior.\",\n            \"init_type=''  # defined in get_init_type\",\n            \"progname='' # defined in parse_options\",\n            \"\",\n            \"# Script run defaults\",\n            \"\",\n            \"mode='brief' # defined in parse_options\",\n            \"\",\n            \"# Common functions\",\n            \"# ---------------------------------------------------------------------------------------\",\n            \"\",\n            \"help() {\",\n            \"  echo \\\"USAGE: ${progname} [--mode=[brief]]\\\"\",\n            \"  echo \\\"       ${progname} --help\\\"\",\n            \"  echo \\\"\\\"\",\n            \"  echo \\\"OPTIONS:\\\"\",\n            \"  echo \\\"     --mode  Sets the desired mode of the script. For more information,\\\"\",\n            \"  echo \\\"             see the MODES section.\\\"\",\n            \"  echo \\\"     --help  Show this help message.\\\"\",\n            \"  echo \\\"\\\"\",\n            \"  echo \\\"MODES:\\\"\",\n            \"  echo \\\"     brief         Gathers basic operating system, Docker daemon, and Amazon\\\"\",\n            \"  echo \\\"                   ECS Container Agent logs. This is the default mode.\\\"\",\n            \"}\",\n            \"\",\n            \"parse_options() {\",\n            \"  local count=\\\"$#\\\"\",\n            \"\",\n            \"  progname=\\\"$0\\\"\",\n            \"\",\n            \"  for i in $(seq \\\"$count\\\"); do\",\n            \"    eval arg=\\\\$\\\"$i\\\"\",\n            \"    # shellcheck disable=SC2154\",\n            \"    param=\\\"$(echo \\\"$arg\\\" | awk -F '=' '{print $1}' | sed -e 's|--||')\\\"\",\n            \"    val=\\\"$(echo \\\"$arg\\\" | awk -F '=' '{print $2}')\\\"\",\n            \"\",\n            \"    case \\\"${param}\\\" in\",\n            \"      mode)\",\n            \"        eval \\\"$param\\\"=\\\"${val}\\\"\",\n            \"        ;;\",\n            \"      help)\",\n            \"        help && exit 0\",\n            \"        ;;\",\n            \"      *)\",\n            \"        echo \\\"Parameter not found: '$param'\\\"\",\n            \"        help && exit 1\",\n            \"        ;;\",\n            \"    esac\",\n            \"  done\",\n            \"}\",\n            \"\",\n            \"ok() {\",\n            \"  echo \\\"ok\\\"\",\n            \"}\",\n            \"\",\n            \"info() {\",\n            \"  echo \\\"$*\\\"\",\n            \"}\",\n            \"\",\n            \"try() {\",\n            \"  local action=$*\",\n            \"  echo -n \\\"Trying to $action ... \\\"\",\n            \"}\",\n            \"\",\n            \"warning() {\",\n            \"  local reason=$*\",\n            \"  echo \\\"warning: $reason\\\"\",\n            \"}\",\n            \"\",\n            \"failed() {\",\n            \"  local reason=$*\",\n            \"  echo \\\"failed: $reason\\\"\",\n            \"}\",\n            \"\",\n            \"die() {\",\n            \"  echo \\\"ERROR: $*\\\"\",\n            \"  exit 1\",\n            \"}\",\n            \"\",\n            \"is_root() {\",\n            \"  try \\\"check if the script is running as root\\\"\",\n            \"\",\n            \"  if [[ \\\"$(id -u)\\\" != \\\"0\\\" ]]; then\",\n            \"    die \\\"this script must be run as root!\\\"\",\n            \"\",\n            \"  fi\",\n            \"\",\n            \"  ok\",\n            \"}\",\n            \"\",\n            \"cleanup() {\",\n            \"  if [[ \\\"${collectdir}\\\" == \\\"/var/log/collectECSlogs_{{ECSInstanceId}}\\\" ]]; then\",\n            \"    rm -rf \\\"$collectdir\\\" >/dev/null 2>&1\",\n            \"  else\",\n            \"    echo -e \\\"Unable to cleanup $collectdir, Please cleanup manually!\\\"\",\n            \"  fi\",\n            \"}\",\n            \"\",\n            \"init() {\",\n            \"  is_root\",\n            \"  get_init_type\",\n            \"  get_pkgtype\",\n            \"}\",\n            \"\",\n            \"collect_brief() {\",\n            \"  init\",\n            \"  is_diskfull\",\n            \"  get_common_logs\",\n            \"  get_kernel_logs\",\n            \"  get_mounts_info\",\n            \"  get_selinux_info\",\n            \"  get_iptables_info\",\n            \"  get_pkglist\",\n            \"  get_system_services\",\n            \"  get_docker_info\",\n            \"  get_docker_containers_info\",\n            \"  get_docker_logs\",\n            \"  get_docker_systemd_config\",\n            \"  get_docker_sysconfig\",\n            \"  get_docker_daemon_json\",\n            \"  get_ecs_agent_logs\",\n            \"  get_ecs_agent_info\",\n            \"  get_open_files\",\n            \"}\",\n            \"\",\n            \"# Routines\",\n            \"# ---------------------------------------------------------------------------------------\",\n            \"\",\n            \"get_init_type() {\",\n            \"  try \\\"collect system information\\\"\",\n            \"\",\n            \"  case \\\"$(cat /proc/1/comm)\\\" in\",\n            \"    systemd)\",\n            \"      init_type=\\\"systemd\\\"\",\n            \"    ;;\",\n            \"    *)\",\n            \"      init_type=\\\"other\\\"\",\n            \"    ;;\",\n            \"  esac\",\n            \"\",\n            \"  ok\",\n            \"}\",\n            \"\",\n            \"get_pkgtype() {\",\n            \"  if [[ -n \\\"$(command -v rpm)\\\" ]]; then\",\n            \"    pkgtype=\\\"rpm\\\"\",\n            \"  elif [[ -n \\\"$(command -v dpkg)\\\" ]]; then\",\n            \"    pkgtype=\\\"dpkg\\\"\",\n            \"  else\",\n            \"    pkgtype=\\\"unknown\\\"\",\n            \"  fi\",\n            \"}\",\n            \"\",\n            \"pack() {\",\n            \"  try \\\"archive gathered log information\\\"\",\n            \"  if [ ! -f $logdir ]; then\",\n            \"    mkdir -p $logdir\",\n            \"  fi\",\n            \"\",\n            \"  local tar_bin\",\n            \"  tar_bin=\\\"$(command -v tar 2>/dev/null)\\\"\",\n            \"  [ -z \\\"${tar_bin}\\\" ] && warning \\\"TAR archiver not found, please install a TAR archiver to create the collection archive. You can still view the logs in the collect folder.\\\"\",\n            \"\",\n            \"  cd \\\"$collectdirpath\\\" || { echo \\\"cd failed.\\\"; exit 1; }\",\n            \"\",\n            \"  ${tar_bin} -cvzf \\\"$logdir\\\"/ecs_{{ECSInstanceId}}_{{automation:EXECUTION_ID}}.tgz collectECSlogs_{{ECSInstanceId}} > /dev/null 2>&1\",\n            \"\",\n            \"  ok\",\n            \"}\",\n            \"\",\n            \"is_diskfull() {\",\n            \"  try \\\"check disk space usage\\\"\",\n            \"\",\n            \"  threshold=70\",\n            \"  i=2\",\n            \"  result=$(df -kh | grep -ve \\\"Filesystem\\\" -ve \\\"loop\\\" | awk '{ print $5 }' | sed 's/%//g')\",\n            \"  exceeded=0\",\n            \"\",\n            \"  for percent in ${result}; do\",\n            \"    if [[ \\\"${percent}\\\" -gt \\\"${threshold}\\\" ]]; then\",\n            \"      partition=$(df -kh | head -$i | tail -1| awk '{print $1}')\",\n            \"      echo\",\n            \"      warning \\\"${partition} is ${percent}% full, please ensure adequate disk space to collect and store the log files.\\\"\",\n            \"      : $((exceeded++))\",\n            \"    fi\",\n            \"    i=$((i+1))\",\n            \"  done\",\n            \"\",\n            \"  if [ \\\"$exceeded\\\" -gt 0 ]; then\",\n            \"    return 1\",\n            \"  else\",\n            \"    ok\",\n            \"  fi\",\n            \"}\",\n            \"\",\n            \"get_mounts_info() {\",\n            \"  try \\\"get mount points and volume information\\\"\",\n            \"\",\n            \"  mkdir -p \\\"$info_system\\\"\",\n            \"  mount > \\\"$info_system\\\"/mounts.txt\",\n            \"  echo \\\"\\\" >> \\\"$info_system\\\"/mounts.txt\",\n            \"  df -h >> \\\"$info_system\\\"/mounts.txt\",\n            \"\",\n            \"  if command -v lvdisplay > /dev/null; then\",\n            \"    lvdisplay > \\\"$info_system\\\"/lvdisplay.txt\",\n            \"    vgdisplay > \\\"$info_system\\\"/vgdisplay.txt\",\n            \"    pvdisplay > \\\"$info_system\\\"/pvdisplay.txt\",\n            \"  fi\",\n            \"\",\n            \"  ok\",\n            \"}\",\n            \"\",\n            \"get_selinux_info() {\",\n            \"  try \\\"check SELinux status\\\"\",\n            \"\",\n            \"  enforced=\\\"$(getenforce 2>/dev/null)\\\"\",\n            \"\",\n            \"  { [ \\\"${pkgtype}\\\" != \\\"rpm\\\" ] || [ -z \\\"${enforced}\\\" ]; } \\\\\",\n            \"    && info \\\"not installed\\\" \\\\\",\n            \"    && return\",\n            \"\",\n            \"  mkdir -p \\\"$info_system\\\"\",\n            \"  echo -e \\\"SELinux mode:\\\\\\\\n    ${enforced}\\\" >  \\\"$info_system\\\"/selinux.txt\",\n            \"\",\n            \"  ok\",\n            \"}\",\n            \"\",\n            \"get_iptables_info() {\",\n            \"  try \\\"get iptables list\\\"\",\n            \"\",\n            \"  mkdir -p \\\"$info_system\\\"\",\n            \"  iptables -nvL -t filter > \\\"$info_system\\\"/iptables-filter.txt\",\n            \"  iptables -nvL -t nat  > \\\"$info_system\\\"/iptables-nat.txt\",\n            \"\",\n            \"  ok\",\n            \"}\",\n            \"\",\n            \"get_open_files() {\",\n            \"  try \\\"get open files list\\\"\",\n            \"\",\n            \"  mkdir -p \\\"$info_system\\\"\",\n            \"  for d in /proc/*/fd; do echo \\\"$d\\\"; find \\\"$d\\\" -maxdepth 1 | wc -l; done > \\\"$info_system\\\"/open-file-counts.txt\",\n            \"  ls -l /proc/*/fd > \\\"$info_system\\\"/open-file-details.txt\",\n            \"\",\n            \"  ok\",\n            \"}\",\n            \"\",\n            \"get_common_logs() {\",\n            \"  try \\\"collect common operating system logs\\\"\",\n            \"\",\n            \"  dstdir=\\\"${info_system}/var_log\\\"\",\n            \"  mkdir -p \\\"$dstdir\\\"\",\n            \"\",\n            \"  for entry in syslog messages; do\",\n            \"    [ -e \\\"/var/log/${entry}\\\" ] && cp -f /var/log/${entry} \\\"$dstdir\\\"/\",\n            \"  done\",\n            \"\",\n            \"  ok\",\n            \"}\",\n            \"\",\n            \"get_kernel_logs() {\",\n            \"  try \\\"collect kernel logs\\\"\",\n            \"\",\n            \"  dstdir=\\\"${info_system}/kernel\\\"\",\n            \"  mkdir -p \\\"$dstdir\\\"\",\n            \"  if [ -e \\\"/var/log/dmesg\\\" ]; then\",\n            \"    cp -f /var/log/dmesg \\\"$dstdir/dmesg.boot\\\"\",\n            \"  fi\",\n            \"  dmesg > \\\"$dstdir/dmesg.current\\\"\",\n            \"  dmesg --ctime > \\\"$dstdir/dmesg.human.current\\\"\",\n            \"  ok\",\n            \"}\",\n            \"\",\n            \"get_docker_logs() {\",\n            \"  try \\\"collect Docker and containerd daemon logs\\\"\",\n            \"\",\n            \"  dstdir=\\\"${info_system}/docker_log\\\"\",\n            \"  mkdir -p \\\"$dstdir\\\"\",\n            \"  case \\\"${init_type}\\\" in\",\n            \"    systemd)\",\n            \"      journalctl -u docker > \\\"${dstdir}\\\"/docker\",\n            \"      journalctl -u containerd > \\\"${info_system}\\\"/containerd.log\",\n            \"      ;;\",\n            \"    other)\",\n            \"      for entry in docker upstart/docker; do\",\n            \"        if [[ -e \\\"/var/log/${entry}\\\" ]]; then\",\n            \"          cp -f /var/log/\\\"${entry}\\\" \\\"${dstdir}\\\"/docker\",\n            \"        fi\",\n            \"      done\",\n            \"      ;;\",\n            \"    *)\",\n            \"      warning \\\"the current operating system is not supported.\\\"\",\n            \"      return 1\",\n            \"      ;;\",\n            \"  esac\",\n            \"\",\n            \"  ok\",\n            \"}\",\n            \"\",\n            \"get_ecs_agent_logs() {\",\n            \"  try \\\"collect Amazon ECS Container Agent logs\\\"\",\n            \"\",\n            \"  dstdir=\\\"${info_system}/ecs_agent_logs\\\"\",\n            \"\",\n            \"  if [ ! -d /var/log/ecs ]; then\",\n            \"    failed \\\"ECS log directory does not exist\\\"\",\n            \"    return 1\",\n            \"  fi\",\n            \"\",\n            \"  mkdir -p \\\"$dstdir\\\"\",\n            \"\",\n            \"  cp -f /var/log/ecs/* \\\"$dstdir\\\"/\",\n            \"\",\n            \"  ok\",\n            \"}\",\n            \"\",\n            \"get_pkglist() {\",\n            \"  try \\\"detect installed packages\\\"\",\n            \"\",\n            \"  mkdir -p \\\"$info_system\\\"\",\n            \"  case \\\"${pkgtype}\\\" in\",\n            \"    rpm)\",\n            \"      rpm -qa >\\\"$info_system\\\"/pkglist.txt 2>&1\",\n            \"      ;;\",\n            \"    dpkg)\",\n            \"      dpkg --list > \\\"$info_system\\\"/pkglist.txt 2>&1\",\n            \"      ;;\",\n            \"    *)\",\n            \"      warning \\\"unknown package type.\\\"\",\n            \"      return 1\",\n            \"      ;;\",\n            \"  esac\",\n            \"\",\n            \"  ok\",\n            \"}\",\n            \"\",\n            \"get_system_services() {\",\n            \"  try \\\"detect active system services list\\\"\",\n            \"\",\n            \"  mkdir -p \\\"$info_system\\\"\",\n            \"  case \\\"${init_type}\\\" in\",\n            \"    systemd)\",\n            \"      systemctl list-units > \\\"$info_system\\\"/services.txt 2>&1\",\n            \"      ;;\",\n            \"    other)\",\n            \"      service --status-all >> \\\"$info_system\\\"/services.txt 2>&1\",\n            \"      ;;\",\n            \"    *)\",\n            \"      warning \\\"unable to determine active services.\\\"\",\n            \"      return 1\",\n            \"      ;;\",\n            \"  esac\",\n            \"\",\n            \"  top -b -n 1 > \\\"$info_system\\\"/top.txt 2>&1\",\n            \"  ps fauxwww > \\\"$info_system\\\"/ps.txt 2>&1\",\n            \"  netstat -plant > \\\"$info_system\\\"/netstat.txt 2>&1\",\n            \"\",\n            \"  ok\",\n            \"}\",\n            \"\",\n            \"get_docker_info() {\",\n            \"  try \\\"gather Docker daemon information\\\"\",\n            \"\",\n            \"  mkdir -p \\\"$info_system\\\"/docker\",\n            \"\",\n            \"  if pgrep dockerd > /dev/null ; then\",\n            \"\",\n            \"    timeout 20 docker info > \\\"$info_system\\\"/docker/docker-info.txt 2>&1 || echo \\\"Timed out, ignoring \\\\\\\"docker info output \\\\\\\" \\\"\",\n            \"    timeout 20 docker ps --all --no-trunc > \\\"$info_system\\\"/docker/docker-ps.txt 2>&1 || echo \\\"Timed out, ignoring \\\\\\\"docker ps --all --no-trunc output \\\\\\\" \\\"\",\n            \"    timeout 20 docker images > \\\"$info_system\\\"/docker/docker-images.txt 2>&1 || echo \\\"Timed out, ignoring \\\\\\\"docker images output \\\\\\\" \\\"\",\n            \"    timeout 20 docker version > \\\"$info_system\\\"/docker/docker-version.txt 2>&1 || echo \\\"Timed out, ignoring \\\\\\\"docker version output \\\\\\\" \\\"\",\n            \"    timeout 60 docker stats --all --no-trunc --no-stream > \\\"$info_system\\\"/docker/docker-stats.txt 2>&1 || echo \\\"Timed out, ignoring \\\\\\\"docker stats\\\\\\\" output\\\"\",\n            \"\",\n            \"    ok\",\n            \"  else\",\n            \"    warning \\\"the Docker daemon is not running.\\\" | tee \\\"$info_system\\\"/docker/docker-not-running.txt\",\n            \"  fi\",\n            \"}\",\n            \"\",\n            \"get_ecs_agent_info() {\",\n            \"  try \\\"collect Amazon ECS Container Agent state and config\\\"\",\n            \"\",\n            \"  mkdir -p \\\"$info_system\\\"/ecs-agent\",\n            \"  if [ -e /var/lib/ecs/data/ecs_agent_data.json ]; then\",\n            \"    python -mjson.tool < /var/lib/ecs/data/ecs_agent_data.json > \\\"$info_system\\\"/ecs-agent/ecs_agent_data.txt 2>&1\",\n            \"  fi\",\n            \"\",\n            \"  if [ -e /var/lib/ecs/data/agent.db ]; then\",\n            \"    cp -f /var/lib/ecs/data/agent.db \\\"$info_system\\\"/ecs-agent/agent.db 2>&1\",\n            \"    chmod +r \\\"$info_system\\\"/ecs-agent/agent.db\",\n            \"  fi\",\n            \"\",\n            \"  if [ -e /etc/ecs/ecs.config ]; then\",\n            \"    cp -f /etc/ecs/ecs.config \\\"$info_system\\\"/ecs-agent/ 2>&1\",\n            \"    if grep --quiet \\\"ECS_ENGINE_AUTH_DATA\\\" \\\"$info_system\\\"/ecs-agent/ecs.config; then\",\n            \"      sed -i 's/ECS_ENGINE_AUTH_DATA=.*/ECS_ENGINE_AUTH_DATA=/g' \\\"$info_system\\\"/ecs-agent/ecs.config\",\n            \"    fi\",\n            \"  fi\",\n            \"  ok\",\n            \"\",\n            \"  try \\\"collect Amazon ECS Container Agent engine data\\\"\",\n            \"\",\n            \"  if pgrep agent > /dev/null ; then\",\n            \"    if command -v curl >/dev/null; then\",\n            \"      if curl --max-time 3 -s http://localhost:51678/v1/tasks | python -mjson.tool > \\\"$info_system\\\"/ecs-agent/agent-running-info.txt 2>&1; then\",\n            \"          ok\",\n            \"      else\",\n            \"          warning \\\"failed to get agent data\\\"\",\n            \"      fi\",\n            \"    else\",\n            \"      warning \\\"curl is unavailable for probing ECS Container Agent introspection endpoint\\\"\",\n            \"    fi\",\n            \"  else\",\n            \"    warning \\\"The Amazon ECS Container Agent is not running\\\" | tee \\\"$info_system\\\"/ecs-agent/ecs-agent-not-running.txt\",\n            \"    return 1\",\n            \"  fi\",\n            \"}\",\n            \"\",\n            \"get_docker_containers_info() {\",\n            \"  try \\\"inspect all Docker containers\\\"\",\n            \"\",\n            \"  mkdir -p \\\"$info_system\\\"/docker\",\n            \"\",\n            \"  if pgrep dockerd > /dev/null ; then\",\n            \"    for i in $(docker ps -a -q); do\",\n            \"      timeout 10 docker inspect \\\"$i\\\" > \\\"$info_system\\\"/docker/container-\\\"$i\\\".txt 2>&1\",\n            \"      if [ $? -eq 124 ]; then\",\n            \"        touch \\\"$info_system\\\"/docker/container-inspect-timed-out.txt\",\n            \"        failed \\\"'docker inspect' timed out, not gathering containers\\\"\",\n            \"        return 1\",\n            \"      fi\",\n            \"\",\n            \"      if grep --quiet \\\"ECS_ENGINE_AUTH_DATA\\\" \\\"$info_system\\\"/docker/container-\\\"$i\\\".txt; then\",\n            \"        sed -i 's/ECS_ENGINE_AUTH_DATA=.*/ECS_ENGINE_AUTH_DATA=/g' \\\"$info_system\\\"/docker/container-\\\"$i\\\".txt\",\n            \"      fi\",\n            \"    done\",\n            \"  else\",\n            \"    warning \\\"the Docker daemon is not running.\\\" | tee \\\"$info_system\\\"/docker/docker-not-running.txt\",\n            \"    return 1\",\n            \"  fi\",\n            \"  ok\",\n            \"}\",\n            \"\",\n            \"get_docker_sysconfig() {\",\n            \"  try \\\"collect Docker sysconfig\\\"\",\n            \"\",\n            \"  if [ -e /etc/sysconfig/docker ]; then\",\n            \"    mkdir -p \\\"${info_system}\\\"/docker\",\n            \"    cp /etc/sysconfig/docker \\\"${info_system}\\\"/docker/sysconfig-docker\",\n            \"    ok\",\n            \"  else\",\n            \"    info \\\"/etc/sysconfig/docker not found\\\"\",\n            \"  fi\",\n            \"\",\n            \" try \\\"collect Docker storage sysconfig\\\"\",\n            \"\",\n            \"  if [ -e /etc/sysconfig/docker-storage ]; then\",\n            \"    mkdir -p \\\"${info_system}\\\"/docker\",\n            \"    cp /etc/sysconfig/docker-storage \\\"${info_system}\\\"/docker/sysconfig-docker-storage\",\n            \"    ok\",\n            \"  else\",\n            \"    info \\\"/etc/sysconfig/docker-storage not found\\\"\",\n            \"  fi\",\n            \"}\",\n            \"\",\n            \"\",\n            \"get_docker_daemon_json(){\",\n            \"  try \\\"collect Docker daemon.json\\\"\",\n            \"\",\n            \"  if [ -e /etc/docker/daemon.json ]; then\",\n            \"    mkdir -p \\\"${info_system}\\\"/docker\",\n            \"    cp /etc/docker/daemon.json \\\"${info_system}\\\"/docker/daemon.json\",\n            \"    ok\",\n            \"  else\",\n            \"    info \\\"/etc/docker/daemon.json not found\\\"\",\n            \"  fi\",\n            \"}\",\n            \"\",\n            \"get_docker_systemd_config(){\",\n            \"\",\n            \"  if [[ \\\"$init_type\\\" != \\\"systemd\\\" ]]; then\",\n            \"    return 0\",\n            \"  fi\",\n            \"\",\n            \"  try \\\"collect Docker systemd unit file\\\"\",\n            \"\",\n            \"  mkdir -p \\\"${info_system}\\\"/docker\",\n            \"  if systemctl cat docker.service > \\\"${info_system}\\\"/docker/docker.service 2>/dev/null; then\",\n            \"   ok\",\n            \"  else\",\n            \"    rm -f \\\"$info_system/docker/docker.service\\\"\",\n            \"    warning \\\"docker.service not found\\\"\",\n            \"  fi\",\n            \"\",\n            \"  try \\\"collect containerd systemd unit file\\\"\",\n            \"  if systemctl cat containerd.service > \\\"${info_system}\\\"/docker/containerd.service 2>/dev/null; then\",\n            \"   ok\",\n            \"  else\",\n            \"    rm -f \\\"$info_system/docker/containerd.service\\\"\",\n            \"    warning \\\"containerd.service not found\\\"\",\n            \"  fi\",\n            \"}\",\n            \"\",\n            \"finished()\",\n            \"{\",\n            \"  if [ -z {{LogDestination}} ]; then\",\n            \"    echo -e \\\"\\\\nDone... your bundled logs are located in $logdir/ecs_{{ECSInstanceId}}_{{automation:EXECUTION_ID}}.tgz.\\\\n\\\"\",\n            \"  fi\",\n            \"}\",\n            \"# --------------------------------------------------------------------------------------------\",\n            \"\",\n            \"parse_options \\\"$@\\\"\",\n            \"\",\n            \"collect_brief\",\n            \"pack\",\n            \"cleanup\",\n            \"finished\"\n          ]\n        }\n      },\n      \"description\": \"Run the Log collection script on the provided ECS Linux instance\",\n      \"isCritical\": \"true\",\n      \"nextStep\": \"verifyIfS3BucketProvided\"\n    },\n    {\n      \"name\": \"runLogCollectionScriptOnWindows\",\n      \"action\": \"aws:runCommand\",\n      \"onFailure\": \"Abort\",\n      \"inputs\": {\n        \"DocumentName\": \"AWS-RunPowerShellScript\",\n        \"InstanceIds\": [\n          \"{{ECSInstanceId}}\"\n        ],\n        \"Parameters\": {\n          \"commands\": [\n            \"<# \",\n            \"    Copyright 2017 Amazon.com, Inc. or its affiliates. All Rights Reserved.\",\n            \"    Licensed under the Apache License, Version 2.0 (the \\\"License\\\"). You may not use this file except in compliance with the License. A copy of the License is located at\",\n            \"\",\n            \"        http://aws.amazon.com/apache2.0/\",\n            \"\",\n            \"    or in the \\\"license\\\" file accompanying this file. \",\n            \"    This file is distributed on an \\\"AS IS\\\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.\",\n            \"\",\n            \".SYNOPSIS \",\n            \"    Collects ECS Agent Logs\",\n            \".DESCRIPTION \",\n            \"    Run the script to collect ECS Logs\",\n            \"    Run without parameters to Gather basic operating system, Docker daemon, and Amazon ECS container agent logs. \",\n            \"    Default script RunMode is Brief mode.\",\n            \".NOTES\",\n            \"    You need to run this script with Elevated permissions to allow for the collection of the installed applications list\",\n            \".EXAMPLE \",\n            \"    ecs-log-collector.ps1\",\n            \"    Gathers basic OS System, Docker daemon and Amazon ECS container agent logs\",\n            \"#>\",\n            \"\",\n            \"param(\",\n            \"    [Parameter(Mandatory=$False)][string]$RunMode = \\\"Brief\\\"   \",\n            \"    )\",\n            \"\",\n            \"# Common options\",\n            \"$basepath = \\\"C:\\\\ProgramData\\\"\",\n            \"$infodir=\\\"$basepath\\\\collectECSlogs_{{ECSInstanceId}}\\\"\",\n            \"$logdir=\\\"$basepath\\\\collectECSlogs\\\"\",\n            \"$info_system=\\\"$infodir\\\\system\\\"\",\n            \"$s3BucketName = \\\"{{ LogDestination }}\\\"\",\n            \"\",\n            \"# Common functions\",\n            \"# ---------------------------------------------------------------------------------------\",\n            \"\",\n            \"Function is_elevated{\",\n            \"    If (-NOT ([Security.Principal.WindowsPrincipal] [Security.Principal.WindowsIdentity]::GetCurrent()).IsInRole(`\",\n            \"    [Security.Principal.WindowsBuiltInRole] \\\"Administrator\\\")) {\",\n            \"        Write-warning \\\"This script requires elevated privileges to copy registry keys to the ECS logs collector folder.\\\"\",\n            \"        Write-Host \\\"Please re-launch as Administrator.\\\" -foreground \\\"red\\\" -background \\\"black\\\"\",\n            \"        break\",\n            \"    }\",\n            \"}\",\n            \"\",\n            \"\",\n            \"Function create_working_dir{\",\n            \"    try {\",\n            \"        Write-Host \\\"Creating temporary directory\\\"\",\n            \"        New-Item -type directory -path $info_system -Force >$null\",\n            \"        New-Item -type directory -path $info_system\\\\docker -Force >$null\",\n            \"        New-Item -type directory -path $info_system\\\\firewall -Force >$null\",\n            \"        New-Item -type directory -path $info_system\\\\ecs -Force >$null\",\n            \"        New-Item -type directory -path $info_system\\\\docker_log -Force >$null\",\n            \"        Write-Host \\\"OK\\\" -ForegroundColor \\\"green\\\"\",\n            \"    }\",\n            \"    catch {\",\n            \"        Write-Host \\\"Unable to create temporary directory\\\"\",\n            \"        Write-Host \\\"Please ensure you have enough permissions to create directories\\\"\",\n            \"        Write-Error \\\"Failed to create temporary directory\\\"\",\n            \"        Break\",\n            \"    }\",\n            \"}\",\n            \"\",\n            \"Function get_sysinfo{\",\n            \"    try {\",\n            \"        Write-Host \\\"Collecting System information\\\"\",\n            \"        systeminfo.exe > $info_system\\\\sysinfo\",\n            \"        Write-Host \\\"OK\\\" -ForegroundColor \\\"green\\\"\",\n            \"    }\",\n            \"    catch {\",\n            \"        Write-Error \\\"Unable to collect system information\\\" \",\n            \"        Break\",\n            \"    }  \",\n            \"        \",\n            \"}\",\n            \"\",\n            \"Function is_diskfull{\",\n            \"    $threshold = 30\",\n            \"    try {\",\n            \"        Write-Host \\\"Checking free disk space\\\"\",\n            \"        $drive = Get-WmiObject Win32_LogicalDisk -Filter \\\"DeviceID='C:'\\\"\",\n            \"        $percent = ([math]::round($drive.FreeSpace/1GB, 0) / ([math]::round($drive.Size/1GB, 0)) * 100)\",\n            \"        Write-Host \\\"C: drive has $percent% free space\\\"\",\n            \"        Write-Host \\\"OK\\\" -ForegroundColor \\\"green\\\"\",\n            \"    }\",\n            \"    catch {\",\n            \"        Write-Error \\\"Unable to Determine Free Disk Space\\\" \",\n            \"        Break\",\n            \"    }\",\n            \"    if ($percent -lt $threshold){\",\n            \"        Write-Error \\\"C: drive only has $percent% free space, please ensure there is at least $threshold% free disk space to collect and store the log files\\\" \",\n            \"        Break\",\n            \"    }\",\n            \"}\",\n            \"\",\n            \"Function get_system_logs{\",\n            \"    try {\",\n            \"        Write-Host \\\"Collecting System Logs\\\"\",\n            \"        Get-WinEvent -LogName System | Select-Object timecreated,leveldisplayname,machinename,message | export-csv -Path $info_system\\\\system-eventlogs.csv\",\n            \"        Write-Host \\\"OK\\\" -foregroundcolor \\\"green\\\"\",\n            \"    }\",\n            \"    catch {\",\n            \"        Write-Error \\\"Unable to Collect System Logs\\\"\",\n            \"        break\",\n            \"    }\",\n            \"}\",\n            \"\",\n            \"Function get_application_logs{\",\n            \"    try {\",\n            \"        Write-Host \\\"Collecting Application Logs\\\"\",\n            \"        Get-WinEvent -LogName Application | Select-Object timecreated,leveldisplayname,machinename,message | export-csv -Path $info_system\\\\application-eventlogs.csv\",\n            \"        Write-Host \\\"OK\\\" -foregroundcolor \\\"green\\\"\",\n            \"    }\",\n            \"    catch {\",\n            \"        Write-Error \\\"Unable to Collect Application Logs\\\"\",\n            \"        break\",\n            \"    }\",\n            \"}\",\n            \"\",\n            \"Function get_volumes_info{\",\n            \"    try {\",\n            \"        Write-Host \\\"Collecting Volume info\\\"\",\n            \"        Get-psdrive -PSProvider 'FileSystem' | Out-file $info_system\\\\volumes\",\n            \"        Write-Host \\\"OK\\\" -foregroundcolor \\\"green\\\"\",\n            \"    }\",\n            \"    catch {\",\n            \"        Write-Error \\\"Unable to Collect Volume information\\\"\",\n            \"        break\",\n            \"    }\",\n            \"}\",\n            \"\",\n            \"Function get_firewall_info{\",\n            \"    try {\",\n            \"        Write-Host \\\"Collecting Windows Firewall info\\\"\",\n            \"        $fw = Get-NetFirewallProfile\",\n            \"        foreach ($f in $fw){\",\n            \"            if ($f.Enabled -eq \\\"True\\\"){\",\n            \"                $file = $f.name\",\n            \"                Write-Host \\\"Collecting Rules for\\\" $f.name \\\"profile\\\"\",\n            \"                Get-NetFirewallProfile -Name $f.name | Get-NetFirewallRule | Out-file $info_system\\\\firewall\\\\firewall-$file\",\n            \"                }\",\n            \"            }\",\n            \"        Write-Host \\\"OK\\\" -foregroundcolor \\\"green\\\"\",\n            \"    }\",\n            \"    catch {\",\n            \"        Write-Error \\\"Unable to Collect Windows Firewall information\\\"\",\n            \"        break\",\n            \"    }\",\n            \"}\",\n            \"\",\n            \"Function get_softwarelist{\",\n            \"    try {\",\n            \"        Write-Host \\\"Collecting installed applications list\\\"\",\n            \"        gp HKLM:\\\\Software\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Uninstall\\\\* |Select DisplayName, DisplayVersion, Publisher, InstallDate, HelpLink, UninstallString | out-file $info_system\\\\installed-64bit-apps.txt\",\n            \"        gp HKLM:\\\\Software\\\\Wow6432Node\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Uninstall\\\\* |Select DisplayName, DisplayVersion, Publisher, InstallDate, HelpLink, UninstallString | out-file $info_system\\\\installed-32bit-apps.txt\",\n            \"        Write-Host \\\"OK\\\" -foregroundcolor \\\"green\\\"\",\n            \"    }\",\n            \"    catch {\",\n            \"        Write-Error \\\"Unable to collect installed applications list\\\"\",\n            \"        break\",\n            \"    }\",\n            \"}\",\n            \"\",\n            \"Function get_system_services{\",\n            \"    try {\",\n            \"        Write-Host \\\"Collecting Services list\\\"\",\n            \"        get-service | fl | out-file $info_system\\\\services\",\n            \"        Write-Host \\\"OK\\\" -foregroundcolor \\\"green\\\"\",\n            \"    }\",\n            \"    catch {\",\n            \"        Write-Error \\\"Unable to collect Services list\\\"\",\n            \"        break\",\n            \"    }\",\n            \"}\",\n            \"\",\n            \"Function get_docker_info{\",\n            \"    try {\",\n            \"        Write-Host \\\"Collecting Docker daemon information\\\"\",\n            \"        docker info > $info_system\\\\docker\\\\docker-info.txt 2>&1\",\n            \"        docker ps --all --no-trunc > $info_system\\\\docker\\\\docker-ps.txt 2>&1\",\n            \"        docker images > $info_system\\\\docker\\\\docker-images.txt 2>&1\",\n            \"        docker version > $info_system\\\\docker\\\\docker-version.txt 2>&1\",\n            \"        Write-Host \\\"OK\\\" -foregroundcolor \\\"green\\\"\",\n            \"    }\",\n            \"    catch{\",\n            \"        Write-Error \\\"Unable to collect Docker daemon information\\\"\",\n            \"        Break\",\n            \"    }\",\n            \"}\",\n            \"\",\n            \"Function get_ecs_agent_logs{\",\n            \"    try {\",\n            \"        Write-Host \\\"Collecting ECS Agent logs\\\"\",\n            \"        copy C:\\\\programdata\\\\amazon\\\\ecs\\\\log\\\\* $info_system\\\\ecs\\\\\",\n            \"        Write-Host \\\"OK\\\" -foregroundcolor \\\"green\\\"\",\n            \"    }\",\n            \"    catch{\",\n            \"        Write-Error \\\"Unable to collect ECS Agent logs\\\"\",\n            \"        Break\",\n            \"    }\",\n            \"}\",\n            \"\",\n            \"Function get_containers_info{\",\n            \"    try {\",\n            \"        Write-Host \\\"Inspect running Docker containers and gather Amazon ECS container agent data\\\"\",\n            \"        $containers = docker ps -q\",\n            \"        foreach ($c in $containers){\",\n            \"            docker inspect $c > $info_system/docker/container-$c.txt\",\n            \"            if (Get-Content $info_system/docker/container-$c.txt |where-object {$_ -like 'ECS_ENGINE_AUTH_DATA'} ) {\",\n            \"                (Get-Content $info_system/docker/container-$c.txt) | ForEach-Object {$_ -replace 'ECS_ENGINE_AUTH_DATA*.+$', 'ECS_ENGINE_AUTH_DATA: OBFUSCATED'} | Set-Content $info_system/docker/container-$c.txt\",\n            \"            }\",\n            \"        }\",\n            \"        Write-Host \\\"OK\\\" -foregroundcolor \\\"green\\\"\",\n            \"    }\",\n            \"    catch {\",\n            \"        Write-Error \\\"Unable to collect Docker containers data\\\"\",\n            \"        Break\",\n            \"    }\",\n            \"}\",\n            \"\",\n            \"Function get_docker_logs{\",\n            \"    try {\",\n            \"        Write-Host \\\"Collecting Docker daemon logs\\\"\",\n            \"        Get-EventLog -LogName Application -Source Docker | Sort-Object Time | Export-CSV $info_system/docker_log/docker-daemon.csv\",\n            \"        Write-Host \\\"OK\\\" -foregroundcolor \\\"green\\\"\",\n            \"    }\",\n            \"    catch {\",\n            \"        Write-Error \\\"Unable to collect Docker daemon logs\\\"\",\n            \"        Break\",\n            \"    }\",\n            \"}\",\n            \"\",\n            \"Function cleanup{\",\n            \"    if ( $infodir -eq \\\"$basepath\\\\collectECSlogs_{{ECSInstanceId}}\\\" )\",\n            \"    {\",\n            \"        Remove-Item -Recurse -Force $infodir -ErrorAction Ignore\",\n            \"    }\",\n            \"    else {\",\n            \"        Write-Error \\\"Unable to cleanup $infodir, Please cleanup manually!\\\" \",\n            \"        Break\",\n            \"    }\",\n            \"    \",\n            \"}\",\n            \"\",\n            \"Function create_log_dir{\",\n            \"    if (!(Test-Path $logdir))\",\n            \"    {\",\n            \"        try{\",\n            \"            Write-Host \\\"Creating log directory\\\"\",\n            \"            New-Item -type directory -path $logdir -Force >$null\",\n            \"            Write-Host \\\"OK\\\" -ForegroundColor \\\"green\\\"\",\n            \"        }\",\n            \"        catch{\",\n            \"            Write-Host \\\"Unable to create log directory\\\"\",\n            \"            Write-Host \\\"Please ensure you have enough permissions to create directories\\\"\",\n            \"            Write-Error \\\"Failed to create log directory\\\"\",\n            \"            Break\",\n            \"        }\",\n            \"    }\",\n            \"}\",\n            \"\",\n            \"Function pack{\",\n            \"    try {\",\n            \"        Write-Host \\\"Archiving gathered data\\\"\",\n            \"        create_log_dir\",\n            \"        Compress-Archive -Path $infodir -CompressionLevel Optimal -DestinationPath $logdir\\\\ecs_{{ECSInstanceId}}_{{automation:EXECUTION_ID}}.zip\",\n            \"        Write-Host \\\"OK\\\" -foregroundcolor \\\"green\\\"\",\n            \"    }\",\n            \"    catch {\",\n            \"        Write-Error \\\"Unable to archive data\\\"\",\n            \"        Break\",\n            \"    }\",\n            \"}\",\n            \"\",\n            \"Function init{\",\n            \"    is_elevated\",\n            \"    create_working_dir\",\n            \"    get_sysinfo\",\n            \"}\",\n            \"    \",\n            \"\",\n            \"Function collect_brief{\",\n            \"    init\",\n            \"    is_diskfull\",\n            \"    get_system_logs\",\n            \"    get_application_logs\",\n            \"    get_volumes_info\",\n            \"    get_firewall_info\",\n            \"    get_softwarelist\",\n            \"    get_system_services\",\n            \"    get_docker_info\",\n            \"    get_ecs_agent_logs\",\n            \"    get_containers_info\",\n            \"    get_docker_logs\",\n            \"}  \",\n            \"\",\n            \"Function finished{\",\n            \"    If (-Not $s3BucketName)\",\n            \"    {\",\n            \"        Write-Host \\\"`nDone... your bundled logs are located in $logdir\\\\ecs_{{ECSInstanceId}}_{{automation:EXECUTION_ID}}.zip`n\\\"\",\n            \"    }\",\n            \"}\",\n            \"    \",\n            \"collect_brief\",\n            \"pack \",\n            \"cleanup\",\n            \"finished\"\n          ]\n        }\n      },\n      \"description\": \"Run the Log collection script on the provided ECS Windows instance\",\n      \"isCritical\": \"true\",\n      \"nextStep\": \"verifyIfS3BucketProvided\"\n    },\n    {\n      \"name\": \"verifyIfS3BucketProvided\",\n      \"action\": \"aws:branch\",\n      \"inputs\": {\n        \"Choices\": [\n          {\n            \"Not\": {\n              \"Variable\": \"{{LogDestination}}\",\n              \"StringEquals\": \"\"\n            },\n            \"NextStep\": \"runUploadScript\"\n          }\n        ]\n      },\n      \"description\": \"Checks if S3 bucket was provided in the invocation to upload the logs\",\n      \"onFailure\": \"Abort\",\n      \"isCritical\": true,\n      \"isEnd\": true\n    },\n    {\n      \"name\": \"runUploadScript\",\n      \"action\": \"aws:branch\",\n      \"inputs\": {\n        \"Choices\": [\n          {\n            \"NextStep\": \"runUploadScriptOnWindows\",\n            \"Variable\": \"{{getInstancePlatform.platformType}}\",\n            \"StringEquals\": \"Windows\"\n          },\n          {\n            \"NextStep\": \"runUploadScriptOnLinux\",\n            \"Variable\": \"{{getInstancePlatform.platformType}}\",\n            \"StringEquals\": \"Linux\"\n          }\n        ]\n      }\n    },\n    {\n      \"name\": \"runUploadScriptOnLinux\",\n      \"action\": \"aws:runCommand\",\n      \"onFailure\": \"Abort\",\n      \"inputs\": {\n        \"DocumentName\": \"AWS-RunShellScript\",\n        \"InstanceIds\": [\n          \"{{ECSInstanceId}}\"\n        ],\n        \"Parameters\": {\n          \"commands\": [\n            \"logfile=\\\"ecs_{{ECSInstanceId}}_{{automation:EXECUTION_ID}}.tgz\\\"\",\n            \"bucketStatus=True\",\n            \"accountId=\\\"{{ global:ACCOUNT_ID }}\\\"\",\n            \"filepath=\\\"/var/log/collectECSlogs/${logfile}\\\"\",\n            \"\",\n            \"function cleanup()\",\n            \"{\",\n            \"if [ -f $filepath ]; then\",\n            \"    rm $filepath\",\n            \"fi\",\n            \"}\",\n            \"\",\n            \"function eval_bucket_policy(){\",\n            \"    policy_status=$($awspath s3api get-bucket-policy-status --bucket {{LogDestination}} --query PolicyStatus.IsPublic --output text 2>&1)\",\n            \"    command_status=$?\",\n            \"    if [ $command_status -eq 0 ] ; then\",\n            \"        if [ \\\"$policy_status\\\" = \\\"False\\\" ] ; then\",\n            \"            bucketStatus=False    \",\n            \"        else\",\n            \"            echo \\\"Verifying bucket policy: Bucket is public, cannot Upload to a public bucket!\\\"\",\n            \"        fi\",\n            \"    elif [[ $(echo \\\"$policy_status\\\" | grep NoSuchBucketPolicy) ]]; then\",\n            \"        bucketStatus=False\",\n            \"    else\",\n            \"        echo \\\"There was an error while verifying S3 bucket policy, $policy_status\\\"\",\n            \"        bucketStatus=True\",\n            \"    fi\",\n            \"}\",\n            \"\",\n            \"function eval_bucket_acl(){\",\n            \"    PUBLIC_ACL_INDICATOR='http://acs.amazonaws.com/groups/global/AllUsers'\",\n            \"    acl_status=$($awspath s3api get-bucket-acl --output text --bucket {{LogDestination}} 2>&1)\",\n            \"    command_status=$?\",\n            \"    if [ $command_status -eq 0 ] ; then\",\n            \"        if `echo $acl_status | grep -A1 'READ\\\\|WRITE' | grep -q \\\"${PUBLIC_ACL_INDICATOR}\\\"`\",\n            \"        then\",\n            \"            bucketStatus=True\",\n            \"            echo \\\"Verifying bucket ACL: Bucket is public, cannot Upload to a public bucket!\\\"\",\n            \"        else\",\n            \"            bucketStatus=False\",\n            \"        fi\",\n            \"    else\",\n            \"        echo \\\"There was an error while verifying S3 bucket ACL, $acl_status\\\"\",\n            \"        bucketStatus=True\",\n            \"    fi\",\n            \"}\",\n            \"\",\n            \"echo \\\"Uploading ECS logs collected. Checking if AWS CLI is installed.\\\"\",\n            \"if command -v aws &> /dev/null\",\n            \"then\",\n            \"    echo \\\"AWS CLI is Installed..\\\" \",\n            \"    awspath=$(command -v aws)\",\n            \"    ${awspath} s3api head-bucket --bucket {{LogDestination}} --expected-bucket-owner $accountId &>/dev/null\",\n            \"    if [ $? -ne 0 ];\",\n            \"    then\",\n            \"        echo \\\"No S3 bucket called {{LogDestination}} found in the current AWS account, or access denied. Please specify a S3 bucket you own and this instance has access to.\\\"\",\n            \"        cleanup\",\n            \"        exit 1\",\n            \"    else\",\n            \"        echo \\\"Checking if bucket {{LogDestination}} is public or not.\\\"\",\n            \"        eval_bucket_policy  \",\n            \"        if [ \\\"$bucketStatus\\\" = \\\"False\\\" ]\",\n            \"        then \",\n            \"            eval_bucket_acl \",\n            \"            if [ \\\"$bucketStatus\\\" = \\\"False\\\" ]\",\n            \"            then\",\n            \"                echo \\\"Bucket {{LogDestination}} is not public. Starting log upload..\\\"\",\n            \"                if [ -f $filepath ]; then\",\n            \"                    ${awspath} s3 cp $filepath s3://{{LogDestination}} --no-progress\",\n            \"                    if [ $? -eq 0 ];\",\n            \"                    then\",\n            \"                        echo \\\"Log file $logfile uploaded to S3 bucket {{LogDestination}}.\\\"\",\n            \"                    else \",\n            \"                        echo \\\"Failed to upload log file to S3 bucket {{LogDestination}}.\\\"\",\n            \"                        cleanup\",\n            \"                        exit 1\",\n            \"                    fi\",\n            \"                else\",\n            \"                    echo \\\"Log file $filepath doesn't exist, Failed to upload the logs to S3 bucket {{LogDestination}}.\\\"\",\n            \"                    cleanup\",\n            \"                    exit 1\",\n            \"                fi\",\n            \"            else\",\n            \"                echo \\\"The operation to upload logs has been cancelled. Exiting!\\\"\",\n            \"                cleanup\",\n            \"                exit 1\",\n            \"            fi   \",\n            \"            cleanup\",\n            \"        else\",\n            \"            echo \\\"The operation to upload logs has been cancelled. Exiting!\\\"\",\n            \"            cleanup\",\n            \"            exit 1\",\n            \"        fi\",\n            \"fi\",\n            \"else\",\n            \"    echo \\\"AWS CLI Not Installed. Quitting Upload WorkFlow.\\\"\",\n            \"    cleanup\",\n            \"    exit 1\",\n            \"fi\"\n          ]\n        }\n      },\n      \"isCritical\": \"true\",\n      \"isEnd\": true,\n      \"description\": \"Upload logs to S3\"\n    },\n    {\n      \"name\": \"runUploadScriptOnWindows\",\n      \"action\": \"aws:runCommand\",\n      \"onFailure\": \"Abort\",\n      \"inputs\": {\n        \"DocumentName\": \"AWS-RunPowerShellScript\",\n        \"InstanceIds\": [\n          \"{{ECSInstanceId}}\"\n        ],\n        \"Parameters\": {\n          \"commands\": [\n            \"$s3BucketName = \\\"{{ LogDestination }}\\\"\",\n            \"$curdir = (Get-Item -Path \\\".\\\\\\\" -Verbose).FullName\",\n            \"$basepath = \\\"C:\\\\ProgramData\\\"\",\n            \"$logFile = \\\"ecs_{{ECSInstanceId}}_{{ automation:EXECUTION_ID }}.zip\\\"\",\n            \"$logdir=\\\"$basepath\\\\collectECSlogs\\\"\",\n            \"$filepath = \\\"$logdir\\\\$logfile\\\"\",\n            \"$accountId = \\\"{{ global:ACCOUNT_ID }}\\\"\",\n            \"\",\n            \"\",\n            \"Function cleanup{\",\n            \"    if (Test-Path $filepath -PathType leaf)\",\n            \"    {\",\n            \"    Remove-Item $filepath\",\n            \"    }\",\n            \"}\",\n            \"\",\n            \"Function evalBucketPolicy{\",\n            \"    try {\",\n            \"        $bucketPolicy = Get-S3BucketPolicyStatus -BucketName $S3bucketName -ExpectedBucketOwner $accountId\",\n            \"    } \",\n            \"    catch {\",\n            \"        if($_.Exception.Message -eq \\\"The bucket policy does not exist\\\") {\",\n            \"            return $False\",\n            \"        }\",\n            \"        else\",\n            \"        {\",\n            \"            Write-Host \\\"There was an error while verifying S3 bucket policy:\\\" $_.Exception.Message\",\n            \"            return $True\",\n            \"        }\",\n            \"    }\",\n            \"    if($bucketPolicy.IsPublic) {\",\n            \"        Write-Host \\\"Verifying bucket Policy: Bucket is public, cannot Upload to a public bucket!\\\"\",\n            \"        return $True\",\n            \"        }\",\n            \"    return $False\",\n            \"}\",\n            \"\",\n            \"Function evalBucketAcl{\",\n            \"    try{\",\n            \"        $bucketAcl = Get-S3ACL -Bucketname $s3BucketName\",\n            \"        foreach ($grant in $bucketAcl.Grants)\",\n            \"        {\",\n            \"            if ($grant.Grantee.URI -eq \\\"http://acs.amazonaws.com/groups/global/AllUsers\\\")\",\n            \"            {\",\n            \"                Write-Host \\\"Verifying bucket ACL: Bucket is public, cannot Upload to a public bucket!\\\"\",\n            \"                return $True\",\n            \"            }\",\n            \"        }\",\n            \"    }catch{\",\n            \"            Write-Host \\\"There was an error while verifying S3 bucket ACL:\\\" $_.Exception.Message\",\n            \"            return $True\",\n            \"    }\",\n            \"    return $False\",\n            \"}\",\n            \"\",\n            \"try{\",\n            \"    if(Get-Module -ListAvailable -Name AWSPowershell){\",\n            \"        Import-Module AWSPowershell\",\n            \"        if(Test-S3Bucket -BucketName $s3BucketName){\",\n            \"            Write-Host \\\"Checking if bucket $s3BucketName is public or not.\\\"\",\n            \"            if((evalBucketPolicy) -or (evalBucketAcl)){\",\n            \"                cleanup\",\n            \"                throw \\\"The operation to upload logs has been cancelled. Exiting!\\\"\",\n            \"            }else{\",\n            \"                Write-Host \\\"Bucket $s3BucketName is not public. Starting log upload..\\\"\",\n            \"                if (Test-Path $filepath -PathType leaf)\",\n            \"                {\",\n            \"                    try{\",\n            \"                        Write-S3Object  -BucketName $s3BucketName -File $filepath\",\n            \"                        Write-Host \\\"Log file $logfile uploaded to S3 bucket $s3BucketName.\\\"\",\n            \"                    }\",\n            \"                    catch{\",\n            \"                        Write-Host \\\"Failed to upload Log file to S3 bucket $s3BucketName.\\\"\",\n            \"                        cleanup\",\n            \"                        Exit 1\",\n            \"                    }\",\n            \"                }\",\n            \"                else\",\n            \"                {\",\n            \"                    Write-Host \\\"Log file $filepath doesn't exist, Failed to upload the logs to S3 bucket $s3BucketName.\\\"\",\n            \"                    cleanup\",\n            \"                    Exit 1\",\n            \"                }\",\n            \"                cleanup          \",\n            \"            }    \",\n            \"        }else{\",\n            \"            cleanup\",\n            \"            throw (\\\"No S3 bucket called \\\" + $s3BucketName + \\\" found in the current AWS account, or access denied. Please specify a S3 bucket you own and this instance has access to.\\\")\",\n            \"        }\",\n            \"    }else{\",\n            \"        Write-Host \\\"AWS Tools for Windows PowerShell not installed. Please install the latest version of the AWS Tools for Windows PowerShell and try again.\\\"\",\n            \"        Write-Host \\\"Download location: https://aws.amazon.com/powershell/\\\"\",\n            \"        cleanup\",\n            \"        Exit 255\",\n            \"    }\",\n            \"}catch{\",\n            \"    Write-Host $_.Exception.Message\",\n            \"    Exit 1\",\n            \"}\"\n          ]\n        }\n      },\n      \"isCritical\": \"true\",\n      \"isEnd\": true,\n      \"description\": \"Upload logs to S3\"\n    }\n  ]\n}",
  "CreatedDate": "2022-03-23T21:55:00.238Z",
  "DisplayName": null,
  "DocumentFormat": {
    "Value": "JSON"
  },
  "DocumentType": {
    "Value": "Automation"
  },
  "DocumentVersion": "1",
  "Name": "AWSSupport-CollectECSInstanceLogs",
  "Requires": [],
  "ReviewStatus": null,
  "Status": {
    "Value": "Active"
  },
  "StatusInformation": null,
  "VersionName": null,
  "ResponseMetadata": {
    "RequestId": "4395e781-2a23-43df-9c66-fecdcd288eaa",
    "Metadata": {},
    "ChecksumAlgorithm": 0,
    "ChecksumValidationStatus": 0
  },
  "ContentLength": 58518,
  "HttpStatusCode": 200,
  "LoggedAt": "2022-09-02T07:21:56.8603314+00:00"
}
