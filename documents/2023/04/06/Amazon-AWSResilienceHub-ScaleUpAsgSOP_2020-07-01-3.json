{
  "AttachmentsContent": [],
  "Content": "{\n  \"description\" : \"SOP By AWS ResilienceHub. Scale-up ASG by modifying ASG to use larger instances. The SOP will not change from the instance type used, rather will use a larger version from the same type.\",\n  \"schemaVersion\" : \"0.3\",\n  \"assumeRole\" : \"{{ AutomationAssumeRole }}\",\n  \"outputs\" : [ \"OutputRecoveryTime.RecoveryTime\" ],\n  \"parameters\" : {\n    \"AutoScalingGroupName\" : {\n      \"type\" : \"String\",\n      \"description\" : \"(Required) The Name of the ASG to scale-up\"\n    },\n    \"Dryrun\" : {\n      \"type\" : \"Boolean\",\n      \"default\" : true,\n      \"description\" : \"(Optional) Dryrun indicates a testing run, changes will be rolled back.\"\n    },\n    \"AutomationAssumeRole\" : {\n      \"type\" : \"String\",\n      \"description\" : \"(Required) The ARN of the role that allows Automation to perform the actions on your behalf.\"\n    }\n  },\n  \"mainSteps\" : [ {\n    \"name\" : \"RecordStartTime\",\n    \"action\" : \"aws:executeScript\",\n    \"inputs\" : {\n      \"Runtime\" : \"python3.8\",\n      \"Handler\" : \"script_handler\",\n      \"Script\" : \"def script_handler(events, context):\\n  from datetime import datetime, timezone\\n  return datetime.now(timezone.utc).isoformat()\"\n    },\n    \"outputs\" : [ {\n      \"Name\" : \"StartTime\",\n      \"Selector\" : \"$.Payload\",\n      \"Type\" : \"String\"\n    } ]\n  }, {\n    \"name\" : \"CurrentSetup\",\n    \"action\" : \"aws:executeScript\",\n    \"outputs\" : [ {\n      \"Name\" : \"OriginalInstanceType\",\n      \"Selector\" : \"$.Payload.OriginalInstanceType\",\n      \"Type\" : \"String\"\n    }, {\n      \"Name\" : \"LaunchTemplateVersion\",\n      \"Selector\" : \"$.Payload.LaunchTemplateVersion\",\n      \"Type\" : \"String\"\n    }, {\n      \"Name\" : \"LaunchTemplateName\",\n      \"Selector\" : \"$.Payload.LaunchTemplateName\",\n      \"Type\" : \"String\"\n    }, {\n      \"Name\" : \"LaunchConfigurationName\",\n      \"Selector\" : \"$.Payload.LaunchConfigurationName\",\n      \"Type\" : \"String\"\n    }, {\n      \"Name\" : \"BiggerInstanceType\",\n      \"Selector\" : \"$.Payload.BiggerInstanceType\",\n      \"Type\" : \"String\"\n    } ],\n    \"inputs\" : {\n      \"Runtime\" : \"python3.8\",\n      \"Handler\" : \"get_instance_data\",\n      \"Script\" : \"import logging\\nimport random\\nimport time\\nfrom math import ceil\\n\\nimport boto3\\nfrom botocore.config import Config\\n\\nlogger = logging.getLogger(__name__)\\nlogger.setLevel(logging.INFO)\\n\\n\\n\\ndef get_instance_data(events, context):\\n    asg = boto3.client('autoscaling')\\n    ec2 = boto3.client('ec2')\\n    describe_asg = asg.describe_auto_scaling_groups(AutoScalingGroupNames=[events['AutoScalingGroupName']])\\n    if 'MixedInstancesPolicy' in describe_asg['AutoScalingGroups'][0]:\\n        raise Exception('Cannot run this SOP on ASG that has a MixedInstancesPolicy')\\n    current_state = get_current_state(ec2, asg, describe_asg)\\n    bigger_instance_type = get_bigger_instance(current_state['OriginalInstanceType'], ec2)\\n    return {**current_state, **{'BiggerInstanceType': bigger_instance_type}}\\n\\n\\n\\ndef get_current_state(ec2, asg, describe_asg):\\n    if 'LaunchTemplate' in describe_asg['AutoScalingGroups'][0]:\\n        launch_template_version = describe_asg['AutoScalingGroups'][0]['LaunchTemplate']['Version']\\n        launch_template_name = describe_asg['AutoScalingGroups'][0]['LaunchTemplate']['LaunchTemplateName']\\n        describe_template = ec2.describe_launch_template_versions(\\n            LaunchTemplateName=launch_template_name, Versions=[launch_template_version])\\n        current_instance_type = describe_template['LaunchTemplateVersions'][0]['LaunchTemplateData']['InstanceType']\\n        return {'OriginalInstanceType': current_instance_type, 'LaunchTemplateVersion': launch_template_version,\\n                'LaunchTemplateName': launch_template_name, 'LaunchConfigurationName': ''}\\n    else:\\n        launch_config_name = describe_asg['AutoScalingGroups'][0]['LaunchConfigurationName']\\n        launch_config = asg.describe_launch_configurations(LaunchConfigurationNames=[launch_config_name])\\n        return {'OriginalInstanceType': launch_config['LaunchConfigurations'][0]['InstanceType'],\\n                'LaunchTemplateVersion': '',\\n                'LaunchTemplateName': '',\\n                'LaunchConfigurationName': launch_config_name}\\n\\n\\n\\ndef get_bigger_instance(current_instance_type, ec2):\\n    instance_type_size = current_instance_type.rsplit(\\\".\\\", 1)\\n    instance_sizes = [\\\"nano\\\", \\\"micro\\\", \\\"small\\\", \\\"medium\\\", \\\"large\\\", \\\"xlarge\\\", \\\"2xlarge\\\", \\\"3xlarge\\\", \\\"4xlarge\\\",\\n                      \\\"6xlarge\\\", \\\"8xlarge\\\", \\\"9xlarge\\\", \\\"10xlarge\\\", \\\"12xlarge\\\", \\\"16xlarge\\\", \\\"18xlarge\\\", \\\"24xlarge\\\",\\n                      \\\"32xlarge\\\", \\\"56xlarge\\\", \\\"112xlarge\\\"]\\n    bigger_size_start_idx = instance_sizes.index(instance_type_size[1]) + 1\\n    possible_instance_types = []\\n    for i in range(len(instance_sizes) - bigger_size_start_idx):\\n        possible_instance_types.append(instance_type_size[0] + \\\".\\\" + instance_sizes[bigger_size_start_idx + i])\\n    instance_types_response = ec2.describe_instance_type_offerings(\\n        Filters=[{'Name': 'instance-type', \\\"Values\\\": [instance_type_size[0] + \\\".*\\\"]}])\\n    all_instance_types = [offering['InstanceType'] for offering in instance_types_response['InstanceTypeOfferings']]\\n    bigger_instances = [candidate for candidate in possible_instance_types if candidate in all_instance_types]\\n    if bigger_instances:\\n        return bigger_instances[0]\\n    else:\\n        raise Exception(\\\"Could not identify bigger instance type than current instance type: \\\" + current_instance_type)\\n\",\n      \"InputPayload\" : {\n        \"AutoScalingGroupName\" : \"{{AutoScalingGroupName}}\"\n      }\n    },\n    \"description\" : \"Record current set up and gather the larger instance to which we will upgrade the ASG.\"\n  }, {\n    \"name\" : \"UpgradeInstanceType\",\n    \"action\" : \"aws:executeScript\",\n    \"inputs\" : {\n      \"Runtime\" : \"python3.8\",\n      \"Handler\" : \"update_asg\",\n      \"Script\" : \"import logging\\nimport random\\nimport time\\nfrom math import ceil\\n\\nimport boto3\\nfrom botocore.config import Config\\n\\nlogger = logging.getLogger(__name__)\\nlogger.setLevel(logging.INFO)\\n\\n\\n\\ndef update_asg(events, context):\\n    asg = boto3.client('autoscaling')\\n    ec2 = boto3.client('ec2')\\n    new_instance_type = events['BiggerInstanceType']\\n    if events['LaunchTemplateName']:\\n        create_template_response = ec2.create_launch_template_version(\\n            LaunchTemplateName=events['LaunchTemplateName'],\\n            SourceVersion=events['LaunchTemplateVersion'],\\n            LaunchTemplateData={'InstanceType': new_instance_type},\\n            VersionDescription=\\\"Uses instance type \\\" + new_instance_type)\\n        new_version = str(create_template_response['LaunchTemplateVersion']['VersionNumber'])\\n        asg.update_auto_scaling_group(AutoScalingGroupName=events['AutoScalingGroupName'],\\n                                      LaunchTemplate={'LaunchTemplateName': events['LaunchTemplateName'],\\n                                                      'Version': new_version})\\n        return {'LaunchConfigOrTemplate': events['LaunchTemplateName'] + ':' + new_version}\\n    else:\\n        describe_asg = asg.describe_auto_scaling_groups(AutoScalingGroupNames=[events['AutoScalingGroupName']])\\n        describe_launch_config = asg.describe_launch_configurations(\\n            LaunchConfigurationNames=[describe_asg['AutoScalingGroups'][0]['LaunchConfigurationName']])\\n        launch_config = describe_launch_config['LaunchConfigurations'][0]\\n        launch_config.pop('LaunchConfigurationARN')\\n        launch_config.pop('CreatedTime')\\n        launch_config['InstanceType'] = new_instance_type\\n        launch_config['LaunchConfigurationName'] = launch_config['LaunchConfigurationName'] + \\\\\\n            \\\"-\\\" + str(random.randint(1000, 9999))\\n        asg.create_launch_configuration(**{key: value for (key, value) in launch_config.items() if value != ''})\\n        asg.update_auto_scaling_group(AutoScalingGroupName=events['AutoScalingGroupName'],\\n                                      LaunchConfigurationName=launch_config['LaunchConfigurationName'])\\n        return {'LaunchConfigOrTemplate': launch_config['LaunchConfigurationName']}\",\n      \"InputPayload\" : {\n        \"AutoScalingGroupName\" : \"{{ AutoScalingGroupName }}\",\n        \"LaunchTemplateName\" : \"{{ CurrentSetup.LaunchTemplateName }}\",\n        \"LaunchTemplateVersion\" : \"{{ CurrentSetup.LaunchTemplateVersion }}\",\n        \"BiggerInstanceType\" : \"{{ CurrentSetup.BiggerInstanceType }}\"\n      }\n    },\n    \"outputs\" : [ {\n      \"Selector\" : \"$.Payload.LaunchConfigOrTemplate\",\n      \"Name\" : \"LaunchConfigOrTemplate\",\n      \"Type\" : \"String\"\n    } ],\n    \"description\" : \"Upgrade ASG to use the larger instance type. Depending on the configuration of the ASG, this will either upgrade the Launch Template or the Launch Configuration.\"\n  }, {\n    \"name\" : \"RefreshInstances\",\n    \"action\" : \"aws:executeAwsApi\",\n    \"inputs\" : {\n      \"Service\" : \"autoscaling\",\n      \"Api\" : \"StartInstanceRefresh\",\n      \"AutoScalingGroupName\" : \"{{AutoScalingGroupName}}\"\n    },\n    \"outputs\" : [ {\n      \"Selector\" : \"$.InstanceRefreshId\",\n      \"Name\" : \"InstanceRefreshId\",\n      \"Type\" : \"String\"\n    } ],\n    \"description\" : \"Refresh instances to upgrade to new instance type\"\n  }, {\n    \"name\" : \"WaitForRefresh\",\n    \"action\" : \"aws:waitForAwsResourceProperty\",\n    \"inputs\" : {\n      \"Service\" : \"autoscaling\",\n      \"Api\" : \"DescribeInstanceRefreshes\",\n      \"PropertySelector\" : \"$.InstanceRefreshes[0].Status\",\n      \"DesiredValues\" : [ \"Successful\" ],\n      \"AutoScalingGroupName\" : \"{{AutoScalingGroupName}}\",\n      \"InstanceRefreshIds\" : [ \"{{RefreshInstances.InstanceRefreshId}}\" ]\n    },\n    \"description\" : \"Wait for RefreshInstances to complete\"\n  }, {\n    \"name\" : \"OutputRecoveryTime\",\n    \"action\" : \"aws:executeScript\",\n    \"inputs\" : {\n      \"Runtime\" : \"python3.8\",\n      \"Handler\" : \"script_handler\",\n      \"Script\" : \"def script_handler(events, context):\\n  from datetime import datetime, timezone\\n  from dateutil import parser\\n  return (datetime.now(timezone.utc) - parser.parse(events['StartTime'])).seconds\",\n      \"InputPayload\" : {\n        \"StartTime\" : \"{{RecordStartTime.StartTime}}\"\n      }\n    },\n    \"outputs\" : [ {\n      \"Name\" : \"RecoveryTime\",\n      \"Selector\" : \"$.Payload\",\n      \"Type\" : \"Integer\"\n    } ]\n  }, {\n    \"name\" : \"DryrunBranch\",\n    \"action\" : \"aws:branch\",\n    \"inputs\" : {\n      \"Choices\" : [ {\n        \"NextStep\" : \"EmptyStepForEnd\",\n        \"Variable\" : \"{{Dryrun}}\",\n        \"BooleanEquals\" : false\n      }, {\n        \"NextStep\" : \"RollBackScaleUpChange\",\n        \"Variable\" : \"{{Dryrun}}\",\n        \"BooleanEquals\" : true\n      } ]\n    },\n    \"description\" : \"If this is NOT a dryrun, skip to the end. If it is a dryrun, proceed to rollback.\"\n  }, {\n    \"name\" : \"RollBackScaleUpChange\",\n    \"action\" : \"aws:executeScript\",\n    \"inputs\" : {\n      \"Runtime\" : \"python3.8\",\n      \"Handler\" : \"rollback_scaleup\",\n      \"Script\" : \"import logging\\nimport random\\nimport time\\nfrom math import ceil\\n\\nimport boto3\\nfrom botocore.config import Config\\n\\nlogger = logging.getLogger(__name__)\\nlogger.setLevel(logging.INFO)\\n\\n\\n\\ndef rollback_scaleup(events, context):\\n    asg = boto3.client('autoscaling')\\n    ec2 = boto3.client('ec2')\\n    if events['LaunchTemplateName']:\\n        name_version = events['LaunchConfigOrTemplate'].rsplit(\\\":\\\", 1)\\n        asg.update_auto_scaling_group(AutoScalingGroupName=events['AutoScalingGroupName'],\\n                                      LaunchTemplate={'LaunchTemplateName': events['LaunchTemplateName'],\\n                                                      'Version': events['LaunchTemplateVersion']})\\n        ec2.delete_launch_template_versions(LaunchTemplateName=name_version[0], Versions=[name_version[1]])\\n    else:\\n        asg.update_auto_scaling_group(AutoScalingGroupName=events['AutoScalingGroupName'],\\n                                      LaunchConfigurationName=events['LaunchConfigurationName'])\\n        asg.delete_launch_configuration(LaunchConfigurationName=events['LaunchConfigOrTemplate'])\\n\",\n      \"InputPayload\" : {\n        \"AutoScalingGroupName\" : \"{{ AutoScalingGroupName }}\",\n        \"LaunchTemplateName\" : \"{{ CurrentSetup.LaunchTemplateName }}\",\n        \"LaunchTemplateVersion\" : \"{{ CurrentSetup.LaunchTemplateVersion }}\",\n        \"LaunchConfigurationName\" : \"{{ CurrentSetup.LaunchConfigurationName }}\",\n        \"LaunchConfigOrTemplate\" : \"{{ UpgradeInstanceType.LaunchConfigOrTemplate }}\"\n      }\n    },\n    \"description\" : \"Rollback by updating the ASG to use the previous Launch Template or Launch Configuration\"\n  }, {\n    \"name\" : \"RefreshInstancesRollback\",\n    \"action\" : \"aws:executeAwsApi\",\n    \"inputs\" : {\n      \"Service\" : \"autoscaling\",\n      \"Api\" : \"StartInstanceRefresh\",\n      \"AutoScalingGroupName\" : \"{{AutoScalingGroupName}}\"\n    },\n    \"outputs\" : [ {\n      \"Name\" : \"RollbackInstanceRefreshId\",\n      \"Selector\" : \"$.InstanceRefreshId\",\n      \"Type\" : \"String\"\n    } ],\n    \"description\" : \"Refresh instances to previous version (perform rollback)\"\n  }, {\n    \"name\" : \"WaitForRollback\",\n    \"action\" : \"aws:waitForAwsResourceProperty\",\n    \"inputs\" : {\n      \"Service\" : \"autoscaling\",\n      \"Api\" : \"DescribeInstanceRefreshes\",\n      \"PropertySelector\" : \"$.InstanceRefreshes[0].Status\",\n      \"DesiredValues\" : [ \"Successful\" ],\n      \"AutoScalingGroupName\" : \"{{AutoScalingGroupName}}\",\n      \"InstanceRefreshIds\" : [ \"{{RefreshInstancesRollback.RollbackInstanceRefreshId}}\" ]\n    },\n    \"description\" : \"Wait for rollback to complete\"\n  }, {\n    \"name\" : \"EmptyStepForEnd\",\n    \"action\" : \"aws:sleep\",\n    \"inputs\" : {\n      \"Duration\" : \"PT1S\"\n    },\n    \"description\" : \"End\"\n  } ]\n}",
  "CreatedDate": "2022-04-25T18:29:09.769Z",
  "DisplayName": null,
  "DocumentFormat": {
    "Value": "JSON"
  },
  "DocumentType": {
    "Value": "Automation"
  },
  "DocumentVersion": "3",
  "Name": "AWSResilienceHub-ScaleUpAsgSOP_2020-07-01",
  "Requires": [],
  "ReviewStatus": null,
  "Status": {
    "Value": "Active"
  },
  "StatusInformation": null,
  "VersionName": null,
  "ResponseMetadata": {
    "RequestId": "52ac3b74-e4dc-4641-86dc-3af8899b6b41",
    "Metadata": {},
    "ChecksumAlgorithm": 0,
    "ChecksumValidationStatus": 0
  },
  "ContentLength": 14902,
  "HttpStatusCode": 200,
  "LoggedAt": "2023-04-06T07:11:33.4935125+00:00"
}
