{
  "AttachmentsContent": [],
  "Content": "{\n  \"description\" : \"*AMS Accelerate Onboarding* \\n------------------------------\\nThis automation performs the following steps:\\n* Checks if Glue encryption is enabled\\n* Checks number of Cloudtrails trails\\n* Updates Lambda Concurrent Executions quota to 1000\\n* Updates S3 Bucket quota to 300\\n* Deploys AMS onboarding role into the account via Cloudformation\\n* Deploys Codebuild project via Cloudformation to run Prowler checks\\n\",\n  \"schemaVersion\" : \"0.3\",\n  \"assumeRole\" : \"{{AutomationAssumeRole}}\",\n  \"parameters\" : {\n    \"OnboardRegions\" : {\n      \"type\" : \"String\",\n      \"description\" : \"Comma Separated regions to onboard. Ex: us-east-1,us-east-2,us-west-2\"\n    },\n    \"AutomationAssumeRole\" : {\n      \"type\" : \"AWS::IAM::Role::Arn\",\n      \"description\" : \"IAM Role required to run this Automation document\"\n    },\n    \"EmailID\" : {\n      \"type\" : \"String\",\n      \"description\" : \"Email ID to receive notification on success/failure of Onboarding\"\n    }\n  },\n  \"mainSteps\" : [ {\n    \"name\" : \"Create_SNS_Topic_For_Notifications\",\n    \"action\" : \"aws:executeAwsApi\",\n    \"inputs\" : {\n      \"Service\" : \"sns\",\n      \"Api\" : \"CreateTopic\",\n      \"Name\" : \"ams-accelerate-onboarding\"\n    },\n    \"description\" : \"Creates an SNS topic ams-accelerate-onboarding to alert failures on runbook \",\n    \"maxAttempts\" : 3,\n    \"onFailure\" : \"step:Clean_Up_SNS_Topic\"\n  }, {\n    \"name\" : \"Subscribe_Email_To_Topic\",\n    \"action\" : \"aws:executeAwsApi\",\n    \"inputs\" : {\n      \"Service\" : \"sns\",\n      \"Api\" : \"Subscribe\",\n      \"TopicArn\" : \"arn:aws:sns:{{global:REGION}}:{{global:ACCOUNT_ID}}:ams-accelerate-onboarding\",\n      \"Protocol\" : \"email\",\n      \"Endpoint\" : \"{{EmailID}}\"\n    },\n    \"description\" : \"Subscribes the email passed in parameters to this topic\",\n    \"maxAttempts\" : 3,\n    \"onFailure\" : \"step:Clean_Up_SNS_Topic\",\n    \"onCancel\" : \"step:Send_Failed_Notification\"\n  }, {\n    \"name\" : \"Allow_Time_For_SNS_Subscription\",\n    \"action\" : \"aws:sleep\",\n    \"inputs\" : {\n      \"Duration\" : \"PT1M\"\n    },\n    \"description\" : \"This step waits for 30 minutes before executing the onboarding actions so that users have enough time to confirm subscription to SNS topic\",\n    \"onCancel\" : \"step:Send_Failed_Notification\"\n  }, {\n    \"name\" : \"Check_If_Resources_Already_Exist\",\n    \"action\" : \"aws:executeScript\",\n    \"description\" : \"This step checks if ams-prowler-output-<region>-<accountid> bucket, ams-access-management stack, ams-prowler-stack already exists\",\n    \"inputs\" : {\n      \"Runtime\" : \"python3.6\",\n      \"Handler\" : \"check_handler\",\n      \"Script\" : \"import boto3\\nimport botocore\\n\\ndef check_handler(events, context):\\n  primaryRegion = events[\\\"primaryRegion\\\"]\\n  bucketName = events[\\\"bucketName\\\"]\\n  \\n  cfnclient = boto3.client('cloudformation', region_name=primaryRegion)\\n  s3resource = boto3.resource('s3', region_name=primaryRegion)\\n  \\n  check_stack(cfnclient,'ams-access-management')\\n  check_stack(cfnclient,'ams-prowler-stack')\\n  check_bucket(s3resource,bucketName)\\n  \\ndef check_stack(cfnclient,stackName):\\n  try:\\n    response=cfnclient.describe_stacks(StackName=stackName)\\n    if(response['Stacks'][0]['StackName']==stackName):\\n      raise Exception(\\\"Stack \\\"+ stackName + \\\" already exists, failing automation. Please delete the stack and re-run automation\\\")\\n  except botocore.exceptions.ClientError as error:\\n    if error.response['Error']['Code'] == 'ValidationError':\\n      print (stackName+\\\" Stack does not exist, continuing to onboard\\\")\\n    else:\\n      raise error\\n\\ndef check_bucket(s3resource,bucketName):\\n  bucket = s3resource.Bucket(bucketName)\\n  try:\\n    s3resource.meta.client.head_bucket(Bucket=bucketName)\\n    raise Exception(\\\"S3 bucket \\\"+ bucketName + \\\" already exists, failing automation. Please delete bucket and re-run automation\\\")\\n  except botocore.exceptions.ClientError as error:\\n    error_code = int(error.response['Error']['Code'])\\n    if error_code == 403:\\n      print(\\\"Could not List bucket \\\" + bucketName + \\\"Make sure you have s3:ListBucket permission\\\")\\n    elif error_code == 404:\\n      print(\\\"S3 bucket \\\"+bucketName+\\\" does not exist, continuing to onboard\\\")\",\n      \"InputPayload\" : {\n        \"primaryRegion\" : \"{{global:REGION}}\",\n        \"bucketName\" : \"ams-prowler-output-{{global:REGION}}-{{global:ACCOUNT_ID}}\"\n      }\n    },\n    \"onFailure\" : \"step:Clean_Up_SNS_Topic\",\n    \"onCancel\" : \"step:Clean_Up_SNS_Topic\"\n  }, {\n    \"name\" : \"Deploy_Prowler_Stack\",\n    \"action\" : \"aws:createStack\",\n    \"inputs\" : {\n      \"TemplateBody\" : \"AWSTemplateFormatVersion: 2010-09-09\\nDescription: >-\\n  Launches a Codebuild project to run checks in all regions\\nParameters:\\n  ExecutionID:\\n    Type: String\\n  OnboradRegions:\\n    Type: String\\nResources:\\n  OutputBucket:\\n    Type: 'AWS::S3::Bucket'\\n    DeletionPolicy: 'Retain'\\n    Properties:\\n      BucketName: !Sub 'ams-prowler-output-${AWS::Region}-${AWS::AccountId}'\\n      Tags:\\n        - Key: AppName\\n          Value: AMSInfrastructure\\n      BucketEncryption:\\n        ServerSideEncryptionConfiguration:\\n          - ServerSideEncryptionByDefault:\\n              SSEAlgorithm: AES256\\n  CodeBuildLogGroup: \\n    Type: AWS::Logs::LogGroup\\n    Properties:\\n      LogGroupName: /aws/codebuild/ams-prowler-project \\n      RetentionInDays: 3\\n  CodeBuildServiceRole:\\n    Type: 'AWS::IAM::Role'\\n    Properties:\\n      RoleName: 'ams-codebuild-project-role'\\n      ManagedPolicyArns:\\n        - 'arn:aws:iam::aws:policy/job-function/SupportUser'\\n        - 'arn:aws:iam::aws:policy/job-function/ViewOnlyAccess'\\n        - 'arn:aws:iam::aws:policy/SecurityAudit'\\n      AssumeRolePolicyDocument:\\n        Version: 2012-10-17\\n        Statement:\\n          - Action: 'sts:AssumeRole'\\n            Effect: Allow\\n            Principal:\\n              Service:\\n                - codebuild.amazonaws.com\\n      Policies:\\n        - PolicyName: S3-bucket-access\\n          PolicyDocument:\\n            Version: 2012-10-17\\n            Statement:\\n              - Action:\\n                  - 's3:AbortMultipartUpload'\\n                  - 's3:GetBucketLocation'\\n                  - 's3:GetObject'\\n                  - 's3:ListBucket'\\n                  - 's3:ListMultipartUploadParts'\\n                  - 's3:PutObject'\\n                Effect: Allow\\n                Resource:\\n                  - !Sub 'arn:aws:s3:::ams-prowler-output-${AWS::Region}-${AWS::AccountId}'\\n                  - !Sub 'arn:aws:s3:::ams-prowler-output-${AWS::Region}-${AWS::AccountId}/*'\\n        - PolicyName: LogGroup\\n          PolicyDocument:\\n            Version: 2012-10-17\\n            Statement:\\n              - Action:\\n                  - 'logs:CreateLogGroup'\\n                  - 'logs:CreateLogStream'\\n                  - 'logs:PutLogEvents'\\n                Effect: Allow\\n                Resource: !Sub >-\\n                  arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/*\\n        - PolicyName: ProwlerAdditions\\n          PolicyDocument:\\n            Version: 2012-10-17\\n            Statement:\\n              - Action:\\n                  - 'ssm:SendAutomationSignal'\\n                  - 's3:GetAccountPublicAccessBlock'\\n                  - 'glue:GetConnections'\\n                  - 'glue:SearchTables'\\n                  - 'ds:ListAuthorizedApplications'\\n                  - 'ec2:GetEbsEncryptionByDefault'\\n                  - 'ecr:Describe*'\\n                  - 'support:Describe*'\\n                  - 'tag:GetTagKeys'\\n                  - 'lambda:GetFunction'\\n                Effect: Allow\\n                Resource: '*'\\n        - PolicyName: AssumeRole\\n          PolicyDocument:\\n            Version: 2012-10-17\\n            Statement:\\n              - Action:\\n                  - 'sts:AssumeRole'\\n                Effect: Allow\\n                Resource: !Sub 'arn:aws:iam::${AWS::AccountId}:role/ams-codebuild-project-role'\\n  ProwlerCodeBuild:\\n    Type: 'AWS::CodeBuild::Project'\\n    Properties:\\n      Name: ams-prowler-project\\n      Environment:\\n        ComputeType: BUILD_GENERAL1_MEDIUM\\n        Image: 'aws/codebuild/amazonlinux2-x86_64-standard:3.0'\\n        Type: LINUX_CONTAINER\\n        EnvironmentVariables:\\n          - Name: EXECUTIONID\\n            Value: !Ref ExecutionID\\n            Type: PLAINTEXT\\n          - Name: OUTPUT_BUCKET\\n            Value: !Ref OutputBucket\\n            Type: PLAINTEXT\\n          - Name: REGIONS\\n            Value: !Ref OnboradRegions\\n            Type: PLAINTEXT\\n      Description: Run Prowler assessment\\n      LogsConfig:\\n        CloudWatchLogs:\\n          GroupName: !Ref CodeBuildLogGroup\\n          Status: ENABLED\\n      ServiceRole: !GetAtt CodeBuildServiceRole.Arn\\n      TimeoutInMinutes: 480\\n      Artifacts:\\n        Type: NO_ARTIFACTS\\n      Source:\\n        Type: NO_SOURCE\\n        BuildSpec: |\\n          version: 0.2\\n          phases:\\n            install:\\n              runtime-versions:\\n                python: 3.8\\n              commands:\\n                - echo \\\"Installing Prowler and dependencies...\\\"\\n                - pip3 install detect-secrets==1.0.3 \\n                - yum -y install jq\\n                - curl \\\"https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip\\\" -o \\\"awscliv2.zip\\\"\\n                - unzip awscliv2.zip\\n                - ./aws/install\\n                - git clone https://github.com/toniblyx/prowler.git\\n            build:\\n              commands:\\n                - echo \\\"Running Prowler as ./prowler -z -b -n -M csv\\\"\\n                - REGIONS=$(echo $REGIONS | sed 's/,/ /g')\\n                - cd prowler\\n                - ./prowler -M csv -z -b -n -f \\\"$REGIONS\\\"\\n            post_build:\\n              commands:\\n                - echo \\\"Uploading reports to S3...\\\" \\n                - aws ssm describe-automation-step-executions --automation-execution-id $EXECUTIONID --query \\\"StepExecutions[].StepName&&StepExecutions[].Outputs.OutputPayload\\\" --output text >> output/execution-output.txt || echo \\\"Couldn't perform describe-automation-step-executions, please manually verify all steps are successful\\\"\\n                - aws s3 cp --sse AES256 output/ s3://$OUTPUT_BUCKET/ --recursive\\n                - if [ $? -eq 0 ]; then aws ssm send-automation-signal --automation-execution-id $EXECUTIONID --signal-type \\\"Approve\\\" --payload \\\"Comment=SUCCESS\\\"; else aws ssm send-automation-signal --automation-execution-id $EXECUTIONID --signal-type \\\"Deny\\\" --payload \\\"Comment=FAIL\\\"; fi\",\n      \"StackName\" : \"ams-prowler-stack\",\n      \"Capabilities\" : [ \"CAPABILITY_IAM\", \"CAPABILITY_NAMED_IAM\" ],\n      \"Parameters\" : [ {\n        \"ParameterKey\" : \"ExecutionID\",\n        \"ParameterValue\" : \"{{automation:EXECUTION_ID}}\"\n      }, {\n        \"ParameterKey\" : \"OnboradRegions\",\n        \"ParameterValue\" : \"{{OnboardRegions}}\"\n      } ],\n      \"Tags\" : [ {\n        \"Key\" : \"AppName\",\n        \"Value\" : \"AMSInfrastructure\"\n      } ]\n    },\n    \"description\" : \"Create a Codebuild project via Cloudformation to Run Prowler checks\",\n    \"onFailure\" : \"step:Send_Failed_Notification\",\n    \"timeoutSeconds\" : 1800,\n    \"onCancel\" : \"step:Send_Failed_Notification\"\n  }, {\n    \"name\" : \"Check_Glue_Metadata_Encryption\",\n    \"action\" : \"aws:executeScript\",\n    \"inputs\" : {\n      \"Runtime\" : \"python3.6\",\n      \"Handler\" : \"glue_encryption\",\n      \"Script\" : \"import boto3\\nimport botocore\\n\\ndef glue_encryption(events, context):\\n\\n  onboardRegions = events[\\\"onboardRegions\\\"]\\n  encryption = {}\\n  \\n  for region in onboardRegions.split(\\\",\\\"):\\n    glue = boto3.client('glue', region_name=region)\\n    response = glue.get_data_catalog_encryption_settings()\\n    encryption_enabled = response['DataCatalogEncryptionSettings']['EncryptionAtRest']['CatalogEncryptionMode']\\n    \\n    if (encryption_enabled == 'DISABLED'):\\n      encryption.update({region:encryption_enabled})\\n    else:\\n      encryption.update({region:encryption_enabled})\\n\\n  return encryption\",\n      \"InputPayload\" : {\n        \"primaryRegion\" : \"{{global:REGION}}\",\n        \"onboardRegions\" : \"{{OnboardRegions}}\"\n      }\n    },\n    \"onFailure\" : \"step:Send_Failed_Notification\",\n    \"maxAttempts\" : 3,\n    \"onCancel\" : \"step:Send_Failed_Notification\"\n  }, {\n    \"name\" : \"Check_Cloudtrail_Trails\",\n    \"action\" : \"aws:executeScript\",\n    \"inputs\" : {\n      \"Runtime\" : \"python3.6\",\n      \"Handler\" : \"cloudtrail_handler\",\n      \"Script\" : \"import boto3\\nimport botocore\\n\\ndef cloudtrail_handler(events, context):\\n\\n  onboardRegions = events[\\\"onboardRegions\\\"]\\n  trails = {}\\n  \\n  for region in onboardRegions.split(\\\",\\\"):\\n    cloudtrail = boto3.client('cloudtrail', region_name=region)\\n    response = len(cloudtrail.describe_trails())-1\\n    trails.update({region:response})\\n\\n  return trails\",\n      \"InputPayload\" : {\n        \"onboardRegions\" : \"{{OnboardRegions}}\"\n      }\n    },\n    \"description\" : \"Retrieves the number of trails in each region being onboarded\",\n    \"onFailure\" : \"step:Send_Failed_Notification\",\n    \"maxAttempts\" : 3,\n    \"onCancel\" : \"step:Send_Failed_Notification\"\n  }, {\n    \"name\" : \"Increase_Lambda_Quotas\",\n    \"action\" : \"aws:executeScript\",\n    \"inputs\" : {\n      \"Runtime\" : \"python3.6\",\n      \"Handler\" : \"lambda_quota\",\n      \"Script\" : \"import boto3\\nimport botocore\\n\\ndef lambda_quota(events, context):\\n  onboardRegions = events[\\\"onboardRegions\\\"]\\n  quotas={}\\n  \\n  for region in onboardRegions.split(\\\",\\\"):\\n    service_quotas = boto3.client('service-quotas', region_name=region)\\n    response = service_quotas.get_service_quota(\\n        ServiceCode='lambda',\\n        QuotaCode='L-B99A9384'\\n    )\\n    lambda_concurrency_limit = int(response['Quota']['Value'])\\n    if (lambda_concurrency_limit < 1000 ):\\n      try:\\n        response = service_quotas.request_service_quota_increase(\\n        ServiceCode='lambda',\\n        QuotaCode='L-B99A9384',\\n        DesiredValue=1000.0\\n        )\\n        quotas.update({region:\\\"Increased Lambda quota\\\"})\\n      except service_quotas.exceptions.ResourceAlreadyExistsException:\\n        quotas.update({region:\\\"No Action required - Lambda Quota\\\"})\\n      except service_quotas.exceptions.IllegalArgumentException:\\n        quotas.update({region:\\\"No Action required - Lambda Quota\\\"})\\n      except botocore.exceptions.ClientError as error:\\n        raise error\\n    else:\\n      quotas.update({region:\\\"No Action required - Lambda Quota\\\"})\\n        \\n  return quotas\",\n      \"InputPayload\" : {\n        \"primaryRegion\" : \"{{global:REGION}}\",\n        \"onboardRegions\" : \"{{OnboardRegions}}\"\n      }\n    },\n    \"description\" : \"Increases lambda concurrent execution limit if <1000\",\n    \"onFailure\" : \"step:Send_Failed_Notification\",\n    \"maxAttempts\" : 3,\n    \"onCancel\" : \"step:Send_Failed_Notification\"\n  }, {\n    \"name\" : \"Increase_S3_Quotas\",\n    \"action\" : \"aws:executeScript\",\n    \"inputs\" : {\n      \"Runtime\" : \"python3.6\",\n      \"Handler\" : \"s3_quota\",\n      \"Script\" : \"import boto3\\nimport botocore\\n\\ndef s3_quota(events, context):\\n  primaryRegion = events[\\\"primaryRegion\\\"]\\n  quotas={}\\n\\n  #Number of S3 Buckets is Account wide limit, increasing only in primaryRegion\\n  service_quotas = boto3.client('service-quotas', region_name=primaryRegion)\\n  response = service_quotas.get_aws_default_service_quota(\\n      ServiceCode='s3',\\n      QuotaCode='L-DC2B2D3D'\\n  )\\n  s3_limit = int(response['Quota']['Value'])\\n  if (s3_limit <= 300 ):\\n    try:\\n       response = service_quotas.request_service_quota_increase(\\n       ServiceCode='s3',\\n       QuotaCode='L-DC2B2D3D',\\n       DesiredValue=300.0\\n       )\\n       quotas.update({primaryRegion:\\\"Increased S3 bucket quota\\\"})\\n    except service_quotas.exceptions.ResourceAlreadyExistsException:\\n      quotas.update({primaryRegion:\\\"No Action required - S3 quotas\\\"})\\n    except service_quotas.exceptions.IllegalArgumentException:\\n      quotas.update({primaryRegion:\\\"No Action required - S3 quotas\\\"})\\n    except botocore.exceptions.ClientError as error:\\n      raise error\\n  else:\\n    quotas.update({primaryRegion:\\\"No Action required - S3 quotas\\\"})\\n        \\n  return quotas\",\n      \"InputPayload\" : {\n        \"onboardRegions\" : \"{{OnboardRegions}}\",\n        \"primaryRegion\" : \"{{global:REGION}}\"\n      }\n    },\n    \"description\" : \"Increases S3 bucket quota if <300\",\n    \"onFailure\" : \"step:Send_Failed_Notification\",\n    \"onCancel\" : \"step:Send_Failed_Notification\"\n  }, {\n    \"name\" : \"Deploy_AMS_Role\",\n    \"action\" : \"aws:createStack\",\n    \"inputs\" : {\n      \"TemplateBody\" : \"AWSTemplateFormatVersion: '2010-09-09'\\nDescription: 'Template for AMS Access infrastructure management'\\n\\nResources:\\n  AWSManagedServicesAccessManagement:\\n    Type: \\\"AWS::IAM::Role\\\"\\n    Properties:\\n      RoleName: ams-access-management\\n      AssumeRolePolicyDocument:\\n            {\\n                \\\"Version\\\": \\\"2012-10-17\\\",\\n                \\\"Statement\\\": [\\n                    {\\n                        \\\"Effect\\\": \\\"Allow\\\",\\n                        \\\"Principal\\\": {\\n                            \\\"Service\\\": \\\"access.managedservices.amazonaws.com\\\"\\n                        },\\n                        \\\"Action\\\": \\\"sts:AssumeRole\\\",\\n                        \\\"Condition\\\": {\\n                            \\\"StringEquals\\\": {\\n                                \\\"sts:ExternalId\\\": !Sub \\\"${AWS::AccountId}\\\"\\n                            }\\n                        }\\n                    },\\n                    {\\n                        \\\"Effect\\\": \\\"Allow\\\",\\n                        \\\"Principal\\\": {\\n                            \\\"Service\\\": \\\"access.managedservices.amazonaws.com\\\"\\n                        },\\n                        \\\"Action\\\": \\\"sts:TagSession\\\"\\n                    }\\n                ]\\n            }\\n      Policies:\\n        - PolicyName: ams-access-management-policy\\n          PolicyDocument:\\n            {\\n              \\\"Version\\\": \\\"2012-10-17\\\",\\n              \\\"Statement\\\": [\\n              {\\n                \\\"Effect\\\": \\\"Allow\\\",\\n                \\\"Action\\\": [\\n                  \\\"iam:*\\\",\\n                ],\\n                \\\"Resource\\\": [!Sub \\\"arn:${AWS::Partition}:iam::${AWS::AccountId}:role/ams*\\\",\\n                             !Sub \\\"arn:${AWS::Partition}:iam::${AWS::AccountId}:policy/ams*\\\"],\\n                \\\"Sid\\\": \\\"AllowIAMActions\\\"\\n              },\\n              {\\n                \\\"Effect\\\": \\\"Deny\\\",\\n                \\\"Action\\\": [\\n                  \\\"iam:UpdateAssumeRolePolicy\\\",\\n                ],\\n                \\\"Resource\\\": [!Sub \\\"arn:${AWS::Partition}:iam::${AWS::AccountId}:role/ams-access-management\\\"],\\n                \\\"Sid\\\": \\\"DenyManagementRoleIAMUpdateAssumeRolePolicy\\\"\\n              },\\n              {\\n                \\\"Effect\\\": \\\"Allow\\\",\\n                \\\"Action\\\": [\\n                  \\\"cloudformation:*\\\"\\n                ],\\n                \\\"Resource\\\": [!Sub \\\"arn:${AWS::Partition}:cloudformation:*:${AWS::AccountId}:*/ams-cdk*\\\",\\n                             !Sub \\\"arn:${AWS::Partition}:cloudformation:*:${AWS::AccountId}:*/ams-access*\\\"],\\n                \\\"Sid\\\": \\\"AllowCFNActions\\\"\\n              },\\n              {\\n                \\\"Effect\\\": \\\"Allow\\\",\\n                \\\"Action\\\": \\\"s3:*\\\",\\n                \\\"Resource\\\": !Sub \\\"arn:${AWS::Partition}:s3:::ams-cdk*\\\",\\n                \\\"Sid\\\": \\\"AllowS3Actions\\\"\\n              },\\n              {\\n                \\\"Action\\\": \\\"iam:CreateServiceLinkedRole\\\",\\n                \\\"Resource\\\": !Sub \\\"arn:${AWS::Partition}:iam::${AWS::AccountId}:role/aws-service-role/*managedservices.amazonaws.com/AWSServiceRoleForAWSManagedServices*\\\",\\n                \\\"Effect\\\": \\\"Allow\\\",\\n                \\\"Condition\\\": {\\n                  \\\"StringLike\\\": {\\n                    \\\"iam:AWSServiceName\\\": \\\"*managedservices.amazonaws.com\\\"\\n                  }\\n                }\\n              },\\n              {\\n                \\\"Action\\\": \\\"iam:DeleteServiceLinkedRole\\\",\\n                \\\"Resource\\\": !Sub \\\"arn:${AWS::Partition}:iam::${AWS::AccountId}:role/aws-service-role/*managedservices.amazonaws.com/AWSServiceRoleForAWSManagedServices*\\\",\\n                \\\"Effect\\\": \\\"Allow\\\"\\n              },\\n              {\\n                \\\"Effect\\\": \\\"Allow\\\",\\n                \\\"Action\\\": \\\"sts:GetCallerIdentity\\\",\\n                \\\"Resource\\\": \\\"*\\\",\\n                \\\"Sid\\\": \\\"AllowSTSActions\\\"\\n              }\\n              ]\\n            }\\n      Tags:\\n        - Key: \\\"ams:resourceOwner\\\"\\n          Value: \\\"AMS\\\"\\n        - Key: \\\"ams:resourceOwnerService\\\"\\n          Value: \\\"Access\\\"\\n        - Key: \\\"ams:stackRegion\\\"\\n          Value: !Sub \\\"${AWS::Region}\\\"\",\n      \"StackName\" : \"ams-access-management\",\n      \"Capabilities\" : [ \"CAPABILITY_IAM\", \"CAPABILITY_NAMED_IAM\" ],\n      \"Tags\" : [ {\n        \"Key\" : \"AppName\",\n        \"Value\" : \"AMSInfrastructure\"\n      } ]\n    },\n    \"description\" : \"Deploys a Cloudformation stack to create ams-access-management role\",\n    \"onFailure\" : \"step:Send_Failed_Notification\",\n    \"onCancel\" : \"step:Send_Failed_Notification\"\n  }, {\n    \"name\" : \"Start_Prowler_Checks\",\n    \"action\" : \"aws:executeAwsApi\",\n    \"inputs\" : {\n      \"Service\" : \"codebuild\",\n      \"Api\" : \"StartBuild\",\n      \"projectName\" : \"ams-prowler-project\"\n    },\n    \"description\" : \"Start the prowler CodeBuild project\",\n    \"maxAttempts\" : 3,\n    \"onFailure\" : \"step:Send_Failed_Notification\",\n    \"onCancel\" : \"step:Send_Failed_Notification\"\n  }, {\n    \"name\" : \"Wait_For_Prowler_Completion\",\n    \"action\" : \"aws:approve\",\n    \"inputs\" : {\n      \"Approvers\" : [ \"arn:aws:iam::{{global:ACCOUNT_ID}}:role/ams-codebuild-project-role\", \"{{AutomationAssumeRole}}\" ]\n    },\n    \"description\" : \"This step waits for a success signal from Codebuild \",\n    \"onFailure\" : \"step:Send_Failed_Notification\",\n    \"nextStep\" : \"Send_Success_Notification\",\n    \"timeoutSeconds\" : 32400,\n    \"onCancel\" : \"step:Send_Failed_Notification\"\n  }, {\n    \"name\" : \"Clean_Up\",\n    \"action\" : \"aws:executeScript\",\n    \"inputs\" : {\n      \"Runtime\" : \"python3.6\",\n      \"Handler\" : \"clean_up\",\n      \"Script\" : \"import boto3\\nimport botocore\\n\\ndef clean_up(events, context):\\n    primaryRegion = events[\\\"primaryRegion\\\"]\\n    bucketName = events[\\\"bucketName\\\"]\\n    topicARN = events[\\\"topicARN\\\"]\\n\\n    cfnclient = boto3.client('cloudformation', region_name=primaryRegion)\\n    s3resource = boto3.resource('s3', region_name=primaryRegion)\\n    s3client = boto3.client('s3',region_name=primaryRegion)\\n    snsclient = boto3.client('sns', region_name=primaryRegion)\\n\\n    clean_stack(\\\"ams-prowler-stack\\\", cfnclient)\\n    clean_stack(\\\"ams-access-management\\\", cfnclient)\\n    clean_topic(topicARN, snsclient)\\n    clean_bucket(bucketName, s3resource,s3client)\\n    \\n    \\n    \\ndef clean_stack(name, client):\\n    try:\\n        data = client.describe_stacks(StackName=name)\\n        if((data['Stacks'][0]['Tags'][0]['Key']=='AppName') and (data['Stacks'][0]['Tags'][0]['Value']=='AMSInfrastructure')):\\n            data = client.delete_stack(StackName=name)\\n            waiter = client.get_waiter('stack_delete_complete')\\n            waiter.wait(StackName=name,\\n               WaiterConfig={\\n                 'Delay': 30,\\n                 'MaxAttempts': 10\\n                }\\n            )\\n            print (\\\"Cleaned the stack - \\\" + name)\\n    except botocore.exceptions.ClientError as error:\\n        if error.response['Error']['Code'] == 'ValidationError':\\n            print (\\\"Stack does not exist, nothing to clean up\\\")\\n        else:\\n            raise error\\n\\ndef clean_bucket(bucketName,s3resource,s3client):\\n    try:\\n        s3_bucket = s3resource.Bucket(bucketName)\\n        response=s3client.get_bucket_tagging(Bucket=bucketName)\\n        if((response['TagSet'][0]['Key']=='AppName') and (response['TagSet'][0]['Value']=='AMSInfrastructure')):\\n            s3_bucket.objects.all().delete()\\n            s3_bucket.delete()\\n            print(\\\"Deleted ams-prowler-<region>-<accountid> bucket\\\")\\n    except s3client.exceptions.NoSuchBucket:\\n        print (\\\"ams-prowler-<region>-<accountid> bucket does not exist\\\")\\n    except botocore.exceptions.ClientError as error:\\n        if error.response['Error']['Code']=='NoSuchTagSet':\\n            print(\\\"Automation did not create the ams-prowler-<region>-<accountid> bucket, leaving it\\\")\\n        else:\\n            raise error\\ndef clean_topic(topicARN, client):\\n    try:\\n        response = client.delete_topic(TopicArn=topicARN)\\n    except client.exceptions.NotFoundException:\\n        return True\\n    except botocore.exceptions.ClientError as error:\\n        raise error\\n      \\n        \\n        \\n\",\n      \"InputPayload\" : {\n        \"primaryRegion\" : \"{{global:REGION}}\",\n        \"bucketName\" : \"ams-prowler-output-{{global:REGION}}-{{global:ACCOUNT_ID}}\",\n        \"topicARN\" : \"arn:aws:sns:{{global:REGION}}:{{global:ACCOUNT_ID}}:ams-accelerate-onboarding\"\n      }\n    },\n    \"description\" : \"Cleans up deployed resources in case of a failure\",\n    \"isEnd\" : true\n  }, {\n    \"name\" : \"Send_Success_Notification\",\n    \"action\" : \"aws:executeAwsApi\",\n    \"inputs\" : {\n      \"Service\" : \"sns\",\n      \"Api\" : \"publish\",\n      \"TopicArn\" : \"arn:aws:sns:{{global:REGION}}:{{global:ACCOUNT_ID}}:ams-accelerate-onboarding\",\n      \"Message\" : \"Pre-Onboarding Succeeded for Account: {{global:ACCOUNT_ID}}. \\n\\nProwler report is saved to ams-prowler-output-{{global:ACCOUNT_ID}} S3 bucket\",\n      \"Subject\" : \"{{global:ACCOUNT_ID}} Pre-Onboarding Succeeded\"\n    },\n    \"description\" : \"Pushes a notification to the Email supplied in the parameters if Automation Doc Succeeds\",\n    \"isEnd\" : false,\n    \"nextStep\" : \"Clean_up_on_success\",\n    \"onFailure\" : \"step:Clean_up_on_success\"\n  }, {\n    \"name\" : \"Send_Failed_Notification\",\n    \"action\" : \"aws:executeAwsApi\",\n    \"inputs\" : {\n      \"Service\" : \"sns\",\n      \"Api\" : \"publish\",\n      \"TopicArn\" : \"arn:aws:sns:{{global:REGION}}:{{global:ACCOUNT_ID}}:ams-accelerate-onboarding\",\n      \"Message\" : \"Pre-Onboarding failed for Account: {{global:ACCOUNT_ID}}. Please refer to Execution ID: {{automation:EXECUTION_ID}} for more details\\n\\nClick on the following link to go to the execution details\\nhttps://{{global:REGION}}.console.aws.amazon.com/systems-manager/automation/execution/{{automation:EXECUTION_ID}}?region={{global:REGION}}\\n\\nCLI Command\\naws ssm describe-automation-executions --filters Key=ExecutionId,Values={{automation:EXECUTION_ID}} --region {{global:REGION}}\\n\\nPlease re-run the document once the errors are fixed\",\n      \"Subject\" : \"{{global:ACCOUNT_ID}} Onboarding Failed\"\n    },\n    \"description\" : \"Pushes a notification to the Email supplied in the parameters if Automation Doc Fails\",\n    \"isEnd\" : false,\n    \"maxAttempts\" : 3,\n    \"nextStep\" : \"Clean_Up\"\n  }, {\n    \"name\" : \"Clean_up_on_success\",\n    \"action\" : \"aws:deleteStack\",\n    \"inputs\" : {\n      \"StackName\" : \"ams-prowler-stack\"\n    },\n    \"description\" : \"Deletes the ams-prowler-stack and retains the S3 Bucket with prowler output\",\n    \"isEnd\" : false,\n    \"maxAttempts\" : 3,\n    \"nextStep\" : \"Clean_Up_SNS_Topic\",\n    \"onFailure\" : \"step:Clean_Up_SNS_Topic\",\n    \"onCancel\" : \"step:Clean_Up_SNS_Topic\"\n  }, {\n    \"name\" : \"Clean_Up_SNS_Topic\",\n    \"action\" : \"aws:executeAwsApi\",\n    \"inputs\" : {\n      \"Service\" : \"sns\",\n      \"Api\" : \"DeleteTopic\",\n      \"TopicArn\" : \"arn:aws:sns:{{global:REGION}}:{{global:ACCOUNT_ID}}:ams-accelerate-onboarding\"\n    },\n    \"description\" : \"Deletes the SNS topic created for notifiying success/failure\",\n    \"maxAttempts\" : 3,\n    \"isEnd\" : true\n  } ]\n}",
  "CreatedDate": "2022-10-27T23:26:53.773Z",
  "DisplayName": null,
  "DocumentFormat": {
    "Value": "JSON"
  },
  "DocumentType": {
    "Value": "Automation"
  },
  "DocumentVersion": "5",
  "Name": "arn:aws:ssm:us-west-2:642716667674:document/AMS-Accelerate-Onboarding",
  "Requires": [],
  "ReviewStatus": null,
  "Status": {
    "Value": "Active"
  },
  "StatusInformation": null,
  "VersionName": null,
  "ResponseMetadata": {
    "RequestId": "365e228d-623a-4309-b95f-bf63ed183089",
    "Metadata": {},
    "ChecksumAlgorithm": 0,
    "ChecksumValidationStatus": 0
  },
  "ContentLength": 29863,
  "HttpStatusCode": 200,
  "LoggedAt": "2022-12-20T07:11:32.6935328+00:00"
}
