{
  "AttachmentsContent": [],
  "Content": "{\n  \"description\" : \"## Id\\nAWSResilienceHub-RestoreDocumentDBClusterFromBackupSOP_2020-09-21\\n\\n## Intent\\nUsed to recover the database into a known good state\\n\\n## Type\\nSOP\\n\\n## Risk\\nMedium\\n\\n## Requirements\\n  * Available DocumentDB Cluster with a backup snapshot\\n\\n## Permissions required for AutomationAssumeRole\\n  * rds:CreateDBInstance\\n  * rds:DescribeDBClusters\\n  * rds:DescribeDBInstances\\n  * rds:DescribeDBClusterSnapshots\\n  * rds:ModifyDBCluster\\n  * rds:ModifyDBInstance\\n  * rds:RestoreDBClusterFromSnapshot\\n\\n##### In case cluster is encrypted with a KMS key\\n  * kms:CreateGrant\\n  * kms:DescribeKey\\n\\n## Cancellation behavior\\nFail\\n\\n## Inputs\\n### (Required) AutomationAssumeRole\\n  * type: String\\n  * description: ARN of the IAM role with permissions listed above\\n\\n### (Required) DBClusterIdentifier\\n  * type: String\\n  * description: DocumentDB Cluster Identifier\\n\\n### (Required) DBSnapshotIdentifier\\n  * type: String\\n  * description: DocumentDB Snapshot Identifier\\n\\n## Details\\nThe document restores DocumentDB cluster and instances from the latest or the specified snapshot. The source\\ncluster and instances are replaced by adding \\\"-replaced\\\" to their identifiers while the restored ones are\\nrenamed to have the original identifiers of the sources. The document then waits for cluster and instances\\nto become available. Original cluster and identifiers are kept with the \\\"-replaced\\\" suffix. In case of\\nissues users may need to remove restored cluster and instances and remove the \\\"-replaced\\\" suffix from the\\noriginal ones. If renaming failed, cluster with the suffix \\\"-restored-from-backup\\\" and instances with the\\nsuffix \\\"-restored\\\" may remain and should be renamed manually or removed.\\n\\n## Steps executed in normal flow\\n  * RecordStartTime\\n  * BackupDbClusterMetadata\\n  * BackupDbClusterInstancesMetadata\\n  * GetLatestSnapshotIdentifier\\n  * RestoreDocDbCluster\\n  * WaitUntilClusterStateAvailable\\n  * RestoreDocDbClusterInstances\\n  * RenameReplacedDocDbCluster\\n  * WaitUntilInstanceStateAvailable\\n  * RenameRestoredDocDbInstances\\n  * RenameRestoredCluster\\n  * WaitUntilRestoredInstancesAvailable\\n  * OutputRecoveryTime\\n\\n## Outputs\\n### OutputRecoveryTime.RecoveryTime\\n  * type: Integer\\n  * description: SOP execution time in seconds\\n\\n### BackupDbClusterMetadata.BackupDbClusterInstancesCountValue\\n* type: MapList\\n* description: List of instances before recovery\\n\\n### BackupDbClusterMetadata.AvailabilityZones\\n* type: StringList\\n* description: List of cluster's availability zones\\n\\n### BackupDbClusterInstancesMetadata.DBClusterInstancesMetadata\\n* type: StringMap\\n* description: List of instances metadata before recovery\\n\\n### GetLatestSnapshotIdentifier.LatestSnapshot\\n* type: String\\n* description: Latest available snapshot ID\\n\\n### GetLatestSnapshotIdentifier.LatestSnapshotEngine\\n* type: String\\n* description: Latest available snapshot engine\\n\\n### GetLatestSnapshotIdentifier.LatestClusterIdentifier\\n* type: String\\n* description: Latest available snapshot cluster ID\\n\\n### RestoreDocDbCluster.RestoredClusterIdentifier\\n* type: String\\n* description: Cluster ID after recovery\\n\\n### RestoreDocDbClusterInstances.RestoredInstancesIdentifiers\\n* type: StringList\\n* description: List of restored Instance IDs after recovery\\n\\n### RenameReplacedDocDbCluster.ReplacedClusterIdentifier\\n* type: String\\n* description: Cluster ID after recovery and rename\\n\\n### RenameReplacedDocDbInstances.ReplacedInstancesIdentifiers\\n* type: String\\n* description: List of resplaced Instance IDs after recovery and rename\\n\\n### RenameRestoredDocDbInstances.RestoredInstancesIdentifiers\\n* type: String\\n* description: List of restored Instance IDs after recovery and rename\",\n  \"schemaVersion\" : \"0.3\",\n  \"assumeRole\" : \"{{ AutomationAssumeRole }}\",\n  \"outputs\" : [ \"BackupDbClusterMetadata.BackupDbClusterInstancesCountValue\", \"BackupDbClusterMetadata.AvailabilityZones\", \"BackupDbClusterInstancesMetadata.DBClusterInstancesMetadata\", \"GetLatestSnapshotIdentifier.LatestSnapshot\", \"GetLatestSnapshotIdentifier.LatestSnapshotEngine\", \"GetLatestSnapshotIdentifier.LatestClusterIdentifier\", \"RestoreDocDbCluster.RestoredClusterIdentifier\", \"RestoreDocDbClusterInstances.RestoredInstancesIdentifiers\", \"RenameReplacedDocDbCluster.ReplacedClusterIdentifier\", \"RenameReplacedDocDbInstances.ReplacedInstancesIdentifiers\", \"RenameRestoredDocDbInstances.RestoredInstancesIdentifiers\", \"OutputRecoveryTime.RecoveryTime\" ],\n  \"parameters\" : {\n    \"DBClusterIdentifier\" : {\n      \"type\" : \"String\",\n      \"description\" : \"(Required) DocDb Cluster Identifier\"\n    },\n    \"DBSnapshotIdentifier\" : {\n      \"type\" : \"String\",\n      \"default\" : \"latest\",\n      \"description\" : \"(Optional) DocDb Snapshot Identifier\"\n    },\n    \"AutomationAssumeRole\" : {\n      \"type\" : \"String\",\n      \"description\" : \"(Required) The ARN of the role that allows Automation to perform the actions on your behalf. If no role is specified, Systems Manager Automation uses your IAM permissions to run this document.\"\n    }\n  },\n  \"mainSteps\" : [ {\n    \"name\" : \"RecordStartTime\",\n    \"description\" : \"Start recording execution time\",\n    \"action\" : \"aws:executeScript\",\n    \"outputs\" : [ {\n      \"Name\" : \"StartTime\",\n      \"Selector\" : \"$.Payload\",\n      \"Type\" : \"String\"\n    } ],\n    \"inputs\" : {\n      \"Runtime\" : \"python3.8\",\n      \"Handler\" : \"start_time\",\n      \"Script\" : \"import logging\\nimport time\\nfrom datetime import datetime, timezone\\n\\nimport boto3\\nfrom botocore.exceptions import ClientError\\nfrom dateutil import parser\\n\\nlogger = logging.getLogger()\\nlogger.setLevel(logging.INFO)\\n\\n\\n\\ndef start_time(events, context):\\n    return datetime.now(timezone.utc).isoformat()\"\n    }\n  }, {\n    \"name\" : \"BackupDbClusterMetadata\",\n    \"action\" : \"aws:executeAwsApi\",\n    \"description\" : \"Backup current DbClusterInstances value\",\n    \"inputs\" : {\n      \"Service\" : \"docdb\",\n      \"Api\" : \"DescribeDBClusters\",\n      \"Filters\" : [ {\n        \"Name\" : \"db-cluster-id\",\n        \"Values\" : [ \"{{ DBClusterIdentifier }}\" ]\n      } ]\n    },\n    \"outputs\" : [ {\n      \"Name\" : \"BackupDbClusterInstancesCountValue\",\n      \"Selector\" : \"$.DBClusters[0].DBClusterMembers\",\n      \"Type\" : \"MapList\"\n    }, {\n      \"Name\" : \"AvailabilityZones\",\n      \"Selector\" : \"$.DBClusters[0].AvailabilityZones\",\n      \"Type\" : \"StringList\"\n    } ]\n  }, {\n    \"name\" : \"BackupDbClusterInstancesMetadata\",\n    \"action\" : \"aws:executeScript\",\n    \"description\" : \"Backup current DbClusterInstances type\",\n    \"onFailure\" : \"Abort\",\n    \"outputs\" : [ {\n      \"Name\" : \"DBClusterInstancesMetadata\",\n      \"Selector\" : \"$.Payload.DBClusterInstancesMetadata\",\n      \"Type\" : \"StringMap\"\n    } ],\n    \"inputs\" : {\n      \"Runtime\" : \"python3.8\",\n      \"Handler\" : \"backup_cluster_instances_type\",\n      \"InputPayload\" : {\n        \"DBClusterIdentifier\" : \"{{ DBClusterIdentifier }}\",\n        \"DBClusterInstances\" : \"{{ BackupDbClusterMetadata.BackupDbClusterInstancesCountValue }}\"\n      },\n      \"Script\" : \"import logging\\nimport random\\nimport time\\nimport uuid\\nfrom concurrent.futures import ThreadPoolExecutor\\nfrom datetime import datetime\\nfrom operator import itemgetter\\nfrom typing import List\\n\\nimport boto3\\nfrom botocore.config import Config\\n\\nRESTORED_CLUSTER_SUFFIX_FORMAT = '%m-%d-%Y-%H-%M-%S'\\n\\nif len(logging.getLogger().handlers) > 0:\\n    # The Lambda environment pre-configures a handler logging to stderr. If a handler is already configured,\\n    # `.basicConfig` does not execute. Thus we set the level directly.\\n    logging.getLogger().setLevel(logging.INFO)\\nelse:\\n    logging.basicConfig(level=logging.INFO)\\nlogger = logging.getLogger(__name__)\\n\\n\\n\\ndef backup_cluster_instances_type(events, context):\\n    try:\\n        config = Config(retries={'max_attempts': 20, 'mode': 'standard'})\\n        docdb = boto3.client('docdb', config=config)\\n        restorable_instances_metadata = {}\\n        instance_type = {}\\n        instances = events['DBClusterInstances']\\n        for instance in instances:\\n            response = docdb.describe_db_instances(DBInstanceIdentifier=instance['DBInstanceIdentifier'])\\n            print(response)\\n            instance_id = instance['DBInstanceIdentifier']\\n            instance_type[instance_id] = {\\n                'DBInstanceClass': response['DBInstances'][0]['DBInstanceClass'],\\n                'Engine': response['DBInstances'][0]['Engine'],\\n                'AvailabilityZone': response['DBInstances'][0]['AvailabilityZone']\\n            }\\n            restorable_instances_metadata.update(instance_type)\\n        return {'DBClusterInstancesMetadata': restorable_instances_metadata}\\n    except Exception as e:\\n        print(f'Error: {e}')\\n        raise\"\n    }\n  }, {\n    \"name\" : \"GetLatestSnapshotIdentifier\",\n    \"action\" : \"aws:executeScript\",\n    \"description\" : \"Get identifier of the latest snapshot\",\n    \"onFailure\" : \"Abort\",\n    \"outputs\" : [ {\n      \"Name\" : \"LatestSnapshot\",\n      \"Selector\" : \"$.Payload.LatestSnapshotIdentifier\",\n      \"Type\" : \"String\"\n    }, {\n      \"Name\" : \"LatestSnapshotEngine\",\n      \"Selector\" : \"$.Payload.LatestSnapshotEngine\",\n      \"Type\" : \"String\"\n    }, {\n      \"Name\" : \"LatestClusterIdentifier\",\n      \"Selector\" : \"$.Payload.LatestClusterIdentifier\",\n      \"Type\" : \"String\"\n    } ],\n    \"inputs\" : {\n      \"Runtime\" : \"python3.8\",\n      \"Handler\" : \"get_latest_snapshot_id\",\n      \"InputPayload\" : {\n        \"DBClusterIdentifier\" : \"{{ DBClusterIdentifier }}\"\n      },\n      \"Script\" : \"import logging\\nimport random\\nimport time\\nimport uuid\\nfrom concurrent.futures import ThreadPoolExecutor\\nfrom datetime import datetime\\nfrom operator import itemgetter\\nfrom typing import List\\n\\nimport boto3\\nfrom botocore.config import Config\\n\\nRESTORED_CLUSTER_SUFFIX_FORMAT = '%m-%d-%Y-%H-%M-%S'\\n\\nif len(logging.getLogger().handlers) > 0:\\n    # The Lambda environment pre-configures a handler logging to stderr. If a handler is already configured,\\n    # `.basicConfig` does not execute. Thus we set the level directly.\\n    logging.getLogger().setLevel(logging.INFO)\\nelse:\\n    logging.basicConfig(level=logging.INFO)\\nlogger = logging.getLogger(__name__)\\n\\n\\n\\ndef get_latest_snapshot_id(events, context):\\n    try:\\n        config = Config(retries={'max_attempts': 20, 'mode': 'standard'})\\n        docdb = boto3.client('docdb', config=config)\\n        paginator = docdb.get_paginator('describe_db_cluster_snapshots')\\n        page_iterator = paginator.paginate(\\n            DBClusterIdentifier=events['DBClusterIdentifier']\\n        )\\n        filtered_iterator = page_iterator.search(\\\"sort_by(DBClusterSnapshots, &to_string(SnapshotCreateTime))[-1]\\\")\\n        latest_snapshot = None\\n        for snapshot in filtered_iterator:\\n            latest_snapshot = snapshot\\n        if latest_snapshot:\\n            return {\\n                'LatestSnapshotIdentifier': latest_snapshot['DBClusterSnapshotIdentifier'],\\n                'LatestSnapshotEngine': latest_snapshot['Engine'],\\n                'LatestClusterIdentifier': latest_snapshot['DBClusterIdentifier']\\n            }\\n        else:\\n            raise Exception(\\n                f\\\"No snapshots found for cluster {events['DBClusterIdentifier']}\\\")\\n    except Exception as e:\\n        print(f'Error: {e}')\\n        raise\"\n    }\n  }, {\n    \"name\" : \"RestoreDocDbCluster\",\n    \"action\" : \"aws:executeScript\",\n    \"description\" : \"Restore cluster from the snapshot\",\n    \"onFailure\" : \"Abort\",\n    \"outputs\" : [ {\n      \"Name\" : \"RestoredClusterIdentifier\",\n      \"Selector\" : \"$.Payload.RestoredClusterIdentifier\",\n      \"Type\" : \"String\"\n    } ],\n    \"inputs\" : {\n      \"Runtime\" : \"python3.8\",\n      \"Handler\" : \"restore_db_cluster\",\n      \"InputPayload\" : {\n        \"DBClusterIdentifier\" : \"{{ DBClusterIdentifier }}\",\n        \"DBSnapshotIdentifier\" : \"{{ DBSnapshotIdentifier }}\",\n        \"LatestSnapshotIdentifier\" : \"{{ GetLatestSnapshotIdentifier.LatestSnapshot }}\",\n        \"LatestSnapshotEngine\" : \"{{ GetLatestSnapshotIdentifier.LatestSnapshotEngine }}\",\n        \"AvailabilityZones\" : \"{{ BackupDbClusterMetadata.AvailabilityZones }}\"\n      },\n      \"Script\" : \"import logging\\nimport random\\nimport time\\nimport uuid\\nfrom concurrent.futures import ThreadPoolExecutor\\nfrom datetime import datetime\\nfrom operator import itemgetter\\nfrom typing import List\\n\\nimport boto3\\nfrom botocore.config import Config\\n\\nRESTORED_CLUSTER_SUFFIX_FORMAT = '%m-%d-%Y-%H-%M-%S'\\n\\nif len(logging.getLogger().handlers) > 0:\\n    # The Lambda environment pre-configures a handler logging to stderr. If a handler is already configured,\\n    # `.basicConfig` does not execute. Thus we set the level directly.\\n    logging.getLogger().setLevel(logging.INFO)\\nelse:\\n    logging.basicConfig(level=logging.INFO)\\nlogger = logging.getLogger(__name__)\\n\\n\\n\\ndef restore_db_cluster(events, context):\\n    try:\\n        config = Config(retries={'max_attempts': 20, 'mode': 'standard'})\\n        docdb = boto3.client('docdb', config=config)\\n        restored_cluster_identifier = events['DBClusterIdentifier'] + '-restored-from-backup-' + \\\\\\n            datetime.now().strftime(RESTORED_CLUSTER_SUFFIX_FORMAT)\\n        db_cluster = docdb.describe_db_clusters(\\n            DBClusterIdentifier=events['DBClusterIdentifier']\\n        )\\n        if 'DBClusters' in db_cluster and db_cluster['DBClusters']:\\n            db_subnet_group = db_cluster['DBClusters'][0]['DBSubnetGroup']\\n            db_sgs = [x['VpcSecurityGroupId'] for x in db_cluster['DBClusters'][0]['VpcSecurityGroups']]\\n        else:\\n            raise AssertionError(f'No db cluster found with id: {events[\\\"DBClusterIdentifier\\\"]}')\\n        if events['DBSnapshotIdentifier'] == '' or events['DBSnapshotIdentifier'] == 'latest':\\n            docdb.restore_db_cluster_from_snapshot(\\n                DBClusterIdentifier=restored_cluster_identifier,\\n                SnapshotIdentifier=events['LatestSnapshotIdentifier'],\\n                DBSubnetGroupName=db_subnet_group,\\n                VpcSecurityGroupIds=db_sgs,\\n                Engine=events['LatestSnapshotEngine'],\\n                AvailabilityZones=events['AvailabilityZones']\\n            )\\n        else:\\n            docdb.restore_db_cluster_from_snapshot(\\n                DBClusterIdentifier=restored_cluster_identifier,\\n                SnapshotIdentifier=events['DBSnapshotIdentifier'],\\n                DBSubnetGroupName=db_subnet_group,\\n                VpcSecurityGroupIds=db_sgs,\\n                Engine=events['LatestSnapshotEngine'],\\n                AvailabilityZones=events['AvailabilityZones']\\n            )\\n        return {'RestoredClusterIdentifier': restored_cluster_identifier}\\n    except Exception as e:\\n        print(f'Error: {e}')\\n        raise\"\n    }\n  }, {\n    \"name\" : \"WaitUntilClusterStateAvailable\",\n    \"description\" : \"Wait for cluster to be in status available\",\n    \"action\" : \"aws:waitForAwsResourceProperty\",\n    \"timeoutSeconds\" : 1200,\n    \"inputs\" : {\n      \"Service\" : \"docdb\",\n      \"Api\" : \"DescribeDBClusters\",\n      \"DBClusterIdentifier\" : \"{{ RestoreDocDbCluster.RestoredClusterIdentifier }}\",\n      \"PropertySelector\" : \"$.DBClusters[0].Status\",\n      \"DesiredValues\" : [ \"available\" ]\n    }\n  }, {\n    \"name\" : \"RestoreDocDbClusterInstances\",\n    \"action\" : \"aws:executeScript\",\n    \"description\" : \"Restore cluster database instances\",\n    \"onFailure\" : \"Abort\",\n    \"outputs\" : [ {\n      \"Name\" : \"RestoredInstancesIdentifiers\",\n      \"Selector\" : \"$.Payload\",\n      \"Type\" : \"StringList\"\n    } ],\n    \"inputs\" : {\n      \"Runtime\" : \"python3.8\",\n      \"Handler\" : \"restore_db_cluster_instances\",\n      \"InputPayload\" : {\n        \"BackupDbClusterInstancesCountValue\" : \"{{ BackupDbClusterMetadata.BackupDbClusterInstancesCountValue }}\",\n        \"DBClusterIdentifier\" : \"{{ RestoreDocDbCluster.RestoredClusterIdentifier }}\",\n        \"DBClusterInstancesMetadata\" : \"{{ BackupDbClusterInstancesMetadata.DBClusterInstancesMetadata }}\"\n      },\n      \"Script\" : \"import logging\\nimport random\\nimport time\\nimport uuid\\nfrom concurrent.futures import ThreadPoolExecutor\\nfrom datetime import datetime\\nfrom operator import itemgetter\\nfrom typing import List\\n\\nimport boto3\\nfrom botocore.config import Config\\n\\nRESTORED_CLUSTER_SUFFIX_FORMAT = '%m-%d-%Y-%H-%M-%S'\\n\\nif len(logging.getLogger().handlers) > 0:\\n    # The Lambda environment pre-configures a handler logging to stderr. If a handler is already configured,\\n    # `.basicConfig` does not execute. Thus we set the level directly.\\n    logging.getLogger().setLevel(logging.INFO)\\nelse:\\n    logging.basicConfig(level=logging.INFO)\\nlogger = logging.getLogger(__name__)\\n\\n\\n\\ndef restore_db_cluster_instances(events, context):\\n    try:\\n        config = Config(retries={'max_attempts': 20, 'mode': 'standard'})\\n        docdb = boto3.client('docdb', config=config)\\n        print(events['BackupDbClusterInstancesCountValue'])\\n        instances = events['BackupDbClusterInstancesCountValue']\\n        instances_sorted = sorted(instances, key=itemgetter('IsClusterWriter'), reverse=True)\\n        db_cluster_identifier = events['DBClusterIdentifier']\\n        restored_instances_identifiers = []\\n        cluster_info = docdb.describe_db_clusters(DBClusterIdentifier=db_cluster_identifier)['DBClusters'][0]\\n        new_cluster_azs = cluster_info['AvailabilityZones']\\n        instances_by_az = {}\\n        for az in new_cluster_azs:\\n            instances_by_az[az] = 0\\n        for instance in instances_sorted:\\n            primary_instance = 1 if instance['IsClusterWriter'] else 2\\n            restorable_instance_identifier = instance['DBInstanceIdentifier']\\n            restored_instance_identifier = instance['DBInstanceIdentifier'] + '-restored'\\n            if events['DBClusterInstancesMetadata'][restorable_instance_identifier]['AvailabilityZone'] \\\\\\n                    in new_cluster_azs:\\n                availability_zone = events['DBClusterInstancesMetadata'][restorable_instance_identifier][\\n                    'AvailabilityZone']\\n            else:\\n                availability_zone = sorted(instances_by_az, key=instances_by_az.get)[0]\\n            instances_by_az[availability_zone] += 1\\n            docdb.create_db_instance(\\n                DBInstanceIdentifier=restored_instance_identifier,\\n                DBInstanceClass=events['DBClusterInstancesMetadata'][restorable_instance_identifier]['DBInstanceClass'],\\n                Engine=events['DBClusterInstancesMetadata'][restorable_instance_identifier]['Engine'],\\n                DBClusterIdentifier=db_cluster_identifier,\\n                AvailabilityZone=availability_zone,\\n                PromotionTier=primary_instance\\n            )\\n            restored_instances_identifiers.append(restored_instance_identifier)\\n        return restored_instances_identifiers\\n    except Exception as e:\\n        print(f'Error: {e}')\\n        raise\"\n    }\n  }, {\n    \"name\" : \"RenameReplacedDocDbCluster\",\n    \"action\" : \"aws:executeScript\",\n    \"description\" : \"Rename original cluster so it can be replaced with the restored one\",\n    \"onFailure\" : \"Abort\",\n    \"outputs\" : [ {\n      \"Name\" : \"ReplacedClusterIdentifier\",\n      \"Selector\" : \"$.Payload.ReplacedClusterIdentifier\",\n      \"Type\" : \"String\"\n    } ],\n    \"inputs\" : {\n      \"Runtime\" : \"python3.8\",\n      \"Handler\" : \"rename_replaced_db_cluster\",\n      \"InputPayload\" : {\n        \"DBClusterIdentifier\" : \"{{ DBClusterIdentifier }}\"\n      },\n      \"Script\" : \"import logging\\nimport random\\nimport time\\nimport uuid\\nfrom concurrent.futures import ThreadPoolExecutor\\nfrom datetime import datetime\\nfrom operator import itemgetter\\nfrom typing import List\\n\\nimport boto3\\nfrom botocore.config import Config\\n\\nRESTORED_CLUSTER_SUFFIX_FORMAT = '%m-%d-%Y-%H-%M-%S'\\n\\nif len(logging.getLogger().handlers) > 0:\\n    # The Lambda environment pre-configures a handler logging to stderr. If a handler is already configured,\\n    # `.basicConfig` does not execute. Thus we set the level directly.\\n    logging.getLogger().setLevel(logging.INFO)\\nelse:\\n    logging.basicConfig(level=logging.INFO)\\nlogger = logging.getLogger(__name__)\\n\\n\\n\\ndef rename_replaced_db_cluster(events, context):\\n    try:\\n        config = Config(retries={'max_attempts': 20, 'mode': 'standard'})\\n        docdb = boto3.client('docdb', config=config)\\n        db_cluster_identifier = events['DBClusterIdentifier']\\n        new_db_cluster_identifier = db_cluster_identifier + '-replaced'\\n        docdb.modify_db_cluster(\\n            DBClusterIdentifier=db_cluster_identifier,\\n            NewDBClusterIdentifier=new_db_cluster_identifier,\\n            ApplyImmediately=True,\\n        )\\n        return {'ReplacedClusterIdentifier': new_db_cluster_identifier}\\n    except Exception as e:\\n        print(f'Error: {e}')\\n        raise\"\n    }\n  }, {\n    \"name\" : \"RenameReplacedDocDbInstances\",\n    \"action\" : \"aws:executeScript\",\n    \"description\" : \"Rename original instances so they can be replaced with the restored ones\",\n    \"onFailure\" : \"Abort\",\n    \"outputs\" : [ {\n      \"Name\" : \"ReplacedInstancesIdentifiers\",\n      \"Selector\" : \"$.Payload\",\n      \"Type\" : \"StringList\"\n    } ],\n    \"inputs\" : {\n      \"Runtime\" : \"python3.8\",\n      \"Handler\" : \"rename_replaced_db_instances\",\n      \"InputPayload\" : {\n        \"DBClusterIdentifier\" : \"{{ RenameReplacedDocDbCluster.ReplacedClusterIdentifier }}\",\n        \"BackupDbClusterInstancesCountValue\" : \"{{ BackupDbClusterMetadata.BackupDbClusterInstancesCountValue }}\"\n      },\n      \"Script\" : \"import logging\\nimport random\\nimport time\\nimport uuid\\nfrom concurrent.futures import ThreadPoolExecutor\\nfrom datetime import datetime\\nfrom operator import itemgetter\\nfrom typing import List\\n\\nimport boto3\\nfrom botocore.config import Config\\n\\nRESTORED_CLUSTER_SUFFIX_FORMAT = '%m-%d-%Y-%H-%M-%S'\\n\\nif len(logging.getLogger().handlers) > 0:\\n    # The Lambda environment pre-configures a handler logging to stderr. If a handler is already configured,\\n    # `.basicConfig` does not execute. Thus we set the level directly.\\n    logging.getLogger().setLevel(logging.INFO)\\nelse:\\n    logging.basicConfig(level=logging.INFO)\\nlogger = logging.getLogger(__name__)\\n\\n\\n\\ndef rename_replaced_db_instances(events, context):\\n    try:\\n        config = Config(retries={'max_attempts': 20, 'mode': 'standard'})\\n        docdb = boto3.client('docdb', config=config)\\n        instances = events['BackupDbClusterInstancesCountValue']\\n        replaced_instances_identifiers = []\\n        for instance in instances:\\n            docdb.modify_db_instance(\\n                DBInstanceIdentifier=instance['DBInstanceIdentifier'],\\n                ApplyImmediately=True,\\n                NewDBInstanceIdentifier=instance['DBInstanceIdentifier'] + '-replaced',\\n            )\\n            replaced_instances_identifiers.append(instance['DBInstanceIdentifier'] + '-replaced')\\n        return replaced_instances_identifiers\\n    except Exception as e:\\n        print(f'Error: {e}')\\n        raise\"\n    }\n  }, {\n    \"name\" : \"WaitUntilInstanceStateAvailable\",\n    \"description\" : \"Wait for instances to be in status available\",\n    \"action\" : \"aws:waitForAwsResourceProperty\",\n    \"timeoutSeconds\" : 1200,\n    \"inputs\" : {\n      \"Service\" : \"docdb\",\n      \"Api\" : \"DescribeDBInstances\",\n      \"Filters\" : [ {\n        \"Name\" : \"db-cluster-id\",\n        \"Values\" : [ \"{{ RestoreDocDbCluster.RestoredClusterIdentifier }}\" ]\n      } ],\n      \"PropertySelector\" : \"$.DBInstances..DBInstanceStatus\",\n      \"DesiredValues\" : [ \"available\" ]\n    }\n  }, {\n    \"name\" : \"RenameRestoredDocDbInstances\",\n    \"action\" : \"aws:executeScript\",\n    \"description\" : \"Rename restored DocumentDB instances so they replace the original ones\",\n    \"onFailure\" : \"Abort\",\n    \"outputs\" : [ {\n      \"Name\" : \"RestoredInstancesIdentifiers\",\n      \"Selector\" : \"$.Payload\",\n      \"Type\" : \"StringList\"\n    } ],\n    \"inputs\" : {\n      \"Runtime\" : \"python3.8\",\n      \"Handler\" : \"rename_restored_db_instances\",\n      \"InputPayload\" : {\n        \"RestoredInstancesIdentifiers\" : \"{{ RestoreDocDbClusterInstances.RestoredInstancesIdentifiers }}\",\n        \"RestoredClusterIdentifier\" : \"{{ RestoreDocDbCluster.RestoredClusterIdentifier }}\"\n      },\n      \"Script\" : \"import logging\\nimport random\\nimport time\\nimport uuid\\nfrom concurrent.futures import ThreadPoolExecutor\\nfrom datetime import datetime\\nfrom operator import itemgetter\\nfrom typing import List\\n\\nimport boto3\\nfrom botocore.config import Config\\n\\nRESTORED_CLUSTER_SUFFIX_FORMAT = '%m-%d-%Y-%H-%M-%S'\\n\\nif len(logging.getLogger().handlers) > 0:\\n    # The Lambda environment pre-configures a handler logging to stderr. If a handler is already configured,\\n    # `.basicConfig` does not execute. Thus we set the level directly.\\n    logging.getLogger().setLevel(logging.INFO)\\nelse:\\n    logging.basicConfig(level=logging.INFO)\\nlogger = logging.getLogger(__name__)\\n\\n\\n\\ndef rename_restored_db_instances(events, context):\\n    try:\\n        config = Config(retries={'max_attempts': 20, 'mode': 'standard'})\\n        docdb = boto3.client('docdb', config=config)\\n        instances = events['RestoredInstancesIdentifiers']\\n        restored_instances_identifiers = []\\n        for instance in instances:\\n            restored_instance_identifier = instance.replace('-restored', '')\\n            docdb.modify_db_instance(\\n                DBInstanceIdentifier=instance,\\n                ApplyImmediately=True,\\n                NewDBInstanceIdentifier=restored_instance_identifier\\n            )\\n            restored_instances_identifiers.append(restored_instance_identifier)\\n        return restored_instances_identifiers\\n    except Exception as e:\\n        print(f'Error: {e}')\\n        raise\"\n    }\n  }, {\n    \"name\" : \"RenameRestoredCluster\",\n    \"action\" : \"aws:executeAwsApi\",\n    \"description\" : \"Rename restored DocumentDB cluster so it replaces the original one\",\n    \"inputs\" : {\n      \"Service\" : \"docdb\",\n      \"Api\" : \"ModifyDBCluster\",\n      \"DBClusterIdentifier\" : \"{{ RestoreDocDbCluster.RestoredClusterIdentifier }}\",\n      \"NewDBClusterIdentifier\" : \"{{ GetLatestSnapshotIdentifier.LatestClusterIdentifier }}\",\n      \"ApplyImmediately\" : true\n    }\n  }, {\n    \"name\" : \"WaitUntilRestoredInstancesAvailable\",\n    \"description\" : \"Wait for instances to be in status available\",\n    \"action\" : \"aws:waitForAwsResourceProperty\",\n    \"timeoutSeconds\" : 1200,\n    \"inputs\" : {\n      \"Service\" : \"docdb\",\n      \"Api\" : \"DescribeDBInstances\",\n      \"Filters\" : [ {\n        \"Name\" : \"db-cluster-id\",\n        \"Values\" : [ \"{{ DBClusterIdentifier }}\" ]\n      } ],\n      \"PropertySelector\" : \"$.DBInstances..DBInstanceStatus\",\n      \"DesiredValues\" : [ \"available\" ]\n    }\n  }, {\n    \"name\" : \"OutputRecoveryTime\",\n    \"description\" : \"Calculate execution time\",\n    \"action\" : \"aws:executeScript\",\n    \"outputs\" : [ {\n      \"Name\" : \"RecoveryTime\",\n      \"Selector\" : \"$.Payload\",\n      \"Type\" : \"Integer\"\n    } ],\n    \"inputs\" : {\n      \"Runtime\" : \"python3.8\",\n      \"Handler\" : \"recovery_time\",\n      \"Script\" : \"import logging\\nimport time\\nfrom datetime import datetime, timezone\\n\\nimport boto3\\nfrom botocore.exceptions import ClientError\\nfrom dateutil import parser\\n\\nlogger = logging.getLogger()\\nlogger.setLevel(logging.INFO)\\n\\n\\n\\ndef recovery_time(events, context):\\n    return (datetime.now(timezone.utc) - parser.parse(events['StartTime'])).seconds\",\n      \"InputPayload\" : {\n        \"StartTime\" : \"{{ RecordStartTime.StartTime }}\"\n      }\n    }\n  } ]\n}",
  "CreatedDate": "2023-02-19T17:16:18.866Z",
  "DisplayName": null,
  "DocumentFormat": {
    "Value": "JSON"
  },
  "DocumentType": {
    "Value": "Automation"
  },
  "DocumentVersion": "4",
  "Name": "AWSResilienceHub-RestoreDocumentDBClusterFromBackupSOP_2020-09-21",
  "Requires": [],
  "ReviewStatus": null,
  "Status": {
    "Value": "Active"
  },
  "StatusInformation": null,
  "VersionName": null,
  "ResponseMetadata": {
    "RequestId": "08b85d7b-36d7-404d-a12c-183ab8b11ab2",
    "Metadata": {},
    "ChecksumAlgorithm": 0,
    "ChecksumValidationStatus": 0
  },
  "ContentLength": 29395,
  "HttpStatusCode": 200,
  "LoggedAt": "2023-06-13T07:12:27.7634748+00:00"
}
