{
  "AttachmentsContent": [],
  "Content": "{\n  \"schemaVersion\": \"0.3\",\n  \"description\": \"AWSSupport-SetupIPMonitoringFromVPC creates an EC2 instance in the specified subnet and monitors selected target IPs by continuously running ping, MTR, traceroute and tracetcp tests. The results are stored in CloudWatch logs, and metric filters are applied to quickly visualize latency and packet loss statistics in a CloudWatch dashboard. The latest version of the runbook uses Amazon Cloudwatch Agent to send the metrics.\",\n  \"assumeRole\": \"{{ AutomationAssumeRole }}\",\n  \"parameters\": {\n    \"SubnetId\": {\n      \"type\": \"String\",\n      \"description\": \"(Required) The subnet ID for the monitor instance. NOTE: If you specify a private subnet, make sure there is Internet access to allow the monitor instance to setup the test (i.e. install the CloudWatch Logs agent, interact with AWS Systems Manager and Amazon CloudWatch).\",\n      \"allowedPattern\": \"^subnet-[a-z0-9]{8,17}$\"\n    },\n    \"TargetIPs\": {\n      \"type\": \"String\",\n      \"description\": \"(Required) Comma separated list of IPv4s and/or IPv6s to monitor. No spaces allowed. Maximum size is 255 characters. NOTE: If you provide an invalid IP, the automation will fail and rollback the test setup.\",\n      \"allowedPattern\": \"^[0-9a-fA-F.:,]{6,255}$\"\n    },\n    \"CloudWatchLogGroupNamePrefix\": {\n      \"description\": \"(Optional) Prefix used for each CloudWatch log group created for the test results.\",\n      \"type\": \"String\",\n      \"default\": \"/AWSSupport-SetupIPMonitoringFromVPC\",\n      \"allowedPattern\": \"^[0-9a-zA-Z_.#/\\\\-]{1,512}$\"\n    },\n    \"CloudWatchLogGroupRetentionInDays\": {\n      \"description\": \"(Optional) Number of days you want to keep the network monitoring results for.\",\n      \"type\": \"String\",\n      \"allowedValues\": [\n        \"1\",\n        \"3\",\n        \"5\",\n        \"7\",\n        \"14\",\n        \"30\",\n        \"60\",\n        \"90\",\n        \"120\",\n        \"150\",\n        \"180\",\n        \"365\",\n        \"400\",\n        \"545\",\n        \"731\",\n        \"1827\",\n        \"3653\"\n      ],\n      \"default\": \"7\"\n    },\n    \"InstanceType\": {\n      \"type\": \"String\",\n      \"description\": \"(Optional) The EC2 instance type for the test instance. Recommended size: t2.micro.\",\n      \"default\": \"t2.micro\",\n      \"allowedValues\": [\n        \"t2.micro\",\n        \"t2.small\",\n        \"t2.medium\",\n        \"t2.large\"\n      ]\n    },\n    \"AutomationAssumeRole\": {\n      \"type\": \"String\",\n      \"description\": \"(Optional) The IAM role for this execution. If no role is specified, AWS Systems Manager Automation will use the permissions of the user that executes this document.\",\n      \"default\": \"\"\n    }\n  },\n  \"mainSteps\": [\n    {\n      \"name\": \"describeSubnet\",\n      \"action\": \"aws:executeAwsApi\",\n      \"onFailure\": \"Abort\",\n      \"inputs\": {\n        \"Service\": \"ec2\",\n        \"Api\": \"DescribeSubnets\",\n        \"SubnetIds\": [\n          \"{{ SubnetId }}\"\n        ]\n      },\n      \"outputs\": [\n        {\n          \"Name\": \"VpcId\",\n          \"Selector\": \"$.Subnets[0].VpcId\"\n        }\n      ],\n      \"isCritical\": \"true\",\n      \"nextStep\": \"branchOnTargetIPs\"\n    },\n    {\n      \"name\": \"branchOnTargetIPs\",\n      \"action\": \"aws:branch\",\n      \"onFailure\": \"Abort\",\n      \"inputs\": {\n        \"Choices\": [\n          {\n            \"NextStep\": \"assertSubnetHasIPv6CidrBlock\",\n            \"Variable\": \"{{ TargetIPs }}\",\n            \"Contains\": \":\"\n          }\n        ],\n        \"Default\": \"getLatestLinuxAMI\"\n      },\n      \"isCritical\": \"true\"\n    },\n    {\n      \"name\": \"assertSubnetHasIPv6CidrBlock\",\n      \"action\": \"aws:assertAwsResourceProperty\",\n      \"onFailure\": \"Abort\",\n      \"inputs\": {\n        \"Service\": \"ec2\",\n        \"Api\": \"DescribeSubnets\",\n        \"SubnetIds\": [\n          \"{{ SubnetId }}\"\n        ],\n        \"PropertySelector\": \"$.Subnets[0].Ipv6CidrBlockAssociationSet[0].Ipv6CidrBlockState.State\",\n        \"DesiredValues\": [\n          \"associated\"\n        ]\n      },\n      \"isCritical\": \"true\",\n      \"nextStep\": \"getLatestLinuxAMI\"\n    },\n    {\n      \"name\": \"getLatestLinuxAMI\",\n      \"action\": \"aws:executeAwsApi\",\n      \"onFailure\": \"Abort\",\n      \"inputs\": {\n        \"Service\": \"ssm\",\n        \"Api\": \"GetParameter\",\n        \"Name\": \"/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2\"\n      },\n      \"outputs\": [\n        {\n          \"Name\": \"ImageId\",\n          \"Selector\": \"$.Parameter.Value\",\n          \"Type\": \"String\"\n        }\n      ],\n      \"isCritical\": \"true\",\n      \"nextStep\": \"createSecurityGroup\"\n    },\n    {\n      \"name\": \"createSecurityGroup\",\n      \"action\": \"aws:executeAwsApi\",\n      \"onFailure\": \"step:deleteSecurityGroup\",\n      \"inputs\": {\n        \"Service\": \"ec2\",\n        \"Api\": \"CreateSecurityGroup\",\n        \"VpcId\": \"{{ describeSubnet.VpcId }}\",\n        \"GroupName\": \"SetupIPMonitoringFromVPC_{{ automation:EXECUTION_ID }}\",\n        \"Description\": \"Security group used by the test instance created by AWSSupport-SetupIPMonitoringFromVPC Automation execution {{ automation:EXECUTION_ID }}.\"\n      },\n      \"outputs\": [\n        {\n          \"Name\": \"GroupId\",\n          \"Selector\": \"$.GroupId\"\n        }\n      ],\n      \"isCritical\": \"true\",\n      \"nextStep\": \"allowAllOutboundTrafficInSecurityGroup\"\n    },\n    {\n      \"name\": \"allowAllOutboundTrafficInSecurityGroup\",\n      \"action\": \"aws:executeAwsApi\",\n      \"onFailure\": \"step:deleteSecurityGroup\",\n      \"inputs\": {\n        \"Service\": \"ec2\",\n        \"Api\": \"AuthorizeSecurityGroupEgress\",\n        \"GroupId\": \"{{ createSecurityGroup.GroupId }}\",\n        \"IpPermissions\": [\n          {\n            \"IpProtocol\": \"-1\"\n          }\n        ]\n      },\n      \"isCritical\": \"true\",\n      \"nextStep\": \"createEC2Role\"\n    },\n    {\n      \"name\": \"createEC2Role\",\n      \"action\": \"aws:executeAwsApi\",\n      \"onFailure\": \"step:deleteEC2Role\",\n      \"inputs\": {\n        \"Service\": \"iam\",\n        \"Api\": \"CreateRole\",\n        \"RoleName\": \"SetupIPMonitoringFromVPC_{{ automation:EXECUTION_ID }}\",\n        \"Path\": \"/AWSSupport/\",\n        \"Description\": \"Role used by the test instance created by AWSSupport-SetupIPMonitoringFromVPC Automation execution {{ automation:EXECUTION_ID }}.\",\n        \"AssumeRolePolicyDocument\": \"{\\\"Version\\\": \\\"2012-10-17\\\",\\\"Statement\\\": [ { \\\"Effect\\\": \\\"Allow\\\", \\\"Principal\\\": { \\\"Service\\\": \\\"ec2.amazonaws.com\\\" }, \\\"Action\\\": \\\"sts:AssumeRole\\\" } ] }\"\n      },\n      \"outputs\": [\n        {\n          \"Name\": \"Name\",\n          \"Selector\": \"$.Role.RoleName\"\n        }\n      ],\n      \"isCritical\": \"true\",\n      \"nextStep\": \"attachSSMManagedPolicyToEC2Role\"\n    },\n    {\n      \"name\": \"attachSSMManagedPolicyToEC2Role\",\n      \"action\": \"aws:executeAwsApi\",\n      \"onFailure\": \"step:detachSSMManagedPolicyFromEC2Role\",\n      \"inputs\": {\n        \"Service\": \"iam\",\n        \"Api\": \"AttachRolePolicy\",\n        \"PolicyArn\": \"arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore\",\n        \"RoleName\": \"SetupIPMonitoringFromVPC_{{ automation:EXECUTION_ID }}\"\n      },\n      \"isCritical\": \"true\",\n      \"nextStep\": \"addCloudWatchInlinePolicyToEC2Role\"\n    },\n    {\n      \"name\": \"addCloudWatchInlinePolicyToEC2Role\",\n      \"action\": \"aws:executeAwsApi\",\n      \"onFailure\": \"step:removeCloudWatchInlinePolicyFromEC2Role\",\n      \"inputs\": {\n        \"Service\": \"iam\",\n        \"Api\": \"PutRolePolicy\",\n        \"RoleName\": \"SetupIPMonitoringFromVPC_{{ automation:EXECUTION_ID }}\",\n        \"PolicyName\": \"SetupIPMonitoringFromVPC_CWPermissions\",\n        \"PolicyDocument\": \"{    \\\"Version\\\": \\\"2012-10-17\\\",    \\\"Statement\\\": [        {            \\\"Effect\\\": \\\"Allow\\\",            \\\"Action\\\": [                \\\"logs:PutMetricFilter\\\",                \\\"logs:PutRetentionPolicy\\\",                \\\"logs:CreateLogGroup\\\",                \\\"logs:CreateLogStream\\\",                \\\"logs:DescribeLogGroups\\\",                \\\"logs:DescribeLogStreams\\\",                \\\"logs:PutLogEvents\\\"            ],            \\\"Resource\\\": \\\"arn:aws:logs:{{ global:REGION }}:{{ global:ACCOUNT_ID }}:log-group:/AWSSupport-SetupIPMonitoringFromVPC/*\\\"        },        {            \\\"Effect\\\": \\\"Allow\\\",            \\\"Action\\\": \\\"cloudwatch:PutDashboard\\\",            \\\"Resource\\\": \\\"*\\\"        }    ]}\"\n      },\n      \"isCritical\": \"true\",\n      \"nextStep\": \"createIAMInstanceProfile\"\n    },\n    {\n      \"name\": \"createIAMInstanceProfile\",\n      \"action\": \"aws:executeAwsApi\",\n      \"onFailure\": \"step:deleteIAMInstanceProfile\",\n      \"inputs\": {\n        \"Service\": \"iam\",\n        \"Api\": \"CreateInstanceProfile\",\n        \"InstanceProfileName\": \"SetupIPMonitoringFromVPC_{{ automation:EXECUTION_ID }}\",\n        \"Path\": \"/AWSSupport/\"\n      },\n      \"outputs\": [\n        {\n          \"Name\": \"Name\",\n          \"Selector\": \"$.InstanceProfile.InstanceProfileName\"\n        },\n        {\n          \"Name\": \"Arn\",\n          \"Selector\": \"$.InstanceProfile.Arn\"\n        }\n      ],\n      \"isCritical\": \"true\",\n      \"nextStep\": \"addIAMRoleToInstanceProfile\"\n    },\n    {\n      \"name\": \"addIAMRoleToInstanceProfile\",\n      \"action\": \"aws:executeAwsApi\",\n      \"onFailure\": \"step:removeIAMRoleFromInstanceProfile\",\n      \"inputs\": {\n        \"Service\": \"iam\",\n        \"Api\": \"AddRoleToInstanceProfile\",\n        \"RoleName\": \"{{ createEC2Role.Name }}\",\n        \"InstanceProfileName\": \"{{ createIAMInstanceProfile.Name }}\"\n      },\n      \"isCritical\": \"true\",\n      \"nextStep\": \"waitForInstanceProfileToBeAvailable\"\n    },\n    {\n      \"name\": \"waitForInstanceProfileToBeAvailable\",\n      \"action\": \"aws:sleep\",\n      \"onFailure\": \"Continue\",\n      \"inputs\": {\n        \"Duration\": \"PT60S\"\n      },\n      \"isCritical\": \"false\",\n      \"nextStep\": \"createManagedInstance\"\n    },\n    {\n      \"name\": \"createManagedInstance\",\n      \"action\": \"aws:executeAwsApi\",\n      \"onFailure\": \"step:terminateInstance\",\n      \"inputs\": {\n        \"Service\": \"ec2\",\n        \"Api\": \"RunInstances\",\n        \"ImageId\": \"{{ getLatestLinuxAMI.ImageId }}\",\n        \"InstanceType\": \"{{ InstanceType }}\",\n        \"MinCount\": 1,\n        \"MaxCount\": 1,\n        \"IamInstanceProfile\": {\n          \"Arn\": \"{{ createIAMInstanceProfile.Arn }}\"\n        },\n        \"NetworkInterfaces\": [\n          {\n            \"AssociatePublicIpAddress\": true,\n            \"DeleteOnTermination\": true,\n            \"DeviceIndex\": 0,\n            \"SubnetId\": \"{{ SubnetId }}\",\n            \"Groups\": [\n              \"{{ createSecurityGroup.GroupId }}\"\n            ]\n          }\n        ],\n        \"TagSpecifications\": [\n          {\n            \"ResourceType\": \"instance\",\n            \"Tags\": [\n              {\n                \"Key\": \"Name\",\n                \"Value\": \"AWSSupport-SetupIPMonitoringFromVPC - {{ SubnetId }}\"\n              },\n              {\n                \"Key\": \"AutomationExecutionId\",\n                \"Value\": \"{{ automation:EXECUTION_ID }}\"\n              },\n              {\n                \"Key\": \"TargetIPs\",\n                \"Value\": \"{{ TargetIPs }}\"\n              }\n            ]\n          }\n        ]\n      },\n      \"outputs\": [\n        {\n          \"Name\": \"InstanceId\",\n          \"Selector\": \"$.Instances[0].InstanceId\",\n          \"Type\": \"String\"\n        },\n        {\n          \"Name\": \"NetworkInterfaceId\",\n          \"Selector\": \"$.Instances[0].NetworkInterfaces[0].NetworkInterfaceId\",\n          \"Type\": \"String\"\n        }\n      ],\n      \"isCritical\": \"true\",\n      \"nextStep\": \"branchOnTargetIPsToAssignIPv6ToInstance\"\n    },\n    {\n      \"name\": \"branchOnTargetIPsToAssignIPv6ToInstance\",\n      \"action\": \"aws:branch\",\n      \"onFailure\": \"Abort\",\n      \"inputs\": {\n        \"Choices\": [\n          {\n            \"NextStep\": \"assignIPv6ToInstance\",\n            \"Variable\": \"{{ TargetIPs }}\",\n            \"Contains\": \":\"\n          }\n        ],\n        \"Default\": \"waitForInstanceToBeManaged\"\n      },\n      \"isCritical\": \"true\"\n    },\n    {\n      \"name\": \"assignIPv6ToInstance\",\n      \"action\": \"aws:executeAwsApi\",\n      \"onFailure\": \"step:terminateInstance\",\n      \"inputs\": {\n        \"Service\": \"ec2\",\n        \"Api\": \"AssignIpv6Addresses\",\n        \"NetworkInterfaceId\": \"{{ createManagedInstance.NetworkInterfaceId }}\",\n        \"Ipv6AddressCount\": 1\n      },\n      \"isCritical\": \"true\",\n      \"nextStep\": \"waitForInstanceToBeManaged\"\n    },\n    {\n      \"name\": \"waitForInstanceToBeManaged\",\n      \"action\": \"aws:waitForAwsResourceProperty\",\n      \"timeoutSeconds\": 600,\n      \"onFailure\": \"step:terminateInstance\",\n      \"inputs\": {\n        \"Service\": \"ssm\",\n        \"Api\": \"DescribeInstanceInformation\",\n        \"InstanceInformationFilterList\": [\n          {\n            \"key\": \"InstanceIds\",\n            \"valueSet\": [\n              \"{{ createManagedInstance.InstanceId }}\"\n            ]\n          }\n        ],\n        \"PropertySelector\": \"$.InstanceInformationList[0].PingStatus\",\n        \"DesiredValues\": [\n          \"Online\"\n        ]\n      },\n      \"isCritical\": \"true\",\n      \"nextStep\": \"installPrerequisites\"\n    },\n    {\n      \"name\": \"installPrerequisites\",\n      \"action\": \"aws:runCommand\",\n      \"onFailure\": \"step:terminateInstance\",\n      \"inputs\": {\n        \"DocumentName\": \"AWS-RunShellScript\",\n        \"InstanceIds\": [\n          \"{{ createManagedInstance.InstanceId }}\"\n        ],\n        \"Parameters\": {\n          \"commands\": [\n            \"#!/bin/bash\",\n            \"\",\n            \"sudo yum update -y &> /dev/null\",\n            \"sudo yum install -y python3 &> /dev/null\",\n            \"sudo yum install -y amazon-cloudwatch-agent &> /dev/null\"\n          ]\n        }\n      },\n      \"isCritical\": \"true\",\n      \"nextStep\": \"validateIPs\"\n    },\n    {\n      \"name\": \"validateIPs\",\n      \"action\": \"aws:runCommand\",\n      \"onFailure\": \"step:terminateInstance\",\n      \"inputs\": {\n        \"DocumentName\": \"AWS-RunShellScript\",\n        \"InstanceIds\": [\n          \"{{ createManagedInstance.InstanceId }}\"\n        ],\n        \"Parameters\": {\n          \"commands\": [\n            \"#!/bin/bash\",\n            \"\",\n            \"error_trap()\",\n            \"{\",\n            \"    if test -n \\\"$1\\\" ; then\",\n            \"        printf \\\"%s\\\\\\\\n\\\" \\\"$1\\\"\",\n            \"    fi\",\n            \"\",\n            \"    printf \\\"%.s=\\\" $(seq 1 80)\",\n            \"    printf \\\"\\\\\\\\nThe input parameter TargetIPs contains one or more invalid IPs. Please review your input and run this automation again.\\\\\\\\n\\\"\",\n            \"\",\n            \"    exit 1\",\n            \"}\",\n            \"\",\n            \"# Check that Python3 interpreter is available in the host environment\",\n            \"if command -v python3 > /dev/null; then\",\n            \"    PYTHON=python3\",\n            \"else\",\n            \"    error_trap \\\"Python3 is not installed!\\\"\",\n            \"fi\",\n            \"\",\n            \"printf \\\"Target IPs: {{ TargetIPs }}\\\\\\\\n\\\"\",\n            \"\",\n            \"# Verify all IPs are syntactically correct\",\n            \"printf \\\"Verifying IP addresses\\\\\\\\n\\\"\",\n            \"OUTPUT=\\\"$(${PYTHON} -c \\\"\",\n            \"import ipaddress\",\n            \"import sys\",\n            \"\",\n            \"def run():\",\n            \"    target_ips_input = '{{ TargetIPs }}'\",\n            \"    ip_addresses = target_ips_input.split(',')\",\n            \"    invalid_ip_addresses = []\",\n            \"    duplicate_ip_addresses = []\",\n            \"    error_message = ''\",\n            \"    for ip_address in ip_addresses:\",\n            \"        try:\",\n            \"            if ip_addresses.count(ip_address) > 1:\",\n            \"                if not ip_address in duplicate_ip_addresses:\",\n            \"                    duplicate_ip_addresses.append(ip_address)\",\n            \"            ipaddress.ip_address(ip_address)\",\n            \"        except ValueError as error:\",\n            \"            invalid_ip_addresses.append(ip_address)\",\n            \"    \",\n            \"    if invalid_ip_addresses:\",\n            \"        error_message = 'The following IP addresses are invalid: {}\\\\n'.format(','.join(invalid_ip_addresses))\",\n            \"\",\n            \"    if duplicate_ip_addresses:\",\n            \"        error_message += 'The following IP addresses have been provided more than once: {}'.format(','.join(duplicate_ip_addresses))\",\n            \"    \",\n            \"    if error_message:\",\n            \"        raise ValueError(error_message)\",\n            \"\",\n            \"if __name__ == '__main__':\",\n            \"    sys.exit(run())\",\n            \"\\\")\\\" || error_trap\",\n            \"printf \\\"All IPs passed validation\\\\\\\\n\\\"\"\n          ]\n        }\n      },\n      \"isCritical\": \"true\",\n      \"nextStep\": \"defineMTRTest\"\n    },\n    {\n      \"name\": \"defineMTRTest\",\n      \"action\": \"aws:runCommand\",\n      \"onFailure\": \"step:terminateInstance\",\n      \"inputs\": {\n        \"DocumentName\": \"AWS-RunShellScript\",\n        \"InstanceIds\": [\n          \"{{ createManagedInstance.InstanceId }}\"\n        ],\n        \"Parameters\": {\n          \"commands\": [\n            \"#!/bin/bash\",\n            \"\",\n            \"IFS=', ' read -r -a ipList <<< \\\"{{ TargetIPs }}\\\"\",\n            \"logPath='/home/ec2-user/logs'\",\n            \"\",\n            \"for ip in ${ipList[@]}; do\",\n            \"    touch /home/ec2-user/mtr_${ip}.sh\",\n            \"    if [[ ! $ip = *\\\":\\\"* ]]; then\",\n            \"        # MTR IPv4 Test\",\n            \"        cat <<EOT >> /home/ec2-user/mtr_${ip}.sh\",\n            \"#!/bin/bash\",\n            \"sudo /sbin/mtr -rn -c 30 $ip | sed 's/Start: //g' |  sed -e \\\"2,\\\\$ s/^/     /\\\" >> $logPath/mtr-to-$ip.txt\",\n            \"EOT\",\n            \"    else\",\n            \"        # MTR IPv6 Test\",\n            \"        cat <<EOT >> /home/ec2-user/mtr_${ip}.sh\",\n            \"#!/bin/bash\",\n            \"sudo /sbin/mtr -6 -rn -c 30 $ip | sed 's/Start: //g' |  sed -e \\\"2,\\\\$ s/^/     /\\\" >> $logPath/mtr-to-$ip.txt\",\n            \"EOT\",\n            \"    fi\",\n            \"    chmod u+x /home/ec2-user/mtr_${ip}.sh && chown ec2-user:ec2-user /home/ec2-user/mtr_${ip}.sh\",\n            \"done\"\n          ]\n        }\n      },\n      \"isCritical\": \"true\",\n      \"nextStep\": \"definePing64Test\"\n    },\n    {\n      \"name\": \"definePing64Test\",\n      \"action\": \"aws:runCommand\",\n      \"onFailure\": \"step:terminateInstance\",\n      \"inputs\": {\n        \"DocumentName\": \"AWS-RunShellScript\",\n        \"InstanceIds\": [\n          \"{{ createManagedInstance.InstanceId }}\"\n        ],\n        \"Parameters\": {\n          \"commands\": [\n            \"#!/bin/bash\",\n            \"\",\n            \"IFS=', ' read -r -a ipList <<< \\\"{{ TargetIPs }}\\\"\",\n            \"logPath='/home/ec2-user/logs'\",\n            \"\",\n            \"for ip in ${ipList[@]}; do\",\n            \"    touch /home/ec2-user/ping64_${ip}.sh\",\n            \"    if [[ ! $ip = *\\\":\\\"* ]]; then\",\n            \"        # Ping IPv4 Test\",\n            \"        cat <<EOT >> /home/ec2-user/ping64_${ip}.sh\",\n            \"#!/bin/bash\",\n            \"ping -s 56 -c 30 $ip | sed -e \\\"1,$ s/^/     /\\\" | sed \\\"s/%//g\\\" | tail -n 3 | sed \\\"s#/# #g\\\"  >> $logPath/ping64-to-$ip.txt\",\n            \"EOT\",\n            \"    else\",\n            \"        # Ping IPv6 Test\",\n            \"        cat <<EOT >> /home/ec2-user/ping64_${ip}.sh\",\n            \"#!/bin/bash\",\n            \"ping6 -s 56 -c 30 $ip | sed -e \\\"1,$ s/^/     /\\\" | sed \\\"s/%//g\\\" | tail -n 3 | sed \\\"s#/# #g\\\"  >> $logPath/ping64-to-$ip.txt\",\n            \"EOT\",\n            \"    fi\",\n            \"    chmod u+x /home/ec2-user/ping64_${ip}.sh && chown ec2-user:ec2-user /home/ec2-user/ping64_${ip}.sh\",\n            \"done\"\n          ]\n        }\n      },\n      \"isCritical\": \"true\",\n      \"nextStep\": \"definePing1500Test\"\n    },\n    {\n      \"name\": \"definePing1500Test\",\n      \"action\": \"aws:runCommand\",\n      \"onFailure\": \"step:terminateInstance\",\n      \"inputs\": {\n        \"DocumentName\": \"AWS-RunShellScript\",\n        \"InstanceIds\": [\n          \"{{ createManagedInstance.InstanceId }}\"\n        ],\n        \"Parameters\": {\n          \"commands\": [\n            \"#!/bin/bash\",\n            \"\",\n            \"IFS=', ' read -r -a ipList <<< \\\"{{ TargetIPs }}\\\"\",\n            \"logPath='/home/ec2-user/logs'\",\n            \"\",\n            \"for ip in ${ipList[@]}; do\",\n            \"    touch /home/ec2-user/ping1500_${ip}.sh\",\n            \"    if [[ ! $ip = *\\\":\\\"* ]]; then\",\n            \"        # Ping IPv4 Test\",\n            \"        cat <<EOT >> /home/ec2-user/ping1500_${ip}.sh\",\n            \"#!/bin/bash\",\n            \"ping -s 1492 -c 30 $ip | sed -e \\\"1,$ s/^/     /\\\" | sed \\\"s/%//g\\\" | tail -n 3 | sed \\\"s#/# #g\\\"  >> $logPath/ping1500-to-$ip.txt\",\n            \"EOT\",\n            \"    else\",\n            \"        # Ping IPv6 Test\",\n            \"        cat <<EOT >> /home/ec2-user/ping1500_${ip}.sh\",\n            \"#!/bin/bash\",\n            \"ping6 -s 1492 -c 30 $ip | sed -e \\\"1,$ s/^/     /\\\" | sed \\\"s/%//g\\\" | tail -n 3 | sed \\\"s#/# #g\\\"  >> $logPath/ping1500-to-$ip.txt\",\n            \"EOT\",\n            \"    fi\",\n            \"    chmod u+x /home/ec2-user/ping1500_${ip}.sh && chown ec2-user:ec2-user /home/ec2-user/ping1500_${ip}.sh\",\n            \"done\"\n          ]\n        }\n      },\n      \"isCritical\": \"true\",\n      \"nextStep\": \"defineTracepathTest\"\n    },\n    {\n      \"name\": \"defineTracepathTest\",\n      \"action\": \"aws:runCommand\",\n      \"onFailure\": \"step:terminateInstance\",\n      \"inputs\": {\n        \"DocumentName\": \"AWS-RunShellScript\",\n        \"InstanceIds\": [\n          \"{{ createManagedInstance.InstanceId }}\"\n        ],\n        \"Parameters\": {\n          \"commands\": [\n            \"#!/bin/bash\",\n            \"\",\n            \"IFS=', ' read -r -a ipList <<< \\\"{{ TargetIPs }}\\\"\",\n            \"logPath='/home/ec2-user/logs'\",\n            \"\",\n            \"for ip in ${ipList[@]}; do\",\n            \"    touch /home/ec2-user/tracepath_${ip}.sh\",\n            \"    if [[ ! $ip = *\\\":\\\"* ]]; then\",\n            \"        # Tracepath IPv4 Test\",\n            \"        cat <<EOT >> /home/ec2-user/tracepath_${ip}.sh\",\n            \"#!/bin/bash\",\n            \"tracepath -n $ip | grep -v \\\"Too many hops\\\" | sed -e \\\"$ ! s/^/     /\\\" >> $logPath/tracepath-to-$ip.txt\",\n            \"EOT\",\n            \"    else\",\n            \"        # Tracepath IPv6 Test\",\n            \"        cat <<EOT >> /home/ec2-user/ping64_${ip}.sh\",\n            \"#!/bin/bash\",\n            \"tracepath6 -n $ip | grep -v \\\"Too many hops\\\" | sed -e \\\"$ ! s/^/     /\\\" >> $logPath/tracepath-to-$ip.txt\",\n            \"EOT\",\n            \"    fi\",\n            \"    chmod u+x /home/ec2-user/tracepath_${ip}.sh && chown ec2-user:ec2-user /home/ec2-user/tracepath_${ip}.sh\",\n            \"done\"\n          ]\n        }\n      },\n      \"isCritical\": \"true\",\n      \"nextStep\": \"defineTracerouteTCPTest\"\n    },\n    {\n      \"name\": \"defineTracerouteTCPTest\",\n      \"action\": \"aws:runCommand\",\n      \"onFailure\": \"step:terminateInstance\",\n      \"inputs\": {\n        \"DocumentName\": \"AWS-RunShellScript\",\n        \"InstanceIds\": [\n          \"{{ createManagedInstance.InstanceId }}\"\n        ],\n        \"Parameters\": {\n          \"commands\": [\n            \"#!/bin/bash\",\n            \"\",\n            \"IFS=', ' read -r -a ipList <<< \\\"{{ TargetIPs }}\\\"\",\n            \"logPath='/home/ec2-user/logs'\",\n            \"\",\n            \"for ip in ${ipList[@]}; do\",\n            \"    touch /home/ec2-user/ping1500_${ip}.sh\",\n            \"    cat <<EOT >> /home/ec2-user/traceroutetcp_${ip}.sh\",\n            \"#!/bin/bash\",\n            \"sudo traceroute -n $ip -q 2 -A -T -p 80 | sed -e \\\"s/^/     /\\\" >> $logPath/traceroutetcp-to-$ip.txt\",\n            \"EOT\",\n            \"    chmod u+x /home/ec2-user/traceroutetcp_${ip}.sh && chown ec2-user:ec2-user /home/ec2-user/traceroutetcp_${ip}.sh\",\n            \"done\"\n          ]\n        }\n      },\n      \"isCritical\": \"true\",\n      \"nextStep\": \"configureCloudWatchLogsForTestResults\"\n    },\n    {\n      \"name\": \"configureCloudWatchLogsForTestResults\",\n      \"action\": \"aws:runCommand\",\n      \"onFailure\": \"step:terminateInstance\",\n      \"inputs\": {\n        \"DocumentName\": \"AWS-RunShellScript\",\n        \"InstanceIds\": [\n          \"{{ createManagedInstance.InstanceId }}\"\n        ],\n        \"Parameters\": {\n          \"commands\": [\n            \"#!/bin/bash\",\n            \"\",\n            \"error_trap()\",\n            \"{\",\n            \"    if test -n \\\"$1\\\" ; then\",\n            \"        printf \\\"%s\\\\\\\\n\\\" \\\"$1\\\"\",\n            \"    fi\",\n            \"\",\n            \"    printf \\\"%.s=\\\" $(seq 1 80)\",\n            \"    printf \\\"\\\\\\\\nThe CloudWatch logs agent configuration failed. Please try to run this automation again.\\\\\\\\n\\\"\",\n            \"\",\n            \"    exit 1\",\n            \"}\",\n            \"\",\n            \"IFS=', ' read -r -a ipList <<< \\\"{{ TargetIPs }}\\\"\",\n            \"\",\n            \"# Creating logs folder\",\n            \"mkdir /home/ec2-user/logs || error_trap\",\n            \"chown ec2-user:ec2-user /home/ec2-user/logs || error_trap\",\n            \"\",\n            \"# For each IP in the list, create corresponding configuration\",\n            \"# in Amazon CloudWatch Agent Configuration file\",\n            \"# IPv4 Tests - MTR, 1500-byte Ping, 64-byte Ping, Tracepath, TCP Traceroute\",\n            \"# IPv6 Tests - MTR, 1500-byte Ping, 64-byte Ping, TCP Traceroute\",\n            \"\",\n            \"retentionInDays=\\\"{{ CloudWatchLogGroupRetentionInDays }}\\\"\",\n            \"\",\n            \"for ip in ${ipList[@]}; do\",\n            \"    # CloudWatch log group doesn't support \\\":\\\" in the name, which is typical of IPv6.\",\n            \"    # Replacing any occurrence of \\\":\\\" with \\\".\\\"\",\n            \"    ipmod=`echo $ip | sed 's/:/./g'`\",\n            \"    touch /home/ec2-user/cloudwatchagent-$ipmod.json\",\n            \"    cat <<EOT >> /home/ec2-user/cloudwatchagent-$ipmod.json\",\n            \"    {\",\n            \"      \\\"logs\\\": {\",\n            \"        \\\"logs_collected\\\": {\",\n            \"          \\\"files\\\": {\",\n            \"            \\\"collect_list\\\": [\",\n            \"              {\",\n            \"                \\\"file_path\\\": \\\"/home/ec2-user/logs/mtr-to-$ip.txt\\\",\",\n            \"                \\\"log_group_name\\\": \\\"{{ CloudWatchLogGroupNamePrefix }}/mtr-from-{{ SubnetId }}-to-$ipmod\\\",\",\n            \"                \\\"log_stream_name\\\": \\\"{{ automation:EXECUTION_ID }}\\\",\",\n            \"                \\\"timezone\\\": \\\"UTC\\\",\",\n            \"                \\\"retention_in_days\\\": $retentionInDays\",\n            \"              },\",\n            \"              {\",\n            \"                \\\"file_path\\\": \\\"/home/ec2-user/logs/ping1500-to-$ip.txt\\\",\",\n            \"                \\\"log_group_name\\\": \\\"{{ CloudWatchLogGroupNamePrefix }}/ping1500-from-{{ SubnetId }}-to-$ipmod\\\",\",\n            \"                \\\"log_stream_name\\\": \\\"{{ automation:EXECUTION_ID }}\\\",\",\n            \"                \\\"timezone\\\": \\\"UTC\\\",\",\n            \"                \\\"multi_line_start_pattern\\\": \\\"---.*\\\",\",\n            \"                \\\"retention_in_days\\\": $retentionInDays\",\n            \"              },\",\n            \"              {\",\n            \"                \\\"file_path\\\": \\\"/home/ec2-user/logs/ping64-to-$ip.txt\\\",\",\n            \"                \\\"log_group_name\\\": \\\"{{ CloudWatchLogGroupNamePrefix }}/ping64-from-{{ SubnetId }}-to-$ipmod\\\",\",\n            \"                \\\"log_stream_name\\\": \\\"{{ automation:EXECUTION_ID }}\\\",\",\n            \"                \\\"timezone\\\": \\\"UTC\\\",\",\n            \"                \\\"multi_line_start_pattern\\\": \\\"---.*\\\",\",\n            \"                \\\"retention_in_days\\\": $retentionInDays\",\n            \"              },\",\n            \"              {\",\n            \"                \\\"file_path\\\": \\\"/home/ec2-user/logs/tracepath-to-$ip.txt\\\",\",\n            \"                \\\"log_group_name\\\": \\\"{{ CloudWatchLogGroupNamePrefix }}/tracepath-from-{{ SubnetId }}-to-$ipmod\\\",\",\n            \"                \\\"log_stream_name\\\": \\\"{{ automation:EXECUTION_ID }}\\\",\",\n            \"                \\\"timezone\\\": \\\"UTC\\\",\",\n            \"                \\\"multi_line_start_pattern\\\": \\\"1?:.*\\\",\",\n            \"                \\\"retention_in_days\\\": $retentionInDays\",\n            \"              },\",\n            \"              {\",\n            \"                \\\"file_path\\\": \\\"/home/ec2-user/logs/traceroutetcp-to-$ip.txt\\\",\",\n            \"                \\\"log_group_name\\\": \\\"{{ CloudWatchLogGroupNamePrefix }}/traceroutetcp-from-{{ SubnetId }}-to-$ipmod\\\",\",\n            \"                \\\"log_stream_name\\\": \\\"{{ automation:EXECUTION_ID }}\\\",\",\n            \"                \\\"timezone\\\": \\\"UTC\\\",\",\n            \"                \\\"multi_line_start_pattern\\\": \\\"traceroute\\\",\",\n            \"                \\\"retention_in_days\\\": $retentionInDays\",\n            \"              }\",\n            \"            ]\",\n            \"          }\",\n            \"        }\",\n            \"      }\",\n            \"    }\",\n            \"EOT\",\n            \"    # Starting Amazon CloudWatch Agent\",\n            \"   if [[ \\\"$ipmod\\\" = \\\"${ipList[0]}\\\" ]]; then\",\n            \"    sudo /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -a fetch-config -m ec2 -s -c file:/home/ec2-user/cloudwatchagent-$ipmod.json\",\n            \"   else\",\n            \"    sudo /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -a append-config -m ec2 -s -c file:/home/ec2-user/cloudwatchagent-$ipmod.json\",\n            \"   fi\",\n            \"done\"\n          ]\n        }\n      },\n      \"isCritical\": \"true\",\n      \"nextStep\": \"startNetworkTests\"\n    },\n    {\n      \"name\": \"startNetworkTests\",\n      \"action\": \"aws:runCommand\",\n      \"onFailure\": \"step:terminateInstance\",\n      \"inputs\": {\n        \"DocumentName\": \"AWS-RunShellScript\",\n        \"InstanceIds\": [\n          \"{{ createManagedInstance.InstanceId }}\"\n        ],\n        \"Parameters\": {\n          \"commands\": [\n            \"#!/bin/bash\",\n            \"\",\n            \"error_trap()\",\n            \"{\",\n            \"    if test -n \\\"$1\\\" ; then\",\n            \"        printf \\\"%s\\\\\\\\n\\\" \\\"$1\\\"\",\n            \"    fi\",\n            \"\",\n            \"    printf \\\"%.s=\\\" $(seq 1 80)\",\n            \"    printf \\\"\\\\\\\\nThe crontab configuration failed. Please try to run this automation again.\\\\\\\\n\\\"\",\n            \"\",\n            \"    exit 1\",\n            \"}\",\n            \"\",\n            \"IFS=', ' read -r -a ipList <<< \\\"{{ TargetIPs }}\\\"\",\n            \"touch /home/ec2-user/cronConf.txt || error_trap\",\n            \"\",\n            \"for ip in ${ipList[@]}; do\",\n            \"    echo \\\"* * * * * /home/ec2-user/mtr_${ip}.sh\\\" >> /home/ec2-user/cronConf.txt\",\n            \"    echo \\\"* * * * * /home/ec2-user/ping1500_${ip}.sh\\\" >> /home/ec2-user/cronConf.txt\",\n            \"    echo \\\"* * * * * /home/ec2-user/ping64_${ip}.sh\\\" >> /home/ec2-user/cronConf.txt\",\n            \"    echo \\\"* * * * * /home/ec2-user/traceroutetcp_${ip}.sh\\\" >> /home/ec2-user/cronConf.txt\",\n            \"    echo \\\"* * * * * /home/ec2-user/tracepath_${ip}.sh\\\" >> /home/ec2-user/cronConf.txt\",\n            \"done\",\n            \"crontab -u ec2-user /home/ec2-user/cronConf.txt || error_trap\",\n            \"\"\n          ]\n        }\n      },\n      \"isCritical\": \"true\",\n      \"nextStep\": \"sleepBeforeSettingRetentions\"\n    },\n    {\n      \"name\": \"sleepBeforeSettingRetentions\",\n      \"action\": \"aws:sleep\",\n      \"onFailure\": \"Continue\",\n      \"inputs\": {\n        \"Duration\": \"PT240S\"\n      },\n      \"isCritical\": \"false\",\n      \"nextStep\": \"configureLocalLogRotation\"\n    },\n    {\n      \"name\": \"configureLocalLogRotation\",\n      \"action\": \"aws:runCommand\",\n      \"onFailure\": \"step:terminateInstance\",\n      \"inputs\": {\n        \"DocumentName\": \"AWS-RunShellScript\",\n        \"InstanceIds\": [\n          \"{{ createManagedInstance.InstanceId }}\"\n        ],\n        \"Parameters\": {\n          \"commands\": [\n            \"#!/bin/bash\",\n            \"\",\n            \"error_trap()\",\n            \"{\",\n            \"    if test -n \\\"$1\\\" ; then\",\n            \"        printf \\\"%s\\\\\\\\n\\\" \\\"$1\\\"\",\n            \"    fi\",\n            \"\",\n            \"    printf \\\"%.s=\\\" $(seq 1 80)\",\n            \"    printf \\\"\\\\\\\\nThe logrotate configuration failed. Please try to run this automation again.\\\\\\\\n\\\"\",\n            \"\",\n            \"    exit 1\",\n            \"}\",\n            \"\",\n            \"touch /etc/logrotate.d/logrotateConfig.conf || error_trap\",\n            \"\",\n            \"# Disabling dateext feature from default logrotate config file\",\n            \"sed -i 's/dateext/#dateext/g' /etc/logrotate.conf\",\n            \"\",\n            \"cat << EOF >> /etc/logrotate.d/logrotateConfig.conf\",\n            \"/home/ec2-user/logs/*.txt {\",\n            \"    daily\",\n            \"    missingok\",\n            \"    size 5M\",\n            \"    start 1\",\n            \"    rotate 4\",\n            \"}\",\n            \"EOF\",\n            \"\",\n            \"#logrotate -vf /etc/logrotate.d/logrotateConfig.conf || error_trap\"\n          ]\n        }\n      },\n      \"isCritical\": \"true\",\n      \"nextStep\": \"setCloudWatchLogsMetricFilters\"\n    },\n    {\n      \"name\": \"setCloudWatchLogsMetricFilters\",\n      \"action\": \"aws:runCommand\",\n      \"onFailure\": \"step:terminateInstance\",\n      \"inputs\": {\n        \"DocumentName\": \"AWS-RunShellScript\",\n        \"InstanceIds\": [\n          \"{{ createManagedInstance.InstanceId }}\"\n        ],\n        \"Parameters\": {\n          \"commands\": [\n            \"#!/bin/bash\",\n            \"\",\n            \"error_trap()\",\n            \"{\",\n            \"    if test -n \\\"$1\\\" ; then\",\n            \"        printf \\\"%s\\\\\\\\n\\\" \\\"$1\\\"\",\n            \"    fi\",\n            \"\",\n            \"    printf \\\"%.s=\\\" $(seq 1 80)\",\n            \"    printf \\\"\\\\\\\\nThe CloudWatch logs metric filters configuration failed. Please try to run this automation again.\\\\\\\\n\\\"\",\n            \"\",\n            \"    exit 1\",\n            \"}\",\n            \"\",\n            \"IFS=', ' read -r -a ipList <<< \\\"{{ TargetIPs }}\\\"\",\n            \"test_instance=\\\"{{ createManagedInstance.InstanceId }}\\\"\",\n            \"\",\n            \"# For each IP in the list, create corresponding metric filters\",\n            \"for ip in ${ipList[@]}; do\",\n            \"    # CloudWatch log group doesn't support \\\":\\\" in the name, which is typical of IPv6.\",\n            \"    # Replacing any occurrence of \\\":\\\" with \\\".\\\"\",\n            \"    ipmod=`echo $ip | sed 's/:/./g'`\",\n            \"    touch packet_loss_metric_filter-$ipmod.json || error_trap\",\n            \"    touch latency_metric_filter-$ipmod.json || error_trap\",\n            \"    log_group_name=\\\"{{ CloudWatchLogGroupNamePrefix }}/ping64-from-{{ SubnetId }}-to-$ipmod\\\"\",\n            \"    cat <<EOT >> packet_loss_metric_filter-$ipmod.json\",\n            \"    [\",\n            \"        {\",\n            \"            \\\"metricName\\\": \\\"$ipmod Packet Loss\\\",\",\n            \"            \\\"metricNamespace\\\": \\\"AWSSupport-SetupIPMonitoringFromVPC/{{ SubnetId }}/$test_instance\\\",\",\n            \"            \\\"metricValue\\\": \\\"\\\\$LOSS\\\",\",\n            \"            \\\"defaultValue\\\": 100\",\n            \"        }\",\n            \"    ]\",\n            \"EOT\",\n            \"    aws logs put-metric-filter --log-group-name $log_group_name \\\\\",\n            \"        --filter-name \\\"packet_loss\\\"  \\\\\",\n            \"        --filter-pattern \\\"[r1,r2,r3,,r4,r5,r6,r7,r8,r9,LOSS,r11,r12,r13,r14,r15,r16,r17,r18,r19,r20,r21,r22,AVG,r24]\\\" \\\\\",\n            \"        --metric-transformations file://packet_loss_metric_filter-$ipmod.json \\\\\",\n            \"        --region \\\"{{ global:REGION }}\\\" || error_trap\",\n            \"\",\n            \"    cat <<EOT >> latency_metric_filter-$ipmod.json\",\n            \"    [\",\n            \"    {\",\n            \"        \\\"metricName\\\": \\\"$ipmod Latency\\\",\",\n            \"        \\\"metricNamespace\\\": \\\"AWSSupport-SetupIPMonitoringFromVPC/{{ SubnetId }}/$test_instance\\\",\",\n            \"        \\\"metricValue\\\": \\\"\\\\$AVG\\\",\",\n            \"        \\\"defaultValue\\\": 0\",\n            \"    }\",\n            \"    ]\",\n            \"EOT\",\n            \"    aws logs put-metric-filter --log-group-name $log_group_name \\\\\",\n            \"        --filter-name \\\"latency\\\"  \\\\\",\n            \"        --filter-pattern \\\"[r1,r2,r3,,r4,r5,r6,r7,r8,r9,LOSS,r11,r12,r13,r14,r15,r16,r17,r18,r19,r20,r21,r22,AVG,r24]\\\" \\\\\",\n            \"        --metric-transformations file://latency_metric_filter-$ipmod.json \\\\\",\n            \"        --region \\\"{{ global:REGION }}\\\" || error_trap\",\n            \"done\"\n          ]\n        }\n      },\n      \"isCritical\": \"true\",\n      \"nextStep\": \"createCloudWatchDashboard\"\n    },\n    {\n      \"name\": \"createCloudWatchDashboard\",\n      \"action\": \"aws:runCommand\",\n      \"onFailure\": \"step:deleteDashboard\",\n      \"inputs\": {\n        \"DocumentName\": \"AWS-RunShellScript\",\n        \"InstanceIds\": [\n          \"{{ createManagedInstance.InstanceId }}\"\n        ],\n        \"Parameters\": {\n          \"commands\": [\n            \"#!/bin/bash\",\n            \"\",\n            \"error_trap()\",\n            \"{\",\n            \"    if test -n \\\"$1\\\" ; then\",\n            \"        printf \\\"%s\\\\\\\\n\\\" \\\"$1\\\"\",\n            \"    fi\",\n            \"\",\n            \"    printf \\\"%.s=\\\" $(seq 1 80)\",\n            \"    printf \\\"\\\\\\\\nThe dashboard creation failed. Please try to run this automation again.\\\\\\\\n\\\"\",\n            \"\",\n            \"    exit 1\",\n            \"}\",\n            \"\",\n            \"IFS=', ' read -r -a ipList <<< \\\"{{ TargetIPs }}\\\"\",\n            \"dashboard_name=\\\"{{ SubnetId }}_{{ createManagedInstance.InstanceId }}\\\"\",\n            \"touch /home/ec2-user/dashboard.json || error_trap\",\n            \"cat <<EOT >> /home/ec2-user/dashboard.json\",\n            \"    {\",\n            \"        \\\"widgets\\\": [\",\n            \"            {\",\n            \"                \\\"type\\\": \\\"text\\\",\",\n            \"                \\\"x\\\": 0,\",\n            \"                \\\"y\\\": 0,\",\n            \"                \\\"width\\\": 24,\",\n            \"                \\\"height\\\": 6,\",\n            \"                \\\"properties\\\": {\",\n            \"                    \\\"markdown\\\": \\\"\\\\n# AWSSupport-SetupIPMonitoringFromVPC\\\\n[button:Pause test](https://{{ global:REGION }}.console.aws.amazon.com/systems-manager/automation/execute/AWS-StopEC2Instance?region={{ global:REGION }}#documentVersion=%24LATEST&InstanceId={{ createManagedInstance.InstanceId }}) \\\\n[button:Resume test](https://{{ global:REGION }}.console.aws.amazon.com/systems-manager/automation/execute/AWS-StartEC2Instance?region={{ global:REGION }}#documentVersion=%24LATEST&InstanceId={{ createManagedInstance.InstanceId }}) \\\\n[button:Terminate test](https://{{ global:REGION }}.console.aws.amazon.com/systems-manager/automation/execute/AWSSupport-TerminateIPMonitoringFromVPC?region={{ global:REGION }}#documentVersion=%24LATEST&AutomationExecutionId={{ automation:EXECUTION_ID }}&SubnetId={{ SubnetId }}&InstanceId={{ createManagedInstance.InstanceId }}) \\\\n[button:primary:Start a new test](https://{{ global:REGION }}.console.aws.amazon.com/systems-manager/automation/execute/AWSSupport-SetupIPMonitoringFromVPC?region={{ global:REGION }})\\\\n\\\\nThis dashboard was generated by the [AWSSupport-SetupIPMonitoringFromVPC](https://{{ global:REGION }}.console.aws.amazon.com/systems-manager/documents/AWSSupport-SetupIPMonitoringFromVPC/description?region={{ global:REGION }}) Automation document (execution ID: [{{ automation:EXECUTION_ID }}](https://{{ global:REGION }}.console.aws.amazon.com/systems-manager/automation/execution/277cab73-7484-4566-a63a-b54e74261960?region={{ global:REGION }})).\\\\n\\\\n## Pause/Resume the test\\\\nYou can pause and resume the test by using the buttons above. These actions will stop or start the underlying test [EC2 instance](https://{{ global:REGION }}.console.aws.amazon.com/ec2/v2/home?region={{ global:REGION }}#Instances:instanceId={{ createManagedInstance.InstanceId }};sort=desc:tag:Name) that runs the tests against the provided IPs ({{ TargetIPs }}).\\\\n\\\\n## Terminate the test\\\\nIf you decide to terminate the test, this dashboard, the EC2 instance and the associated IAM resources created by the Automation will be permanently terminated. CloudWatch logs will be retained for the number of days you specified during the test setup ({{ CloudWatchLogGroupRetentionInDays }} days).\\\\n\\\"\",\n            \"                }\",\n            \"            },\",\n            \"EOT\",\n            \"count=0\",\n            \"\",\n            \"# For each IP in the list, create corresponding CloudWatch widgets in the dashboard\",\n            \"for ip in ${ipList[@]}; do\",\n            \"    ipmod=`echo $ip | sed 's/:/./g'`\",\n            \"    y1=$(($count * 8))\",\n            \"    y2=$(($y1 + 6))\",\n            \"\",\n            \"    cat <<EOT >> /home/ec2-user/dashboard.json\",\n            \"            {\",\n            \"                \\\"type\\\": \\\"metric\\\",\",\n            \"                \\\"x\\\": 0,\",\n            \"                \\\"y\\\": $y1,\",\n            \"                \\\"width\\\": 12,\",\n            \"                \\\"height\\\": 6,\",\n            \"                \\\"properties\\\": {\",\n            \"                    \\\"metrics\\\": [\",\n            \"                        [ \\\"AWSSupport-SetupIPMonitoringFromVPC/{{ SubnetId }}/{{ createManagedInstance.InstanceId }}\\\", \\\"$ipmod Packet Loss\\\", { \\\"color\\\": \\\"#d62728\\\", \\\"yAxis\\\": \\\"left\\\" } ]\",\n            \"                    ],\",\n            \"                    \\\"view\\\": \\\"timeSeries\\\",\",\n            \"                    \\\"stacked\\\": true,\",\n            \"                    \\\"region\\\": \\\"{{ global:REGION }}\\\",\",\n            \"                    \\\"start\\\": \\\"-PT5M\\\",\",\n            \"                    \\\"end\\\": \\\"P0D\\\",\",\n            \"                    \\\"stat\\\": \\\"Maximum\\\",\",\n            \"                    \\\"period\\\": 60,\",\n            \"                    \\\"title\\\": \\\"{{ SubnetId }} {{ createManagedInstance.InstanceId }} - $ip Loss (%)\\\",\",\n            \"                    \\\"legend\\\": {\",\n            \"                        \\\"position\\\": \\\"bottom\\\"\",\n            \"                    },\",\n            \"                    \\\"yAxis\\\": {\",\n            \"                        \\\"left\\\": {\",\n            \"                            \\\"label\\\": \\\"%\\\",\",\n            \"                            \\\"showUnits\\\": false\",\n            \"                        }\",\n            \"                    }\",\n            \"                }\",\n            \"            },\",\n            \"            {\",\n            \"                \\\"type\\\": \\\"metric\\\",\",\n            \"                \\\"x\\\": 12,\",\n            \"                \\\"y\\\": $y1,\",\n            \"                \\\"width\\\": 12,\",\n            \"                \\\"height\\\": 6,\",\n            \"                \\\"properties\\\": {\",\n            \"                    \\\"metrics\\\": [\",\n            \"                        [ \\\"AWSSupport-SetupIPMonitoringFromVPC/{{ SubnetId }}/{{ createManagedInstance.InstanceId }}\\\", \\\"$ipmod Latency\\\" ]\",\n            \"                    ],\",\n            \"                    \\\"view\\\": \\\"timeSeries\\\",\",\n            \"                    \\\"stacked\\\": true,\",\n            \"                    \\\"region\\\": \\\"{{ global:REGION }}\\\",\",\n            \"                    \\\"stat\\\": \\\"Maximum\\\",\",\n            \"                    \\\"period\\\": 60,\",\n            \"                    \\\"title\\\": \\\"{{ SubnetId }} {{ createManagedInstance.InstanceId }} - $ip Latency (ms)\\\",\",\n            \"                    \\\"yAxis\\\": {\",\n            \"                        \\\"left\\\": {\",\n            \"                            \\\"label\\\": \\\"ms\\\",\",\n            \"                            \\\"showUnits\\\": false\",\n            \"                        }\",\n            \"                    }\",\n            \"                }\",\n            \"            },\",\n            \"            {\",\n            \"                \\\"type\\\": \\\"text\\\",\",\n            \"                \\\"x\\\": 0,\",\n            \"                \\\"y\\\": $y2,\",\n            \"                \\\"width\\\": 24,\",\n            \"                \\\"height\\\": 2,\",\n            \"                \\\"properties\\\": {\",\n            \"                    \\\"markdown\\\": \\\"\\\\nTarget IP | MTR | ping64 | ping1500 | traceroute (TCP) | tracepath\\\\n----|-----|-----|-----|-----|-----\\\\n$ip | [1h](https://{{ global:REGION }}.console.aws.amazon.com/cloudwatch/home?region={{ global:REGION }}#logEventViewer:group={{ CloudWatchLogGroupNamePrefix }}/mtr-from-{{ SubnetId }}-to-$ipmod;stream={{ automation:EXECUTION_ID }};start=PT1H) [3h](https://{{ global:REGION }}.console.aws.amazon.com/cloudwatch/home?region={{ global:REGION }}#logEventViewer:group={{ CloudWatchLogGroupNamePrefix }}/mtr-from-{{ SubnetId }}-to-$ipmod;stream={{ automation:EXECUTION_ID }};start=PT3H) | [1h](https://{{ global:REGION }}.console.aws.amazon.com/cloudwatch/home?region={{ global:REGION }}#logEventViewer:group={{ CloudWatchLogGroupNamePrefix }}/ping64-from-{{ SubnetId }}-to-$ipmod;stream={{ automation:EXECUTION_ID }};start=PT1H) [3h](https://{{ global:REGION }}.console.aws.amazon.com/cloudwatch/home?region={{ global:REGION }}#logEventViewer:group={{ CloudWatchLogGroupNamePrefix }}/ping64-from-{{ SubnetId }}-to-$ipmod;stream={{ automation:EXECUTION_ID }};start=PT3H) | [1h](https://{{ global:REGION }}.console.aws.amazon.com/cloudwatch/home?region={{ global:REGION }}#logEventViewer:group={{ CloudWatchLogGroupNamePrefix }}/ping1500-from-{{ SubnetId }}-to-$ipmod;stream={{ automation:EXECUTION_ID }};start=PT1H) [3h](https://{{ global:REGION }}.console.aws.amazon.com/cloudwatch/home?region={{ global:REGION }}#logEventViewer:group={{ CloudWatchLogGroupNamePrefix }}/ping1500-from-{{ SubnetId }}-to-$ipmod;stream={{ automation:EXECUTION_ID }};start=PT3H) | [1h](https://{{ global:REGION }}.console.aws.amazon.com/cloudwatch/home?region={{ global:REGION }}#logEventViewer:group={{ CloudWatchLogGroupNamePrefix }}/traceroutetcp-from-{{ SubnetId }}-to-$ipmod;stream={{ automation:EXECUTION_ID }};start=PT1H) [3h](https://{{ global:REGION }}.console.aws.amazon.com/cloudwatch/home?region={{ global:REGION }}#logEventViewer:group={{ CloudWatchLogGroupNamePrefix }}/traceroutetcp-from-{{ SubnetId }}-to-$ipmod;stream={{ automation:EXECUTION_ID }};start=PT3H) | [1h](https://{{ global:REGION }}.console.aws.amazon.com/cloudwatch/home?region={{ global:REGION }}#logEventViewer:group={{ CloudWatchLogGroupNamePrefix }}/tracepath-from-{{ SubnetId }}-to-$ipmod;stream={{ automation:EXECUTION_ID }};start=PT1H) [3h](https://{{ global:REGION }}.console.aws.amazon.com/cloudwatch/home?region={{ global:REGION }}#logEventViewer:group={{ CloudWatchLogGroupNamePrefix }}/tracepath-from-{{ SubnetId }}-to-$ipmod;stream={{ automation:EXECUTION_ID }};start=PT3H)\\\\n\\\"\",\n            \"                }\",\n            \"            },\",\n            \"EOT\",\n            \"    count=$((count+1))\",\n            \"done\",\n            \"\",\n            \"# Remove the extra comma at the end. To do so, I remove the last two characters\",\n            \"# (trailing new line and the comma), and add the trailing new line back\",\n            \"truncate -s-2 /home/ec2-user/dashboard.json || error_trap\",\n            \"echo \\\"\\\" >> /home/ec2-user/dashboard.json\",\n            \"\",\n            \"cat <<EOT >> /home/ec2-user/dashboard.json\",\n            \"        ]\",\n            \"    }\",\n            \"EOT\",\n            \"\",\n            \"chown ec2-user:ec2-user /home/ec2-user/dashboard.json\",\n            \"\",\n            \"dashboard=$(aws cloudwatch put-dashboard --dashboard-name $dashboard_name \\\\\",\n            \"    --dashboard-body file:///home/ec2-user/dashboard.json \\\\\",\n            \"    --region \\\"{{ global:REGION }}\\\") || error_trap\",\n            \"\",\n            \"echo \\\"https://{{ global:REGION }}.console.aws.amazon.com/systems-manager/resource-groups/cloudwatch?region={{ global:REGION }}&dashboard=${dashboard_name}\\\"\"\n          ]\n        }\n      },\n      \"isCritical\": \"true\",\n      \"isEnd\": \"true\"\n    },\n    {\n      \"name\": \"deleteDashboard\",\n      \"action\": \"aws:executeAwsApi\",\n      \"onFailure\": \"Continue\",\n      \"inputs\": {\n        \"Service\": \"cloudwatch\",\n        \"Api\": \"DeleteDashboards\",\n        \"DashboardNames\": [\n          \"{{ SubnetId }}_{{ createManagedInstance.InstanceId }}\"\n        ]\n      },\n      \"isCritical\": \"true\",\n      \"nextStep\": \"terminateInstance\"\n    },\n    {\n      \"name\": \"terminateInstance\",\n      \"action\": \"aws:changeInstanceState\",\n      \"onFailure\": \"Continue\",\n      \"inputs\": {\n        \"InstanceIds\": [\n          \"{{ createManagedInstance.InstanceId }}\"\n        ],\n        \"CheckStateOnly\": false,\n        \"DesiredState\": \"terminated\"\n      },\n      \"isCritical\": \"true\",\n      \"nextStep\": \"removeIAMRoleFromInstanceProfile\"\n    },\n    {\n      \"name\": \"removeIAMRoleFromInstanceProfile\",\n      \"action\": \"aws:executeAwsApi\",\n      \"onFailure\": \"Continue\",\n      \"inputs\": {\n        \"Service\": \"iam\",\n        \"Api\": \"RemoveRoleFromInstanceProfile\",\n        \"RoleName\": \"SetupIPMonitoringFromVPC_{{ automation:EXECUTION_ID }}\",\n        \"InstanceProfileName\": \"SetupIPMonitoringFromVPC_{{ automation:EXECUTION_ID }}\"\n      },\n      \"isCritical\": \"true\",\n      \"nextStep\": \"deleteIAMInstanceProfile\"\n    },\n    {\n      \"name\": \"deleteIAMInstanceProfile\",\n      \"action\": \"aws:executeAwsApi\",\n      \"onFailure\": \"Continue\",\n      \"inputs\": {\n        \"Service\": \"iam\",\n        \"Api\": \"DeleteInstanceProfile\",\n        \"InstanceProfileName\": \"SetupIPMonitoringFromVPC_{{ automation:EXECUTION_ID }}\"\n      },\n      \"isCritical\": \"true\",\n      \"nextStep\": \"removeCloudWatchInlinePolicyFromEC2Role\"\n    },\n    {\n      \"name\": \"removeCloudWatchInlinePolicyFromEC2Role\",\n      \"action\": \"aws:executeAwsApi\",\n      \"onFailure\": \"Continue\",\n      \"inputs\": {\n        \"Service\": \"iam\",\n        \"Api\": \"DeleteRolePolicy\",\n        \"RoleName\": \"SetupIPMonitoringFromVPC_{{ automation:EXECUTION_ID }}\",\n        \"PolicyName\": \"SetupIPMonitoringFromVPC_CWPermissions\"\n      },\n      \"isCritical\": \"true\",\n      \"nextStep\": \"detachSSMManagedPolicyFromEC2Role\"\n    },\n    {\n      \"name\": \"detachSSMManagedPolicyFromEC2Role\",\n      \"action\": \"aws:executeAwsApi\",\n      \"onFailure\": \"Continue\",\n      \"inputs\": {\n        \"Service\": \"iam\",\n        \"Api\": \"DetachRolePolicy\",\n        \"PolicyArn\": \"arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore\",\n        \"RoleName\": \"SetupIPMonitoringFromVPC_{{ automation:EXECUTION_ID }}\"\n      },\n      \"isCritical\": \"true\",\n      \"nextStep\": \"deleteEC2Role\"\n    },\n    {\n      \"name\": \"deleteEC2Role\",\n      \"action\": \"aws:executeAwsApi\",\n      \"onFailure\": \"Continue\",\n      \"inputs\": {\n        \"Service\": \"iam\",\n        \"Api\": \"DeleteRole\",\n        \"RoleName\": \"SetupIPMonitoringFromVPC_{{ automation:EXECUTION_ID }}\"\n      },\n      \"isCritical\": \"true\",\n      \"nextStep\": \"deleteSecurityGroup\"\n    },\n    {\n      \"name\": \"deleteSecurityGroup\",\n      \"action\": \"aws:executeAwsApi\",\n      \"onFailure\": \"Continue\",\n      \"inputs\": {\n        \"Service\": \"ec2\",\n        \"Api\": \"DeleteSecurityGroup\",\n        \"GroupId\": \"{{ createSecurityGroup.GroupId }}\"\n      },\n      \"isCritical\": \"true\",\n      \"isEnd\": \"true\"\n    }\n  ],\n  \"outputs\": [\n    \"createCloudWatchDashboard.Output\",\n    \"createManagedInstance.InstanceId\"\n  ]\n}",
  "CreatedDate": "2022-06-29T14:48:10.047Z",
  "DisplayName": null,
  "DocumentFormat": {
    "Value": "JSON"
  },
  "DocumentType": {
    "Value": "Automation"
  },
  "DocumentVersion": "4",
  "Name": "AWSSupport-SetupIPMonitoringFromVPC",
  "Requires": [],
  "ReviewStatus": null,
  "Status": {
    "Value": "Active"
  },
  "StatusInformation": null,
  "VersionName": null,
  "ResponseMetadata": {
    "RequestId": "c0feef1e-1f71-466c-b6f2-c0f5dab1129c",
    "Metadata": {},
    "ChecksumAlgorithm": 0,
    "ChecksumValidationStatus": 0
  },
  "ContentLength": 55835,
  "HttpStatusCode": 200,
  "LoggedAt": "2022-09-27T07:39:08.0217703+00:00"
}
