{
  "AttachmentsContent": [],
  "Content": "{\n  \"description\" : \"Breaks health check inside the target group assigned to Network Or Gateway LB\",\n  \"schemaVersion\" : \"0.3\",\n  \"assumeRole\" : \"{{ AutomationAssumeRole }}\",\n  \"parameters\" : {\n    \"LoadBalancerArn\" : {\n      \"type\" : \"String\",\n      \"description\" : \"(Required) LoadBalancerArn\"\n    },\n    \"AutomationAssumeRole\" : {\n      \"type\" : \"String\",\n      \"description\" : \"(Required) The ARN of the role that allows Automation to perform the actions on your behalf.\"\n    },\n    \"UnHealthyHostCountAlarmName\" : {\n      \"type\" : \"String\",\n      \"description\" : \"(Required) Alarm for metric `UnHealthyHostCount`, which should be red after injection of the failure and green after the rollback process in the end of the test.\"\n    },\n    \"TargetGroupArns\" : {\n      \"type\" : \"StringList\",\n      \"description\" : \"(Optional) The list of TargetGroupArns\",\n      \"maxItems\" : 5,\n      \"default\" : [ ]\n    },\n    \"UnhealthyHealthCheckPort\" : {\n      \"type\" : \"String\",\n      \"description\" : \"(Optional) The port that supposed to be closed or return unexpected result for LB health check\",\n      \"default\" : \"65534\"\n    },\n    \"IsRollback\" : {\n      \"type\" : \"String\",\n      \"description\" : \"(Optional) Run rollback step of the given previous execution (parameter `PreviousExecutionId`). Can be either true or false.\",\n      \"default\" : \"false\"\n    },\n    \"PreviousExecutionId\" : {\n      \"type\" : \"String\",\n      \"description\" : \"(Optional) Previous execution id for which resources need to be cleaned up.\",\n      \"default\" : \"\"\n    }\n  },\n  \"mainSteps\" : [ {\n    \"name\" : \"CheckIsRollback\",\n    \"action\" : \"aws:branch\",\n    \"inputs\" : {\n      \"Choices\" : [ {\n        \"NextStep\" : \"GetInputsFromPreviousExecution\",\n        \"Variable\" : \"{{IsRollback}}\",\n        \"StringEquals\" : \"true\"\n      } ],\n      \"Default\" : \"AssertAlarmToBeGreenBeforeTest\"\n    }\n  }, {\n    \"name\" : \"GetInputsFromPreviousExecution\",\n    \"action\" : \"aws:executeScript\",\n    \"outputs\" : [ {\n      \"Name\" : \"LoadBalancerArn\",\n      \"Selector\" : \"$.Payload.LoadBalancerArn[0]\",\n      \"Type\" : \"String\"\n    } ],\n    \"inputs\" : {\n      \"Runtime\" : \"python3.8\",\n      \"Handler\" : \"get_inputs_from_ssm_execution\",\n      \"InputPayload\" : {\n        \"ExecutionId\" : \"{{ PreviousExecutionId }}\"\n      },\n      \"Script\" : \"import json\\nimport boto3\\nfrom botocore.config import Config\\n\\n\\n\\n\\ndef get_inputs_from_ssm_execution(events, context):\\n    output = {}\\n    config = Config(retries={'max_attempts': 20, 'mode': 'standard'})\\n    ssm = boto3.client('ssm', config=config)\\n\\n    if 'ExecutionId' not in events:\\n        raise KeyError('Requires ExecutionId')\\n\\n    if not events['ExecutionId']:\\n        raise KeyError('Requires not empty ExecutionId')\\n\\n    response = ssm.get_automation_execution(AutomationExecutionId=events['ExecutionId'])\\n    response_parameters = response['AutomationExecution']['Parameters']\\n    # TODO DIG-853\\n    for parameter in response_parameters:\\n        output[parameter] = response_parameters[parameter]\\n\\n    return output\"\n    }\n  }, {\n    \"name\" : \"GetBackedUpTargetGroupsFromPreviousExecution\",\n    \"action\" : \"aws:executeScript\",\n    \"outputs\" : [ {\n      \"Name\" : \"TargetGroups\",\n      \"Selector\" : \"$.Payload.TargetGroups[0]\",\n      \"Type\" : \"String\"\n    } ],\n    \"inputs\" : {\n      \"Runtime\" : \"python3.8\",\n      \"Handler\" : \"get_output_from_ssm_step_execution\",\n      \"InputPayload\" : {\n        \"ExecutionId\" : \"{{ PreviousExecutionId }}\",\n        \"StepName\" : \"BackupCurrentExecution\",\n        \"ResponseField\" : \"TargetGroups\"\n      },\n      \"Script\" : \"import json\\nimport boto3\\nfrom botocore.config import Config\\n\\n\\n\\n\\ndef get_output_from_ssm_step_execution(events, context):\\n    config = Config(retries={'max_attempts': 20, 'mode': 'standard'})\\n    ssm = boto3.client('ssm', config=config)\\n\\n    if 'ExecutionId' not in events or 'StepName' not in events or 'ResponseField' not in events:\\n        raise KeyError('Requires ExecutionId, StepName and ResponseField in events')\\n\\n    ssm_response = ssm.get_automation_execution(AutomationExecutionId=events['ExecutionId'])\\n    for step in ssm_response['AutomationExecution']['StepExecutions']:\\n        if step['StepName'] == events['StepName']:\\n            response_fields = events['ResponseField'].split(',')\\n            output = {}\\n            for response_field in response_fields:\\n                if response_field in step['Outputs']:\\n                    # Sets values in string type regardless of what is the original value type. In order to set\\n                    # values with original types please use 'get_typed_output_from_ssm_step_execution'.\\n                    output[response_field] = step['Outputs'][response_field]\\n                else:\\n                    \\\"\\\"\\\"\\n                    By default SSM ignores empty values when encodes API outputs to JSON. It may result in\\n                    a situation when an empty value is a valid value but step output completely misses it.\\n                    Usually happens with SQS queue policies, default policy is returned by API as an empty value\\n                    and executeApi step output ignores it. As a result, further steps in rollback execution will fail.\\n                    Instead of ignoring this value we should use a default empty value in rollback, i.e. empty string\\n                    represents a default sqs policy\\n                    \\\"\\\"\\\"\\n                    output[response_field] = ['']\\n            return output\\n\\n    # Could not find step name\\n    raise Exception('Can not find step name % in ssm execution response', events['StepName'])\"\n    }\n  }, {\n    \"name\" : \"AssertLoadBalancerArn\",\n    \"action\" : \"aws:branch\",\n    \"inputs\" : {\n      \"Choices\" : [ {\n        \"NextStep\" : \"RollbackPreviousExecution\",\n        \"Variable\" : \"{{ GetInputsFromPreviousExecution.LoadBalancerArn }}\",\n        \"StringEquals\" : \"{{ LoadBalancerArn }}\"\n      } ]\n    },\n    \"isEnd\" : true\n  }, {\n    \"name\" : \"RollbackPreviousExecution\",\n    \"action\" : \"aws:executeScript\",\n    \"inputs\" : {\n      \"Runtime\" : \"python3.8\",\n      \"Handler\" : \"restore_targets_healthcheck_port\",\n      \"InputPayload\" : {\n        \"TargetGroups\" : \"{{GetBackedUpTargetGroupsFromPreviousExecution.TargetGroups}}\"\n      },\n      \"Script\" : \"import json\\nimport boto3\\nimport logging\\n\\nfrom botocore.config import Config\\nfrom time import sleep\\n\\nlogger = logging.getLogger(__name__)\\nlogger.setLevel(logging.INFO)\\n\\nITS_TIME_TO_SLEEP_A_LITTLE = 0.1\\nANGRY_WORD = 'Property to wait type mismatch: only str, int or list allowed'\\n\\n\\n\\n\\ndef check_required_params(required_params, events):\\n    for key in required_params:\\n        if key not in events:\\n            raise KeyError(f'Requires {key} in events')\\n\\n\\n\\ndef _restore_targets_healthcheck_port(elb_client, events: dict, context: dict) -> None:\\n    target_groups = json.loads(events['TargetGroups'])\\n    for target_group in target_groups:\\n        target_group.pop('LoadBalancerArn')\\n        elb_client.modify_target_group(**target_group)\\n\\n\\ndef restore_targets_healthcheck_port(events: dict, context: dict) -> None:\\n    required_params = [\\n        \\\"TargetGroups\\\",\\n    ]\\n    check_required_params(required_params, events)\\n    config = Config(retries={'max_attempts': 20, 'mode': 'standard'})\\n    elb_client = boto3.client('elbv2', config=config)\\n    _restore_targets_healthcheck_port(elb_client, events, context)\"\n    },\n    \"isEnd\" : true\n  }, {\n    \"name\" : \"AssertAlarmToBeGreenBeforeTest\",\n    \"action\" : \"aws:waitForAwsResourceProperty\",\n    \"maxAttempts\" : 1,\n    \"timeoutSeconds\" : 1200,\n    \"inputs\" : {\n      \"Service\" : \"cloudwatch\",\n      \"Api\" : \"DescribeAlarms\",\n      \"AlarmNames\" : [ \"{{UnHealthyHostCountAlarmName}}\" ],\n      \"PropertySelector\" : \"$.MetricAlarms[0].StateValue\",\n      \"DesiredValues\" : [ \"OK\" ]\n    }\n  }, {\n    \"name\" : \"BackupCurrentExecution\",\n    \"action\" : \"aws:executeScript\",\n    \"outputs\" : [ {\n      \"Name\" : \"TargetGroups\",\n      \"Selector\" : \"$.Payload\",\n      \"Type\" : \"String\"\n    } ],\n    \"inputs\" : {\n      \"Runtime\" : \"python3.8\",\n      \"Handler\" : \"backup_targets\",\n      \"InputPayload\" : {\n        \"LoadBalancerArn\" : \"{{LoadBalancerArn}}\",\n        \"TargetGroupArns\" : \"{{TargetGroupArns}}\"\n      },\n      \"Script\" : \"import json\\nimport boto3\\nimport logging\\n\\nfrom botocore.config import Config\\nfrom time import sleep\\n\\nlogger = logging.getLogger(__name__)\\nlogger.setLevel(logging.INFO)\\n\\nITS_TIME_TO_SLEEP_A_LITTLE = 0.1\\nANGRY_WORD = 'Property to wait type mismatch: only str, int or list allowed'\\n\\n\\n\\n\\ndef check_required_params(required_params, events):\\n    for key in required_params:\\n        if key not in events:\\n            raise KeyError(f'Requires {key} in events')\\n\\n\\n\\ndef _backup_targets(elb_client, events: dict, context: dict) -> str:\\n    paginator = elb_client.get_paginator('describe_target_groups')\\n    pages = paginator.paginate(\\n        LoadBalancerArn=events['LoadBalancerArn']\\n    )\\n    res = []\\n    for page in pages:\\n        target_groups = page.get('TargetGroups')\\n        for target_group in target_groups:\\n\\n            backed_group = {\\n                'LoadBalancerArn': events['LoadBalancerArn'],\\n            }\\n            for key in [\\n                'TargetGroupArn',\\n                'HealthCheckProtocol',\\n                'HealthCheckPort',\\n                'HealthCheckEnabled',\\n                'HealthCheckIntervalSeconds',\\n                'HealthCheckTimeoutSeconds',\\n                'HealthyThresholdCount',\\n                'UnhealthyThresholdCount',\\n                'HealthCheckPath'\\n            ]:\\n                if target_group.get(key):\\n                    backed_group[key] = target_group.get(key)\\n\\n            res.append(backed_group)\\n    return json.dumps(res)\\n\\n\\ndef backup_targets(events: dict, context: dict) -> str:\\n\\n    required_params = [\\n        \\\"LoadBalancerArn\\\"\\n    ]\\n    check_required_params(required_params, events)\\n    config = Config(retries={'max_attempts': 20, 'mode': 'standard'})\\n    elb_client = boto3.client('elbv2', config=config)\\n    return _backup_targets(elb_client, events, context)\"\n    }\n  }, {\n    \"name\" : \"BreakTargets\",\n    \"onFailure\" : \"step:RollbackCurrentExecution\",\n    \"onCancel\" : \"step:TriggerRollback\",\n    \"action\" : \"aws:executeScript\",\n    \"inputs\" : {\n      \"Runtime\" : \"python3.8\",\n      \"Handler\" : \"break_targets_healthcheck_port\",\n      \"InputPayload\" : {\n        \"TargetGroups\" : \"{{BackupCurrentExecution.TargetGroups}}\",\n        \"HealthCheckPort\" : \"{{UnhealthyHealthCheckPort}}\"\n      },\n      \"Script\" : \"import json\\nimport boto3\\nimport logging\\n\\nfrom botocore.config import Config\\nfrom time import sleep\\n\\nlogger = logging.getLogger(__name__)\\nlogger.setLevel(logging.INFO)\\n\\nITS_TIME_TO_SLEEP_A_LITTLE = 0.1\\nANGRY_WORD = 'Property to wait type mismatch: only str, int or list allowed'\\n\\n\\n\\n\\ndef check_required_params(required_params, events):\\n    for key in required_params:\\n        if key not in events:\\n            raise KeyError(f'Requires {key} in events')\\n\\n\\n\\ndef _break_targets_healthcheck_port(elb_client, events: dict, context: dict):\\n    target_groups = json.loads(events['TargetGroups'])\\n    for target_group in target_groups:\\n        elb_client.modify_target_group(\\n            TargetGroupArn=target_group['TargetGroupArn'],\\n            HealthCheckEnabled=True,\\n            HealthCheckIntervalSeconds=10,\\n            HealthyThresholdCount=2,\\n            HealthCheckPort=str(events['HealthCheckPort'])\\n    )\\n\\n\\ndef break_targets_healthcheck_port(events: dict, context: dict) -> None:\\n    required_params = [\\n        \\\"TargetGroups\\\",\\n        \\\"HealthCheckPort\\\"\\n    ]\\n    check_required_params(required_params, events)\\n    config = Config(retries={'max_attempts': 20, 'mode': 'standard'})\\n    elb_client = boto3.client('elbv2', config=config)\\n    _break_targets_healthcheck_port(elb_client, events, context)\"\n    }\n  }, {\n    \"name\" : \"AssertAlarmToBeRed\",\n    \"action\" : \"aws:waitForAwsResourceProperty\",\n    \"maxAttempts\" : 1,\n    \"timeoutSeconds\" : 900,\n    \"onFailure\" : \"step:RollbackCurrentExecution\",\n    \"onCancel\" : \"step:TriggerRollback\",\n    \"inputs\" : {\n      \"Service\" : \"cloudwatch\",\n      \"Api\" : \"DescribeAlarms\",\n      \"AlarmNames\" : [ \"{{UnHealthyHostCountAlarmName}}\" ],\n      \"PropertySelector\" : \"$.MetricAlarms[0].StateValue\",\n      \"DesiredValues\" : [ \"ALARM\" ]\n    }\n  }, {\n    \"name\" : \"RollbackCurrentExecution\",\n    \"maxAttempts\" : 5,\n    \"onCancel\" : \"step:TriggerRollback\",\n    \"action\" : \"aws:executeScript\",\n    \"inputs\" : {\n      \"Runtime\" : \"python3.8\",\n      \"Handler\" : \"restore_targets_healthcheck_port\",\n      \"InputPayload\" : {\n        \"TargetGroups\" : \"{{BackupCurrentExecution.TargetGroups}}\"\n      },\n      \"Script\" : \"import json\\nimport boto3\\nimport logging\\n\\nfrom botocore.config import Config\\nfrom time import sleep\\n\\nlogger = logging.getLogger(__name__)\\nlogger.setLevel(logging.INFO)\\n\\nITS_TIME_TO_SLEEP_A_LITTLE = 0.1\\nANGRY_WORD = 'Property to wait type mismatch: only str, int or list allowed'\\n\\n\\n\\n\\ndef check_required_params(required_params, events):\\n    for key in required_params:\\n        if key not in events:\\n            raise KeyError(f'Requires {key} in events')\\n\\n\\n\\ndef _restore_targets_healthcheck_port(elb_client, events: dict, context: dict) -> None:\\n    target_groups = json.loads(events['TargetGroups'])\\n    for target_group in target_groups:\\n        target_group.pop('LoadBalancerArn')\\n        elb_client.modify_target_group(**target_group)\\n\\n\\ndef restore_targets_healthcheck_port(events: dict, context: dict) -> None:\\n    required_params = [\\n        \\\"TargetGroups\\\",\\n    ]\\n    check_required_params(required_params, events)\\n    config = Config(retries={'max_attempts': 20, 'mode': 'standard'})\\n    elb_client = boto3.client('elbv2', config=config)\\n    _restore_targets_healthcheck_port(elb_client, events, context)\"\n    }\n  }, {\n    \"name\" : \"AssertAlarmToBeGreen\",\n    \"action\" : \"aws:waitForAwsResourceProperty\",\n    \"maxAttempts\" : 1,\n    \"timeoutSeconds\" : 1200,\n    \"inputs\" : {\n      \"Service\" : \"cloudwatch\",\n      \"Api\" : \"DescribeAlarms\",\n      \"AlarmNames\" : [ \"{{UnHealthyHostCountAlarmName}}\" ],\n      \"PropertySelector\" : \"$.MetricAlarms[0].StateValue\",\n      \"DesiredValues\" : [ \"OK\" ]\n    },\n    \"isEnd\" : true\n  }, {\n    \"name\" : \"TriggerRollback\",\n    \"action\" : \"aws:executeScript\",\n    \"onFailure\" : \"Abort\",\n    \"outputs\" : [ {\n      \"Name\" : \"RollbackExecutionId\",\n      \"Selector\" : \"$.Payload.RollbackExecutionId\",\n      \"Type\" : \"String\"\n    } ],\n    \"inputs\" : {\n      \"Runtime\" : \"python3.8\",\n      \"Handler\" : \"start_rollback_execution\",\n      \"InputPayload\" : {\n        \"ExecutionId\" : \"{{automation:EXECUTION_ID}}\"\n      },\n      \"Script\" : \"import json\\nimport boto3\\nfrom botocore.config import Config\\n\\n\\n\\n\\ndef start_rollback_execution(events, context):\\n    output = {}\\n    config = Config(retries={'max_attempts': 20, 'mode': 'standard'})\\n    ssm = boto3.client('ssm', config=config)\\n\\n    if 'ExecutionId' not in events or not events['ExecutionId']:\\n        raise KeyError('Requires not empty ExecutionId')\\n\\n    response = ssm.get_automation_execution(AutomationExecutionId=events['ExecutionId'])\\n\\n    # Get parameters for current execution and add IsRollback and PreviousExecutionId\\n    response_parameters = response['AutomationExecution']['Parameters']\\n    response_parameters['IsRollback'] = ['true']\\n    response_parameters['PreviousExecutionId'] = [events['ExecutionId']]\\n\\n    rollback_execution_response = ssm.start_automation_execution(\\n        DocumentName=response['AutomationExecution']['DocumentName'],\\n        DocumentVersion=response['AutomationExecution']['DocumentVersion'],\\n        Parameters=response_parameters\\n    )\\n    output['RollbackExecutionId'] = rollback_execution_response['AutomationExecutionId']\\n    return output\"\n    },\n    \"isEnd\" : true\n  } ]\n}",
  "CreatedDate": "2022-11-08T12:37:12.766Z",
  "DisplayName": null,
  "DocumentFormat": {
    "Value": "JSON"
  },
  "DocumentType": {
    "Value": "Automation"
  },
  "DocumentVersion": "3",
  "Name": "AWSResilienceHub-BreakTargetGroupsHealthCheckPortTest_2020-04-01",
  "Requires": [],
  "ReviewStatus": null,
  "Status": {
    "Value": "Active"
  },
  "StatusInformation": null,
  "VersionName": null,
  "ResponseMetadata": {
    "RequestId": "9f3a9811-a471-4899-bb99-f2d75dcff376",
    "Metadata": {},
    "ChecksumAlgorithm": 0,
    "ChecksumValidationStatus": 0
  },
  "ContentLength": 17273,
  "HttpStatusCode": 200,
  "LoggedAt": "2023-02-12T07:11:36.6999784+00:00"
}
