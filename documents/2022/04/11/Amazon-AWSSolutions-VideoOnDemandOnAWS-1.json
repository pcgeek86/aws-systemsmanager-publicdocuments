{
  "AttachmentsContent": [],
  "Content": "{\n  \"schemaVersion\" : \"1.0\",\n  \"description\" : \"(SO0021) - Video On Demand workflow with AWS Step Functions, MediaConvert, MediaPackage, S3, CloudFront and DynamoDB. Version v5.2.0\",\n  \"templateBody\" : {\n    \"Description\" : \"(SO0021) - Video On Demand workflow with AWS Step Functions, MediaConvert, MediaPackage, S3, CloudFront and DynamoDB. Version v5.2.0\",\n    \"Parameters\" : {\n      \"AdminEmail\" : {\n        \"Description\" : \"Email address for SNS notifications (subscribed users will receive ingest, publishing, and error notifications)\",\n        \"Type\" : \"String\",\n        \"AllowedPattern\" : \"^[_A-Za-z0-9-\\\\+]+(\\\\.[_A-Za-z0-9-]+)*@[A-Za-z0-9-]+(\\\\.[A-Za-z0-9]+)*(\\\\.[A-Za-z]{2,})$\"\n      },\n      \"WorkflowTrigger\" : {\n        \"Description\" : \"How the workflow will be triggered (source video upload to S3 or source metadata file upload)\",\n        \"Type\" : \"String\",\n        \"Default\" : \"VideoFile\",\n        \"AllowedValues\" : [ \"VideoFile\", \"MetadataFile\" ]\n      },\n      \"Glacier\" : {\n        \"Description\" : \"If enabled, source assets will be tagged for archiving to Glacier or Glacier Deep Archive once the workflow is complete\",\n        \"Type\" : \"String\",\n        \"Default\" : \"DISABLED\",\n        \"AllowedValues\" : [ \"DISABLED\", \"GLACIER\", \"DEEP_ARCHIVE\" ]\n      },\n      \"FrameCapture\" : {\n        \"Description\" : \"If enabled, frame capture is added to the job submitted to MediaConvert\",\n        \"Type\" : \"String\",\n        \"Default\" : false,\n        \"AllowedValues\" : [ true, false ]\n      },\n      \"EnableMediaPackage\" : {\n        \"Description\" : \"If enabled, MediaPackage VOD will be included in the workflow\",\n        \"Type\" : \"String\",\n        \"Default\" : false,\n        \"AllowedValues\" : [ true, false ]\n      },\n      \"EnableSns\" : {\n        \"Description\" : \"Enable Ingest and Publish email notifications, error messages are not afeected by this parameter.\",\n        \"Type\" : \"String\",\n        \"Default\" : true,\n        \"AllowedValues\" : [ true, false ]\n      },\n      \"EnableSqs\" : {\n        \"Description\" : \"Publish the workflow results to an SQS queue to injest upstream\",\n        \"Type\" : \"String\",\n        \"Default\" : true,\n        \"AllowedValues\" : [ true, false ]\n      },\n      \"AcceleratedTranscoding\" : {\n        \"Description\" : \"Enable accelerated transcoding in AWS Elemental MediaConvert. PREFERRED will only use acceleration if the input files is supported. ENABLED accleration is applied to all files (this will fail for unsupported file types) see MediaConvert Documentation for more detail https://docs.aws.amazon.com/mediaconvert/latest/ug/accelerated-transcoding.html\",\n        \"Type\" : \"String\",\n        \"Default\" : \"PREFERRED\",\n        \"AllowedValues\" : [ \"ENABLED\", \"DISABLED\", \"PREFERRED\" ]\n      }\n    },\n    \"Metadata\" : {\n      \"AWS::CloudFormation::Interface\" : {\n        \"ParameterGroups\" : [ {\n          \"Label\" : {\n            \"default\" : \"Workflow\"\n          },\n          \"Parameters\" : [ \"AdminEmail\", \"WorkflowTrigger\", \"Glacier\", \"EnableSns\", \"EnableSqs\" ]\n        }, {\n          \"Label\" : {\n            \"default\" : \"AWS Elemental MediaConvert\"\n          },\n          \"Parameters\" : [ \"FrameCapture\", \"AcceleratedTranscoding\" ]\n        }, {\n          \"Label\" : {\n            \"default\" : \"AWS Elemental MediaPackage\"\n          },\n          \"Parameters\" : [ \"EnableMediaPackage\" ]\n        } ],\n        \"ParameterLabels\" : {\n          \"AdminEmail\" : {\n            \"default\" : \"Notification email address\"\n          },\n          \"Glacier\" : {\n            \"default\" : \"Archive source content\"\n          },\n          \"WorkflowTrigger\" : {\n            \"default\" : \"Workflow trigger\"\n          },\n          \"FrameCapture\" : {\n            \"default\" : \"Enable Frame Capture\"\n          },\n          \"EnableMediaPackage\" : {\n            \"default\" : \"Enable MediaPackage\"\n          },\n          \"AcceleratedTranscoding\" : {\n            \"default\" : \"Accelerated Transcoding\"\n          },\n          \"EnableSns\" : {\n            \"default\" : \"Enable SNS Notifications\"\n          },\n          \"EnableSqs\" : {\n            \"default\" : \"Enable SQS Messaging\"\n          }\n        }\n      }\n    },\n    \"Mappings\" : {\n      \"SourceCode\" : {\n        \"General\" : {\n          \"S3Bucket\" : \"solutions\",\n          \"KeyPrefix\" : \"video-on-demand-on-aws/v5.2.0\"\n        }\n      },\n      \"AnonymousData\" : {\n        \"SendAnonymousData\" : {\n          \"Data\" : true\n        }\n      }\n    },\n    \"Conditions\" : {\n      \"Metrics\" : [ [ \"AnonymousData\", \"SendAnonymousData\", \"Data\" ], true ],\n      \"IsMediaPackageEnabled\" : [ \"EnableMediaPackage\", true ]\n    },\n    \"Resources\" : {\n      \"CustomResourceRole\" : {\n        \"Type\" : \"AWS::IAM::Role\",\n        \"Properties\" : {\n          \"AssumeRolePolicyDocument\" : {\n            \"Version\" : \"2012-10-17\",\n            \"Statement\" : [ {\n              \"Effect\" : \"Allow\",\n              \"Principal\" : {\n                \"Service\" : [ \"lambda.amazonaws.com\" ]\n              },\n              \"Action\" : [ \"sts:AssumeRole\" ]\n            } ]\n          },\n          \"Path\" : \"/\",\n          \"Policies\" : [ {\n            \"PolicyName\" : \"${AWS::StackName}-custom-resource\",\n            \"PolicyDocument\" : {\n              \"Statement\" : [ {\n                \"Effect\" : \"Allow\",\n                \"Action\" : [ \"logs:CreateLogGroup\", \"logs:CreateLogStream\", \"logs:PutLogEvents\" ],\n                \"Resource\" : [ \"arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*\" ]\n              }, {\n                \"Effect\" : \"Allow\",\n                \"Action\" : [ \"s3:PutBucketNotification\", \"s3:PutObject\", \"s3:PutObjectAcl\" ],\n                \"Resource\" : [ \"Source.Arn\" ]\n              }, {\n                \"Effect\" : \"Allow\",\n                \"Action\" : [ \"mediaconvert:CreatePreset\", \"mediaconvert:CreateJobTemplate\", \"mediaconvert:DeletePreset\", \"mediaconvert:DeleteJobTemplate\", \"mediaconvert:DescribeEndpoints\", \"mediaconvert:ListJobTemplates\" ],\n                \"Resource\" : [ \"arn:${AWS::Partition}:mediaconvert:${AWS::Region}:${AWS::AccountId}:*\" ]\n              }, {\n                \"Effect\" : \"Allow\",\n                \"Action\" : [ \"mediapackage-vod:DeleteAsset\", \"mediapackage-vod:DeletePackagingConfiguration\" ],\n                \"Resource\" : [ \"arn:${AWS::Partition}:mediapackage-vod:${AWS::Region}:${AWS::AccountId}:assets/*\", \"arn:${AWS::Partition}:mediapackage-vod:${AWS::Region}:${AWS::AccountId}:packaging-configurations/packaging-config-*\" ]\n              }, {\n                \"Effect\" : \"Allow\",\n                \"Action\" : [ \"mediapackage-vod:DescribePackagingGroup\", \"mediapackage-vod:DeletePackagingGroup\" ],\n                \"Resource\" : [ \"arn:${AWS::Partition}:mediapackage-vod:${AWS::Region}:${AWS::AccountId}:packaging-groups/${AWS::StackName}-packaging-group\" ]\n              }, {\n                \"Effect\" : \"Allow\",\n                \"Action\" : [ \"mediapackage-vod:CreatePackagingConfiguration\", \"mediapackage-vod:CreatePackagingGroup\", \"mediapackage-vod:ListAssets\", \"mediapackage-vod:ListPackagingConfigurations\", \"mediapackage-vod:ListPackagingGroups\" ],\n                \"Resource\" : \"*\"\n              }, {\n                \"Effect\" : \"Allow\",\n                \"Action\" : [ \"cloudfront:GetDistributionConfig\", \"cloudfront:UpdateDistribution\" ],\n                \"Resource\" : [ \"arn:${AWS::Partition}:cloudfront::${AWS::AccountId}:distribution/${CloudFront}\" ]\n              } ]\n            }\n          } ]\n        },\n        \"Metadata\" : {\n          \"cfn_nag\" : {\n            \"rules_to_suppress\" : [ {\n              \"id\" : \"W11\",\n              \"reason\" : \"* is required to create CloudWatch logs and interact with MediaConvert / MediaPackage actions that do not support resource level permissions\"\n            }, {\n              \"id\" : \"W76\",\n              \"reason\" : \"All policies are required by the custom resource.\"\n            } ]\n          }\n        }\n      },\n      \"StepFunctionsServiceRole\" : {\n        \"Type\" : \"AWS::IAM::Role\",\n        \"Properties\" : {\n          \"AssumeRolePolicyDocument\" : {\n            \"Version\" : \"2012-10-17\",\n            \"Statement\" : [ {\n              \"Effect\" : \"Allow\",\n              \"Principal\" : {\n                \"Service\" : [ \"states.${AWS::Region}.amazonaws.com\" ]\n              },\n              \"Action\" : [ \"sts:AssumeRole\" ]\n            } ]\n          },\n          \"Policies\" : [ {\n            \"PolicyName\" : \"${AWS::StackName}-stepfunctions-service-role\",\n            \"PolicyDocument\" : {\n              \"Statement\" : [ {\n                \"Effect\" : \"Allow\",\n                \"Action\" : [ \"lambda:InvokeFunction\" ],\n                \"Resource\" : [ \"arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:*\" ]\n              } ]\n            }\n          } ]\n        },\n        \"Metadata\" : {\n          \"cfn_nag\" : {\n            \"rules_to_suppress\" : [ {\n              \"id\" : \"W11\",\n              \"reason\" : \"The * resource is required since the functions need to be created before the state machine\"\n            } ]\n          }\n        }\n      },\n      \"MediaConvertRole\" : {\n        \"Type\" : \"AWS::IAM::Role\",\n        \"Properties\" : {\n          \"AssumeRolePolicyDocument\" : {\n            \"Version\" : \"2012-10-17\",\n            \"Statement\" : [ {\n              \"Effect\" : \"Allow\",\n              \"Principal\" : {\n                \"Service\" : [ \"mediaconvert.amazonaws.com\" ]\n              },\n              \"Action\" : [ \"sts:AssumeRole\" ]\n            } ]\n          },\n          \"Policies\" : [ {\n            \"PolicyName\" : \"${AWS::StackName}-mediatranscode-policy\",\n            \"PolicyDocument\" : {\n              \"Statement\" : [ {\n                \"Effect\" : \"Allow\",\n                \"Action\" : [ \"s3:GetObject\", \"s3:PutObject\" ],\n                \"Resource\" : [ \"${Source.Arn}/*\", \"${Destination.Arn}/*\" ]\n              }, {\n                \"Effect\" : \"Allow\",\n                \"Action\" : [ \"execute-api:Invoke\" ],\n                \"Resource\" : [ \"arn:${AWS::Partition}:execute-api:${AWS::Region}:${AWS::AccountId}:*\" ]\n              } ]\n            }\n          } ]\n        },\n        \"Metadata\" : {\n          \"cfn_nag\" : {\n            \"rules_to_suppress\" : [ {\n              \"id\" : \"W11\",\n              \"reason\" : \"/* required to get/put objects to S3\"\n            } ]\n          }\n        }\n      },\n      \"MediaPackageVodRole\" : {\n        \"Type\" : \"AWS::IAM::Role\",\n        \"Properties\" : {\n          \"AssumeRolePolicyDocument\" : {\n            \"Version\" : \"2012-10-17\",\n            \"Statement\" : [ {\n              \"Effect\" : \"Allow\",\n              \"Principal\" : {\n                \"Service\" : [ \"mediapackage.amazonaws.com\" ]\n              },\n              \"Action\" : [ \"sts:AssumeRole\" ]\n            } ]\n          },\n          \"Policies\" : [ {\n            \"PolicyName\" : \"${AWS::StackName}-mediapackagevod-policy\",\n            \"PolicyDocument\" : {\n              \"Statement\" : [ {\n                \"Effect\" : \"Allow\",\n                \"Action\" : [ \"s3:GetObject\", \"s3:GetBucketLocation\", \"s3:GetBucketRequestPayment\" ],\n                \"Resource\" : [ \"${Destination.Arn}\", \"${Destination.Arn}/*\" ]\n              } ]\n            }\n          } ]\n        },\n        \"Metadata\" : {\n          \"cfn_nag\" : {\n            \"rules_to_suppress\" : [ {\n              \"id\" : \"W11\",\n              \"reason\" : \"* is required to get objects from S3\"\n            } ]\n          }\n        }\n      },\n      \"S3LambdaInvokeVideo\" : {\n        \"Type\" : \"AWS::Lambda::Permission\",\n        \"Properties\" : {\n          \"FunctionName\" : \"StepFunctions.Arn\",\n          \"Action\" : \"lambda:InvokeFunction\",\n          \"Principal\" : \"s3.amazonaws.com\",\n          \"SourceAccount\" : \"AWS::AccountId\"\n        }\n      },\n      \"CloudWatchLambdaInvokeErrors\" : {\n        \"Type\" : \"AWS::Lambda::Permission\",\n        \"Properties\" : {\n          \"FunctionName\" : \"ErrorHandler.Arn\",\n          \"Action\" : \"lambda:InvokeFunction\",\n          \"Principal\" : \"events.amazonaws.com\",\n          \"SourceArn\" : \"EncodeErrorRule.Arn\"\n        }\n      },\n      \"CloudWatchLambdaInvokeCompletes\" : {\n        \"Type\" : \"AWS::Lambda::Permission\",\n        \"Properties\" : {\n          \"FunctionName\" : \"StepFunctions.Arn\",\n          \"Action\" : \"lambda:InvokeFunction\",\n          \"Principal\" : \"events.amazonaws.com\",\n          \"SourceArn\" : \"EncodeCompleteRule.Arn\"\n        }\n      },\n      \"DestBucketPolicy\" : {\n        \"Type\" : \"AWS::S3::BucketPolicy\",\n        \"Properties\" : {\n          \"Bucket\" : \"Destination\",\n          \"PolicyDocument\" : {\n            \"Statement\" : [ {\n              \"Effect\" : \"Allow\",\n              \"Action\" : [ \"s3:GetObject\" ],\n              \"Resource\" : \"arn:${AWS::Partition}:s3:::${Destination}/*\",\n              \"Principal\" : {\n                \"CanonicalUser\" : \"DestinationOriginAccessIdentity.S3CanonicalUserId\"\n              }\n            } ]\n          }\n        }\n      },\n      \"EncodeCompleteRule\" : {\n        \"Type\" : \"AWS::Events::Rule\",\n        \"Properties\" : {\n          \"Name\" : \"${AWS::StackName}-EncodeComplete\",\n          \"Description\" : \"MediaConvert Completed event rule\",\n          \"EventPattern\" : {\n            \"source\" : [ \"aws.mediaconvert\" ],\n            \"detail\" : {\n              \"status\" : [ \"COMPLETE\" ],\n              \"userMetadata\" : {\n                \"workflow\" : [ \"AWS::StackName\" ]\n              }\n            }\n          },\n          \"Targets\" : [ {\n            \"Arn\" : \"StepFunctions.Arn\",\n            \"Id\" : \"${AWS::StackName}-StepFunctions\"\n          } ]\n        }\n      },\n      \"EncodeErrorRule\" : {\n        \"Type\" : \"AWS::Events::Rule\",\n        \"Properties\" : {\n          \"Name\" : \"${AWS::StackName}-EncodeError\",\n          \"Description\" : \"MediaConvert Error event rule\",\n          \"EventPattern\" : {\n            \"source\" : [ \"aws.mediaconvert\" ],\n            \"detail\" : {\n              \"status\" : [ \"ERROR\" ],\n              \"userMetadata\" : {\n                \"workflow\" : [ \"AWS::StackName\" ]\n              }\n            }\n          },\n          \"Targets\" : [ {\n            \"Arn\" : \"ErrorHandler.Arn\",\n            \"Id\" : \"${AWS::StackName}-EncodeError\"\n          } ]\n        }\n      },\n      \"DynamoDBTable\" : {\n        \"DeletionPolicy\" : \"Retain\",\n        \"UpdateReplacePolicy\" : \"Retain\",\n        \"Type\" : \"AWS::DynamoDB::Table\",\n        \"Properties\" : {\n          \"BillingMode\" : \"PAY_PER_REQUEST\",\n          \"PointInTimeRecoverySpecification\" : {\n            \"PointInTimeRecoveryEnabled\" : true\n          },\n          \"AttributeDefinitions\" : [ {\n            \"AttributeName\" : \"guid\",\n            \"AttributeType\" : \"S\"\n          }, {\n            \"AttributeName\" : \"srcBucket\",\n            \"AttributeType\" : \"S\"\n          }, {\n            \"AttributeName\" : \"startTime\",\n            \"AttributeType\" : \"S\"\n          } ],\n          \"KeySchema\" : [ {\n            \"AttributeName\" : \"guid\",\n            \"KeyType\" : \"HASH\"\n          } ],\n          \"GlobalSecondaryIndexes\" : [ {\n            \"IndexName\" : \"srcBucket-startTime-index\",\n            \"KeySchema\" : [ {\n              \"AttributeName\" : \"srcBucket\",\n              \"KeyType\" : \"HASH\"\n            }, {\n              \"AttributeName\" : \"startTime\",\n              \"KeyType\" : \"RANGE\"\n            } ],\n            \"Projection\" : {\n              \"ProjectionType\" : \"ALL\"\n            }\n          } ],\n          \"TableName\" : \"AWS::StackName\"\n        },\n        \"Metadata\" : {\n          \"cfn_nag\" : {\n            \"rules_to_suppress\" : [ {\n              \"id\" : \"W28\",\n              \"reason\" : \"Table name is set to the stack name\"\n            }, {\n              \"id\" : \"W74\",\n              \"reason\" : \" The DynamoDB table is configured to use the default encryption\"\n            } ]\n          }\n        }\n      },\n      \"Source\" : {\n        \"DeletionPolicy\" : \"Retain\",\n        \"UpdateReplacePolicy\" : \"Retain\",\n        \"Type\" : \"AWS::S3::Bucket\",\n        \"Properties\" : {\n          \"LoggingConfiguration\" : {\n            \"DestinationBucketName\" : \"Logs\",\n            \"LogFilePrefix\" : \"s3-access/\"\n          },\n          \"LifecycleConfiguration\" : {\n            \"Rules\" : [ {\n              \"Id\" : \"${AWS::StackName}-source-archive\",\n              \"TagFilters\" : [ {\n                \"Key\" : \"AWS::StackName\",\n                \"Value\" : \"GLACIER\"\n              } ],\n              \"Status\" : \"Enabled\",\n              \"Transitions\" : [ {\n                \"TransitionInDays\" : 1,\n                \"StorageClass\" : \"GLACIER\"\n              } ]\n            }, {\n              \"Id\" : \"${AWS::StackName}-source-deep-archive\",\n              \"TagFilters\" : [ {\n                \"Key\" : \"AWS::StackName\",\n                \"Value\" : \"DEEP_ARCHIVE\"\n              } ],\n              \"Status\" : \"Enabled\",\n              \"Transitions\" : [ {\n                \"TransitionInDays\" : 1,\n                \"StorageClass\" : \"DEEP_ARCHIVE\"\n              } ]\n            } ]\n          },\n          \"BucketEncryption\" : {\n            \"ServerSideEncryptionConfiguration\" : [ {\n              \"ServerSideEncryptionByDefault\" : {\n                \"SSEAlgorithm\" : \"AES256\"\n              }\n            } ]\n          },\n          \"PublicAccessBlockConfiguration\" : {\n            \"BlockPublicAcls\" : true,\n            \"BlockPublicPolicy\" : true,\n            \"IgnorePublicAcls\" : true,\n            \"RestrictPublicBuckets\" : true\n          }\n        },\n        \"Metadata\" : {\n          \"cfn_nag\" : {\n            \"rules_to_suppress\" : [ {\n              \"id\" : \"W51\",\n              \"reason\" : \"Bucket does not need a bucket policy\"\n            } ]\n          }\n        }\n      },\n      \"Destination\" : {\n        \"DeletionPolicy\" : \"Retain\",\n        \"UpdateReplacePolicy\" : \"Retain\",\n        \"Type\" : \"AWS::S3::Bucket\",\n        \"Properties\" : {\n          \"LoggingConfiguration\" : {\n            \"DestinationBucketName\" : \"Logs\",\n            \"LogFilePrefix\" : \"s3-access/\"\n          },\n          \"CorsConfiguration\" : {\n            \"CorsRules\" : [ {\n              \"AllowedMethods\" : [ \"GET\" ],\n              \"AllowedOrigins\" : [ \"*\" ],\n              \"AllowedHeaders\" : [ \"*\" ],\n              \"MaxAge\" : 3000\n            } ]\n          },\n          \"PublicAccessBlockConfiguration\" : {\n            \"BlockPublicAcls\" : true,\n            \"BlockPublicPolicy\" : true,\n            \"IgnorePublicAcls\" : true,\n            \"RestrictPublicBuckets\" : true\n          },\n          \"BucketEncryption\" : {\n            \"ServerSideEncryptionConfiguration\" : [ {\n              \"ServerSideEncryptionByDefault\" : {\n                \"SSEAlgorithm\" : \"AES256\"\n              }\n            } ]\n          }\n        }\n      },\n      \"Logs\" : {\n        \"DeletionPolicy\" : \"Retain\",\n        \"UpdateReplacePolicy\" : \"Retain\",\n        \"Type\" : \"AWS::S3::Bucket\",\n        \"Properties\" : {\n          \"AccessControl\" : \"LogDeliveryWrite\",\n          \"BucketEncryption\" : {\n            \"ServerSideEncryptionConfiguration\" : [ {\n              \"ServerSideEncryptionByDefault\" : {\n                \"SSEAlgorithm\" : \"AES256\"\n              }\n            } ]\n          },\n          \"PublicAccessBlockConfiguration\" : {\n            \"BlockPublicAcls\" : true,\n            \"BlockPublicPolicy\" : true,\n            \"IgnorePublicAcls\" : true,\n            \"RestrictPublicBuckets\" : true\n          }\n        },\n        \"Metadata\" : {\n          \"cfn_nag\" : {\n            \"rules_to_suppress\" : [ {\n              \"id\" : \"W35\",\n              \"reason\" : \"Used to store access logs for other buckets\"\n            }, {\n              \"id\" : \"W51\",\n              \"reason\" : \"Bucket does not need a bucket policy\"\n            } ]\n          }\n        }\n      },\n      \"SnsTopic\" : {\n        \"Type\" : \"AWS::SNS::Topic\",\n        \"Properties\" : {\n          \"DisplayName\" : \"${AWS::StackName}-Notifications\",\n          \"KmsMasterKeyId\" : \"alias/aws/sns\",\n          \"Subscription\" : [ {\n            \"Endpoint\" : \"AdminEmail\",\n            \"Protocol\" : \"email\"\n          } ]\n        }\n      },\n      \"SqsQueue\" : {\n        \"Type\" : \"AWS::SQS::Queue\",\n        \"Properties\" : {\n          \"VisibilityTimeout\" : 120,\n          \"QueueName\" : \"${AWS::StackName}\",\n          \"RedrivePolicy\" : {\n            \"deadLetterTargetArn\" : \"${SqsQueueDlq.Arn}\",\n            \"maxReceiveCount\" : 1\n          },\n          \"KmsDataKeyReusePeriodSeconds\" : 300,\n          \"KmsMasterKeyId\" : \"alias/aws/sqs\"\n        }\n      },\n      \"SqsQueueDlq\" : {\n        \"Type\" : \"AWS::SQS::Queue\",\n        \"Properties\" : {\n          \"VisibilityTimeout\" : 120,\n          \"QueueName\" : \"${AWS::StackName}-dlq\",\n          \"KmsDataKeyReusePeriodSeconds\" : 300,\n          \"KmsMasterKeyId\" : \"alias/aws/sqs\"\n        }\n      },\n      \"DestinationOriginAccessIdentity\" : {\n        \"Type\" : \"AWS::CloudFront::CloudFrontOriginAccessIdentity\",\n        \"Properties\" : {\n          \"CloudFrontOriginAccessIdentityConfig\" : {\n            \"Comment\" : \"access-identity-${Destination}\"\n          }\n        }\n      },\n      \"CloudFront\" : {\n        \"Type\" : \"AWS::CloudFront::Distribution\",\n        \"Properties\" : {\n          \"DistributionConfig\" : {\n            \"Origins\" : [ {\n              \"DomainName\" : \"${Destination}.s3.${AWS::Region}.amazonaws.com\",\n              \"Id\" : \"vodS3Origin\",\n              \"S3OriginConfig\" : {\n                \"OriginAccessIdentity\" : \"origin-access-identity/cloudfront/${DestinationOriginAccessIdentity}\"\n              }\n            } ],\n            \"Enabled\" : true,\n            \"Logging\" : {\n              \"IncludeCookies\" : false,\n              \"Bucket\" : \"Logs.DomainName\",\n              \"Prefix\" : \"cloudfront-logs/\"\n            },\n            \"DefaultCacheBehavior\" : {\n              \"AllowedMethods\" : [ \"GET\", \"HEAD\" ],\n              \"Compress\" : true,\n              \"MaxTTL\" : 0,\n              \"MinTTL\" : 0,\n              \"ViewerProtocolPolicy\" : \"redirect-to-https\",\n              \"DefaultTTL\" : 0,\n              \"TargetOriginId\" : \"vodS3Origin\",\n              \"ForwardedValues\" : {\n                \"QueryString\" : false,\n                \"Cookies\" : {\n                  \"Forward\" : \"none\"\n                },\n                \"Headers\" : [ \"Origin\", \"Access-Control-Request-Method\", \"Access-Control-Request-Headers\" ]\n              }\n            },\n            \"PriceClass\" : \"PriceClass_100\",\n            \"ViewerCertificate\" : {\n              \"CloudFrontDefaultCertificate\" : true\n            }\n          }\n        },\n        \"Metadata\" : {\n          \"cfn_nag\" : {\n            \"rules_to_suppress\" : [ {\n              \"id\" : \"W70\",\n              \"reason\" : \"CloudFront automatically sets the security policy to TLSv1 when the distribution uses the CloudFront domain name (CloudFrontDefaultCertificate=true)\"\n            } ]\n          }\n        }\n      },\n      \"S3Config\" : {\n        \"DependsOn\" : \"CloudFront\",\n        \"Type\" : \"Custom::S3\",\n        \"Properties\" : {\n          \"ServiceToken\" : \"CustomResource.Arn\",\n          \"Source\" : \"Source\",\n          \"IngestArn\" : \"StepFunctions.Arn\",\n          \"Resource\" : \"S3Notification\",\n          \"WorkflowTrigger\" : \"WorkflowTrigger\"\n        }\n      },\n      \"MediaConvertEndPoint\" : {\n        \"Type\" : \"Custom::LoadLambda\",\n        \"Properties\" : {\n          \"ServiceToken\" : \"CustomResource.Arn\",\n          \"Resource\" : \"EndPoint\"\n        }\n      },\n      \"MediaConvertTemplates\" : {\n        \"Type\" : \"Custom::LoadLambda\",\n        \"Properties\" : {\n          \"ServiceToken\" : \"CustomResource.Arn\",\n          \"Resource\" : \"MediaConvertTemplates\",\n          \"StackName\" : \"AWS::StackName\",\n          \"EndPoint\" : \"MediaConvertEndPoint.EndpointUrl\",\n          \"EnableMediaPackage\" : \"EnableMediaPackage\",\n          \"EnableNewTemplates\" : true\n        }\n      },\n      \"MediaPackageVod\" : {\n        \"Type\" : \"Custom::LoadLambda\",\n        \"Properties\" : {\n          \"ServiceToken\" : \"CustomResource.Arn\",\n          \"Resource\" : \"MediaPackageVod\",\n          \"StackName\" : \"AWS::StackName\",\n          \"GroupId\" : \"${AWS::StackName}-packaging-group\",\n          \"PackagingConfigurations\" : \"HLS,DASH,MSS,CMAF\",\n          \"DistributionId\" : \"CloudFront\",\n          \"EnableMediaPackage\" : \"EnableMediaPackage\"\n        }\n      },\n      \"CustomResource\" : {\n        \"Type\" : \"AWS::Lambda::Function\",\n        \"Properties\" : {\n          \"FunctionName\" : \"${AWS::StackName}-custom-resource\",\n          \"Description\" : \"Used to deploy resources not supported by CloudFormation\",\n          \"Handler\" : \"index.handler\",\n          \"Role\" : \"CustomResourceRole.Arn\",\n          \"Code\" : {\n            \"S3Bucket\" : [ \"-\", [ [ \"SourceCode\", \"General\", \"S3Bucket\" ], {\n              \"Ref\" : \"AWS::Region\"\n            } ] ],\n            \"S3Key\" : [ \"/\", [ [ \"SourceCode\", \"General\", \"KeyPrefix\" ], \"custom-resource.zip\" ] ]\n          },\n          \"Runtime\" : \"nodejs12.x\",\n          \"Timeout\" : 180,\n          \"Environment\" : {\n            \"Variables\" : {\n              \"AWS_NODEJS_CONNECTION_REUSE_ENABLED\" : \"1\"\n            }\n          }\n        }\n      },\n      \"StepFunctionsRole\" : {\n        \"Type\" : \"AWS::IAM::Role\",\n        \"Properties\" : {\n          \"AssumeRolePolicyDocument\" : {\n            \"Version\" : \"2012-10-17\",\n            \"Statement\" : [ {\n              \"Effect\" : \"Allow\",\n              \"Principal\" : {\n                \"Service\" : [ \"lambda.amazonaws.com\" ]\n              },\n              \"Action\" : [ \"sts:AssumeRole\" ]\n            } ]\n          },\n          \"Policies\" : [ {\n            \"PolicyName\" : \"${AWS::StackName}-step-functions-role\",\n            \"PolicyDocument\" : {\n              \"Statement\" : [ {\n                \"Effect\" : \"Allow\",\n                \"Action\" : [ \"states:StartExecution\" ],\n                \"Resource\" : [ \"arn:${AWS::Partition}:states:${AWS::Region}:${AWS::AccountId}:stateMachine:${AWS::StackName}-ingest\", \"arn:${AWS::Partition}:states:${AWS::Region}:${AWS::AccountId}:stateMachine:${AWS::StackName}-process\", \"arn:${AWS::Partition}:states:${AWS::Region}:${AWS::AccountId}:stateMachine:${AWS::StackName}-publish\" ]\n              }, {\n                \"Effect\" : \"Allow\",\n                \"Action\" : [ \"lambda:InvokeFunction\" ],\n                \"Resource\" : [ \"arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:${AWS::StackName}-error-handler\" ]\n              }, {\n                \"Effect\" : \"Allow\",\n                \"Action\" : [ \"logs:CreateLogGroup\", \"logs:CreateLogStream\", \"logs:PutLogEvents\" ],\n                \"Resource\" : [ \"arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*\" ]\n              } ]\n            }\n          } ]\n        },\n        \"Metadata\" : {\n          \"cfn_nag\" : {\n            \"rules_to_suppress\" : [ {\n              \"id\" : \"W11\",\n              \"reason\" : \"* is used so that the Lambda function can create log groups\"\n            } ]\n          }\n        }\n      },\n      \"StepFunctions\" : {\n        \"Type\" : \"AWS::Lambda::Function\",\n        \"Properties\" : {\n          \"FunctionName\" : \"${AWS::StackName}-step-functions\",\n          \"Description\" : \"Creates a unique identifer (GUID) and executes the Ingest StateMachine\",\n          \"Handler\" : \"index.handler\",\n          \"Role\" : \"StepFunctionsRole.Arn\",\n          \"Code\" : {\n            \"S3Bucket\" : [ \"-\", [ [ \"SourceCode\", \"General\", \"S3Bucket\" ], {\n              \"Ref\" : \"AWS::Region\"\n            } ] ],\n            \"S3Key\" : [ \"/\", [ [ \"SourceCode\", \"General\", \"KeyPrefix\" ], \"step-functions.zip\" ] ]\n          },\n          \"Runtime\" : \"nodejs12.x\",\n          \"Timeout\" : 120,\n          \"Environment\" : {\n            \"Variables\" : {\n              \"AWS_NODEJS_CONNECTION_REUSE_ENABLED\" : \"1\",\n              \"IngestWorkflow\" : \"arn:${AWS::Partition}:states:${AWS::Region}:${AWS::AccountId}:stateMachine:${AWS::StackName}-ingest\",\n              \"ProcessWorkflow\" : \"arn:${AWS::Partition}:states:${AWS::Region}:${AWS::AccountId}:stateMachine:${AWS::StackName}-process\",\n              \"PublishWorkflow\" : \"arn:${AWS::Partition}:states:${AWS::Region}:${AWS::AccountId}:stateMachine:${AWS::StackName}-publish\",\n              \"ErrorHandler\" : \"ErrorHandler.Arn\"\n            }\n          }\n        }\n      },\n      \"InputValidateRole\" : {\n        \"Type\" : \"AWS::IAM::Role\",\n        \"Properties\" : {\n          \"AssumeRolePolicyDocument\" : {\n            \"Version\" : \"2012-10-17\",\n            \"Statement\" : [ {\n              \"Effect\" : \"Allow\",\n              \"Principal\" : {\n                \"Service\" : [ \"lambda.amazonaws.com\" ]\n              },\n              \"Action\" : [ \"sts:AssumeRole\" ]\n            } ]\n          },\n          \"Policies\" : [ {\n            \"PolicyName\" : \"${AWS::StackName}-input-validate-role\",\n            \"PolicyDocument\" : {\n              \"Statement\" : [ {\n                \"Effect\" : \"Allow\",\n                \"Action\" : [ \"s3:GetObject\" ],\n                \"Resource\" : [ \"${Source.Arn}/*\" ]\n              }, {\n                \"Effect\" : \"Allow\",\n                \"Action\" : [ \"lambda:InvokeFunction\" ],\n                \"Resource\" : [ \"arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:${AWS::StackName}-error-handler\" ]\n              }, {\n                \"Effect\" : \"Allow\",\n                \"Action\" : [ \"logs:CreateLogGroup\", \"logs:CreateLogStream\", \"logs:PutLogEvents\" ],\n                \"Resource\" : [ \"arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*\" ]\n              } ]\n            }\n          } ]\n        },\n        \"Metadata\" : {\n          \"cfn_nag\" : {\n            \"rules_to_suppress\" : [ {\n              \"id\" : \"W11\",\n              \"reason\" : \"* is used so that the Lambda function can create log groups; S3 action is limited to one bucket\"\n            } ]\n          }\n        }\n      },\n      \"InputValidate\" : {\n        \"Type\" : \"AWS::Lambda::Function\",\n        \"Properties\" : {\n          \"FunctionName\" : \"${AWS::StackName}-input-validate\",\n          \"Description\" : \"Validates the input given to the workflow\",\n          \"Handler\" : \"index.handler\",\n          \"Role\" : \"InputValidateRole.Arn\",\n          \"Code\" : {\n            \"S3Bucket\" : [ \"-\", [ [ \"SourceCode\", \"General\", \"S3Bucket\" ], {\n              \"Ref\" : \"AWS::Region\"\n            } ] ],\n            \"S3Key\" : [ \"/\", [ [ \"SourceCode\", \"General\", \"KeyPrefix\" ], \"input-validate.zip\" ] ]\n          },\n          \"Runtime\" : \"nodejs12.x\",\n          \"Timeout\" : 120,\n          \"Environment\" : {\n            \"Variables\" : {\n              \"AWS_NODEJS_CONNECTION_REUSE_ENABLED\" : \"1\",\n              \"ErrorHandler\" : \"ErrorHandler.Arn\",\n              \"WorkflowName\" : \"AWS::StackName\",\n              \"Source\" : \"Source\",\n              \"Destination\" : \"Destination\",\n              \"FrameCapture\" : \"FrameCapture\",\n              \"ArchiveSource\" : \"Glacier\",\n              \"MediaConvert_Template_2160p\" : [ \"IsMediaPackageEnabled\", \"${AWS::StackName}_Ott_2160p_Avc_Aac_16x9_mvod_no_preset\", \"${AWS::StackName}_Ott_2160p_Avc_Aac_16x9_qvbr_no_preset\" ],\n              \"MediaConvert_Template_1080p\" : [ \"IsMediaPackageEnabled\", \"${AWS::StackName}_Ott_1080p_Avc_Aac_16x9_mvod_no_preset\", \"${AWS::StackName}_Ott_1080p_Avc_Aac_16x9_qvbr_no_preset\" ],\n              \"MediaConvert_Template_720p\" : [ \"IsMediaPackageEnabled\", \"${AWS::StackName}_Ott_720p_Avc_Aac_16x9_mvod_no_preset\", \"${AWS::StackName}_Ott_720p_Avc_Aac_16x9_qvbr_no_preset\" ],\n              \"CloudFront\" : \"CloudFront.DomainName\",\n              \"EnableMediaPackage\" : \"EnableMediaPackage\",\n              \"InputRotate\" : \"DEGREE_0\",\n              \"EnableSns\" : \"EnableSns\",\n              \"EnableSqs\" : \"EnableSqs\",\n              \"AcceleratedTranscoding\" : \"AcceleratedTranscoding\"\n            }\n          }\n        }\n      },\n      \"MediainfoRole\" : {\n        \"Type\" : \"AWS::IAM::Role\",\n        \"Properties\" : {\n          \"AssumeRolePolicyDocument\" : {\n            \"Version\" : \"2012-10-17\",\n            \"Statement\" : [ {\n              \"Effect\" : \"Allow\",\n              \"Principal\" : {\n                \"Service\" : [ \"lambda.amazonaws.com\" ]\n              },\n              \"Action\" : [ \"sts:AssumeRole\" ]\n            } ]\n          },\n          \"Policies\" : [ {\n            \"PolicyName\" : \"${AWS::StackName}-mediainfo-role\",\n            \"PolicyDocument\" : {\n              \"Statement\" : [ {\n                \"Effect\" : \"Allow\",\n                \"Action\" : [ \"s3:GetObject\" ],\n                \"Resource\" : [ \"${Source.Arn}/*\" ]\n              }, {\n                \"Effect\" : \"Allow\",\n                \"Action\" : [ \"lambda:InvokeFunction\" ],\n                \"Resource\" : [ \"arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:${AWS::StackName}-error-handler\" ]\n              }, {\n                \"Effect\" : \"Allow\",\n                \"Action\" : [ \"logs:CreateLogGroup\", \"logs:CreateLogStream\", \"logs:PutLogEvents\" ],\n                \"Resource\" : [ \"arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*\" ]\n              } ]\n            }\n          } ]\n        },\n        \"Metadata\" : {\n          \"cfn_nag\" : {\n            \"rules_to_suppress\" : [ {\n              \"id\" : \"W11\",\n              \"reason\" : \"* is limited to one S3 bucket\"\n            } ]\n          }\n        }\n      },\n      \"Mediainfo\" : {\n        \"Type\" : \"AWS::Lambda::Function\",\n        \"Properties\" : {\n          \"FunctionName\" : \"${AWS::StackName}-mediainfo\",\n          \"Description\" : \"Runs mediainfo on a pre-signed S3 URL\",\n          \"Handler\" : \"lambda_function.lambda_handler\",\n          \"Role\" : \"MediainfoRole.Arn\",\n          \"Code\" : {\n            \"S3Bucket\" : [ \"-\", [ [ \"SourceCode\", \"General\", \"S3Bucket\" ], {\n              \"Ref\" : \"AWS::Region\"\n            } ] ],\n            \"S3Key\" : [ \"/\", [ [ \"SourceCode\", \"General\", \"KeyPrefix\" ], \"mediainfo.zip\" ] ]\n          },\n          \"Runtime\" : \"python3.7\",\n          \"Timeout\" : 120,\n          \"Environment\" : {\n            \"Variables\" : {\n              \"ErrorHandler\" : \"ErrorHandler.Arn\"\n            }\n          }\n        }\n      },\n      \"DynamoUpdateRole\" : {\n        \"Type\" : \"AWS::IAM::Role\",\n        \"Properties\" : {\n          \"AssumeRolePolicyDocument\" : {\n            \"Version\" : \"2012-10-17\",\n            \"Statement\" : [ {\n              \"Effect\" : \"Allow\",\n              \"Principal\" : {\n                \"Service\" : [ \"lambda.amazonaws.com\" ]\n              },\n              \"Action\" : [ \"sts:AssumeRole\" ]\n            } ]\n          },\n          \"Policies\" : [ {\n            \"PolicyName\" : \"${AWS::StackName}-dynamo-role\",\n            \"PolicyDocument\" : {\n              \"Statement\" : [ {\n                \"Effect\" : \"Allow\",\n                \"Action\" : [ \"lambda:InvokeFunction\" ],\n                \"Resource\" : [ \"arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:${AWS::StackName}-error-handler\" ]\n              }, {\n                \"Effect\" : \"Allow\",\n                \"Action\" : [ \"dynamodb:UpdateItem\" ],\n                \"Resource\" : [ \"arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${DynamoDBTable}\" ]\n              }, {\n                \"Effect\" : \"Allow\",\n                \"Action\" : [ \"logs:CreateLogGroup\", \"logs:CreateLogStream\", \"logs:PutLogEvents\" ],\n                \"Resource\" : [ \"arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*\" ]\n              } ]\n            }\n          } ]\n        },\n        \"Metadata\" : {\n          \"cfn_nag\" : {\n            \"rules_to_suppress\" : [ {\n              \"id\" : \"W11\",\n              \"reason\" : \"* is used so that the Lambda function can create log groups\"\n            } ]\n          }\n        }\n      },\n      \"DynamodbUpdate\" : {\n        \"Type\" : \"AWS::Lambda::Function\",\n        \"Properties\" : {\n          \"FunctionName\" : \"${AWS::StackName}-dynamo\",\n          \"Description\" : \"Updates DynamoDB with event data\",\n          \"Handler\" : \"index.handler\",\n          \"Role\" : \"DynamoUpdateRole.Arn\",\n          \"Code\" : {\n            \"S3Bucket\" : [ \"-\", [ [ \"SourceCode\", \"General\", \"S3Bucket\" ], {\n              \"Ref\" : \"AWS::Region\"\n            } ] ],\n            \"S3Key\" : [ \"/\", [ [ \"SourceCode\", \"General\", \"KeyPrefix\" ], \"dynamo.zip\" ] ]\n          },\n          \"Runtime\" : \"nodejs12.x\",\n          \"Timeout\" : 120,\n          \"Environment\" : {\n            \"Variables\" : {\n              \"AWS_NODEJS_CONNECTION_REUSE_ENABLED\" : \"1\",\n              \"DynamoDBTable\" : \"DynamoDBTable\",\n              \"ErrorHandler\" : \"ErrorHandler.Arn\"\n            }\n          }\n        }\n      },\n      \"ProfilerRole\" : {\n        \"Type\" : \"AWS::IAM::Role\",\n        \"Properties\" : {\n          \"AssumeRolePolicyDocument\" : {\n            \"Version\" : \"2012-10-17\",\n            \"Statement\" : [ {\n              \"Effect\" : \"Allow\",\n              \"Principal\" : {\n                \"Service\" : [ \"lambda.amazonaws.com\" ]\n              },\n              \"Action\" : [ \"sts:AssumeRole\" ]\n            } ]\n          },\n          \"Policies\" : [ {\n            \"PolicyName\" : \"${AWS::StackName}-profiler-role\",\n            \"PolicyDocument\" : {\n              \"Statement\" : [ {\n                \"Effect\" : \"Allow\",\n                \"Action\" : [ \"lambda:InvokeFunction\" ],\n                \"Resource\" : [ \"arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:${AWS::StackName}-error-handler\" ]\n              }, {\n                \"Effect\" : \"Allow\",\n                \"Action\" : [ \"dynamodb:GetItem\" ],\n                \"Resource\" : [ \"arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${DynamoDBTable}\" ]\n              }, {\n                \"Effect\" : \"Allow\",\n                \"Action\" : [ \"logs:CreateLogGroup\", \"logs:CreateLogStream\", \"logs:PutLogEvents\" ],\n                \"Resource\" : [ \"arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*\" ]\n              } ]\n            }\n          } ]\n        },\n        \"Metadata\" : {\n          \"cfn_nag\" : {\n            \"rules_to_suppress\" : [ {\n              \"id\" : \"W11\",\n              \"reason\" : \"* is used so that the Lambda function can create log groups\"\n            } ]\n          }\n        }\n      },\n      \"Profiler\" : {\n        \"Type\" : \"AWS::Lambda::Function\",\n        \"Properties\" : {\n          \"FunctionName\" : \"${AWS::StackName}-profiler\",\n          \"Description\" : \"Sets an EncodeProfile based on mediainfo output\",\n          \"Handler\" : \"index.handler\",\n          \"Role\" : \"ProfilerRole.Arn\",\n          \"Code\" : {\n            \"S3Bucket\" : [ \"-\", [ [ \"SourceCode\", \"General\", \"S3Bucket\" ], {\n              \"Ref\" : \"AWS::Region\"\n            } ] ],\n            \"S3Key\" : [ \"/\", [ [ \"SourceCode\", \"General\", \"KeyPrefix\" ], \"profiler.zip\" ] ]\n          },\n          \"Runtime\" : \"nodejs12.x\",\n          \"Timeout\" : 120,\n          \"Environment\" : {\n            \"Variables\" : {\n              \"AWS_NODEJS_CONNECTION_REUSE_ENABLED\" : \"1\",\n              \"DynamoDBTable\" : \"DynamoDBTable\",\n              \"ErrorHandler\" : \"ErrorHandler.Arn\"\n            }\n          }\n        }\n      },\n      \"EncodeRole\" : {\n        \"Type\" : \"AWS::IAM::Role\",\n        \"Properties\" : {\n          \"AssumeRolePolicyDocument\" : {\n            \"Version\" : \"2012-10-17\",\n            \"Statement\" : [ {\n              \"Effect\" : \"Allow\",\n              \"Principal\" : {\n                \"Service\" : [ \"lambda.amazonaws.com\" ]\n              },\n              \"Action\" : [ \"sts:AssumeRole\" ]\n            } ]\n          },\n          \"Policies\" : [ {\n            \"PolicyName\" : \"${AWS::StackName}-encode-role\",\n            \"PolicyDocument\" : {\n              \"Statement\" : [ {\n                \"Effect\" : \"Allow\",\n                \"Action\" : [ \"lambda:InvokeFunction\" ],\n                \"Resource\" : [ \"arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:${AWS::StackName}-error-handler\" ]\n              }, {\n                \"Effect\" : \"Allow\",\n                \"Action\" : [ \"mediaconvert:CreateJob\", \"mediaconvert:GetJobTemplate\" ],\n                \"Resource\" : [ \"arn:${AWS::Partition}:mediaconvert:${AWS::Region}:${AWS::AccountId}:*\" ]\n              }, {\n                \"Effect\" : \"Allow\",\n                \"Action\" : [ \"iam:PassRole\" ],\n                \"Resource\" : [ \"MediaConvertRole.Arn\" ]\n              }, {\n                \"Effect\" : \"Allow\",\n                \"Action\" : [ \"logs:CreateLogGroup\", \"logs:CreateLogStream\", \"logs:PutLogEvents\" ],\n                \"Resource\" : [ \"arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*\" ]\n              } ]\n            }\n          } ]\n        },\n        \"Metadata\" : {\n          \"cfn_nag\" : {\n            \"rules_to_suppress\" : [ {\n              \"id\" : \"W11\",\n              \"reason\" : \"* is used so that the Lambda function can create log groups; MediaConvert job ids are randomly generated\"\n            } ]\n          }\n        }\n      },\n      \"Encode\" : {\n        \"Type\" : \"AWS::Lambda::Function\",\n        \"Properties\" : {\n          \"FunctionName\" : \"${AWS::StackName}-encode\",\n          \"Description\" : \"Creates a MediaConvert encode job\",\n          \"Handler\" : \"index.handler\",\n          \"Role\" : \"EncodeRole.Arn\",\n          \"Code\" : {\n            \"S3Bucket\" : [ \"-\", [ [ \"SourceCode\", \"General\", \"S3Bucket\" ], {\n              \"Ref\" : \"AWS::Region\"\n            } ] ],\n            \"S3Key\" : [ \"/\", [ [ \"SourceCode\", \"General\", \"KeyPrefix\" ], \"encode.zip\" ] ]\n          },\n          \"Runtime\" : \"nodejs12.x\",\n          \"Timeout\" : 120,\n          \"Environment\" : {\n            \"Variables\" : {\n              \"AWS_NODEJS_CONNECTION_REUSE_ENABLED\" : \"1\",\n              \"ErrorHandler\" : \"ErrorHandler.Arn\",\n              \"MediaConvertRole\" : \"MediaConvertRole.Arn\",\n              \"EndPoint\" : \"MediaConvertEndPoint.EndpointUrl\"\n            }\n          }\n        }\n      },\n      \"OutputValidateRole\" : {\n        \"Type\" : \"AWS::IAM::Role\",\n        \"Properties\" : {\n          \"AssumeRolePolicyDocument\" : {\n            \"Version\" : \"2012-10-17\",\n            \"Statement\" : [ {\n              \"Effect\" : \"Allow\",\n              \"Principal\" : {\n                \"Service\" : [ \"lambda.amazonaws.com\" ]\n              },\n              \"Action\" : [ \"sts:AssumeRole\" ]\n            } ]\n          },\n          \"Policies\" : [ {\n            \"PolicyName\" : \"${AWS::StackName}-output-validate-role\",\n            \"PolicyDocument\" : {\n              \"Statement\" : [ {\n                \"Effect\" : \"Allow\",\n                \"Action\" : [ \"lambda:InvokeFunction\" ],\n                \"Resource\" : [ \"arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:${AWS::StackName}-error-handler\" ]\n              }, {\n                \"Effect\" : \"Allow\",\n                \"Action\" : [ \"dynamodb:GetItem\" ],\n                \"Resource\" : [ \"arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${DynamoDBTable}\" ]\n              }, {\n                \"Effect\" : \"Allow\",\n                \"Action\" : [ \"s3:ListBucket\" ],\n                \"Resource\" : [ \"Destination.Arn\" ]\n              }, {\n                \"Effect\" : \"Allow\",\n                \"Action\" : [ \"logs:CreateLogGroup\", \"logs:CreateLogStream\", \"logs:PutLogEvents\" ],\n                \"Resource\" : [ \"arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*\" ]\n              } ]\n            }\n          } ]\n        },\n        \"Metadata\" : {\n          \"cfn_nag\" : {\n            \"rules_to_suppress\" : [ {\n              \"id\" : \"W11\",\n              \"reason\" : \"* is used so that the Lambda function can create log groups\"\n            } ]\n          }\n        }\n      },\n      \"OutputValidate\" : {\n        \"Type\" : \"AWS::Lambda::Function\",\n        \"Properties\" : {\n          \"FunctionName\" : \"${AWS::StackName}-output-validate\",\n          \"Description\" : \"Parses MediaConvert job output\",\n          \"Handler\" : \"index.handler\",\n          \"Role\" : \"OutputValidateRole.Arn\",\n          \"Code\" : {\n            \"S3Bucket\" : [ \"-\", [ [ \"SourceCode\", \"General\", \"S3Bucket\" ], {\n              \"Ref\" : \"AWS::Region\"\n            } ] ],\n            \"S3Key\" : [ \"/\", [ [ \"SourceCode\", \"General\", \"KeyPrefix\" ], \"output-validate.zip\" ] ]\n          },\n          \"Runtime\" : \"nodejs12.x\",\n          \"Timeout\" : 120,\n          \"Environment\" : {\n            \"Variables\" : {\n              \"AWS_NODEJS_CONNECTION_REUSE_ENABLED\" : \"1\",\n              \"DynamoDBTable\" : \"DynamoDBTable\",\n              \"ErrorHandler\" : \"ErrorHandler.Arn\",\n              \"EndPoint\" : \"MediaConvertEndPoint.EndpointUrl\"\n            }\n          }\n        }\n      },\n      \"ArchiveSourceRole\" : {\n        \"Type\" : \"AWS::IAM::Role\",\n        \"Properties\" : {\n          \"AssumeRolePolicyDocument\" : {\n            \"Version\" : \"2012-10-17\",\n            \"Statement\" : [ {\n              \"Effect\" : \"Allow\",\n              \"Principal\" : {\n                \"Service\" : [ \"lambda.amazonaws.com\" ]\n              },\n              \"Action\" : [ \"sts:AssumeRole\" ]\n            } ]\n          },\n          \"Policies\" : [ {\n            \"PolicyName\" : \"${AWS::StackName}-archive-source-role\",\n            \"PolicyDocument\" : {\n              \"Statement\" : [ {\n                \"Effect\" : \"Allow\",\n                \"Action\" : [ \"s3:PutObjectTagging\" ],\n                \"Resource\" : [ \"${Source.Arn}/*\" ]\n              }, {\n                \"Effect\" : \"Allow\",\n                \"Action\" : [ \"lambda:InvokeFunction\" ],\n                \"Resource\" : [ \"arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:${AWS::StackName}-error-handler\" ]\n              }, {\n                \"Effect\" : \"Allow\",\n                \"Action\" : [ \"logs:CreateLogGroup\", \"logs:CreateLogStream\", \"logs:PutLogEvents\" ],\n                \"Resource\" : [ \"arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*\" ]\n              } ]\n            }\n          } ]\n        },\n        \"Metadata\" : {\n          \"cfn_nag\" : {\n            \"rules_to_suppress\" : [ {\n              \"id\" : \"W11\",\n              \"reason\" : \"* is used so that the Lambda function can create log groups; S3 action is limited to one bucket\"\n            } ]\n          }\n        }\n      },\n      \"ArchiveSource\" : {\n        \"Type\" : \"AWS::Lambda::Function\",\n        \"Properties\" : {\n          \"FunctionName\" : \"${AWS::StackName}-archive-source\",\n          \"Description\" : \"Updates tags on source files to enable Glacier\",\n          \"Handler\" : \"index.handler\",\n          \"Role\" : \"ArchiveSourceRole.Arn\",\n          \"Code\" : {\n            \"S3Bucket\" : [ \"-\", [ [ \"SourceCode\", \"General\", \"S3Bucket\" ], {\n              \"Ref\" : \"AWS::Region\"\n            } ] ],\n            \"S3Key\" : [ \"/\", [ [ \"SourceCode\", \"General\", \"KeyPrefix\" ], \"archive-source.zip\" ] ]\n          },\n          \"Runtime\" : \"nodejs12.x\",\n          \"Timeout\" : 120,\n          \"Environment\" : {\n            \"Variables\" : {\n              \"AWS_NODEJS_CONNECTION_REUSE_ENABLED\" : \"1\",\n              \"ErrorHandler\" : \"ErrorHandler.Arn\"\n            }\n          }\n        }\n      },\n      \"SqsSendMessageRole\" : {\n        \"Type\" : \"AWS::IAM::Role\",\n        \"Properties\" : {\n          \"AssumeRolePolicyDocument\" : {\n            \"Version\" : \"2012-10-17\",\n            \"Statement\" : [ {\n              \"Effect\" : \"Allow\",\n              \"Principal\" : {\n                \"Service\" : [ \"lambda.amazonaws.com\" ]\n              },\n              \"Action\" : [ \"sts:AssumeRole\" ]\n            } ]\n          },\n          \"Policies\" : [ {\n            \"PolicyName\" : \"${AWS::StackName}-sqs-publish-role\",\n            \"PolicyDocument\" : {\n              \"Statement\" : [ {\n                \"Effect\" : \"Allow\",\n                \"Action\" : [ \"lambda:InvokeFunction\" ],\n                \"Resource\" : [ \"arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${AWS::StackName}-error-handler\" ]\n              }, {\n                \"Effect\" : \"Allow\",\n                \"Action\" : [ \"sqs:SendMessage\" ],\n                \"Resource\" : [ \"SqsQueue.Arn\" ],\n                \"Condition\" : {\n                  \"Bool\" : {\n                    \"aws:SecureTransport\" : \"true\"\n                  }\n                }\n              }, {\n                \"Effect\" : \"Allow\",\n                \"Action\" : [ \"logs:CreateLogGroup\", \"logs:CreateLogStream\", \"logs:PutLogEvents\" ],\n                \"Resource\" : [ \"arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*\" ]\n              } ]\n            }\n          } ]\n        },\n        \"Metadata\" : {\n          \"cfn_nag\" : {\n            \"rules_to_suppress\" : [ {\n              \"id\" : \"W11\",\n              \"reason\" : \"* is used so that the Lambda function can create log groups\"\n            } ]\n          }\n        }\n      },\n      \"SqsSendMessage\" : {\n        \"Type\" : \"AWS::Lambda::Function\",\n        \"Properties\" : {\n          \"FunctionName\" : \"${AWS::StackName}-sqs-publish\",\n          \"Description\" : \"Publish the workflow results to an SQS queue\",\n          \"Handler\" : \"index.handler\",\n          \"Role\" : \"SqsSendMessageRole.Arn\",\n          \"Code\" : {\n            \"S3Bucket\" : [ \"-\", [ [ \"SourceCode\", \"General\", \"S3Bucket\" ], {\n              \"Ref\" : \"AWS::Region\"\n            } ] ],\n            \"S3Key\" : [ \"/\", [ [ \"SourceCode\", \"General\", \"KeyPrefix\" ], \"sqs-publish.zip\" ] ]\n          },\n          \"Runtime\" : \"nodejs12.x\",\n          \"Timeout\" : 120,\n          \"Environment\" : {\n            \"Variables\" : {\n              \"AWS_NODEJS_CONNECTION_REUSE_ENABLED\" : \"1\",\n              \"ErrorHandler\" : \"ErrorHandler.Arn\",\n              \"SqsQueue\" : \"SqsQueue\"\n            }\n          }\n        }\n      },\n      \"SnsNotificationRole\" : {\n        \"Type\" : \"AWS::IAM::Role\",\n        \"Properties\" : {\n          \"AssumeRolePolicyDocument\" : {\n            \"Version\" : \"2012-10-17\",\n            \"Statement\" : [ {\n              \"Effect\" : \"Allow\",\n              \"Principal\" : {\n                \"Service\" : [ \"lambda.amazonaws.com\" ]\n              },\n              \"Action\" : [ \"sts:AssumeRole\" ]\n            } ]\n          },\n          \"Policies\" : [ {\n            \"PolicyName\" : \"${AWS::StackName}-sns-notification-role\",\n            \"PolicyDocument\" : {\n              \"Statement\" : [ {\n                \"Effect\" : \"Allow\",\n                \"Action\" : [ \"lambda:InvokeFunction\" ],\n                \"Resource\" : [ \"arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:${AWS::StackName}-error-handler\" ]\n              }, {\n                \"Effect\" : \"Allow\",\n                \"Action\" : [ \"sns:Publish\" ],\n                \"Resource\" : [ \"SnsTopic\" ],\n                \"Condition\" : {\n                  \"Bool\" : {\n                    \"aws:SecureTransport\" : \"true\"\n                  }\n                }\n              }, {\n                \"Effect\" : \"Allow\",\n                \"Action\" : [ \"logs:CreateLogGroup\", \"logs:CreateLogStream\", \"logs:PutLogEvents\" ],\n                \"Resource\" : [ \"arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*\" ]\n              } ]\n            }\n          } ]\n        },\n        \"Metadata\" : {\n          \"cfn_nag\" : {\n            \"rules_to_suppress\" : [ {\n              \"id\" : \"W11\",\n              \"reason\" : \"* is used so that the Lambda function can create log groups\"\n            } ]\n          }\n        }\n      },\n      \"SnsNotification\" : {\n        \"Type\" : \"AWS::Lambda::Function\",\n        \"Properties\" : {\n          \"FunctionName\" : \"${AWS::StackName}-sns-notification\",\n          \"Description\" : \"Sends a notification when the encode job is completed\",\n          \"Handler\" : \"index.handler\",\n          \"Role\" : \"SnsNotificationRole.Arn\",\n          \"Code\" : {\n            \"S3Bucket\" : [ \"-\", [ [ \"SourceCode\", \"General\", \"S3Bucket\" ], {\n              \"Ref\" : \"AWS::Region\"\n            } ] ],\n            \"S3Key\" : [ \"/\", [ [ \"SourceCode\", \"General\", \"KeyPrefix\" ], \"sns-notification.zip\" ] ]\n          },\n          \"Runtime\" : \"nodejs12.x\",\n          \"Timeout\" : 120,\n          \"Environment\" : {\n            \"Variables\" : {\n              \"AWS_NODEJS_CONNECTION_REUSE_ENABLED\" : \"1\",\n              \"ErrorHandler\" : \"ErrorHandler.Arn\",\n              \"SnsTopic\" : \"SnsTopic\"\n            }\n          }\n        }\n      },\n      \"MediaPackageAssetsRole\" : {\n        \"Type\" : \"AWS::IAM::Role\",\n        \"Properties\" : {\n          \"AssumeRolePolicyDocument\" : {\n            \"Version\" : \"2012-10-17\",\n            \"Statement\" : [ {\n              \"Effect\" : \"Allow\",\n              \"Principal\" : {\n                \"Service\" : [ \"lambda.amazonaws.com\" ]\n              },\n              \"Action\" : [ \"sts:AssumeRole\" ]\n            } ]\n          },\n          \"Policies\" : [ {\n            \"PolicyName\" : \"${AWS::StackName}-media-package-assets-role\",\n            \"PolicyDocument\" : {\n              \"Statement\" : [ {\n                \"Effect\" : \"Allow\",\n                \"Action\" : [ \"lambda:InvokeFunction\" ],\n                \"Resource\" : [ \"arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:${AWS::StackName}-error-handler\" ]\n              }, {\n                \"Effect\" : \"Allow\",\n                \"Action\" : [ \"iam:PassRole\" ],\n                \"Resource\" : [ \"MediaPackageVodRole.Arn\" ]\n              }, {\n                \"Effect\" : \"Allow\",\n                \"Action\" : [ \"logs:CreateLogGroup\", \"logs:CreateLogStream\", \"logs:PutLogEvents\" ],\n                \"Resource\" : [ \"arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*\" ]\n              }, {\n                \"Effect\" : \"Allow\",\n                \"Action\" : [ \"mediapackage-vod:CreateAsset\" ],\n                \"Resource\" : \"*\"\n              } ]\n            }\n          } ]\n        },\n        \"Metadata\" : {\n          \"cfn_nag\" : {\n            \"rules_to_suppress\" : [ {\n              \"id\" : \"W11\",\n              \"reason\" : \"* is used so that the Lambda function can create log groups; MediaPackage action that does not support resource level permissions\"\n            } ]\n          }\n        }\n      },\n      \"MediaPackageAssets\" : {\n        \"Type\" : \"AWS::Lambda::Function\",\n        \"Properties\" : {\n          \"FunctionName\" : \"${AWS::StackName}-media-package-assets\",\n          \"Description\" : \"Ingests an asset into MediaPackage-VOD\",\n          \"Handler\" : \"index.handler\",\n          \"Role\" : \"MediaPackageAssetsRole.Arn\",\n          \"Code\" : {\n            \"S3Bucket\" : [ \"-\", [ [ \"SourceCode\", \"General\", \"S3Bucket\" ], {\n              \"Ref\" : \"AWS::Region\"\n            } ] ],\n            \"S3Key\" : [ \"/\", [ [ \"SourceCode\", \"General\", \"KeyPrefix\" ], \"media-package-assets.zip\" ] ]\n          },\n          \"Runtime\" : \"nodejs12.x\",\n          \"Timeout\" : 300,\n          \"Environment\" : {\n            \"Variables\" : {\n              \"AWS_NODEJS_CONNECTION_REUSE_ENABLED\" : \"1\",\n              \"ErrorHandler\" : \"ErrorHandler.Arn\",\n              \"GroupId\" : \"MediaPackageVod.GroupId\",\n              \"GroupDomainName\" : \"MediaPackageVod.GroupDomainName\",\n              \"MediaPackageVodRole\" : \"MediaPackageVodRole.Arn\"\n            }\n          }\n        }\n      },\n      \"ErrorHandlerRole\" : {\n        \"Type\" : \"AWS::IAM::Role\",\n        \"Properties\" : {\n          \"AssumeRolePolicyDocument\" : {\n            \"Version\" : \"2012-10-17\",\n            \"Statement\" : [ {\n              \"Effect\" : \"Allow\",\n              \"Principal\" : {\n                \"Service\" : [ \"lambda.amazonaws.com\" ]\n              },\n              \"Action\" : [ \"sts:AssumeRole\" ]\n            } ]\n          },\n          \"Policies\" : [ {\n            \"PolicyName\" : \"${AWS::StackName}-error-handler-role\",\n            \"PolicyDocument\" : {\n              \"Statement\" : [ {\n                \"Effect\" : \"Allow\",\n                \"Action\" : [ \"sns:Publish\" ],\n                \"Resource\" : [ \"SnsTopic\" ],\n                \"Condition\" : {\n                  \"Bool\" : {\n                    \"aws:SecureTransport\" : \"true\"\n                  }\n                }\n              }, {\n                \"Effect\" : \"Allow\",\n                \"Action\" : [ \"dynamodb:UpdateItem\" ],\n                \"Resource\" : [ \"arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${DynamoDBTable}\" ]\n              }, {\n                \"Effect\" : \"Allow\",\n                \"Action\" : [ \"logs:CreateLogGroup\", \"logs:CreateLogStream\", \"logs:PutLogEvents\" ],\n                \"Resource\" : [ \"arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*\" ]\n              } ]\n            }\n          } ]\n        },\n        \"Metadata\" : {\n          \"cfn_nag\" : {\n            \"rules_to_suppress\" : [ {\n              \"id\" : \"W11\",\n              \"reason\" : \"* is used so that the Lambda function can create log groups\"\n            } ]\n          }\n        }\n      },\n      \"ErrorHandler\" : {\n        \"Type\" : \"AWS::Lambda::Function\",\n        \"Properties\" : {\n          \"FunctionName\" : \"${AWS::StackName}-error-handler\",\n          \"Description\" : \"Captures and processes workflow errors\",\n          \"Handler\" : \"index.handler\",\n          \"Role\" : \"ErrorHandlerRole.Arn\",\n          \"Code\" : {\n            \"S3Bucket\" : [ \"-\", [ [ \"SourceCode\", \"General\", \"S3Bucket\" ], {\n              \"Ref\" : \"AWS::Region\"\n            } ] ],\n            \"S3Key\" : [ \"/\", [ [ \"SourceCode\", \"General\", \"KeyPrefix\" ], \"error-handler.zip\" ] ]\n          },\n          \"Runtime\" : \"nodejs12.x\",\n          \"Timeout\" : 120,\n          \"Environment\" : {\n            \"Variables\" : {\n              \"AWS_NODEJS_CONNECTION_REUSE_ENABLED\" : \"1\",\n              \"DynamoDBTable\" : \"DynamoDBTable\",\n              \"SnsTopic\" : \"SnsTopic\"\n            }\n          }\n        }\n      },\n      \"IngestWorkflow\" : {\n        \"Type\" : \"AWS::StepFunctions::StateMachine\",\n        \"Properties\" : {\n          \"StateMachineName\" : \"${AWS::StackName}-ingest\",\n          \"DefinitionString\" : \"{\\n  \\\"StartAt\\\": \\\"Input Validate\\\",\\n  \\\"States\\\": {\\n    \\\"Input Validate\\\": {\\n      \\\"Type\\\": \\\"Task\\\",\\n      \\\"Resource\\\": \\\"${InputValidate.Arn}\\\",\\n      \\\"Next\\\": \\\"Mediainfo\\\"\\n    },\\n    \\\"Mediainfo\\\": {\\n      \\\"Type\\\": \\\"Task\\\",\\n      \\\"Resource\\\": \\\"${Mediainfo.Arn}\\\",\\n      \\\"Next\\\": \\\"DynamoDB Update\\\"\\n    },\\n    \\\"DynamoDB Update\\\": {\\n      \\\"Type\\\": \\\"Task\\\",\\n      \\\"Resource\\\": \\\"${DynamodbUpdate.Arn}\\\",\\n      \\\"Next\\\": \\\"SNS Choice\\\"\\n    },\\n    \\\"SNS Choice\\\": {\\n      \\\"Type\\\": \\\"Choice\\\",\\n      \\\"Choices\\\": [\\n        {\\n          \\\"Variable\\\": \\\"$.enableSns\\\",\\n          \\\"BooleanEquals\\\": true,\\n          \\\"Next\\\": \\\"SNS Notification\\\"\\n        }\\n      ],\\n      \\\"Default\\\": \\\"Process Execute\\\"\\n    },\\n    \\\"SNS Notification\\\": {\\n      \\\"Type\\\": \\\"Task\\\",\\n      \\\"Resource\\\": \\\"${SnsNotification.Arn}\\\",\\n      \\\"Next\\\": \\\"Process Execute\\\"\\n    },\\n    \\\"Process Execute\\\": {\\n      \\\"Type\\\": \\\"Task\\\",\\n      \\\"Resource\\\": \\\"${StepFunctions.Arn}\\\",\\n      \\\"End\\\": true\\n    }\\n  }\\n}\\n\",\n          \"RoleArn\" : \"StepFunctionsServiceRole.Arn\"\n        }\n      },\n      \"ProcessWorkflow\" : {\n        \"Type\" : \"AWS::StepFunctions::StateMachine\",\n        \"Properties\" : {\n          \"StateMachineName\" : \"${AWS::StackName}-process\",\n          \"DefinitionString\" : \"{\\n  \\\"Comment\\\": \\\"Process StateMachine to create MediaConvert Encoding Jobs\\\",\\n  \\\"StartAt\\\": \\\"Profiler\\\",\\n  \\\"States\\\": {\\n    \\\"Profiler\\\": {\\n      \\\"Type\\\": \\\"Task\\\",\\n      \\\"Resource\\\": \\\"${Profiler.Arn}\\\",\\n      \\\"Next\\\": \\\"Encoding Profile Check\\\"\\n    },\\n    \\\"Encoding Profile Check\\\": {\\n      \\\"Type\\\": \\\"Choice\\\",\\n      \\\"Choices\\\": [\\n        {\\n          \\\"Variable\\\": \\\"$.isCustomTemplate\\\",\\n          \\\"BooleanEquals\\\": true,\\n          \\\"Next\\\": \\\"Custom jobTemplate\\\"\\n        },\\n                {\\n          \\\"Variable\\\": \\\"$.encodingProfile \\\",\\n          \\\"NumericEquals\\\": 2160,\\n          \\\"Next\\\": \\\"jobTemplate 2160p\\\"\\n        },\\n        {\\n          \\\"Variable\\\": \\\"$.encodingProfile \\\",\\n          \\\"NumericEquals\\\": 1080,\\n          \\\"Next\\\": \\\"jobTemplate 1080p\\\"\\n        },\\n        {\\n          \\\"Variable\\\": \\\"$.encodingProfile \\\",\\n          \\\"NumericEquals\\\": 720,\\n          \\\"Next\\\": \\\"jobTemplate 720p\\\"\\n        }\\n      ]\\n    },\\n    \\\"jobTemplate 2160p\\\": {\\n      \\\"Type\\\": \\\"Pass\\\",\\n      \\\"Next\\\": \\\"Accelerated Transcoding Check\\\"\\n    },\\n    \\\"jobTemplate 1080p\\\": {\\n      \\\"Type\\\": \\\"Pass\\\",\\n      \\\"Next\\\": \\\"Accelerated Transcoding Check\\\"\\n    },\\n    \\\"jobTemplate 720p\\\": {\\n      \\\"Type\\\": \\\"Pass\\\",\\n      \\\"Next\\\": \\\"Accelerated Transcoding Check\\\"\\n    },\\n    \\\"Custom jobTemplate\\\": {\\n      \\\"Type\\\": \\\"Pass\\\",\\n      \\\"Next\\\": \\\"Accelerated Transcoding Check\\\"\\n    },\\n    \\\"Accelerated Transcoding Check\\\": {\\n      \\\"Type\\\": \\\"Choice\\\",\\n      \\\"Choices\\\": [\\n        {\\n          \\\"Variable\\\": \\\"$.acceleratedTranscoding\\\",\\n          \\\"StringEquals\\\": \\\"ENABLED\\\",\\n          \\\"Next\\\": \\\"Enabled\\\"\\n        },\\n        {\\n          \\\"Variable\\\": \\\"$.acceleratedTranscoding\\\",\\n          \\\"StringEquals\\\": \\\"PREFERRED\\\",\\n          \\\"Next\\\": \\\"Preferred\\\"\\n        },\\n        {\\n          \\\"Variable\\\": \\\"$.acceleratedTranscoding\\\",\\n          \\\"StringEquals\\\": \\\"DISABLED\\\",\\n          \\\"Next\\\": \\\"Disabled\\\"\\n        }\\n      ]\\n    },\\n    \\\"Enabled\\\": {\\n      \\\"Type\\\": \\\"Pass\\\",\\n      \\\"Next\\\": \\\"Frame Capture Check\\\"\\n    },\\n    \\\"Preferred\\\": {\\n      \\\"Type\\\": \\\"Pass\\\",\\n      \\\"Next\\\": \\\"Frame Capture Check\\\"\\n    },\\n    \\\"Disabled\\\": {\\n      \\\"Type\\\": \\\"Pass\\\",\\n      \\\"Next\\\": \\\"Frame Capture Check\\\"\\n    },\\n    \\\"Frame Capture Check\\\": {\\n      \\\"Type\\\": \\\"Choice\\\",\\n      \\\"Choices\\\": [\\n        {\\n          \\\"Variable\\\": \\\"$.frameCapture\\\",\\n          \\\"BooleanEquals\\\": true,\\n          \\\"Next\\\": \\\"Frame Capture\\\"\\n        },\\n        {\\n          \\\"Variable\\\": \\\"$.frameCapture\\\",\\n          \\\"BooleanEquals\\\": false,\\n          \\\"Next\\\": \\\"No Frame Capture\\\"\\n        }\\n      ]\\n    },\\n    \\\"Frame Capture\\\": {\\n      \\\"Type\\\": \\\"Pass\\\",\\n      \\\"Next\\\": \\\"Encode Job Submit\\\"\\n    },\\n    \\\"No Frame Capture\\\": {\\n      \\\"Type\\\": \\\"Pass\\\",\\n      \\\"Next\\\": \\\"Encode Job Submit\\\"\\n    },\\n    \\\"Encode Job Submit\\\": {\\n      \\\"Type\\\": \\\"Task\\\",\\n      \\\"Resource\\\": \\\"${Encode.Arn}\\\",\\n      \\\"Next\\\": \\\"DynamoDB Update\\\"\\n    },\\n    \\\"DynamoDB Update\\\": {\\n      \\\"Type\\\": \\\"Task\\\",\\n      \\\"Resource\\\": \\\"${DynamodbUpdate.Arn}\\\",\\n      \\\"End\\\": true\\n    }\\n  }\\n}\\n\",\n          \"RoleArn\" : \"StepFunctionsServiceRole.Arn\"\n        }\n      },\n      \"PublishWorkflow\" : {\n        \"Type\" : \"AWS::StepFunctions::StateMachine\",\n        \"Properties\" : {\n          \"StateMachineName\" : \"${AWS::StackName}-publish\",\n          \"DefinitionString\" : \"{\\n  \\\"StartAt\\\": \\\"Validate Encoding Outputs\\\",\\n  \\\"States\\\": {\\n    \\\"Validate Encoding Outputs\\\": {\\n      \\\"Type\\\": \\\"Task\\\",\\n      \\\"Resource\\\": \\\"${OutputValidate.Arn}\\\",\\n      \\\"Next\\\": \\\"Archive Source Choice\\\"\\n    },\\n    \\\"Archive Source Choice\\\": {\\n      \\\"Type\\\": \\\"Choice\\\",\\n      \\\"Choices\\\": [\\n        {\\n          \\\"Variable\\\": \\\"$.archiveSource\\\",\\n          \\\"StringEquals\\\": \\\"GLACIER\\\",\\n          \\\"Next\\\": \\\"Archive\\\"\\n        },\\n        {\\n          \\\"Variable\\\": \\\"$.archiveSource\\\",\\n          \\\"StringEquals\\\": \\\"DEEP_ARCHIVE\\\",\\n          \\\"Next\\\": \\\"Deep Archive\\\"\\n        }\\n      ],\\n      \\\"Default\\\": \\\"MediaPackage Choice\\\"\\n    },\\n    \\\"Archive\\\": {\\n      \\\"Type\\\": \\\"Task\\\",\\n      \\\"Resource\\\": \\\"${ArchiveSource.Arn}\\\",\\n      \\\"Next\\\": \\\"MediaPackage Choice\\\"\\n    },\\n    \\\"Deep Archive\\\": {\\n      \\\"Type\\\": \\\"Task\\\",\\n      \\\"Resource\\\": \\\"${ArchiveSource.Arn}\\\",\\n      \\\"Next\\\": \\\"MediaPackage Choice\\\"\\n    },\\n    \\\"MediaPackage Choice\\\": {\\n      \\\"Type\\\": \\\"Choice\\\",\\n      \\\"Choices\\\": [\\n        {\\n          \\\"Variable\\\": \\\"$.enableMediaPackage\\\",\\n          \\\"BooleanEquals\\\": true,\\n          \\\"Next\\\": \\\"MediaPackage Assets\\\"\\n        }\\n      ],\\n      \\\"Default\\\": \\\"DynamoDB Update\\\"\\n    },\\n    \\\"MediaPackage Assets\\\": {\\n      \\\"Type\\\": \\\"Task\\\",\\n      \\\"Resource\\\": \\\"${MediaPackageAssets.Arn}\\\",\\n      \\\"Next\\\": \\\"DynamoDB Update\\\"\\n    },\\n    \\\"DynamoDB Update\\\": {\\n      \\\"Type\\\": \\\"Task\\\",\\n      \\\"Resource\\\": \\\"${DynamodbUpdate.Arn}\\\",\\n      \\\"Next\\\": \\\"SQS Choice\\\"\\n    },\\n    \\\"SQS Choice\\\": {\\n      \\\"Type\\\": \\\"Choice\\\",\\n      \\\"Choices\\\": [\\n        {\\n          \\\"Variable\\\": \\\"$.enableSqs\\\",\\n          \\\"BooleanEquals\\\": true,\\n          \\\"Next\\\": \\\"SQS Send Message\\\"\\n        }\\n      ],\\n      \\\"Default\\\": \\\"SNS Choice\\\"\\n    },\\n    \\\"SQS Send Message\\\": {\\n      \\\"Type\\\": \\\"Task\\\",\\n      \\\"Resource\\\": \\\"${SqsSendMessage.Arn}\\\",\\n      \\\"Next\\\": \\\"SNS Choice\\\"\\n    },\\n    \\\"SNS Choice\\\": {\\n      \\\"Type\\\": \\\"Choice\\\",\\n      \\\"Choices\\\": [\\n        {\\n          \\\"Variable\\\": \\\"$.enableSns\\\",\\n          \\\"BooleanEquals\\\": true,\\n          \\\"Next\\\": \\\"SNS Notification\\\"\\n        }\\n      ],\\n      \\\"Default\\\": \\\"Complete\\\"\\n    },\\n    \\\"SNS Notification\\\": {\\n      \\\"Type\\\": \\\"Task\\\",\\n      \\\"Resource\\\": \\\"${SnsNotification.Arn}\\\",\\n      \\\"Next\\\": \\\"Complete\\\"\\n    },\\n    \\\"Complete\\\": {\\n      \\\"Type\\\": \\\"Pass\\\",\\n      \\\"End\\\": true\\n    }\\n  }\\n}\\n\",\n          \"RoleArn\" : \"StepFunctionsServiceRole.Arn\"\n        }\n      },\n      \"Uuid\" : {\n        \"Condition\" : \"Metrics\",\n        \"Type\" : \"Custom::UUID\",\n        \"Properties\" : {\n          \"ServiceToken\" : \"CustomResource.Arn\",\n          \"Resource\" : \"UUID\"\n        }\n      },\n      \"AnonymousMetric\" : {\n        \"Condition\" : \"Metrics\",\n        \"Type\" : \"Custom::LoadLambda\",\n        \"Properties\" : {\n          \"ServiceToken\" : \"CustomResource.Arn\",\n          \"SolutionId\" : \"SO0021\",\n          \"UUID\" : \"Uuid.UUID\",\n          \"Version\" : \"v5.2.0\",\n          \"Transcoder\" : \"MediaConvert\",\n          \"WorkflowTrigger\" : \"WorkflowTrigger\",\n          \"Glacier\" : \"Glacier\",\n          \"FrameCapture\" : \"FrameCapture\",\n          \"Resource\" : \"AnonymousMetric\",\n          \"EnableMediaPackage\" : \"EnableMediaPackage\"\n        }\n      }\n    },\n    \"Outputs\" : {\n      \"DynamoDBTable\" : {\n        \"Description\" : \"DynamoDB Table\",\n        \"Value\" : \"DynamoDBTable\",\n        \"Export\" : {\n          \"Name\" : [ \":\", [ \"AWS::StackName\", \"DynamoDBTable\" ] ]\n        }\n      },\n      \"Source\" : {\n        \"Description\" : \"Source Bucket\",\n        \"Value\" : \"Source\",\n        \"Export\" : {\n          \"Name\" : [ \":\", [ \"AWS::StackName\", \"Source\" ] ]\n        }\n      },\n      \"Destination\" : {\n        \"Description\" : \"Destination Bucket\",\n        \"Value\" : \"Destination\",\n        \"Export\" : {\n          \"Name\" : [ \":\", [ \"AWS::StackName\", \"Destination\" ] ]\n        }\n      },\n      \"CloudFront\" : {\n        \"Description\" : \"CloudFront Domain Name\",\n        \"Value\" : \"CloudFront.DomainName\",\n        \"Export\" : {\n          \"Name\" : [ \":\", [ \"AWS::StackName\", \"CloudFront\" ] ]\n        }\n      },\n      \"UUID\" : {\n        \"Condition\" : \"Metrics\",\n        \"Description\" : \"AnonymousMetric UUID\",\n        \"Value\" : \"Uuid.UUID\",\n        \"Export\" : {\n          \"Name\" : [ \":\", [ \"AWS::StackName\", \"UUID\" ] ]\n        }\n      },\n      \"SnsTopic\" : {\n        \"Description\" : \"SNS Notification Topic\",\n        \"Value\" : \"SnsTopic\",\n        \"Export\" : {\n          \"Name\" : [ \":\", [ \"AWS::StackName\", \"SnsTopic\" ] ]\n        }\n      },\n      \"SqsURL\" : {\n        \"Description\" : \"AmazonSQS Queue URL\",\n        \"Value\" : \"SqsQueue\",\n        \"Export\" : {\n          \"Name\" : [ \":\", [ \"AWS::StackName\", \"SqsQueue\" ] ]\n        }\n      },\n      \"SqsARN\" : {\n        \"Description\" : \"AmazonSQS Queue ARN\",\n        \"Value\" : \"${SqsQueue.Arn}\"\n      }\n    }\n  }\n}",
  "CreatedDate": "2021-07-01T21:21:33.483Z",
  "DisplayName": null,
  "DocumentFormat": {
    "Value": "JSON"
  },
  "DocumentType": {
    "Value": "CloudFormation"
  },
  "DocumentVersion": "1",
  "Name": "AWSSolutions-VideoOnDemandOnAWS",
  "Requires": [],
  "ReviewStatus": null,
  "Status": {
    "Value": "Active"
  },
  "StatusInformation": null,
  "VersionName": null,
  "ResponseMetadata": {
    "RequestId": "453ed1b3-c396-4692-8360-0f50bc70aabc",
    "Metadata": {},
    "ChecksumAlgorithm": 0,
    "ChecksumValidationStatus": 0
  },
  "ContentLength": 74054,
  "HttpStatusCode": 200,
  "LoggedAt": "2022-04-11T07:14:09.5377897+00:00"
}
