{
  "AttachmentsContent": [],
  "Content": "{\n  \"description\" : \"## Id\\nAWSResilienceHub-UpdateRestApiGwVersionSOP_2020-10-26\\n\\n## Intent\\nUpdate REST API Gateway Stage deployment version\\n\\n## Type\\nSOP\\n\\n## Risk\\nMedium\\n\\n## Requirements\\n  * REST API Gateway\\n\\n## Permissions required for AutomationAssumeRole\\n  * apigateway:GET\\n  * apigateway:PATCH\\n\\n## Supports Rollback\\nNo\\n\\n## Cancellation behavior\\nFail\\n\\n## Inputs\\n### (Required) AutomationAssumeRole\\n  * type: String\\n  * description: ARN of the IAM role with permissions listed above\\n\\n### (Required) RestApiGwId\\n  * type: String\\n  * description: The ID of the REST API Gateway\\n\\n### (Required) RestStageName\\n  * type: String\\n  * description: The stage name of the REST API Gateway\\n\\n### (Optional) RestDeploymentId\\n  * type: String\\n  * description: The ID of deployment that should be applied on the given stage\\n  * default: ''\\n\\n## Details\\nThe document validates that auto deployment is turned off for the specified stage and applies the previous\\ndeployment (by creation date) or the specified deployment on the REST API Gateway stage.\\n\\n## Steps executed in normal flow\\n  * RecordStartTime\\n  * FindDeploymentIdForUpdate\\n  * UpdateDeployment\\n  * OutputRecoveryTime\\n\\n## Outputs\\n### FindDeploymentIdForUpdate.RestDeploymentIdOriginalValue\\n  * type: String\\n  * description: Deployment Id before update\\n\\n### FindDeploymentIdForUpdate.RestDeploymentIdToApply\\n  * type: String\\n  * description: Previous deployment Id selected to apply if Id is not specified\\n\\n### UpdateDeployment.RestDeploymentIdNewValue\\n  * type: String\\n  * description: Deployment Id after update\\n\\n### OutputRecoveryTime.RecoveryTime\\n  * type: Integer\\n  * description: SOP execution time in seconds\",\n  \"schemaVersion\" : \"0.3\",\n  \"assumeRole\" : \"{{AutomationAssumeRole}}\",\n  \"parameters\" : {\n    \"RestApiGwId\" : {\n      \"type\" : \"String\",\n      \"description\" : \"(Required) The ID of the REST API Gateway.\"\n    },\n    \"RestStageName\" : {\n      \"type\" : \"String\",\n      \"description\" : \"(Required) The stage name of the REST API Gateway.\"\n    },\n    \"RestDeploymentId\" : {\n      \"type\" : \"String\",\n      \"description\" : \"(Optional) The ID of deployment that should be applied on the give stage\",\n      \"default\" : \"\"\n    },\n    \"AutomationAssumeRole\" : {\n      \"type\" : \"String\",\n      \"description\" : \"(Required) The ARN of the role that allows Automation to perform the actions on your behalf.\"\n    }\n  },\n  \"outputs\" : [ \"FindDeploymentIdForUpdate.RestDeploymentIdOriginalValue\", \"FindDeploymentIdForUpdate.RestDeploymentIdToApply\", \"UpdateDeployment.RestDeploymentIdNewValue\", \"OutputRecoveryTime.RecoveryTime\" ],\n  \"mainSteps\" : [ {\n    \"name\" : \"RecordStartTime\",\n    \"description\" : \"Start recording execution time\",\n    \"action\" : \"aws:executeScript\",\n    \"outputs\" : [ {\n      \"Name\" : \"StartTime\",\n      \"Selector\" : \"$.Payload\",\n      \"Type\" : \"String\"\n    } ],\n    \"inputs\" : {\n      \"Runtime\" : \"python3.8\",\n      \"Handler\" : \"start_time\",\n      \"Script\" : \"import logging\\nimport time\\nfrom datetime import datetime, timezone\\n\\nimport boto3\\nfrom botocore.exceptions import ClientError\\nfrom dateutil import parser\\n\\nlogger = logging.getLogger()\\nlogger.setLevel(logging.INFO)\\n\\n\\n\\ndef start_time(events, context):\\n    return datetime.now(timezone.utc).isoformat()\"\n    }\n  }, {\n    \"name\" : \"FindDeploymentIdForUpdate\",\n    \"description\" : \"Find previous deployment by creation date if `RestDeploymentId` not specified\",\n    \"action\" : \"aws:executeScript\",\n    \"outputs\" : [ {\n      \"Name\" : \"RestDeploymentIdOriginalValue\",\n      \"Selector\" : \"$.Payload.OriginalDeploymentId\",\n      \"Type\" : \"String\"\n    }, {\n      \"Name\" : \"RestDeploymentIdToApply\",\n      \"Selector\" : \"$.Payload.DeploymentIdToApply\",\n      \"Type\" : \"String\"\n    } ],\n    \"inputs\" : {\n      \"Runtime\" : \"python3.7\",\n      \"Handler\" : \"find_deployment_id_for_update\",\n      \"InputPayload\" : {\n        \"RestApiGwId\" : \"{{ RestApiGwId }}\",\n        \"RestStageName\" : \"{{ RestStageName }}\",\n        \"RestDeploymentId\" : \"{{ RestDeploymentId }}\"\n      },\n      \"Script\" : \"import json\\nimport logging\\nimport time\\nfrom random import uniform\\nfrom typing import Any, Callable\\n\\nimport boto3\\nfrom botocore.config import Config\\nfrom botocore.exceptions import ClientError\\n\\nlog = logging.getLogger()\\nlog.setLevel(logging.INFO)\\n\\n\\n\\ndef get_stage(config: object, gateway_id: str, stage_name: str) -> dict:\\n    client = boto3.client('apigateway', config=config)\\n    response = client.get_stage(restApiId=gateway_id, stageName=stage_name)\\n    assert_https_status_code_200(response, f'Failed to perform get_stage with '\\n                                           f'restApiId: {gateway_id} and stageName: {stage_name}')\\n    return response\\n\\n\\n\\ndef get_deployment(config: object, gateway_id: str, deployment_id: str) -> dict:\\n    client = boto3.client('apigateway', config=config)\\n    response = client.get_deployment(restApiId=gateway_id, deploymentId=deployment_id)\\n    assert_https_status_code_200(response, f'Failed to perform get_deployment with '\\n                                           f'restApiId: {gateway_id} and deploymentId: {deployment_id}')\\n    return response\\n\\n\\n\\ndef get_deployments(config: object, gateway_id: str, limit: int = 25) -> dict:\\n    client = boto3.client('apigateway', config=config)\\n    response = client.get_deployments(restApiId=gateway_id, limit=limit)\\n    assert_https_status_code_200(response, f'Failed to perform get_deployments with restApiId: {gateway_id}')\\n    return response\\n\\n\\n\\ndef assert_https_status_code_200(response: dict, error_message: str) -> None:\\n    if response['ResponseMetadata']['HTTPStatusCode'] != 200:\\n        raise ValueError(f'{error_message} Response is: {response}')\\n\\n\\n\\ndef find_deployment_id_for_update(events: dict, context: dict) -> dict:\\n    \\\"\\\"\\\"\\n    Find deployment id for update\\n    \\\"\\\"\\\"\\n    if 'RestApiGwId' not in events:\\n        raise KeyError('Requires RestApiGwId in events')\\n\\n    if 'RestStageName' not in events:\\n        raise KeyError('Requires RestStageName in events')\\n\\n    output: dict = {}\\n    gateway_id: str = events['RestApiGwId']\\n    stage_name: str = events['RestStageName']\\n    provided_deployment_id: str = events.get('RestDeploymentId', '')\\n\\n    boto3_config: object = Config(retries={'max_attempts': 20, 'mode': 'standard'})\\n    current_deployment_id = get_stage(boto3_config, gateway_id, stage_name)['deploymentId']\\n    output['OriginalDeploymentId'] = current_deployment_id\\n\\n    if provided_deployment_id and provided_deployment_id == current_deployment_id:\\n        raise ValueError('Provided deployment ID and current deployment ID should not be the same')\\n\\n    if provided_deployment_id:\\n        output['DeploymentIdToApply'] = get_deployment(boto3_config, gateway_id, provided_deployment_id)['id']\\n        return output\\n\\n    deployment_items = get_deployments(boto3_config, gateway_id, 500)['items']\\n    if len(deployment_items) == 1 and deployment_items[0]['id'] == current_deployment_id:\\n        raise ValueError(f'There are no deployments found to apply in RestApiGateway ID: {gateway_id}, '\\n                         f'except current deployment ID: {current_deployment_id}')\\n\\n    current_deployment_creation_date = get_deployment(boto3_config, gateway_id, current_deployment_id)['createdDate']\\n    deployment_items.sort(key=lambda x: x['createdDate'], reverse=True)\\n\\n    for item in deployment_items:\\n        if item['createdDate'] < current_deployment_creation_date and item['id'] != current_deployment_id:\\n            output['DeploymentIdToApply'] = item['id']\\n            return output\\n\\n    raise ValueError(f'Could not find any existing deployment which has createdDate less than current deployment ID: '\\n                     f'{current_deployment_id}, with createdDate: {current_deployment_creation_date}')\"\n    }\n  }, {\n    \"name\" : \"UpdateDeployment\",\n    \"description\" : \"Apply the specified or previous deployment to stage\",\n    \"action\" : \"aws:executeScript\",\n    \"outputs\" : [ {\n      \"Name\" : \"RestDeploymentIdNewValue\",\n      \"Selector\" : \"$.Payload.DeploymentIdNewValue\",\n      \"Type\" : \"String\"\n    } ],\n    \"inputs\" : {\n      \"Runtime\" : \"python3.7\",\n      \"Handler\" : \"update_deployment\",\n      \"InputPayload\" : {\n        \"RestApiGwId\" : \"{{ RestApiGwId }}\",\n        \"RestStageName\" : \"{{ RestStageName }}\",\n        \"RestDeploymentId\" : \"{{ FindDeploymentIdForUpdate.RestDeploymentIdToApply }}\"\n      },\n      \"Script\" : \"import json\\nimport logging\\nimport time\\nfrom random import uniform\\nfrom typing import Any, Callable\\n\\nimport boto3\\nfrom botocore.config import Config\\nfrom botocore.exceptions import ClientError\\n\\nlog = logging.getLogger()\\nlog.setLevel(logging.INFO)\\n\\n\\n\\ndef assert_https_status_code_200(response: dict, error_message: str) -> None:\\n    if response['ResponseMetadata']['HTTPStatusCode'] != 200:\\n        raise ValueError(f'{error_message} Response is: {response}')\\n\\n\\n\\ndef update_deployment(events: dict, context: dict) -> dict:\\n    \\\"\\\"\\\"\\n    Apply RestDeploymentId to provided RestStageName\\n    \\\"\\\"\\\"\\n    if 'RestApiGwId' not in events:\\n        raise KeyError('Requires RestApiGwId in events')\\n\\n    if 'RestStageName' not in events:\\n        raise KeyError('Requires RestStageName in events')\\n\\n    if 'RestDeploymentId' not in events:\\n        raise KeyError('Requires RestDeploymentId in events')\\n\\n    gateway_id: str = events['RestApiGwId']\\n    stage_name: str = events['RestStageName']\\n    deployment_id: str = events['RestDeploymentId']\\n\\n    config = Config(retries={'max_attempts': 20, 'mode': 'standard'})\\n    client = boto3.client('apigateway', config=config)\\n    response = client.update_stage(\\n        restApiId=gateway_id,\\n        stageName=stage_name,\\n        patchOperations=[\\n            {\\n                'op': 'replace',\\n                'path': '/deploymentId',\\n                'value': deployment_id,\\n            },\\n        ]\\n    )\\n    assert_https_status_code_200(response, f'Failed to perform update_stage with restApiId: {gateway_id},'\\n                                           f' stageName: {stage_name} and deploymentId: {deployment_id}')\\n\\n    return {'DeploymentIdNewValue': response['deploymentId'],\\n            'StageName': response['stageName']}\"\n    }\n  }, {\n    \"name\" : \"OutputRecoveryTime\",\n    \"description\" : \"Calculate execution time\",\n    \"action\" : \"aws:executeScript\",\n    \"outputs\" : [ {\n      \"Name\" : \"RecoveryTime\",\n      \"Selector\" : \"$.Payload\",\n      \"Type\" : \"Integer\"\n    } ],\n    \"inputs\" : {\n      \"Runtime\" : \"python3.8\",\n      \"Handler\" : \"recovery_time\",\n      \"Script\" : \"import logging\\nimport time\\nfrom datetime import datetime, timezone\\n\\nimport boto3\\nfrom botocore.exceptions import ClientError\\nfrom dateutil import parser\\n\\nlogger = logging.getLogger()\\nlogger.setLevel(logging.INFO)\\n\\n\\n\\ndef recovery_time(events, context):\\n    return (datetime.now(timezone.utc) - parser.parse(events['StartTime'])).seconds\",\n      \"InputPayload\" : {\n        \"StartTime\" : \"{{ RecordStartTime.StartTime }}\"\n      }\n    }\n  } ]\n}",
  "CreatedDate": "2023-02-19T17:19:31.08Z",
  "DisplayName": null,
  "DocumentFormat": {
    "Value": "JSON"
  },
  "DocumentType": {
    "Value": "Automation"
  },
  "DocumentVersion": "3",
  "Name": "AWSResilienceHub-UpdateRestApiGwVersionSOP_2020-10-26",
  "Requires": [],
  "ReviewStatus": null,
  "Status": {
    "Value": "Active"
  },
  "StatusInformation": null,
  "VersionName": null,
  "ResponseMetadata": {
    "RequestId": "c238a06c-402e-4b1e-a3c7-2382bc188b99",
    "Metadata": {},
    "ChecksumAlgorithm": 0,
    "ChecksumValidationStatus": 0
  },
  "ContentLength": 11982,
  "HttpStatusCode": 200,
  "LoggedAt": "2023-03-13T07:12:10.4320332+00:00"
}
