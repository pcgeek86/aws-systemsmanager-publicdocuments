{
  "AttachmentsContent": [],
  "Content": "{\n  \"description\" : \"## Id\\nAWSResilienceHub-RestoreDynamoDBTableFromBackupSOP_2020-04-01\\n\\n## Intent\\nTo recover the DynamoDB table into a last known good state using an existing backup of a DynamoDB table.\\n\\n## Type\\nSOP\\n\\n## Risk\\nSmall\\n\\n## Requirements\\n  * DynamoDB table\\n  * DynamoDB table backup or AWS recovery point for DynamoDbTable\\n  * IAM role with [AWSBackupServiceRolePolicyForRestores](https://docs.aws.amazon.com/aws-backup/latest/devguide/iam-service-roles.html) policy when restoring AWS recovery point\\n\\n## Permissions required for AutomationAssumeRole\\n  * dynamodb:RestoreTableFromBackup\\n  * dynamodb:DescribeTable\\n  * dynamodb:Scan\\n  * dynamodb:Query\\n  * dynamodb:UpdateItem\\n  * dynamodb:PutItem\\n  * dynamodb:GetItem\\n  * dynamodb:DeleteItem\\n  * dynamodb:BatchWriteItem\\n\\n##### Permissions required in case Kinesis Streaming destination is enabled\\n  * kinesis:DescribeStream\\n  * kinesis:PutRecord\\n  * kinesis:PutRecords\\n\\n##### Permissions required to copy properties from source to restored table if `CopyAllProperties` option is enabled\\n  * dynamodb:UpdateTable\\n  * ssm:GetAutomationExecution\\n  * ssm:StartAutomationExecution\\n  * dynamodb:CreateTableReplica\\n  * dynamodb:CreateTable\\n  * dynamodb:DescribeKinesisStreamingDestination\\n  * dynamodb:EnableKinesisStreamingDestination\\n  * dynamodb:DescribeTimeToLive\\n  * dynamodb:UpdateTimeToLive\\n  * dynamodb:ListTagsOfResource\\n  * dynamodb:TagResource\\n  * dynamodb:DescribeContributorInsights\\n  * dynamodb:UpdateContributorInsights\\n  * dynamodb:DescribeContinuousBackups\\n  * dynamodb:UpdateContinuousBackups\\n  * application-autoscaling:DescribeScalableTargets\\n  * application-autoscaling:RegisterScalableTarget\\n  * iam:PassRole (passed to application-autoscaling.amazonaws.com)\\n  * cloudwatch:DescribeAlarms\\n  * cloudwatch:PutMetricAlarm\\n\\n## Depends on\\nAWSResilienceHub-CopyDynamoDBTablePropertiesUtil_2020-04-01\\n\\n## Cancellation behavior\\nFail\\n\\n## Inputs\\n### (Required) AutomationAssumeRole\\n  * type: String\\n  * description: Amazon Resource Name (ARN) of the IAM role that contains the preceding permissions.\\n\\n### (Required) DynamoDBTableSourceName\\n  * type: String\\n  * description: Name of the source DynamoDB table.\\n\\n### (Required) DynamoDBSourceTableBackupArn\\n  * type: String\\n  * description: The backup Amazon Resource Name (ARN) of the source DynamoDB table.\\n\\n### (Required) DynamoDBTableTargetName\\n  * type: String\\n  * description: Name of the target DynamoDB table.\\n\\n### (Optional)RestoreJobIAMRoleArn:\\n  * type: String\\n  * description: (Optional) IAM role ARN with AWSBackupServiceRolePolicyForRestores policy used to start the restore job.\\n  * default: ''\\n\\n### (Optional) CopyAllProperties\\n  * type: Boolean\\n  * description: True or False. If set to true, all the settings are copied from the source DynamoDB table to the restored DynamoDB table.\\n  * default: True\\n\\n### (Optional) DynamoDBSourceTableAlarmNames\\n  * type: StringList\\n  * description: Alarm names of the DynamoDB table to be recovered. Note: Only metric alarms that are on the metrics with AWS namespace or DynamoDB namespace are considered for recovery.\\n  * max items: 10\\n  * default: []\\n\\n## Details\\nThis document creates a DynamoDB table using DynamoDB backup. After the creation is\\ncomplete, the document waits for the DynamoDB table to become active, and if\\n`CopyAllProperties` is set to True, it copies all the possible properties from the source\\nDynamoDB table to the restored DynamoDB table. If `DynamoDBSourceTableAlarmNames` is\\nprovided, the document copies the specified alarms (up to 10 alarms) from the source\\nDynamoDB table.\\nNote: Triggers and IAM policy cannot be copied from the source DynamoDB table. Item count\\ndoes not appear immediately because DynamoDB updates this value once in every 6 hours.\\n\\n## Steps executed in normal flow\\n  * RecordStartTime\\n  * GetBackupType\\n  * BranchOnBackupType\\n  * RestoreDynamoDBTableFromBackup\\n  * WaitTableToBeActive\\n  * CheckIfNeedToCopyAllProperties\\n  * CopyAllTableProperties\\n  * OutputRecoveryTime\\n\\n## Outputs\\n### RestoreDynamoDBTableFromBackup.TargetTableArn\\n  * type: String\\n  * description: Amazon Resource Name (ARN) of the restored table.\\n\\n### RestoreDynamoDBTableFromBackup.RecoveryPoint\\n  * type: String\\n  * description: Timestamp of the backup that is used to restore DynamoDB table.\\n\\n### OutputRecoveryTime.RecoveryTime\\n  * type: Integer\\n  * description: Time taken to recover DynamoDB table in seconds.\",\n  \"schemaVersion\" : \"0.3\",\n  \"assumeRole\" : \"{{ AutomationAssumeRole }}\",\n  \"parameters\" : {\n    \"DynamoDBTableSourceName\" : {\n      \"type\" : \"String\",\n      \"description\" : \"(Required) Name of the source DynamoDB table.\"\n    },\n    \"DynamoDBSourceTableBackupArn\" : {\n      \"type\" : \"String\",\n      \"description\" : \"(Required) The backup Amazon Resource Name (ARN) of the source DynamoDB table.\"\n    },\n    \"DynamoDBTableTargetName\" : {\n      \"type\" : \"String\",\n      \"description\" : \"(Required) Name of the target DynamoDB table.\"\n    },\n    \"CopyAllProperties\" : {\n      \"type\" : \"Boolean\",\n      \"description\" : \"(Optional) True or False. If set to true, all the settings are copied from the source DynamoDB table to the restored DynamoDB table.\",\n      \"default\" : true\n    },\n    \"DynamoDBSourceTableAlarmNames\" : {\n      \"type\" : \"StringList\",\n      \"description\" : \"(Optional) Alarm names of the DynamoDB table to be recovered. Note:Only metric alarms that are on the metrics with AWS namespace or DynamoDB namespace are considered for recovery.\",\n      \"maxItems\" : 10,\n      \"default\" : [ ]\n    },\n    \"RestoreJobIAMRoleArn\" : {\n      \"type\" : \"String\",\n      \"description\" : \"(Optional) IAM role ARN with AWSBackupServiceRolePolicyForRestores policy used to start the restore job.\",\n      \"default\" : \"\"\n    },\n    \"AutomationAssumeRole\" : {\n      \"type\" : \"String\",\n      \"description\" : \"(Required) Amazon Resource Name (ARN) of the IAM role that contains the preceding permissions.\"\n    }\n  },\n  \"outputs\" : [ \"RestoreDynamoDBTableFromBackup.TargetTableArn\", \"RestoreDynamoDBTableFromBackup.RecoveryPoint\", \"WaitForRestoreJobCompletion.RestoredDynamoDbTableArn\", \"OutputRecoveryTime.RecoveryTime\", \"RestoreDynamoDBTableFromRecoveryPoint.RestoreJobId\" ],\n  \"mainSteps\" : [ {\n    \"name\" : \"RecordStartTime\",\n    \"description\" : \"Start recording execution time\",\n    \"action\" : \"aws:executeScript\",\n    \"outputs\" : [ {\n      \"Name\" : \"StartTime\",\n      \"Selector\" : \"$.Payload\",\n      \"Type\" : \"String\"\n    } ],\n    \"inputs\" : {\n      \"Runtime\" : \"python3.8\",\n      \"Handler\" : \"start_time\",\n      \"Script\" : \"import logging\\nimport time\\nfrom datetime import datetime, timezone\\n\\nimport boto3\\nfrom botocore.exceptions import ClientError\\nfrom dateutil import parser\\n\\nlogger = logging.getLogger()\\nlogger.setLevel(logging.INFO)\\n\\n\\n\\ndef start_time(events, context):\\n    return datetime.now(timezone.utc).isoformat()\"\n    }\n  }, {\n    \"name\" : \"GetBackupType\",\n    \"description\" : \"Get type of backup for different restore techniques\",\n    \"action\" : \"aws:executeScript\",\n    \"outputs\" : [ {\n      \"Name\" : \"BackupType\",\n      \"Selector\" : \"$.Payload\",\n      \"Type\" : \"String\"\n    } ],\n    \"inputs\" : {\n      \"Runtime\" : \"python3.8\",\n      \"Handler\" : \"identify_backup_type\",\n      \"Script\" : \"import logging\\nimport random\\nimport time\\nfrom typing import Any, Callable, Iterator, List\\nimport re\\nimport boto3\\nfrom botocore.config import Config\\nfrom botocore.exceptions import ClientError\\n\\nboto3_config = Config(retries={'max_attempts': 20, 'mode': 'standard'})\\nlogger = logging.getLogger()\\nlogger.setLevel(logging.INFO)\\n\\nENABLED_INSIGHTS_STATUSES = ['ENABLING', 'ENABLED']\\nGLOBAL_TABLE_ACTIVE_STATUSES = ['ACTIVE']\\n\\n\\n\\ndef check_required_params(required_params: List[str], events: dict) -> None:\\n    \\\"\\\"\\\"\\n    Check for required parameters in events. Allow empty, None or 0 values.\\n    :param required_params: List of required parameters\\n    :param events: input parameters in event\\n    :return:\\n    \\\"\\\"\\\"\\n    for key in required_params:\\n        if key not in events:\\n            raise KeyError(f'Requires {key} in events')\\n\\n\\n\\ndef identify_backup_type(events: dict, context: dict) -> dict:\\n\\n    required_params = [\\n        'BackupArn',\\n    ]\\n    check_required_params(required_params, events)\\n    arn = events['BackupArn']\\n\\n    dynamodb_backup_pattern = r\\\"^arn:aws:dynamodb:[^:]*:[^:]*:table/[^/]*/backup/[^/]*$\\\"\\n    aws_recovery_point_pattern = r\\\"^arn:aws:backup:[^:]*:[^:]*:recovery-point:[^/]*$\\\"\\n\\n    is_dynamodb_backup = re.match(dynamodb_backup_pattern, arn)\\n    is_aws_recovery_point = re.match(aws_recovery_point_pattern, arn)\\n\\n    if is_dynamodb_backup:\\n        return \\\"DynamoDB Backup\\\"\\n    elif is_aws_recovery_point:\\n        return \\\"AWS Backup Recovery Point\\\"\\n    else:\\n        return \\\"Invalid or Unsupported ARN\\\"\",\n      \"InputPayload\" : {\n        \"BackupArn\" : \"{{ DynamoDBSourceTableBackupArn }}\"\n      }\n    }\n  }, {\n    \"name\" : \"BranchOnBackupType\",\n    \"description\" : \"Check which backup recovery method to execute\",\n    \"action\" : \"aws:branch\",\n    \"inputs\" : {\n      \"Choices\" : [ {\n        \"StringEquals\" : \"DynamoDB Backup\",\n        \"Variable\" : \"{{ GetBackupType.BackupType }}\",\n        \"NextStep\" : \"RestoreDynamoDBTableFromBackup\"\n      }, {\n        \"StringEquals\" : \"AWS Backup Recovery Point\",\n        \"Variable\" : \"{{ GetBackupType.BackupType }}\",\n        \"NextStep\" : \"ValidateRoleArn\"\n      } ]\n    },\n    \"isEnd\" : true\n  }, {\n    \"name\" : \"ValidateRoleArn\",\n    \"description\" : \"Validate ARN Role that allows recovery point recovery\",\n    \"action\" : \"aws:executeScript\",\n    \"inputs\" : {\n      \"Runtime\" : \"python3.8\",\n      \"Handler\" : \"validate_role_arn\",\n      \"Script\" : \"import logging\\nimport random\\nimport time\\nfrom typing import Any, Callable, Iterator, List\\nimport re\\nimport boto3\\nfrom botocore.config import Config\\nfrom botocore.exceptions import ClientError\\n\\nboto3_config = Config(retries={'max_attempts': 20, 'mode': 'standard'})\\nlogger = logging.getLogger()\\nlogger.setLevel(logging.INFO)\\n\\nENABLED_INSIGHTS_STATUSES = ['ENABLING', 'ENABLED']\\nGLOBAL_TABLE_ACTIVE_STATUSES = ['ACTIVE']\\n\\n\\n\\ndef validate_role_arn(events: dict, context: dict) -> dict:\\n    arnToValidate = events['arnToValidate']\\n\\n    iam_role_arn_pattern = r\\\"arn:aws:iam::\\\\d+:\\\\S+\\\"\\n\\n    is_iam_role_arn = re.match(iam_role_arn_pattern, arnToValidate)\\n\\n    if not is_iam_role_arn:\\n        raise Exception('Arn is not valid with pattern')\",\n      \"InputPayload\" : {\n        \"arnToValidate\" : \"{{ RestoreJobIAMRoleArn }}\"\n      }\n    }\n  }, {\n    \"name\" : \"RestoreDynamoDBTableFromRecoveryPoint\",\n    \"description\" : \"Restore DynamoDb Table from the copied recovery point in the target region\",\n    \"action\" : \"aws:executeScript\",\n    \"onFailure\" : \"Abort\",\n    \"inputs\" : {\n      \"Runtime\" : \"python3.8\",\n      \"Handler\" : \"restore_backup_in_region_dynamodb\",\n      \"Script\" : \"import logging\\nimport time\\n\\nimport boto3\\n\\nlogger = logging.getLogger(__name__)\\nlogger.setLevel(logging.INFO)\\n\\n\\n\\ndef restore_backup_in_region_dynamodb(events, context):\\n    \\\"\\\"\\\"\\n    Restore the backup from the DynamoDb recovery point in some region\\n    \\\"\\\"\\\"\\n    required_params = [\\n        'IamRoleArn',\\n        'RecoveryPointArn',\\n        'IdempotencyToken',\\n        'Region',\\n        'Metadata',\\n        'ResourceType'\\n    ]\\n    required_metadata = [\\n        'targetTableName'\\n    ]\\n    for key in required_params:\\n        if key not in events:\\n            raise KeyError(f'Requires {key} in events')\\n    for key in required_metadata:\\n        if key not in events['Metadata']:\\n            raise KeyError(f'Requires {key} in events[\\\\'Metadata\\\\']')\\n\\n    backup_client = boto3.client('backup', region_name=events['Region'])\\n\\n    metadata = {\\n        'targetTableName': events['Metadata']['targetTableName'],\\n    }\\n\\n    logger.info(f\\\"Calling backup_client.start_restore_job:\\\"\\n                f\\\"RecoveryPointArn={events['RecoveryPointArn']}\\\"\\n                f\\\"Metadata={metadata}\\\"\\n                f\\\"IamRoleArn={events['IamRoleArn']}\\\"\\n                f\\\"IdempotencyToken={events['IdempotencyToken']}\\\"\\n                f\\\"ResourceType={events['ResourceType']}\\\")\\n    response = backup_client.start_restore_job(\\n        RecoveryPointArn=events['RecoveryPointArn'],\\n        Metadata=metadata,\\n        IamRoleArn=events['IamRoleArn'],\\n        IdempotencyToken=events['IdempotencyToken'],\\n        ResourceType=events['ResourceType'],\\n    )\\n    return {\\n        'RestoreJobId': response.get('RestoreJobId')\\n    }\",\n      \"InputPayload\" : {\n        \"IamRoleArn\" : \"{{ RestoreJobIAMRoleArn }}\",\n        \"RecoveryPointArn\" : \"{{ DynamoDBSourceTableBackupArn }}\",\n        \"IdempotencyToken\" : \"{{ global:DATE_TIME }}\",\n        \"Region\" : \"{{ global:REGION }}\",\n        \"ResourceType\" : \"DynamoDB\",\n        \"Metadata\" : {\n          \"targetTableName\" : \"{{ DynamoDBTableTargetName }}\"\n        }\n      }\n    },\n    \"outputs\" : [ {\n      \"Name\" : \"RestoreJobId\",\n      \"Selector\" : \"$.Payload.RestoreJobId\",\n      \"Type\" : \"String\"\n    } ]\n  }, {\n    \"name\" : \"WaitForRestoreJobCompletion\",\n    \"description\" : \"Wait for restore job completion\",\n    \"action\" : \"aws:executeScript\",\n    \"onFailure\" : \"Abort\",\n    \"inputs\" : {\n      \"Runtime\" : \"python3.8\",\n      \"Handler\" : \"wait_restore_job_in_region\",\n      \"Script\" : \"import logging\\nimport time\\n\\nimport boto3\\n\\nlogger = logging.getLogger(__name__)\\nlogger.setLevel(logging.INFO)\\n\\n\\n\\ndef wait_restore_job_in_region(events, context):\\n    required_params = [\\n        'RestoreJobId',\\n        'Region',\\n    ]\\n    wait_timeout = 3600\\n    result = {}\\n    for key in required_params:\\n        if key not in events:\\n            raise KeyError(f'Requires {key} in events')\\n\\n    if 'WaitTimeout' in events:\\n        wait_timeout = events['WaitTimeout']\\n    backup_client = boto3.client('backup', region_name=events['Region'])\\n    logger.info(f\\\"Waiting for restore job id {events['RestoreJobId']} in region: {events['Region']}\\\")\\n\\n    timeout_timestamp = time.time() + int(wait_timeout)\\n    while time.time() < timeout_timestamp:\\n        response = backup_client.describe_restore_job(\\n            RestoreJobId=events['RestoreJobId']\\n        )\\n        if response.get('Status') == 'COMPLETED':\\n            result = {\\n                'RestoreJobId': response.get('RestoreJobId'),\\n                'CreatedResourceArn': response.get('CreatedResourceArn')\\n            }\\n            break\\n        elif response.get('Status') in ['ABORTED', 'FAILED']:\\n            raise AssertionError(f\\\"Restore job resulted with {response.get('Status')} status\\\")\\n        time.sleep(20)\\n    if not result:\\n        raise TimeoutError(f\\\"Restore job couldn't be completed within {wait_timeout} seconds\\\")\\n    return result\",\n      \"InputPayload\" : {\n        \"RestoreJobId\" : \"{{ RestoreDynamoDBTableFromRecoveryPoint.RestoreJobId }}\",\n        \"Region\" : \"{{ global:REGION }}\"\n      }\n    },\n    \"outputs\" : [ {\n      \"Name\" : \"RestoredDynamoDbTableArn\",\n      \"Selector\" : \"$.Payload.CreatedResourceArn\",\n      \"Type\" : \"String\"\n    } ],\n    \"nextStep\" : \"WaitTableToBeActive\"\n  }, {\n    \"name\" : \"RestoreDynamoDBTableFromBackup\",\n    \"description\" : \"Restore table from backup\",\n    \"action\" : \"aws:executeAwsApi\",\n    \"maxAttempts\" : 3,\n    \"onFailure\" : \"Abort\",\n    \"inputs\" : {\n      \"Service\" : \"dynamodb\",\n      \"Api\" : \"RestoreTableFromBackup\",\n      \"BackupArn\" : \"{{ DynamoDBSourceTableBackupArn }}\",\n      \"TargetTableName\" : \"{{ DynamoDBTableTargetName }}\"\n    },\n    \"outputs\" : [ {\n      \"Name\" : \"TargetTableArn\",\n      \"Selector\" : \"$.TableDescription.TableArn\",\n      \"Type\" : \"String\"\n    }, {\n      \"Name\" : \"RecoveryPoint\",\n      \"Selector\" : \"$.TableDescription.RestoreSummary.RestoreDateTime\",\n      \"Type\" : \"String\"\n    } ]\n  }, {\n    \"name\" : \"WaitTableToBeActive\",\n    \"description\" : \"Wait for the table to become active\",\n    \"action\" : \"aws:waitForAwsResourceProperty\",\n    \"onFailure\" : \"Abort\",\n    \"inputs\" : {\n      \"Service\" : \"dynamodb\",\n      \"Api\" : \"DescribeTable\",\n      \"TableName\" : \"{{ DynamoDBTableTargetName }}\",\n      \"PropertySelector\" : \"$.Table.TableStatus\",\n      \"DesiredValues\" : [ \"ACTIVE\" ]\n    }\n  }, {\n    \"name\" : \"CheckIfNeedToCopyAllProperties\",\n    \"description\" : \"Check that CopyAllProperties is enabled\",\n    \"action\" : \"aws:branch\",\n    \"inputs\" : {\n      \"Choices\" : [ {\n        \"NextStep\" : \"CopyAllTableProperties\",\n        \"Variable\" : \"{{CopyAllProperties}}\",\n        \"BooleanEquals\" : true\n      } ],\n      \"Default\" : \"OutputRecoveryTime\"\n    }\n  }, {\n    \"name\" : \"CopyAllTableProperties\",\n    \"description\" : \"Execute script to copy properties and alarms from the source table to the restored one\",\n    \"action\" : \"aws:executeAutomation\",\n    \"onFailure\" : \"Abort\",\n    \"inputs\" : {\n      \"DocumentName\" : \"AWSResilienceHub-CopyDynamoDBTablePropertiesUtil_2020-04-01\",\n      \"RuntimeParameters\" : {\n        \"AutomationAssumeRole\" : \"{{AutomationAssumeRole}}\",\n        \"DynamoDBTableSourceName\" : \"{{DynamoDBTableSourceName}}\",\n        \"DynamoDBTableTargetName\" : \"{{DynamoDBTableTargetName}}\",\n        \"DynamoDBSourceTableAlarmNames\" : \"{{DynamoDBSourceTableAlarmNames}}\"\n      }\n    }\n  }, {\n    \"name\" : \"OutputRecoveryTime\",\n    \"description\" : \"Calculate execution time\",\n    \"action\" : \"aws:executeScript\",\n    \"outputs\" : [ {\n      \"Name\" : \"RecoveryTime\",\n      \"Selector\" : \"$.Payload\",\n      \"Type\" : \"Integer\"\n    } ],\n    \"inputs\" : {\n      \"Runtime\" : \"python3.8\",\n      \"Handler\" : \"recovery_time\",\n      \"Script\" : \"import logging\\nimport time\\nfrom datetime import datetime, timezone\\n\\nimport boto3\\nfrom botocore.exceptions import ClientError\\nfrom dateutil import parser\\n\\nlogger = logging.getLogger()\\nlogger.setLevel(logging.INFO)\\n\\n\\n\\ndef recovery_time(events, context):\\n    return (datetime.now(timezone.utc) - parser.parse(events['StartTime'])).seconds\",\n      \"InputPayload\" : {\n        \"StartTime\" : \"{{ RecordStartTime.StartTime }}\"\n      }\n    },\n    \"isEnd\" : true\n  } ]\n}",
  "CreatedDate": "2023-06-19T07:49:59.309Z",
  "DisplayName": null,
  "DocumentFormat": {
    "Value": "JSON"
  },
  "DocumentType": {
    "Value": "Automation"
  },
  "DocumentVersion": "5",
  "Name": "AWSResilienceHub-RestoreDynamoDBTableFromBackupSOP_2020-04-01",
  "Requires": [],
  "ReviewStatus": null,
  "Status": {
    "Value": "Active"
  },
  "StatusInformation": null,
  "VersionName": null,
  "ResponseMetadata": {
    "RequestId": "9ba7010e-e958-4390-9af4-1b48ad96e8ac",
    "Metadata": {},
    "ChecksumAlgorithm": 0,
    "ChecksumValidationStatus": 0
  },
  "ContentLength": 19654,
  "HttpStatusCode": 200,
  "LoggedAt": "2023-06-24T07:12:44.5490408+00:00"
}
