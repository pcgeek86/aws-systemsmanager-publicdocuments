{
  "AttachmentsContent": [],
  "Content": "{\n  \"description\" : \"## Intent\\nScale up an Amazon EC2 instance to a larger version of the same instance type. For example, instead of m5.xlarge, the Amazon EC2 instance will utilize m5.2xlarge.\\n\\n## Type\\nSOP\\n\\n## Risk\\nSmall\\n\\n## Requirements\\n* Available EC2 Instance\\n\\n## Permission required for AutomationAssumeRole\\n* ec2:StopInstances\\n* ec2:StartInstances\\n* ec2:DescribeInstances\\n* ec2:ModifyInstanceAttribute\\n* ec2:DescribeInstanceTypeOfferings\\n* ec2:DescribeInstanceStatus\\n* iam:PassRole\\n\\n## Supports Rollback\\nYes\\n\\n## Inputs\\n### EC2InstanceIdentifier:\\n* type: String\\n* description: (Required) EC2 Instance Identifier\\n### EC2InstanceTargetInstanceType:\\n* type: String\\n* description: (Optional) Override target InstanceType for scale-up (default is to calculate the next instance type)\\n### AutomationAssumeRole:\\n* type: String\\n* description: \\n    (Optional) The ARN of the role that allows Automation to perform\\n    the actions on your behalf. If no role is specified, Systems Manager Automation\\n    uses your IAM permissions to run this document.\\n    default: ''\\n\\n## Details\\nThe document checks that the instance is in an available state, then it fetches the original instance type, calculates the next bigger instance type based on it (if not specified), stops the instance,\\nvalidates that the instance is stopped, upgrades the instance type based on the calculated one, starts the instance again and validates that the instance is available again.\\n\\n## Steps executed in normal flow\\n  * RecordStartTime\\n  * AssertInstanceInAvailableState\\n  * DescribeEC2Instance\\n  * CalculateTargetType\\n  * StopEC2Instance\\n  * ValidateInstanceIsStopped\\n  * ModifyInstanceAttribute\\n  * StartEC2Instance\\n  * ValidateInstanceIsAvailable\\n  * AssertInstanceType\\n  * OutputRecoveryTime\\n\\n## Outputs\\n* `TargetInstanceType`: The instance type after the scale-up\\n* `OutputRecoveryTime.RecoveryTime`: recovery time in seconds\",\n  \"schemaVersion\" : \"0.3\",\n  \"assumeRole\" : \"{{ AutomationAssumeRole }}\",\n  \"outputs\" : [ \"OutputRecoveryTime.RecoveryTime\", \"CalculateTargetType.TargetInstanceType\" ],\n  \"parameters\" : {\n    \"EC2InstanceIdentifier\" : {\n      \"type\" : \"String\",\n      \"allowedPattern\" : \"^i-[a-z0-9]{8,17}$\",\n      \"description\" : \"(Required) EC2InstanceIdentifier\"\n    },\n    \"EC2InstanceTargetInstanceType\" : {\n      \"type\" : \"String\",\n      \"description\" : \"(Optional) EC2InstanceTargetInstanceType\",\n      \"default\" : \"\"\n    },\n    \"AutomationAssumeRole\" : {\n      \"type\" : \"String\",\n      \"description\" : \"(Required) The ARN of the role that allows Automation to perform the actions on your behalf.\"\n    }\n  },\n  \"mainSteps\" : [ {\n    \"name\" : \"RecordStartTime\",\n    \"description\" : \"Start recording execution time\",\n    \"action\" : \"aws:executeScript\",\n    \"outputs\" : [ {\n      \"Name\" : \"StartTime\",\n      \"Selector\" : \"$.Payload\",\n      \"Type\" : \"String\"\n    } ],\n    \"inputs\" : {\n      \"Runtime\" : \"python3.8\",\n      \"Handler\" : \"start_time\",\n      \"Script\" : \"import logging\\nimport time\\nfrom datetime import datetime, timezone\\n\\nimport boto3\\nfrom botocore.exceptions import ClientError\\nfrom dateutil import parser\\n\\nlogger = logging.getLogger()\\nlogger.setLevel(logging.INFO)\\n\\n\\n\\ndef start_time(events, context):\\n    return datetime.now(timezone.utc).isoformat()\"\n    }\n  }, {\n    \"name\" : \"AssertInstanceInAvailableState\",\n    \"description\" : \"Assert that the Amazon EC2 instance is available.\",\n    \"action\" : \"aws:assertAwsResourceProperty\",\n    \"onFailure\" : \"Abort\",\n    \"inputs\" : {\n      \"Service\" : \"ec2\",\n      \"Api\" : \"DescribeInstanceStatus\",\n      \"InstanceIds\" : [ \"{{ EC2InstanceIdentifier }}\" ],\n      \"IncludeAllInstances\" : true,\n      \"PropertySelector\" : \"$.InstanceStatuses..InstanceState.Name\",\n      \"DesiredValues\" : [ \"running\", \"stopped\" ]\n    }\n  }, {\n    \"name\" : \"DescribeEC2Instance\",\n    \"description\" : \"Describe the Amazon EC2 instance and output the current instance\",\n    \"action\" : \"aws:executeAwsApi\",\n    \"onFailure\" : \"Abort\",\n    \"inputs\" : {\n      \"Service\" : \"ec2\",\n      \"Api\" : \"DescribeInstances\",\n      \"InstanceIds\" : [ \"{{ EC2InstanceIdentifier }}\" ]\n    },\n    \"outputs\" : [ {\n      \"Selector\" : \"$.Reservations[0].Instances[0].InstanceType\",\n      \"Name\" : \"InstanceType\",\n      \"Type\" : \"String\"\n    } ]\n  }, {\n    \"name\" : \"CalculateTargetType\",\n    \"description\" : \"Calculates the target instance type\",\n    \"action\" : \"aws:executeScript\",\n    \"outputs\" : [ {\n      \"Name\" : \"OriginalInstanceType\",\n      \"Selector\" : \"$.Payload.OriginalInstanceType\",\n      \"Type\" : \"String\"\n    }, {\n      \"Name\" : \"TargetInstanceType\",\n      \"Selector\" : \"$.Payload.TargetInstanceType\",\n      \"Type\" : \"String\"\n    } ],\n    \"inputs\" : {\n      \"Runtime\" : \"python3.8\",\n      \"Handler\" : \"get_bigger_instance\",\n      \"Script\" : \"import boto3\\nfrom botocore.config import Config\\n\\n\\n\\ndef get_bigger_instance(events, context):\\n    config = Config(retries={'max_attempts': 20, 'mode': 'standard'})\\n    ec2 = boto3.client('ec2', config=config)\\n    requested_instance_type = events[\\\"RequestInstanceType\\\"] or \\\"\\\"\\n    if requested_instance_type:\\n        instance_types_response = ec2.describe_instance_type_offerings(\\n            Filters=[{'Name': 'instance-type', \\\"Values\\\": [requested_instance_type]}])\\n        if instance_types_response:\\n            return {**{'TargetInstanceType': requested_instance_type}}\\n        else:\\n            raise Exception(\\\"Requested instance type is not valid: \\\" + requested_instance_type)\\n\\n    current_instance_type = events[\\\"CurrentInstanceType\\\"]\\n    instance_type_size = current_instance_type.rsplit(\\\".\\\", 1)\\n    instance_sizes = [\\\"nano\\\", \\\"micro\\\", \\\"small\\\", \\\"medium\\\", \\\"large\\\", \\\"xlarge\\\", \\\"2xlarge\\\", \\\"3xlarge\\\", \\\"4xlarge\\\",\\n                      \\\"6xlarge\\\", \\\"8xlarge\\\", \\\"9xlarge\\\", \\\"10xlarge\\\", \\\"12xlarge\\\", \\\"16xlarge\\\", \\\"18xlarge\\\", \\\"24xlarge\\\",\\n                      \\\"32xlarge\\\", \\\"56xlarge\\\", \\\"112xlarge\\\"]\\n    bigger_size_start_idx = instance_sizes.index(instance_type_size[1]) + 1\\n    possible_instance_types = []\\n    for i in range(len(instance_sizes) - bigger_size_start_idx):\\n        possible_instance_types.append(instance_type_size[0] + \\\".\\\" + instance_sizes[bigger_size_start_idx + i])\\n    instance_types_response = ec2.describe_instance_type_offerings(\\n        MaxResults=1000,\\n        Filters=[{'Name': 'instance-type', \\\"Values\\\": [instance_type_size[0] + \\\".*\\\"]}])\\n    all_instance_types = [offering['InstanceType'] for offering in instance_types_response['InstanceTypeOfferings']]\\n    bigger_instances = [candidate for candidate in possible_instance_types if candidate in all_instance_types]\\n    if bigger_instances:\\n        return {**{'OriginalInstanceType': current_instance_type}, **{'TargetInstanceType': bigger_instances[0]}}\\n    else:\\n        raise Exception(\\\"Could not identify bigger instance type than current instance type: \\\" + current_instance_type)\\n\",\n      \"InputPayload\" : {\n        \"RequestInstanceType\" : \"{{ EC2InstanceTargetInstanceType }}\",\n        \"CurrentInstanceType\" : \"{{ DescribeEC2Instance.InstanceType }}\"\n      }\n    }\n  }, {\n    \"name\" : \"StopEC2Instance\",\n    \"description\" : \"Stop the Amazon EC2 instance.\",\n    \"action\" : \"aws:executeAwsApi\",\n    \"onFailure\" : \"Abort\",\n    \"inputs\" : {\n      \"Service\" : \"ec2\",\n      \"Api\" : \"StopInstances\",\n      \"InstanceIds\" : [ \"{{ EC2InstanceIdentifier }}\" ]\n    }\n  }, {\n    \"name\" : \"ValidateInstanceIsStopped\",\n    \"description\" : \"Validate that the Amazon EC2 instance is stopped.\",\n    \"action\" : \"aws:waitForAwsResourceProperty\",\n    \"timeoutSeconds\" : 900,\n    \"onFailure\" : \"Abort\",\n    \"inputs\" : {\n      \"Service\" : \"ec2\",\n      \"Api\" : \"DescribeInstanceStatus\",\n      \"InstanceIds\" : [ \"{{ EC2InstanceIdentifier }}\" ],\n      \"IncludeAllInstances\" : true,\n      \"PropertySelector\" : \"$.InstanceStatuses..InstanceState.Name\",\n      \"DesiredValues\" : [ \"stopped\" ]\n    }\n  }, {\n    \"name\" : \"ModifyInstanceAttribute\",\n    \"description\" : \"Modify the Amazon EC2 instance type to the target type.\",\n    \"action\" : \"aws:executeAwsApi\",\n    \"onFailure\" : \"Abort\",\n    \"inputs\" : {\n      \"Service\" : \"ec2\",\n      \"Api\" : \"ModifyInstanceAttribute\",\n      \"InstanceId\" : \"{{ EC2InstanceIdentifier }}\",\n      \"InstanceType\" : {\n        \"Value\" : \"{{ CalculateTargetType.TargetInstanceType }}\"\n      }\n    },\n    \"outputs\" : [ {\n      \"Selector\" : \"$.InstanceType\",\n      \"Name\" : \"InstanceType\",\n      \"Type\" : \"String\"\n    } ]\n  }, {\n    \"name\" : \"StartEC2Instance\",\n    \"description\" : \"Start the Amazon EC2 instance.\",\n    \"action\" : \"aws:executeAwsApi\",\n    \"onFailure\" : \"Abort\",\n    \"inputs\" : {\n      \"Service\" : \"ec2\",\n      \"Api\" : \"StartInstances\",\n      \"InstanceIds\" : [ \"{{ EC2InstanceIdentifier }}\" ]\n    }\n  }, {\n    \"name\" : \"ValidateInstanceIsAvailable\",\n    \"description\" : \"Assert that the Amazon EC2 instance is available.\",\n    \"action\" : \"aws:waitForAwsResourceProperty\",\n    \"timeoutSeconds\" : 900,\n    \"onFailure\" : \"Abort\",\n    \"inputs\" : {\n      \"Service\" : \"ec2\",\n      \"Api\" : \"DescribeInstanceStatus\",\n      \"InstanceIds\" : [ \"{{ EC2InstanceIdentifier }}\" ],\n      \"PropertySelector\" : \"$.InstanceStatuses..InstanceState.Name\",\n      \"DesiredValues\" : [ \"running\" ]\n    }\n  }, {\n    \"name\" : \"AssertInstanceType\",\n    \"description\" : \"Assert that the new Amazon EC2 instance type is correct.\",\n    \"action\" : \"aws:assertAwsResourceProperty\",\n    \"onFailure\" : \"Abort\",\n    \"inputs\" : {\n      \"Service\" : \"ec2\",\n      \"Api\" : \"DescribeInstances\",\n      \"InstanceIds\" : [ \"{{ EC2InstanceIdentifier }}\" ],\n      \"PropertySelector\" : \"$.Reservations[0].Instances[0].InstanceType\",\n      \"DesiredValues\" : [ \"{{ CalculateTargetType.TargetInstanceType }}\" ]\n    }\n  }, {\n    \"name\" : \"OutputRecoveryTime\",\n    \"description\" : \"Calculate execution time\",\n    \"action\" : \"aws:executeScript\",\n    \"outputs\" : [ {\n      \"Name\" : \"RecoveryTime\",\n      \"Selector\" : \"$.Payload\",\n      \"Type\" : \"Integer\"\n    } ],\n    \"inputs\" : {\n      \"Runtime\" : \"python3.8\",\n      \"Handler\" : \"recovery_time\",\n      \"Script\" : \"import logging\\nimport time\\nfrom datetime import datetime, timezone\\n\\nimport boto3\\nfrom botocore.exceptions import ClientError\\nfrom dateutil import parser\\n\\nlogger = logging.getLogger()\\nlogger.setLevel(logging.INFO)\\n\\n\\n\\ndef recovery_time(events, context):\\n    return (datetime.now(timezone.utc) - parser.parse(events['StartTime'])).seconds\",\n      \"InputPayload\" : {\n        \"StartTime\" : \"{{ RecordStartTime.StartTime }}\"\n      }\n    }\n  } ]\n}",
  "CreatedDate": "2023-06-21T10:38:52.245Z",
  "DisplayName": null,
  "DocumentFormat": {
    "Value": "JSON"
  },
  "DocumentType": {
    "Value": "Automation"
  },
  "DocumentVersion": "5",
  "Name": "AWSResilienceHub-ScaleUpEc2SOP_2020-05-20",
  "Requires": [],
  "ReviewStatus": null,
  "Status": {
    "Value": "Active"
  },
  "StatusInformation": null,
  "VersionName": null,
  "ResponseMetadata": {
    "RequestId": "8d37c2ba-ad0a-494e-8356-50fc82d054b3",
    "Metadata": {},
    "ChecksumAlgorithm": 0,
    "ChecksumValidationStatus": 0
  },
  "ContentLength": 11698,
  "HttpStatusCode": 200,
  "LoggedAt": "2023-06-26T07:13:34.9114006+00:00"
}
