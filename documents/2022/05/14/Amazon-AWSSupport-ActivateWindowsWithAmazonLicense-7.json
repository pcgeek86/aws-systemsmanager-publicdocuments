{
  "AttachmentsContent": [],
  "Content": "{\n  \"schemaVersion\": \"0.3\",\n  \"description\": \"Activates an EC2 Windows Server with the Amazon-provided license. If Windows is not activated, the document verifies, and when needed repairs, the Windows route table (route to Amazon KMS servers), the KMS settings (server and port), and attempts to activate Windows. Note: this document cannot be used on Bring Your Own License (BYOL) Windows instances. If you want to bring your own license, please review https://aws.amazon.com/windows/resources/licensing/.\",\n  \"assumeRole\": \"{{ AutomationAssumeRole }}\",\n  \"parameters\": {\n    \"InstanceId\": {\n      \"type\": \"String\",\n      \"description\": \"(Required) ID of your EC2 Windows managed instance.\",\n      \"allowedPattern\": \"^[m]{0,1}i-[a-z0-9]{8,17}$\"\n    },\n    \"ForceActivation\": {\n      \"type\": \"String\",\n      \"description\": \"(Optional) Set it to True if you want to proceed even if Windows is already activated.\",\n      \"default\": \"False\",\n      \"allowedValues\": [\n        \"True\",\n        \"False\"\n      ]\n    },\n    \"AllowOffline\": {\n      \"type\": \"String\",\n      \"description\": \"(Optional) Set it to true if you allow an offline Windows activation remediation in case the online troubleshooting fails, or the provided instance is not a managed instance. Note: The offline method requires the provided EC2 instance be stopped and then started. Data stored in instance store volumes will be lost. The public IP address will change if you are not using an Elastic IP.\",\n      \"default\": \"False\",\n      \"allowedValues\": [\n        \"True\",\n        \"False\"\n      ]\n    },\n    \"SubnetId\": {\n      \"type\": \"String\",\n      \"description\": \"(Optional) Offline only - The subnet ID for the EC2Rescue instance used to perform the offline troubleshooting. Use SelectedInstanceSubnet to use the same subnet as your instance, or CreateNewVPC to create a new VPC. IMPORTANT: The subnet must be in the same Availability Zone as InstanceId, and it must allow access to the SSM endpoints.\",\n      \"default\": \"CreateNewVPC\",\n      \"allowedPattern\": \"^SelectedInstanceSubnet$|^CreateNewVPC$|^subnet-[a-z0-9]{8,17}$\"\n    },\n    \"AutomationAssumeRole\": {\n      \"type\": \"String\",\n      \"description\": \"(Optional) The IAM role for this execution. If no role is specified, AWS Systems Manager Automation will use the permissions of the user that executes this document.\",\n      \"default\": \"\"\n    }\n  },\n  \"mainSteps\": [\n    {\n      \"name\": \"assertInstanceIsWindows\",\n      \"action\": \"aws:assertAwsResourceProperty\",\n      \"onFailure\": \"Abort\",\n      \"inputs\": {\n        \"Service\": \"ec2\",\n        \"Api\": \"DescribeInstances\",\n        \"InstanceIds\": [\n          \"{{ InstanceId }}\"\n        ],\n        \"PropertySelector\": \"$.Reservations[0].Instances[0].Platform\",\n        \"DesiredValues\": [\n          \"windows\"\n        ]\n      },\n      \"isCritical\": \"true\",\n      \"nextStep\": \"assertInstanceIsManagedInstance\"\n    },\n    {\n      \"name\": \"assertInstanceIsManagedInstance\",\n      \"action\": \"aws:assertAwsResourceProperty\",\n      \"onFailure\": \"step:assertAllowOffline\",\n      \"inputs\": {\n        \"Service\": \"ssm\",\n        \"Api\": \"DescribeInstanceInformation\",\n        \"InstanceInformationFilterList\": [\n          {\n            \"key\": \"InstanceIds\",\n            \"valueSet\": [\n              \"{{ InstanceId }}\"\n            ]\n          }\n        ],\n        \"PropertySelector\": \"$.InstanceInformationList[0].PingStatus\",\n        \"DesiredValues\": [\n          \"Online\"\n        ]\n      },\n      \"isCritical\": \"false\",\n      \"nextStep\": \"activateWindows\"\n    },\n    {\n      \"name\": \"activateWindows\",\n      \"action\": \"aws:runCommand\",\n      \"onFailure\": \"Abort\",\n      \"inputs\": {\n        \"DocumentName\": \"AWS-RunPowerShellScript\",\n        \"InstanceIds\": [\n          \"{{ InstanceId }}\"\n        ],\n        \"Parameters\": {\n          \"commands\": [\n            \"function Get-KMSKey { \",\n            \"    Param( \",\n            \"        [parameter(Mandatory = $true)] \",\n            \"        [String] $OSVersion \",\n            \"    ) \",\n            \"    #https://docs.microsoft.com/en-us/windows-server/get-started/kmsclientkeys \",\n            \"    $KMSLicenseKeys = @{ \",\n            \"        \\\"2008-STANDARD\\\"          = \\\"W7VD6-7JFBR-RX26B-YKQ3Y-6FFFJ\\\"; \",\n            \"        \\\"2008-STANDARD-HYPERV\\\"   = \\\"TM24T-X9RMF-VWXK6-X8JC9-BFGM2\\\"; \",\n            \"        \\\"2008-ENTERPRISE\\\"        = \\\"39BXF-X8Q23-P2WWT-38T2F-G3FPG\\\"; \",\n            \"        \\\"2008-ENTERPRISE-HYPERV\\\" = \\\"YQGMW-MPWTJ-34KDK-48M3W-X4Q6V\\\"; \",\n            \"        \\\"2008-DATACENTER\\\"        = \\\"22XQ2-VRXRG-P8D42-K34TD-G3QQC\\\"; \",\n            \"        \\\"2008-DATACENTER-HYPERV\\\" = \\\"7M67G-PC374-GR742-YH8V4-TCBY3\\\"; \",\n            \" \",\n            \"        \\\"2008R2-STANDARD\\\"        = \\\"YC6KT-GKW9T-YTKYR-T4X34-R7VHC\\\"; \",\n            \"        \\\"2008R2-ENTERPRISE\\\"      = \\\"489J6-VHDMP-X63PK-3K798-CPX3Y\\\"; \",\n            \"        \\\"2008R2-DATACENTER\\\"      = \\\"74YFP-3QFB3-KQT8W-PMXWJ-7M648\\\"; \",\n            \" \",\n            \"        \\\"2012-STANDARD\\\"          = \\\"XC9B7-NBPP2-83J2H-RHMBY-92BT4\\\"; \",\n            \"        \\\"2012-DATACENTER\\\"        = \\\"48HP8-DN98B-MYWDG-T2DCC-8W83P\\\"; \",\n            \" \",\n            \"        \\\"2012R2-STANDARD\\\"        = \\\"D2N9P-3P6X9-2R39C-7RTCD-MDVJX\\\"; \",\n            \"        \\\"2012R2-DATACENTER\\\"      = \\\"W3GGN-FT8W3-Y4M27-J84CP-Q3VJ9\\\"; \",\n            \" \",\n            \"        \\\"2016-DATACENTER\\\"        = \\\"CB7KF-BWN84-R7R2Y-793K2-8XDDG\\\"; \",\n            \"        \\\"2016-STANDARD\\\"          = \\\"WC2BQ-8NRM3-FDDYY-2BFGV-KHKQY\\\"; \",\n            \"        \\\"2016-ESSENTIALS\\\"        = \\\"JCKRF-N37P4-C2D82-9YXRT-4M63B\\\"; \",\n            \" \",\n            \"        \\\"2019-DATACENTER\\\"        = \\\"WMDGN-G9PQG-XVVXX-R3X43-63DFG\\\"; \",\n            \"        \\\"2019-STANDARD\\\"          = \\\"N69G4-B89J2-4G8F4-WWYCC-J464C\\\"; \",\n            \"        \\\"2019-ESSENTIALS\\\"        = \\\"WVDHN-86M7X-466P6-VHXV7-YY726\\\"; \",\n            \" \",\n            \"        # Windows Server, version 1709 \",\n            \"        \\\"10.0.16299-DATACENTER\\\"  = \\\"6Y6KB-N82V8-D8CQV-23MJW-BWTG6\\\"; \",\n            \"        \\\"10.0.16299-STANDARD\\\"    = \\\"DPCNP-XQFKJ-BJF7R-FRC8D-GF6G4\\\"; \",\n            \"        # Windows Server, version 1803 \",\n            \"        \\\"10.0.17134-DATACENTER\\\"  = \\\"2HXDN-KRXHB-GPYC7-YCKFJ-7FVDG\\\"; \",\n            \"        \\\"10.0.17134-STANDARD\\\"    = \\\"PTXN8-JFHJM-4WC78-MPCBR-9W4KR\\\"; \",\n            \"        # Windows Server, version 1809 \",\n            \"        \\\"10.0.17763-DATACENTER\\\"  = \\\"6NMRW-2C8FM-D24W7-TQWMY-CWH2D\\\"; \",\n            \"        \\\"10.0.17763-STANDARD\\\"    = \\\"N2KJX-J94YW-TQVFB-DG9YT-724CC\\\"; \",\n            \" \",\n            \"    } \",\n            \" \",\n            \"    $productName = $OSVersion.toUpper() \",\n            \"    $matchstr = \\\"Standard|Enterprise|Datacenter|Professional|Education|Essentials\\\".ToUpper() \",\n            \"    $verstr = \\\"2008 R2|2008|2012 R2|2012|2016|2019\\\" \",\n            \"    $productname -match $verstr | Out-Null \",\n            \"    if ($matches) { \",\n            \"        $winVer = $matches[0].Replace(\\\" \\\", \\\"\\\") \",\n            \"    } \",\n            \"    else { \",\n            \"        #https://docs.microsoft.com/en-us/windows-server/get-started/windows-server-release-info \",\n            \"        $winVer = (Get-WMIObject -Class Win32_OperatingSystem -Property Version).Version \",\n            \"    } \",\n            \"    $productname -match $matchstr | Out-Null \",\n            \"    $prodtype = $matches[0] \",\n            \"    $keyname = $winVer + \\\"-\\\" + $prodtype \",\n            \"    if ($winVer = \\\"2008\\\") { \",\n            \"        #Only 2008 has with and without hyper-v flavors. \",\n            \"        if (test-path 'HKLM:\\\\Software\\\\Microsoft\\\\Windows NT\\\\CurrentVersion\\\\Hyper-V') { \",\n            \"            $keyname = $keyname + \\\"-HYPERV\\\" \",\n            \"        } \",\n            \"    } \",\n            \"    if ($null -ne $KMSLicenseKeys[$keyname]) { \",\n            \"        $key = $KMSLicenseKeys[$keyname] \",\n            \"        return $key \",\n            \"         \",\n            \"    } \",\n            \"    else {throw \\\"No KMS key found for $OSVersion!\\\"} \",\n            \"} \",\n            \" \",\n            \"function Test-ActivationStatus { \",\n            \" \",\n            \"    $status = Get-WMIObject SoftwareLicensingProduct -Filter \\\"ApplicationID = '55c92734-d682-4d71-983e-d6ec3f16059f'\\\" | Where-Object { $_.licensestatus -eq 1 } \",\n            \"    if ($status) { \",\n            \"        return $true \",\n            \"    } \",\n            \"    else { \",\n            \"        return $false \",\n            \"    } \",\n            \" \",\n            \"} \",\n            \" \",\n            \"function Test-KMSReachability { \",\n            \"    Param( \",\n            \"        [parameter(Mandatory = $true)] \",\n            \"        [String] $KMSServer, \",\n            \"        [parameter(Mandatory = $false)] \",\n            \"        [Int32]    $KMSPort = 1688 \",\n            \"    ) \",\n            \" \",\n            \"    try { \",\n            \"        New-Object System.Net.Sockets.TCPClient -ArgumentList $KMSServer, $KMSPort | Out-Null \",\n            \"        return $true \",\n            \"    } \",\n            \"    catch { \",\n            \"        return $false \",\n            \"    } \",\n            \" \",\n            \"} \",\n            \" \",\n            \"function Test-SupportedOS { \",\n            \" \",\n            \"    # Check if the instance OS is 2008 and above \",\n            \"    $currentVersion = [System.Environment]::OSVersion.Version \",\n            \"    $minimumVersion = [System.Version] \\\"6.0\\\" \",\n            \"    if ($currentVersion -ge $minimumVersion) { \",\n            \"        return $true \",\n            \"    } \",\n            \"    else { \",\n            \"        return $false \",\n            \"    } \",\n            \" \",\n            \"} \",\n            \" \",\n            \"function Get-PrimaryInterface { \",\n            \" \",\n            \"    # Adding the Try Catch mechanism to support IMDSv2 \",\n            \"    try{ \",\n            \"        $macAddress = (Invoke-RestMethod -Uri \\\"http://169.254.169.254/latest/meta-data/mac\\\") \",\n            \"    } \",\n            \"    catch{ \",\n            \"        $token = Invoke-RestMethod -Headers @{\\\"X-aws-ec2-metadata-token-ttl-seconds\\\" = \\\"21600\\\"} -Method PUT \\u2013Uri \\\"http://169.254.169.254/latest/api/token\\\" \",\n            \"        $macAddress = (Invoke-RestMethod -Headers @{\\\"X-aws-ec2-metadata-token\\\" = $token} -Method GET -Uri \\\"http://169.254.169.254/latest/meta-data/mac\\\") \",\n            \"    } \",\n            \" \",\n            \"    $adapter = Get-WmiObject Win32_NetworkAdapterConfiguration | Where-Object { $_.MACAddress -eq $macAddress } \",\n            \"    $primaryNIC = Get-WMIObject -Class Win32_IP4RouteTable | Where-Object { $_.InterfaceIndex -eq $adapter.InterfaceIndex -and $_.destination -eq \\\"0.0.0.0\\\" -and $_.mask -eq \\\"0.0.0.0\\\"} |  Sort-Object Metric1 | Select-Object NextHop, InterfaceIndex \",\n            \"    return $primaryNIC  \",\n            \"} \",\n            \" \",\n            \"function Repair-AWSRoute { \",\n            \"    Param( \",\n            \"        [parameter(Mandatory = $true)] \",\n            \"        [String] $Destination \",\n            \"    ) \",\n            \" \",\n            \"    $primaryInterface = Get-PrimaryInterface \",\n            \" \",\n            \"    $currentRoute = Get-WMIObject -Class Win32_IP4RouteTable | Where-Object {$_.Name -eq $Destination -and $_.Mask -eq \\\"255.255.255.255\\\" -and $_.NextHop -eq $primaryInterface.NextHop} \",\n            \"    if ($currentRoute) { \",\n            \"        Write-Output (\\\"There is already a route to \\\" + $Destination + \\\". Skipping\\\") \",\n            \"    } \",\n            \"    else { \",\n            \"        Write-Output (\\\"Adding a route to \\\" + $Destination + \\\".\\\") \",\n            \"        & \\\"${env:SYSTEMROOT}\\\\system32\\\\route.exe\\\" -P ADD $Destination MASK 255.255.255.255 $primaryInterface.NextHop METRIC \\\"25\\\" IF $primaryInterface.InterfaceIndex > $null \",\n            \"    } \",\n            \" \",\n            \"    $wrongRoute = Get-WMIObject -Class Win32_IP4RouteTable | Where-Object {$_.Name -eq $Destination -and $_.Mask -eq \\\"255.255.255.255\\\" -and -not ($_.NextHop -eq $primaryInterface.NextHop)} \",\n            \"    if ($wrongRoute) { \",\n            \"        Write-Output (\\\"Removing incorrect route to \\\" + $Destination + \\\".\\\") \",\n            \"        & \\\"${env:SYSTEMROOT}\\\\system32\\\\route.exe\\\" DELETE $Destination MASK 255.255.255.255 $wrongRoute.NextHop  > $null \",\n            \"    } \",\n            \" \",\n            \"} \",\n            \" \",\n            \"function Repair-KMSSetting { \",\n            \"    Param( \",\n            \"        [parameter(Mandatory = $true)] \",\n            \"        [String] $KMSServer, \",\n            \"        [parameter(Mandatory = $true)] \",\n            \"        [Int32]    $KMSPort = 1688 \",\n            \"    ) \",\n            \" \",\n            \"    $key = \\\"HKLM:\\\\SOFTWARE\\\\Microsoft\\\\Windows NT\\\\CurrentVersion\\\\SoftwareProtectionPlatform\\\" \",\n            \"    $currentKMSSettings = (Get-ItemProperty -Path $key) \",\n            \"    $kmsServiceName = $currentKMSSettings.KeyManagementServiceName \",\n            \"    $kmsServicePort = $currentKMSSettings.KeyManagementServicePort \",\n            \"    if ($kmsServiceName -eq $KMSServer) { \",\n            \"        Write-Output (\\\"$key\\\\KeyManagementServiceName is already \\\" + $KMSServer + \\\". Skipping.\\\") \",\n            \"    } \",\n            \"    else { \",\n            \"        Write-Output (\\\"Setting $key\\\\KeyManagementServiceName to \\\" + $KMSServer + \\\".\\\") \",\n            \"        New-ItemProperty -Path $key -Name KeyManagementServiceName -Value $KMSServer -PropertyType String -Force > $null \",\n            \"    } \",\n            \" \",\n            \"    if ($kmsServicePort -eq $KMSPort) { \",\n            \"        Write-Output (\\\"$key\\\\KeyManagementServicePort is already \\\" + $KMSPort + \\\". Skipping.\\\") \",\n            \"    } \",\n            \"    else { \",\n            \"        Write-Output (\\\"Setting $key\\\\KeyManagementServicePort to \\\" + $KMSPort + \\\".\\\") \",\n            \"        New-ItemProperty -Path $key -Name KeyManagementServicePort -Value $KMSPort -PropertyType DWORD -Force > $null \",\n            \"    } \",\n            \" \",\n            \"} \",\n            \" \",\n            \"function Test-EC2Instance { \",\n            \"    if ([Environment]::GetEnvironmentVariable(\\\"AWS_SSM_INSTANCE_ID\\\") -like \\\"i-*\\\") { \",\n            \"        return $true \",\n            \"    } else { \",\n            \"        return $false \",\n            \"    } \",\n            \"} \",\n            \" \",\n            \"try { \",\n            \" \",\n            \"    $ForceActivationInput = \\\"{{ ForceActivation }}\\\" \",\n            \"    switch ($ForceActivationInput) { \",\n            \"        \\\"True\\\" { $ForceActivation = $True } \",\n            \"        \\\"False\\\" { $ForceActivation = $False } \",\n            \"        default { throw \\\"Unexpected input.\\\"}  \",\n            \"    } \",\n            \" \",\n            \"    if (Test-SupportedOS -and Test-EC2Instace) { \",\n            \"        #region Check Windows Activation status \",\n            \"        $OSversion = (Get-WMIObject -Class Win32_OperatingSystem).Caption \",\n            \"        Write-Output $OSversion \",\n            \"        Write-Output \\\"Determining current activation status...\\\" \",\n            \"        if (Test-ActivationStatus) { \",\n            \"            if ($ForceActivation) { \",\n            \"                Write-Output \\\"Windows is already activated. ForceActivation = True.\\\" \",\n            \"            } \",\n            \"            else { \",\n            \"                Write-Output \\\"Windows is already activated. No action needed.\\\" \",\n            \"                exit 0 \",\n            \"            } \",\n            \"        } \",\n            \"        else { \",\n            \"            Write-Output \\\"Windows is not activated.\\\" \",\n            \"        } \",\n            \"        #endregion \",\n            \" \",\n            \"        #region Activate Windows \",\n            \"        Repair-AWSRoute -Destination \\\"169.254.169.250\\\" \",\n            \"        Repair-AWSRoute -Destination \\\"169.254.169.251\\\" \",\n            \"        Repair-AWSRoute -Destination \\\"169.254.169.254\\\" \",\n            \"        Repair-KMSSetting -KMSServer \\\"169.254.169.250\\\" -KMSPort 1688 \",\n            \"        if (-not (Test-KMSReachability -KMSServer \\\"169.254.169.250\\\" -KMSPort 1688)) { \",\n            \"            Repair-KMSSetting -KMSServer \\\"169.254.169.251\\\" -KMSPort 1688 \",\n            \"            if (-not (Test-KMSReachability -KMSServer \\\"169.254.169.251\\\" -KMSPort 1688)) { \",\n            \"                throw \\\"Cannot reach Amazon KMS. Make sure no local software firewall is blocking traffic to 169.254.169.250 and 169.254.169.251 on TCP 1688, and that you have the latest network drivers installed. Note that you cannot activate Windows BYOL against Amazon KMS. If you want to bring your own license, please review https://aws.amazon.com/windows/resources/licensing/.\\\" \",\n            \"            } \",\n            \"            else { \",\n            \"                & cscript \\\"${env:SYSTEMROOT}\\\\system32\\\\slmgr.vbs\\\" /skms 169.254.169.251:1688 \",\n            \"            } \",\n            \"        } \",\n            \"        else { \",\n            \"            & cscript \\\"${env:SYSTEMROOT}\\\\system32\\\\slmgr.vbs\\\" /skms 169.254.169.250:1688 \",\n            \"        } \",\n            \"        Write-Output \\\"Activating Windows.\\\" \",\n            \"        $key = Get-KMSKey -OSVersion $OSversion \",\n            \"        & cscript \\\"${env:SYSTEMROOT}\\\\system32\\\\slmgr.vbs\\\" /ipk $key \",\n            \"        & cscript \\\"${env:SYSTEMROOT}\\\\system32\\\\slmgr.vbs\\\" /ato \",\n            \"        if (!(Test-ActivationStatus)) { \",\n            \"            throw \\\"Windows is not activated.\\\" \",\n            \"        } \",\n            \"        #endregion \",\n            \"    } \",\n            \"    else { \",\n            \"        throw \\\"You are not running this document on an EC2 instance or your OS is unsupported for volume-activation scenarios.\\\" \",\n            \"    } \",\n            \" \",\n            \"} \",\n            \"catch { \",\n            \" \",\n            \"    Write-Output $_.Exception.Message \",\n            \"    Exit 1 \",\n            \" \",\n            \"}\"\n          ]\n        }\n      },\n      \"isCritical\": \"true\",\n      \"isEnd\": \"true\"\n    },\n    {\n      \"name\": \"assertAllowOffline\",\n      \"action\": \"aws:assertAwsResourceProperty\",\n      \"onFailure\": \"Abort\",\n      \"inputs\": {\n        \"Service\": \"ssm\",\n        \"Api\": \"GetAutomationExecution\",\n        \"AutomationExecutionId\": \"{{ automation:EXECUTION_ID }}\",\n        \"PropertySelector\": \"$.AutomationExecution.Parameters.AllowOffline[0]\",\n        \"DesiredValues\": [\n          \"True\"\n        ]\n      },\n      \"isCritical\": \"true\",\n      \"nextStep\": \"activateWindowsOffline\"\n    },\n    {\n      \"name\": \"activateWindowsOffline\",\n      \"action\": \"aws:executeAutomation\",\n      \"onFailure\": \"Continue\",\n      \"inputs\": {\n        \"RuntimeParameters\": {\n          \"InstanceId\": [\n            \"{{ InstanceId }}\"\n          ],\n          \"OfflineScript\": [\n            \"JGN1cnJlbnRWZXJzaW9uID0gW1N5c3RlbS5WZXJzaW9uXSAkZW52OkVDMlJFU0NVRV9PRkZMSU5FX0tFUk5FTF9WRVINCiRlYzJMYXVuY2hPU1ZlcnNpb24gPSBbU3lzdGVtLlZlcnNpb25dICIxMC4wIg0KaWYgKCRjdXJyZW50VmVyc2lvbiAtZ2UgJGVjMkxhdW5jaE9TVmVyc2lvbikgew0KICAgIFdyaXRlLUhvc3QgIkNvbmZpZ3VyaW5nIEVDMkxhdW5jaCB0byByZXBhaXIgV2luZG93cyBhY3RpdmF0aW9uIGF0IG5leHQgYm9vdCINCiAgICAkZml4V2luZG93c0FjdGl2YXRpb25EU0NTY3JpcHQgPSBAIg0KQ29uZmlndXJhdGlvbiBGaXhXaW5kb3dzQWN0aXZhdGlvbg0Kew0KICAgIEltcG9ydC1Ec2NSZXNvdXJjZSAtTW9kdWxlTmFtZSBQU0Rlc2lyZWRTdGF0ZUNvbmZpZ3VyYXRpb24NCiAgICBOb2RlIGxvY2FsaG9zdA0KICAgIHsNCiAgICAgICAgU2NyaXB0IEZpeFdpbmRvd3NBY3RpdmF0aW9uIHsNCiAgICAgICAgICAgIEdldFNjcmlwdCAgPSB7DQogICAgICAgICAgICAgICAgcmV0dXJuIEB7DQogICAgICAgICAgICAgICAgICAgICdSZXN1bHQnID0gJ1dpbmRvd3MgYWN0aXZhdGlvbiBmaXggYXBwbGllZCcNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICB9DQogICAgICAgICAgICBUZXN0U2NyaXB0ID0gew0KICAgICAgICAgICAgICAgIGAkc3RhdHVzID0gR2V0LVdNSU9iamVjdCBTb2Z0d2FyZUxpY2Vuc2luZ1Byb2R1Y3QgLUZpbHRlciAiQXBwbGljYXRpb25JRCA9ICc1NWM5MjczNC1kNjgyLTRkNzEtOTgzZS1kNmVjM2YxNjA1OWYnIiB8IFdoZXJlLU9iamVjdCB7IGAkXy5saWNlbnNlc3RhdHVzIC1lcSAxIH0NCiAgICAgICAgICAgICAgICBpZiAoYCRzdGF0dXMpIHsNCiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGAkdHJ1ZQ0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICBlbHNlIHsNCiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGAkZmFsc2UNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICB9DQogICAgICAgICAgICBTZXRTY3JpcHQgID0gew0KICAgICAgICAgICAgICAgIFdyaXRlLVZlcmJvc2UgIlJ1bm5pbmcgc2NyaXB0IHRvIGZpeCBXaW5kb3dzIGFjdGl2YXRpb24iDQogICAgICAgICAgICAgICAgQzpcUHJvZ3JhbURhdGFcQW1hem9uXEVDMi1XaW5kb3dzXExhdW5jaFxTY3JpcHRzXEluaXRpYWxpemVJbnN0YW5jZS5wczENCiAgICAgICAgICAgICAgICAmIGNzY3JpcHQgImAke2VudjpTWVNURU1ST09UfVxzeXN0ZW0zMlxzbG1nci52YnMiIC9hdG8NCiAgICAgICAgICAgIH0NCiAgICAgICAgfQ0KICAgIH0NCn0NCiJADQoNCiAgICBXcml0ZS1PdXRwdXQgJ3sgDQogICAgInNldENvbXB1dGVyTmFtZSI6IGZhbHNlLA0KICAgICJzZXRXYWxscGFwZXIiOiB0cnVlLA0KICAgICJhZGREbnNTdWZmaXhMaXN0IjogdHJ1ZSwNCiAgICAiZXh0ZW5kQm9vdFZvbHVtZVNpemUiOiB0cnVlLA0KICAgICJhZG1pblBhc3N3b3JkVHlwZSI6ICJEb05vdGhpbmciLA0KICAgICJhZG1pblBhc3N3b3JkIjogICIiDQogICAgfScgPiAke2VudjpFQzJSRVNDVUVfT0ZGTElORV9EUklWRX1Qcm9ncmFtRGF0YVxBbWF6b25cRUMyLVdpbmRvd3NcTGF1bmNoXENvbmZpZ1xMYXVuY2hDb25maWcuanNvbg0KDQogICAgSW52b2tlLUV4cHJlc3Npb24gJGZpeFdpbmRvd3NBY3RpdmF0aW9uRFNDU2NyaXB0DQogICAgRml4V2luZG93c0FjdGl2YXRpb24gfCBPdXQtTnVsbA0KICAgIENvcHktSXRlbSAuXEZpeFdpbmRvd3NBY3RpdmF0aW9uXGxvY2FsaG9zdC5tb2YgLURlc3RpbmF0aW9uICIke2VudjpFQzJSRVNDVUVfT0ZGTElORV9TWVNURU1fUk9PVH1cU3lzdGVtMzJcQ29uZmlndXJhdGlvblxQZW5kaW5nLm1vZiIgLUZvcmNlDQp9DQplbHNlIHsNCiAgICBXcml0ZS1Ib3N0ICJDb25maWd1cmluZyBFQzJDb25maWcgdG8gcmVwYWlyIFdpbmRvd3MgYWN0aXZhdGlvbiBhdCBuZXh0IGJvb3QiDQogICAgJGNvbmZpZ3VyYXRpb25GaWxlID0gIiR7ZW52OkVDMlJFU0NVRV9PRkZMSU5FX1BST0dSQU1fRklMRVNfRElSfVxBbWF6b25cRWMyQ29uZmlnU2VydmljZVxTZXR0aW5nc1xjb25maWcueG1sIg0KICAgIFt4bWxdJHhtbCA9IEdldC1Db250ZW50ICRjb25maWd1cmF0aW9uRmlsZQ0KICAgICR4bWwuRWMyQ29uZmlndXJhdGlvblNldHRpbmdzLlBsdWdpbnMuUGx1Z2luIHwgV2hlcmUtT2JqZWN0IHsgJF8uTmFtZSAtZXEgIkVjMldpbmRvd3NBY3RpdmF0ZSIgfSB8IEZvckVhY2gtT2JqZWN0IHsgJF8uU3RhdGUgPSAiRW5hYmxlZCIgfQ0KICAgICR4bWwuRWMyQ29uZmlndXJhdGlvblNldHRpbmdzLkdsb2JhbFNldHRpbmdzLlNob3VsZEFkZFJvdXRlcyA9ICJ0cnVlIg0KICAgICR4bWwuU2F2ZSgkY29uZmlndXJhdGlvbkZpbGUpDQp9\"\n          ],\n          \"SubnetId\": [\n            \"{{ SubnetId }}\"\n          ],\n          \"AutomationAssumeRole\": [\n            \"{{ AutomationAssumeRole }}\"\n          ],\n          \"EC2RescueInstanceType\": [\n            \"t2.large\"\n          ]\n        },\n        \"DocumentName\": \"AWSSupport-StartEC2RescueWorkflow\"\n      },\n      \"isCritical\": \"true\",\n      \"nextStep\": \"getActivateWindowsOfflineResult\"\n    },\n    {\n      \"name\": \"getActivateWindowsOfflineResult\",\n      \"action\": \"aws:executeAwsApi\",\n      \"onFailure\": \"Abort\",\n      \"inputs\": {\n        \"Service\": \"ssm\",\n        \"Api\": \"GetAutomationExecution\",\n        \"AutomationExecutionId\": \"{{ activateWindowsOffline.ExecutionId }}\"\n      },\n      \"outputs\": [\n        {\n          \"Name\": \"Output\",\n          \"Selector\": \"$.AutomationExecution.Outputs.'runScriptForWindows.Output'[0]\",\n          \"Type\": \"String\"\n        }\n      ],\n      \"isCritical\": \"false\",\n      \"isEnd\": \"true\"\n    }\n  ],\n  \"outputs\": [\n    \"activateWindows.Output\",\n    \"getActivateWindowsOfflineResult.Output\"\n  ]\n}",
  "CreatedDate": "2022-03-24T09:29:17.064Z",
  "DisplayName": null,
  "DocumentFormat": {
    "Value": "JSON"
  },
  "DocumentType": {
    "Value": "Automation"
  },
  "DocumentVersion": "7",
  "Name": "AWSSupport-ActivateWindowsWithAmazonLicense",
  "Requires": [],
  "ReviewStatus": null,
  "Status": {
    "Value": "Active"
  },
  "StatusInformation": null,
  "VersionName": null,
  "ResponseMetadata": {
    "RequestId": "d5323071-d470-41a8-bb88-2a5410243d5e",
    "Metadata": {},
    "ChecksumAlgorithm": 0,
    "ChecksumValidationStatus": 0
  },
  "ContentLength": 25354,
  "HttpStatusCode": 200,
  "LoggedAt": "2022-05-14T07:19:40.1817129+00:00"
}
