{
  "AttachmentsContent": [],
  "Content": "{\n  \"description\" : \"## Name\\n  AWS-QueryCloudTrailLogs.\\n\\n## Intent\\n  Creates an Athena table from a specified s3 path of cloudtrail logs and Run SQL queries against it and then deletes the table.\\n\\n## Notes\\n  * No need to specify the database name in the query. The query runs against the 'default' database.\\n  * The table name in the query must be the same as the TableName parameter.  \\n  * If the Output bucket path is not provided, then the document will create a bucket for the user and delete it at the end of the document execution.\\n\\n## Permissions required for AutomationAssumeRole\\n  * s3:PutObject.\\n  * s3:GetObject.\\n  * s3:CreateBucket.\\n  * s3:ListBucketMultipartUploads.\\n  * s3:AbortMultipartUpload.\\n  * s3:ListBucket.\\n  * s3:GetBucketLocation.\\n  * s3:ListMultipartUploadParts.\\n  * athena:StartQueryExecution.\\n  * athena:GetQueryExecution.\\n  * athena:GetQueryResults.\\n  * glue:GetTable.\\n  * glue:CreateTable.\\n  * glue:DeleteTable.\\n  * glue:GetPartitions.\\n  * glue:GetDatabase.\",\n  \"schemaVersion\" : \"0.3\",\n  \"assumeRole\" : \"{{ AutomationAssumeRole }}\",\n  \"parameters\" : {\n    \"Query\" : {\n      \"type\" : \"String\",\n      \"description\" : \"(Required) The query to be executed.\",\n      \"allowedPattern\" : \"^.{1,262144}$\"\n    },\n    \"SourceBucketPath\" : {\n      \"type\" : \"String\",\n      \"description\" : \"(Required) The bucket path of the logs where the queries are executed against. example s3 uri: (s3://bucket-name/).\",\n      \"allowedPattern\" : \"(s3:\\\\/\\\\/)?(.*)\"\n    },\n    \"TableName\" : {\n      \"type\" : \"String\",\n      \"description\" : \"(Optional) The table name that will be created from the cloudtrail logs.\",\n      \"default\" : \"cloudtrail_logs\",\n      \"allowedPattern\" : \"[-_a-zA-Z0-9]*\"\n    },\n    \"AutomationAssumeRole\" : {\n      \"type\" : \"AWS::IAM::Role::Arn\",\n      \"description\" : \"(Optional) The ARN of the role that allows Automation to perform the actions on your behalf.\",\n      \"default\" : \"\",\n      \"allowedPattern\" : \"^$|arn:(aws[a-zA-Z-]*)?:iam::\\\\d{12}:role\\\\/?[a-zA-Z_0-9+=,.@\\\\-_\\\\/]+\"\n    }\n  },\n  \"mainSteps\" : [ {\n    \"name\" : \"CheckSourceBucketPath\",\n    \"action\" : \"aws:executeScript\",\n    \"onFailure\" : \"Abort\",\n    \"timeoutSeconds\" : 300,\n    \"description\" : \"## CheckSourceBucketPath.\\nChecking Source Bucket Path.\\n\",\n    \"inputs\" : {\n      \"Runtime\" : \"python3.8\",\n      \"Handler\" : \"check_source_bucket_path\",\n      \"InputPayload\" : {\n        \"SourceBucketPath\" : \"{{SourceBucketPath}}\",\n        \"Id\" : \"{{automation:EXECUTION_ID}}\"\n      },\n      \"Script\" : \"import re\\nimport boto3\\nfrom botocore.exceptions import ClientError\\ns3_client = boto3.resource(\\\"s3\\\")\\ndef check_source_bucket_path(event, context):\\n    bucket_name = re.search(r\\\"(?<=s3:\\\\/\\\\/)[^\\\\/]+\\\", event[\\\"SourceBucketPath\\\"]).group(0)\\n    try:\\n        s3_client.meta.client.head_bucket(Bucket=bucket_name)\\n        print(\\\"Bucket exists.\\\", bucket_name)\\n    except ClientError as error:\\n        error_code = int(error.response[\\\"Error\\\"][\\\"Code\\\"])\\n        if error_code == 403:\\n            print(\\\"Private Bucket. Forbidden Access! \\\", bucket_name)\\n        elif error_code == 404:\\n            print(\\\"Bucket Does Not Exist!\\\", bucket_name)\\n    return {\\\"bucket_path\\\": event[\\\"SourceBucketPath\\\"]}\\n\"\n    },\n    \"outputs\" : [ {\n      \"Name\" : \"bucket_path\",\n      \"Selector\" : \"$.Payload.bucket_path\",\n      \"Type\" : \"String\"\n    } ]\n  }, {\n    \"name\" : \"CreateTable\",\n    \"timeoutSeconds\" : 300,\n    \"description\" : \"## CreateTable.\\nCreating Tables.\\n\",\n    \"action\" : \"aws:executeAwsApi\",\n    \"onFailure\" : \"Abort\",\n    \"inputs\" : {\n      \"Service\" : \"athena\",\n      \"Api\" : \"StartQueryExecution\",\n      \"QueryString\" : \" CREATE EXTERNAL TABLE {{TableName}}( eventVersion STRING, userIdentity STRUCT< type: STRING, principalId: STRING, arn: STRING, accountId: STRING, invokedBy: STRING, accessKeyId: STRING, userName: STRING, sessionContext: STRUCT< attributes: STRUCT< mfaAuthenticated: STRING, creationDate: STRING>, sessionIssuer: STRUCT< type: STRING, principalId: STRING, arn: STRING, accountId: STRING, userName: STRING>>>, eventTime STRING, eventSource STRING, eventName STRING, awsRegion STRING, sourceIpAddress STRING, userAgent STRING, errorCode STRING, errorMessage STRING, requestParameters STRING, responseElements STRING, additionalEventData STRING, requestId STRING, eventId STRING, readOnly STRING, resources ARRAY<STRUCT< arn: STRING, accountId: STRING, type: STRING>>, eventType STRING, apiVersion STRING, recipientAccountId STRING, serviceEventDetails STRING, sharedEventID STRING, vpcEndpointId STRING ) ROW FORMAT SERDE 'com.amazon.emr.hive.serde.CloudTrailSerde' STORED AS INPUTFORMAT 'com.amazon.emr.cloudtrail.CloudTrailInputFormat' OUTPUTFORMAT 'org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat' LOCATION '{{SourceBucketPath}}' \",\n      \"ResultConfiguration\" : {\n        \"OutputLocation\" : \"{{CheckSourceBucketPath.bucket_path}}\"\n      }\n    }\n  }, {\n    \"name\" : \"ExecuteQuery\",\n    \"timeoutSeconds\" : 300,\n    \"description\" : \"## ExecuteQuery.\\nExecuting Tables.\\n\",\n    \"action\" : \"aws:executeAwsApi\",\n    \"onFailure\" : \"step:WaitForQueryToFinish\",\n    \"inputs\" : {\n      \"Service\" : \"athena\",\n      \"Api\" : \"StartQueryExecution\",\n      \"QueryString\" : \"{{Query}}\",\n      \"ResultConfiguration\" : {\n        \"OutputLocation\" : \"{{CheckSourceBucketPath.bucket_path}}\"\n      }\n    },\n    \"outputs\" : [ {\n      \"Name\" : \"queryExecutionId\",\n      \"Selector\" : \"$.QueryExecutionId\",\n      \"Type\" : \"String\"\n    } ]\n  }, {\n    \"name\" : \"WaitForQueryToFinish\",\n    \"action\" : \"aws:executeScript\",\n    \"onFailure\" : \"step:GetQueryResults\",\n    \"timeoutSeconds\" : 600,\n    \"description\" : \"## WaitForQueryToFinish.\\nWait For Query To Finish.\\n\",\n    \"inputs\" : {\n      \"Runtime\" : \"python3.8\",\n      \"Handler\" : \"wait_for_query_results\",\n      \"InputPayload\" : {\n        \"query_execution_id\" : \"{{ExecuteQuery.queryExecutionId}}\"\n      },\n      \"Script\" : \"import time\\nimport boto3\\nathena_client = boto3.client(\\\"athena\\\")\\ndef wait_for_query_results(event, context):\\n    status = \\\"RUNNING\\\"\\n    iterations = 180\\n    while iterations > 0:\\n      iterations -= 1\\n      response = athena_client.get_query_execution(\\n      QueryExecutionId=event[\\\"query_execution_id\\\"]\\n      )\\n      status = response[\\\"QueryExecution\\\"][\\\"Status\\\"][\\\"State\\\"]\\n      if (status == \\\"FAILED\\\") or (status == \\\"CANCELLED\\\"):\\n        error_message = response[\\\"QueryExecution\\\"][\\\"Status\\\"][\\\"StateChangeReason\\\"]\\n        raise Exception(error_message)\\n      elif status == \\\"SUCCEEDED\\\":\\n        return \\\"Success\\\"\\n      else:\\n        time.sleep(2)\\n\"\n    }\n  }, {\n    \"name\" : \"GetQueryResults\",\n    \"timeoutSeconds\" : 300,\n    \"action\" : \"aws:executeAwsApi\",\n    \"description\" : \"## GetQueryResults.\\nGet Query Results.\\n\",\n    \"onFailure\" : \"step:DeleteTable\",\n    \"inputs\" : {\n      \"Service\" : \"athena\",\n      \"Api\" : \"GetQueryResults\",\n      \"QueryExecutionId\" : \"{{ExecuteQuery.queryExecutionId}}\"\n    },\n    \"outputs\" : [ {\n      \"Name\" : \"result\",\n      \"Selector\" : \"$.ResultSet.Rows\",\n      \"Type\" : \"MapList\"\n    } ]\n  }, {\n    \"name\" : \"DeleteTable\",\n    \"timeoutSeconds\" : 300,\n    \"action\" : \"aws:executeAwsApi\",\n    \"description\" : \"## DeleteTable.\\nDeleting Table.\\n\",\n    \"onFailure\" : \"Abort\",\n    \"inputs\" : {\n      \"Service\" : \"athena\",\n      \"Api\" : \"StartQueryExecution\",\n      \"QueryString\" : \"DROP TABLE {{TableName}}\",\n      \"ResultConfiguration\" : {\n        \"OutputLocation\" : \"{{CheckSourceBucketPath.bucket_path}}\"\n      }\n    }\n  } ],\n  \"outputs\" : [ \"GetQueryResults.result\" ]\n}",
  "CreatedDate": "2023-03-14T16:07:37.691Z",
  "DisplayName": null,
  "DocumentFormat": {
    "Value": "JSON"
  },
  "DocumentType": {
    "Value": "Automation"
  },
  "DocumentVersion": "1",
  "Name": "AWS-QueryCloudTrailLogs",
  "Requires": [],
  "ReviewStatus": null,
  "Status": {
    "Value": "Active"
  },
  "StatusInformation": null,
  "VersionName": null,
  "ResponseMetadata": {
    "RequestId": "2b55c01b-b906-42a8-8a9d-1fc6925fd33a",
    "Metadata": {},
    "ChecksumAlgorithm": 0,
    "ChecksumValidationStatus": 0
  },
  "ContentLength": 8414,
  "HttpStatusCode": 200,
  "LoggedAt": "2023-05-03T07:11:08.0029859+00:00"
}
