{
  "AttachmentsContent": [],
  "Content": "{\n    \"schemaVersion\": \"1.2\",\n    \"description\": \"Enable or disable automatic Windows Updates.\",\n    \"parameters\": {\n        \"updateLevel\": {\n            \"type\": \"String\",\n            \"description\": \"(Required) Install Updates Automatically: Windows automatically downloads and installs updates. If an update requires a reboot, the computer is automatically rebooted 15 minutes after updates have been installed. Never Check For Updates: Windows never checks for or downloads updates.\",\n            \"allowedValues\": [\n                \"InstallUpdatesAutomatically\",\n                \"NeverCheckForUpdates\"\n            ]\n        },\n        \"scheduledInstallDay\": {\n            \"type\": \"String\",\n            \"default\": \"Sunday\",\n            \"description\": \"(Optional) The day of the week when you want Windows to download and install updates. Applies only if Install Updates Automatically is selected. Default is Sunday.\",\n            \"allowedValues\": [\n                \"Daily\",\n                \"Sunday\",\n                \"Monday\",\n                \"Tuesday\",\n                \"Wednesday\",\n                \"Thursday\",\n                \"Friday\",\n                \"Saturday\"\n            ]\n        },\n        \"scheduledInstallTime\": {\n            \"type\": \"String\",\n            \"default\": \"03:00\",\n            \"description\": \"(Optional) The time of day when you want Windows to download and install updates. Applies only if Install Updates Automatically is selected. Default is 03:00.\",\n            \"allowedValues\": [\n                \"00:00\",\n                \"01:00\",\n                \"02:00\",\n                \"03:00\",\n                \"04:00\",\n                \"05:00\",\n                \"06:00\",\n                \"07:00\",\n                \"08:00\",\n                \"09:00\",\n                \"10:00\",\n                \"11:00\",\n                \"12:00\",\n                \"13:00\",\n                \"14:00\",\n                \"15:00\",\n                \"16:00\",\n                \"17:00\",\n                \"18:00\",\n                \"19:00\",\n                \"20:00\",\n                \"21:00\",\n                \"22:00\",\n                \"23:00\"\n            ]\n        }\n    },\n    \"runtimeConfig\": {\n        \"aws:runPowerShellScript\": {\n            \"properties\": [\n                {\n                    \"id\": \"0.aws:runPowerShellScript\",\n                    \"runCommand\": [\n                        \"# Check the OS version\",\n                        \"if ([Environment]::OSVersion.Version.Major -le 5) {\",\n                        \"    Write-Error 'This command is not supported on Windows 2003 or lower.'\",\n                        \"    exit -1\",\n                        \"} elseif ([Environment]::OSVersion.Version -ge \\\"10.0\\\") {\",\n                        \"    $sku = (Get-CimInstance -ClassName Win32_OperatingSystem).OperatingSystemSKU\",\n                        \"    if ($sku -eq 143 -or $sku -eq 144) {\",\n                        \"        Write-Host \\\"This command is not supported on Windows 2016 Nano Server.\\\"\",\n                        \"        exit -1\",\n                        \"    }\",\n                        \"}\",\n                        \"\",\n                        \"$configureWindowsUpdateFileVersion = 'Amazon.ConfigureWindowsUpdate-1.2.zip'\",\n                        \"$configureWindowsUpdateFileHash = '2f67fedbc27a405b0adafd3e8ecfefa877a6219e78abd3abecea4157b37edae5'\",\n                        \"$tempLocation = [Environment]::GetEnvironmentVariable('Temp') + '\\\\' + $configureWindowsUpdateFileVersion\",\n                        \"$powerShellModuleLocation = [Environment]::GetEnvironmentVariable('Windir') + '\\\\System32\\\\WindowsPowerShell\\\\v1.0\\\\Modules'\",\n                        \"function ExtractZipCoreOs ([string]$zipFilePath, [string]$destPath) {\",\n                        \"    try\",\n                        \"    {\",\n                        \"        [System.Reflection.Assembly]::LoadWithPartialName(\\\"System.IO.Compression.FileSystem\\\") | Out-Null\",\n                        \"\",\n                        \"        $zip = [System.IO.Compression.ZipFile]::OpenRead($zipFilePath)\",\n                        \"\",\n                        \"        foreach ($item in $zip.Entries) {\",\n                        \"            $extractedPath = Join-Path $destPath $item.FullName\",\n                        \"\",\n                        \"            if ($item.Length -eq 0) {\",\n                        \"                if ((Test-Path $extractedPath) -eq 0) {\",\n                        \"                    mkdir $extractedPath | Out-Null\",\n                        \"                }\",\n                        \"            } else {\",\n                        \"                $fileParent = Split-Path $extractedPath\",\n                        \"\",\n                        \"                if ((Test-Path $fileParent) -eq 0) {\",\n                        \"                    mkdir $fileParent | Out-Null\",\n                        \"                }\",\n                        \"\",\n                        \"                [System.IO.Compression.ZipFileExtensions]::ExtractToFile($item, $extractedPath, $true)\",\n                        \"            }\",\n                        \"        }\",\n                        \"    } \",\n                        \"    catch\",\n                        \"    {\",\n                        \"        throw \\\"Error encountered when extracting ConfigureWindowsUpdate zip file.`n$($_.Exception.Message)\\\"\",\n                        \"    }\",\n                        \"    finally\",\n                        \"    {\",\n                        \"        $zip.Dispose()\",\n                        \"    }\",\n                        \"}\",\n                        \"function GetRegion {\",\n                        \"    try {\",\n                        \"        Write-Host 'Obtaining instance region from SSM agent or instance metadata.'\",\n                        \"        $region = $env:AWS_SSM_REGION_NAME\",\n                        \"\",\n                        \"        if ($region -eq $null) {\",\n                        \"            $tokenUrl = 'http://169.254.169.254/latest/api/token'\",\n                        \"            $tokenHeader = @{'X-aws-ec2-metadata-token-ttl-seconds' = '21600'}\",\n                        \"            $token = $(Invoke-RestMethod -Method PUT -Headers $tokenHeader -uri $tokenUrl).toString()\",\n                        \"            $metadataHeader = @{'X-aws-ec2-metadata-token' = $token}\",\n                        \"            $region = ((Invoke-WebRequest -UseBasicParsing -Headers $metadataHeader -uri $metadataUrl).Content | ConvertFrom-Json).region\",\n                        \"        }\",\n                        \"\",\n                        \"        if (($region -eq $null) -or ($region -eq '')) {\",\n                        \"            throw \\\"Region could not be determined from agent environment variable or metadata.\\\"\",\n                        \"        }\",\n                        \"\",\n                        \"        $region\",\n                        \"    } catch {\",\n                        \"        throw \\\"An error occurred while determining the region.`n$($_.Exception.Message)\\\"\",\n                        \"    }\",\n                        \"}\",\n                        \"function GetS3DownloadUrl ([string]$appPath, [string]$fileVersion) {\",\n                        \"    $region = GetRegion\",\n                        \"\",\n                        \"    if ($region.StartsWith('cn-')) {\",\n                        \"        # China endpoint\",\n                        \"        $s3PrefixUrl = 'https://s3.{0}.amazonaws.com.cn/aws-ssm-{0}/'\",\n                        \"    } elseif ($region.StartsWith('us-gov')) {\",\n                        \"        # GovCloud endpoint\",\n                        \"        $s3PrefixUrl = 'https://s3-fips-{0}.amazonaws.com/aws-ssm-{0}/'\",\n                        \"    } else {\",\n                        \"        # Public AWS endpoint\",\n                        \"        $s3PrefixUrl = 'https://s3.dualstack.{0}.amazonaws.com/aws-ssm-{0}/'\",\n                        \"    }\",\n                        \"\",\n                        \"    $s3Location = ($s3PrefixUrl + $appPath + $fileVersion) -f $region\",\n                        \"    $s3Location\",\n                        \"}\",\n                        \"\",\n                        \"try {\",\n                        \"    $s3Location = GetS3DownloadUrl 'aws-configurewindowsupdate/' $configureWindowsUpdateFileVersion\",\n                        \"\",\n                        \"    Write-Host 'Downloading ConfigureWindowsUpdate PowerShell module from S3' $region $s3Location\",\n                        \"    Start-BitsTransfer -Source $s3Location -Destination $tempLocation\",\n                        \"    Write-Host 'Verifying SHA 256 of the ConfigureWindowsUpdate PowerShell module zip file.'\",\n                        \"    $fileStream = New-Object System.IO.FileStream($tempLocation, [System.IO.FileMode]::Open, [System.IO.FileAccess]::Read)\",\n                        \"    $sha256 = [System.Security.Cryptography.HashAlgorithm]::Create('System.Security.Cryptography.SHA256CryptoServiceProvider')\",\n                        \"    $sourceHash = [System.BitConverter]::ToString($sha256.ComputeHash($fileStream), 0).Replace('-', '').ToLower()\",\n                        \"    $sha256.Dispose()\",\n                        \"    $fileStream.Dispose()\",\n                        \"    if ($sourceHash -ne $configureWindowsUpdateFileHash) {\",\n                        \"        Write-Error -Message 'The SHA of the PowerShell module does not pass match the expected value.' -Category InvalidResult  \",\n                        \"        rm $tempLocation\",\n                        \"        exit 1\",\n                        \"    }\",\n                        \"    Write-Host 'Extracting ConfigureWindowsUpdate zip file contents to the Windows PowerShell module folder.'\",\n                        \"    try {\",\n                        \"        (New-Object -Com Shell.Application).namespace($powerShellModuleLocation).CopyHere((New-Object -Com Shell.Application).namespace($tempLocation).Items(), 16)\",\n                        \"    } catch [Exception] {\",\n                        \"        ExtractZipCoreOs $tempLocation $powerShellModuleLocation\",\n                        \"    }\",\n                        \"    rm $tempLocation\",\n                        \"    Write-Host 'Successfully downloaded and installed PowerShell module for the AWS-ConfigureWindowsUpdate document.'\",\n                        \"} catch [Exception] {\",\n                        \"    $exceptionMessage = 'Exception thrown while downloading ConfigureWindowsUpdate PowerShell module with message: {0}' -f $_.Exception.Message \",\n                        \"    Write-Error $exceptionMessage\",\n                        \"    if (Test-Path $tempLocation) {\",\n                        \"        rm $tempLocation\",\n                        \"    }\",\n                        \"    exit 1\",\n                        \"}\",\n                        \"try {\",\n                        \"    $datetime = [DateTime]::MinValue\",\n                        \"    if ([DateTime]::TryParse('{{ scheduledInstallTime }}', [ref]$datetime)) {\",\n                        \"        Set-WindowsUpdate -UpdateLevel {{ updateLevel }} -ScheduledInstallDay {{ scheduledInstallDay }} -ScheduledInstallTime $datetime.Hour\",\n                        \"    } else {\",\n                        \"        Write-Error -Message 'Invalid value for the 'scheduledInstallTime' parameter.' -Category InvalidArgument\",\n                        \"        exit 1\",\n                        \"    }\",\n                        \"} catch [Exception] {\",\n                        \"    $exceptionMessage = 'Exception thrown while setting Windows update message: {0}' -f $_.Exception.Message \",\n                        \"    Write-Error $exceptionMessage\",\n                        \"    exit 1\",\n                        \"}\"\n                    ]\n                }\n            ]\n        }\n    }\n}\n",
  "CreatedDate": "2021-03-30T03:34:41.05Z",
  "DisplayName": null,
  "DocumentFormat": {
    "Value": "JSON"
  },
  "DocumentType": {
    "Value": "Command"
  },
  "DocumentVersion": "1",
  "Name": "AWS-ConfigureWindowsUpdate",
  "Requires": [],
  "ReviewStatus": null,
  "Status": {
    "Value": "Active"
  },
  "StatusInformation": null,
  "VersionName": null,
  "ResponseMetadata": {
    "RequestId": "2c25bd53-4508-4623-8fb6-daefebd79d6e",
    "Metadata": {},
    "ChecksumAlgorithm": 0,
    "ChecksumValidationStatus": 0
  },
  "ContentLength": 12710,
  "HttpStatusCode": 200,
  "LoggedAt": "2023-06-01T07:11:07.0348135+00:00"
}
