{
  "AttachmentsContent": [],
  "Content": "{\n  \"schemaVersion\": \"2.2\",\n  \"description\": \"Manage AWS Agent on EC2 instances\",\n  \"parameters\":\n  {\n    \"Operation\":\n    {\n      \"type\": \"String\",\n      \"description\": \"(Required) The AWS Agent related action to perform. The install operation installs the AWS Agent on the System\",\n      \"allowedValues\":\n      [\n        \"Install\"\n      ]\n    }\n  },\n  \"mainSteps\":\n  [\n    {\n      \"precondition\":\n      {\n        \"StringEquals\":\n        [\n          \"platformType\",\n          \"Linux\"\n        ]\n      },\n      \"action\": \"aws:runShellScript\",\n      \"name\": \"InstallInspectorOnLinux\",\n      \"inputs\":\n      {\n        \"id\":\"0.aws:runShellScript\",\n        \"timeoutSeconds\": 600,\n        \"runCommand\":\n        [\n          \"#!/bin/bash\",\n          \"#set -eux\",\n          \"DOCUMENT_BUILD_VERSION=\\\"1.0.2\\\"\",\n          \"PUBKEY_FILE=\\\"inspector.gpg\\\"\",\n          \"INSTALLER_FILE=\\\"install\\\"\",\n          \"SIG_FILE=\\\"install.sig\\\"\",\n\n          \"function make_temp_dir() {\",\n            \"local stamp\",\n            \"stamp=$(date +%Y%m%d%H%M%S)\",\n            \"SECURE_TMP_DIR=${TMPDIR:-/tmp}/$stamp-$(awk 'BEGIN { srand (); print rand() }')-$$\",\n            \"mkdir -m 700 -- \\\"$SECURE_TMP_DIR\\\" 2>/dev/null\",\n            \"if [ $? -eq 0 ]; then\",\n            \" return 0\",\n            \"else\",\n            \"  echo \\\"Could not create temporary directory\\\"\",\n            \"  return 1\",\n            \"fi\",\n          \"}\",\n\n          \"declare SECURE_TMP_DIR\",\n          \"if ! make_temp_dir; then\",\n          \"  exit 1\",\n          \"fi\",\n          \"trap \\\"rm -rf ${SECURE_TMP_DIR}\\\" EXIT\",\n\n          \"PUBKEY_PATH=\\\"${SECURE_TMP_DIR}/${PUBKEY_FILE}\\\"\",\n          \"INSTALLER_PATH=\\\"${SECURE_TMP_DIR}/${INSTALLER_FILE}\\\"\",\n          \"SIG_PATH=\\\"${SECURE_TMP_DIR}/${SIG_FILE}\\\"\",\n\n          \"if hash curl 2>/dev/null\",\n          \"then\",\n          \"  DOWNLOAD_CMD=\\\"curl -s --fail --retry 5 --max-time 30\\\"\",\n          \"  CONSOLE_ARG=\\\"\\\"\",\n          \"  TO_FILE_ARG=\\\" -o \\\"\",\n          \"  PUT_METHOD_ARG=\\\" -X PUT \\\"\",\n          \"  HEADER_ARG=\\\" --head \\\"\",\n          \"else\",\n          \"  DOWNLOAD_CMD=\\\"wget --quiet --tries=5 --timeout=30 \\\"\",\n          \"  CONSOLE_ARG=\\\" -qO- \\\"\",\n          \"  TO_FILE_ARG=\\\" -O \\\"\",\n          \"  PUT_METHOD_ARG=\\\" --method=PUT \\\"\",\n          \"  HEADER_ARG=\\\" -S --spider \\\"\",\n          \"fi\",\n          \n          \"IMDSV2_TOKEN=$( ${DOWNLOAD_CMD} ${CONSOLE_ARG} ${PUT_METHOD_ARG} --header \\\"X-aws-ec2-metadata-token-ttl-seconds: 21600\\\" http://169.254.169.254/latest/api/token)\",\n\n          \"IMDSV2_TOKEN_HEADER=\\\"\\\"\",\n\n          \"if [[ -n \\\"${IMDSV2_TOKEN}\\\" ]]; then\",\n          \"    IMDSV2_TOKEN_HEADER=\\\" --header X-aws-ec2-metadata-token:${IMDSV2_TOKEN} \\\"\",\n          \"fi\",\n\n          \"METADATA_AZ=$( ${DOWNLOAD_CMD} ${CONSOLE_ARG} ${IMDSV2_TOKEN_HEADER} http://169.254.169.254/latest/meta-data/placement/availability-zone)\",\n          \"METADATA_REGION=$( echo $METADATA_AZ | sed -e \\\"s/[a-z]*$//\\\" )\",\n\n          \"if [[ -n \\\"${METADATA_REGION}\\\" ]]; then\",\n          \"  REGION=${METADATA_REGION}\",\n          \"else\",\n          \"  echo \\\"No region information was obtained.\\\"\",\n          \"  exit 2\",\n          \"fi\",\n\n          \"AGENT_INVENTORY_FILE=\\\"AWS_AGENT_INVENTORY\\\"\",\n          \"BASE_URL=\\\"https://s3.dualstack.${REGION}.amazonaws.com/aws-agent.${REGION}/linux/latest\\\"\",\n          \"PUBKEY_FILE_URL=\\\"${BASE_URL}/${PUBKEY_FILE}\\\"\",\n          \"INSTALLER_FILE_URL=\\\"${BASE_URL}/${INSTALLER_FILE}\\\"\",\n          \"SIG_FILE_URL=\\\"${BASE_URL}/${SIG_FILE}\\\"\",\n          \"AGENT_METRICS_URL=\\\"${BASE_URL}/${AGENT_INVENTORY_FILE}?x-installer-version=${DOCUMENT_BUILD_VERSION}&x-installer-type=ssm-installer&x-op={{Operation}}\\\"\",\n\n          \"function handle_status() {\",\n          \"  local result_param=\\\"nil\\\"\",\n          \"  local result=\\\"nil\\\"\",\n          \"  if [[ $# -eq 0 ]]; then\",\n          \"    echo \\\"Error while handling status function. At least one argument should be passed.\\\"\",\n          \"      exit 129\",\n          \"  else\",\n          \"    if [[ $# > 1 ]]; then\",\n          \"      result_param=$2\",\n          \"    fi\",\n          \"    result=$1\",\n          \"  fi\",\n          \"  #start publishing metrics\",\n          \"  ${DOWNLOAD_CMD} ${HEADER_ARG} \\\"${AGENT_METRICS_URL}&x-result=${result}&x-result-param=${result_param}\\\"\",\n          \"  echo \\\"Script exited with status code ${result} ${result_param}\\\"\",\n          \"  if [[ \\\"${result}\\\" = \\\"SUCCESS\\\" ]]; then\",\n          \"    exit 0\",\n          \"  else\",\n          \"    exit 1\",\n          \"  fi\",\n          \"}\",\n          \n          \"#get the public key\",\n          \"${DOWNLOAD_CMD} ${TO_FILE_ARG} \\\"${PUBKEY_PATH}\\\" ${PUBKEY_FILE_URL}\",\n          \"if [[ $? != 0 ]]; then\",\n          \"  echo \\\"Failed to download public key from ${PUBKEY_FILE_URL}\\\"\",\n          \"  handle_status \\\"FILE_DOWNLOAD_ERROR\\\" \\\"${PUBKEY_PATH}\\\"\",\n          \"fi\",\n          \"#get the installer\",\n          \"${DOWNLOAD_CMD} ${TO_FILE_ARG} \\\"${INSTALLER_PATH}\\\" ${INSTALLER_FILE_URL}\",\n          \"if [[ $? != 0 ]]; then\",\n          \"  echo \\\"Failed to download installer from ${INSTALLER_FILE_URL}\\\"\",\n          \"  handle_status \\\"FILE_DOWNLOAD_ERROR\\\" \\\"${INSTALLER_PATH}\\\"\",\n          \"fi\",\n          \"#get the signature\",\n          \"${DOWNLOAD_CMD} ${TO_FILE_ARG} \\\"${SIG_PATH}\\\" ${SIG_FILE_URL}\",\n          \"if [[ $? != 0 ]]; then\",\n          \"  echo \\\"Failed to download installer signature from ${SIG_FILE_URL}\\\"\",\n          \"  handle_status \\\"FILE_DOWNLOAD_ERROR\\\" \\\"${SIG_PATH}\\\"\",\n          \"fi\",\n          \"gpg_results=$( gpg -q --no-default-keyring --keyring \\\"${PUBKEY_PATH}\\\" --verify \\\"${SIG_PATH}\\\" \\\"${INSTALLER_PATH}\\\" 2>&1 )\",\n          \"if [[ $? -eq 0 ]]; then\",\n          \"  echo \\\"Validated \\\" \\\"${INSTALLER_PATH}\\\" \\\"signature with: $(echo \\\"${gpg_results}\\\" | grep -i fingerprint)\\\"\",\n          \"else\",\n          \"  echo \\\"Error validating signature of \\\" \\\"${INSTALLER_PATH}\\\" \\\", terminating.  Please contact AWS Support.\\\"\",\n          \"  echo ${gpg_results}\",\n          \"  handle_status \\\"SIGNATURE_MISMATCH\\\" \\\"${INSTALLER_PATH}\\\"\",\n          \"fi\",\n          \"bash ${INSTALLER_PATH}\"\n        ]\n      }\n    },\n    {\n      \"precondition\":\n      {\n        \"StringEquals\":\n        [\n          \"platformType\",\n          \"Windows\"\n        ]\n      },\n      \"action\": \"aws:runPowerShellScript\",\n      \"name\": \"InstallInspectorOnWindows\",\n      \"inputs\":\n      {\n        \"id\":\"0.aws:runPowerShellScript\",\n        \"timeoutSeconds\": 600,\n        \"runCommand\":\n        [\n          \"function Is-TLSVersion-Enabled {\",\n          \"  param( [string]$TLSVersion )\",\n          \"  [string] $TLSRegKey = \\\"HKEY_LOCAL_MACHINE\\\\System\\\\CurrentControlSet\\\\Control\\\\SecurityProviders\\\\SCHANNEL\\\\Protocols\\\\TLS \\\" + $TLSVersion + \\\"\\\\Client\\\"\",\n          \"  if (Test-path -path Registry::$TLSRegKey)\",\n          \"  {\",\n          \"    $TLSClientReg = Get-ItemProperty -Path Registry::$TLSRegKey\",\n          \"    $TLSClientReg.Enabled -gt 0\",\n          \"  }\",\n          \"  else\",\n          \"  {\",\n          \"    $True\",\n          \"  }\",\n          \"}\",\n          \"if (Is-TLSVersion-Enabled \\\"1.2\\\")\", \n          \"{\",\n          \"  Write-Host \\\"Using TLS 1.2\\\"\",\n          \"  [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.SecurityProtocolType]::TLS12\",\n          \"}\",\n          \"elseif (Is-TLSVersion-Enabled \\\"1.1\\\")\", \n          \"{\",\n          \"  Write-Host \\\"Using TLS 1.1\\\"\",\n          \"  [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.SecurityProtocolType]::TLS11\",\n          \"}\",\n          \"elseif (Is-TLSVersion-Enabled \\\"1.0\\\")\", \n          \"{\",\n          \"  Write-Host \\\"Defaulting to TLS 1.0\\\"\",\n          \"}\",\n          \"else\",\n          \"{\",\n          \"  Write-Host \\\"Installation failed, All supported TLS protocols are disabled\\\"\",\n          \"  Write-Host $_.Exception|format-list -force\",\n          \"  exit 7\",\n          \"}\",\n          \"$tempdir = split-path -parent $MyInvocation.MyCommand.Definition\",\n          \"Set-Location -Path $tempdir\",\n          \"$thumbprint=\\\"\\\"\",\n          \"$agentInstaller=\\\"AWSAgentInstall.exe\\\"\",\n          \"$token =%{iwr -Headers @{\\\"X-aws-ec2-metadata-token-ttl-seconds\\\" = \\\"21600\\\"} -Method PUT -Uri http://169.254.169.254/latest/api/token -UseBasicParsing | Select-Object -Expand Content}\",\n          \"$tokenHeader = @{}\",\n          \"if (-not ([string]::IsNullOrEmpty($token)))\",\n          \"{\",\n          \"  $tokenHeader = @{\\\"X-aws-ec2-metadata-token\\\" = \\\"$token\\\"}\",\n          \"}\",\n          \"$region=%{iwr -Headers $tokenHeader http://169.254.169.254/latest/meta-data/placement/availability-zone -UseBasicParsing | Select-Object -Expand Content | %{$_.TrimEnd([char[]]([char]\\\"a\\\"..[char]\\\"z\\\"))}}\",\n          \"if ([string]::IsNullOrWhiteSpace($region))\",\n          \"{\",\n          \"  Write-Host \\\"Failed to retrieve instance region from meta-data\\\"\",\n          \"  exit 1\",\n          \"}\",\n          \"if ($Env:os -ne \\\"Windows_NT\\\")\",\n          \"{\",\n          \"  Write-Host \\\"This step of SSM document can only install the Amazon Inspector Agent on Windows servers\\\"\",\n          \"  exit 1\",\n          \"}\",\n          \"function Send-Metric {\",\n          \"  Param([string]$result,[string]$result_param)\",\n          \"  $partialMetricsUrl=\\\"https://s3.dualstack.\\\" + $region + \\\".amazonaws.com/aws-agent.\\\" + $region + \\\"/windows/awsagent/inventory.cab?x-installer-version=1.0.2&x-installer-type=ssm-installer&x-op={{Operation}}\\\"\",\n          \"  $metricsUrl=$partialMetricsUrl + \\\"&x-result=\\\" + $result + \\\"&x-result-param=\\\" + $result_param\",\n          \"  Try\",\n          \"  {\",\n          \"    Invoke-WebRequest -Method Head $metricsUrl\",\n          \"  }\",\n          \"  Catch\",\n          \"  {\",\n          \"  }\",\n          \"}\",\n\n          \"if (Get-Service \\\"AWS Agent Service\\\" -ErrorAction SilentlyContinue)\",\n          \"{\",\n          \"  Write-Host \\\"AWS Agent is already installed, Exiting\\\"\",\n          \"  exit 0\",\n          \"}\",\n\n          \"$installerUrl=\\\"https://s3.dualstack.\\\" + $region + \\\".amazonaws.com/aws-agent.\\\" + $region + \\\"/windows/installer/latest/$agentInstaller\\\"\",\n\n          \"Try\",\n          \"{\",\n          \"  Invoke-WebRequest $installerUrl -OutFile $agentInstaller\",\n          \"}\",\n          \"Catch\",\n          \"{\",\n          \"  Send-Metric \\\"FILE_DOWNLOAD_ERROR\\\" \\\"$agentInstaller\\\" \",\n          \"  Write-Host \\\"Error while downloading installer\\\"\",\n          \"  Write-Host $_.Exception|format-list -force\",\n          \"  exit 3\",\n          \"}\",\n\n          \"Try\",\n          \"{\",\n          \"  $installerSig=Get-AuthenticodeSignature -FilePath $agentInstaller\",\n          \"  $thumbprint=$installerSig.SignerCertificate.Thumbprint\",\n          \"  $certificateStatus=$installerSig.Status\",\n          \"  Write-Host \\\"Thumbprint: \\\" $thumbprint\",\n          \"  Write-Host \\\"Certificate status: \\\" $certificateStatus\",\n          \"}\",\n          \"Catch\",\n          \"{\",\n          \"  Send-Metric \\\"THUMBPRINT_RETRIEVAL_ERROR\\\" \\\"$agentInstaller\\\" \",\n          \"  Write-Host \\\"Error while retrieving installer certificate thumbprint\\\"\",\n          \"  Write-Host $_.Exception|format-list -force\",\n          \"  exit 4\",\n          \"}\",\n\n          \"if ($certificateStatus.value__ -ne [System.Management.Automation.SignatureStatus]::Valid.value__)\",\n          \"{\",\n          \"  Send-Metric \\\"CERTIFICATE_INVALID\\\" \\\"$agentInstaller\\\" \",\n          \"  Write-Host \\\"This is not signed by a valid certificate : \\\" $thumbprint\",\n          \"  exit 7\",\n          \"}\",\n          \"else\",\n          \"{\",\n          \"  Write-Host \\\"Certificate validated \\\" \",\n          \"}\",\n\n          \"$PREVIOUS_CERTIFICATE_THUMBPRINT = \\\"B0ADCEEF6292D4AAD1B03E32FBC342F4A2C0D179\\\"\",\n          \"$LATEST_CERTIFICATE_THUMBPRINT = \\\"E883C53AF78CBA7CF5A247E9B886FCE968EE0B36\\\"\",\n          \"if (($thumbprint -ne $LATEST_CERTIFICATE_THUMBPRINT) -and ($thumbprint -ne $PREVIOUS_CERTIFICATE_THUMBPRINT)) \",\n          \"{\",\n          \"  Send-Metric \\\"SIGNATURE_MISMATCH\\\" \\\"$agentInstaller\\\" \",\n          \"  Write-Host \\\"Invalid installer signature : \\\" $thumbprint\",\n          \"  exit 5\",\n          \"}\",\n          \"else\",\n          \"{\",\n          \"  Write-Host \\\"Signature validated : \\\" $thumbprint\",\n          \"}\",\n\n          \"Try\",\n          \"{\",\n          \"  $p = (Start-Process -FilePath \\\".\\\\$agentInstaller\\\" -ArgumentList \\\"/install /quiet /norestart\\\" -Wait -NoNewWindow -PassThru).ExitCode\",\n          \"  if ($p -eq 3010)\",\n          \"  {\",\n          \"    Write-Host \\\"Installation succeeded, but there were files in use, please restart to complete installation.\\\"\",\n          \"    exit 0\",\n          \"  }\",\n          \"  elseif ($p -eq 0)\",\n          \"  {\",\n          \"    Write-Host \\\"Installation succeeded\\\"\",\n          \"  }\",\n          \"  else\",\n          \"  {\",\n          \"    Write-Host \\\"Installation failed : \\\"  $p\",\n          \"  }\",\n          \"  exit $p\",\n          \"}\",\n          \"Catch\",\n          \"{\",\n          \"  Send-Metric \\\"INSTALLATION_FAILURE\\\" \\\"$agentInstaller\\\" \\\"\\\"\",\n          \"  Write-Host \\\"Installation failed, exception raised during installation\\\"\",\n          \"  Write-Host $_.Exception|format-list -force\",\n          \"  exit 6\",\n          \"}\"\n        ]\n      }\n    }\n  ]\n}\n",
  "CreatedDate": "2022-12-16T23:13:48.153Z",
  "DisplayName": null,
  "DocumentFormat": {
    "Value": "JSON"
  },
  "DocumentType": {
    "Value": "Command"
  },
  "DocumentVersion": "17",
  "Name": "AmazonInspector-ManageAWSAgent",
  "Requires": [],
  "ReviewStatus": null,
  "Status": {
    "Value": "Active"
  },
  "StatusInformation": null,
  "VersionName": null,
  "ResponseMetadata": {
    "RequestId": "ebf9128e-cf8a-4203-a9ef-cb673bb1bf2c",
    "Metadata": {},
    "ChecksumAlgorithm": 0,
    "ChecksumValidationStatus": 0
  },
  "ContentLength": 14704,
  "HttpStatusCode": 200,
  "LoggedAt": "2023-04-16T07:11:35.8963044+00:00"
}
