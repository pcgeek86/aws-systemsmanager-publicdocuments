{
  "AttachmentsContent": [],
  "Content": "{\n  \"schemaVersion\": \"2.2\",\n  \"description\": \"Run a single InSpec test or an InSpec profile on a group of managed instances.\",\n  \"parameters\": {\n    \"s3BucketName\": {\n      \"description\": \"(Required) Name of bucket to write Inspec JSON to\",\n      \"type\": \"String\"\n    },\n    \"s3KeyPrefix\": {\n      \"description\": \"(Required) Inspec JSON will be written to <s3KeyPrefix>/<ACCOUNT_NUMBER>/<INSTANCE_ID>.json.\",\n      \"type\": \"String\"\n    }\n  },\n  \"mainSteps\": [\n    {\n      \"action\": \"aws:downloadContent\",\n      \"name\": \"downloadContent\",\n      \"inputs\": {\n        \"sourceType\": \"S3\",\n        \"sourceInfo\": \"{\\\"path\\\":\\\"https://{{ s3BucketName }}.s3.amazonaws.com/InspecProfiles/\\\"}\"\n      }\n    },\n    {\n      \"precondition\": {\n        \"StringEquals\": [\n          \"platformType\",\n          \"Linux\"\n        ]\n      },\n      \"action\": \"aws:runShellScript\",\n      \"name\": \"runInSpecLinux\",\n      \"inputs\": {\n        \"runCommand\": [\n          \"#!/bin/bash\",\n          \"set -eo pipefail\",\n          \"\",\n          \"if ! which curl &> /dev/null; then\",\n          \"    echo 'curl is missing from the instance! Exiting.'\",\n          \"    exit 1\",\n          \"fi\",\n          \"\",\n          \"# Install InSpec and run checks.\",\n          \"# Results are reported to Compliance to after the run.\",\n          \"export HOME=/root\",\n          \"\",\n          \"# Install ChefDK if not already installed\",\n          \"CHEFDK_UNINSTALL=0\",\n          \"if ! [ -x \\\"$(command -v inspec)\\\" ]; then\",\n          \"  echo \\\"Installing Chef Development Kit\\\"\",\n          \"  curl -sS https://omnitruck.chef.io/install.sh | bash -s -- -c stable -P chefdk >> /dev/null 2>&1\",\n          \"  if [ $? -ne 0 ]; then\",\n          \"    echo \\\"Failed to install Chef Development Kit\\\"\",\n          \"    exit 1\",\n          \"  fi\",\n          \"  CHEFDK_UNINSTALL=1\",\n          \"else\",\n          \"  echo \\\"Using existing Chef Development Kit\\\"\",\n          \"fi\",\n          \"\",\n          \"# Use the ChefDK version of ruby\",\n          \"eval \\\"$(chef shell-init sh)\\\"\",\n          \"\",\n          \"\",\n          \"# Ensure aws-sdk-ssm is installed\",\n          \"gem install --no-document aws-sdk-ssm\",\n          \"gem install --no-document aws-sdk-s3\",\n          \"gem install --no-document aws-sdk-core\",\n          \"\",\n          \"# Show inspec version\",\n          \"#version_info=`inspec --version`\",\n          \"#echo \\\"inspec $version_info\\\"\",\n          \"\",\n          \"# Run InSpec tests against this server and report compliance\",\n          \"EXITCODE=0\",\n          \"echo \\\"Executing InSpec tests\\\"\",\n          \"\",\n          \"# Accept Chefdk license\",\n          \"export CHEF_LICENSE=accept-no-persist\",\n          \"\",\n          \"# unset pipefail as inspec exits with error code if any tests fail\",\n          \"set +eo pipefail\",\n          \"\",\n          \"# Note: See \\\"Here Doc\\\" man, backslash, dollar sign, and backtick must be escaped\",\n          \"# OR EOF must have a quote in it to prevent expansion\",\n          \"inspec exec ./default/ --reporter json | ruby <(cat <<EOF\",\n          \"require 'net/http'\",\n          \"require 'uri'\",\n          \"require 'json'\",\n          \"require 'pathname'\",\n          \"require 'aws-sdk-ssm'\",\n          \"require 'aws-sdk-s3'\",\n          \"require 'aws-sdk-core'\",\n          \"\",\n          \"MAX_TITLE_LENGTH = 500\",\n          \"\",\n          \"instance_id = ENV['AWS_SSM_INSTANCE_ID'];\",\n          \"if(instance_id == nil)\",\n          \"  abort('Unable to find environment variable AWS_SSM_INSTANCE_ID: make sure this script is executed by SSM Agent');\",\n          \"end\",\n          \"\",\n          \"region = ENV['AWS_SSM_REGION_NAME'];\",\n          \"if(region == nil)\",\n          \"  abort('Unable to find environment variable AWS_SSM_REGION_NAME: make sure this script is executed by SSM Agent');\",\n          \"end\",\n          \"\",\n          \"# get the current execution ID from the PWD\",\n          \"# PWD is something like: /var/lib/amazon/ssm/INSTANCE_ID/document/orchestration/EXECUTION_ID/downloads/\",\n          \"pwd = Pathname.pwd;\",\n          \"execution_id = pwd.parent.basename.to_s;\",\n          \"\",\n          \"ssm = Aws::SSM::Client.new(region: region);\",\n          \"sts = Aws::STS::Client.new(region: region);\",\n          \"s3 = Aws::S3::Resource.new(region: 'us-east-1')\",\n          \"\",\n          \"json_results = STDIN.read;\",\n          \"results = JSON.parse(json_results);\",\n          \"\",\n          \"# initialize compliance object\",\n          \"comp = {\",\n          \"  resource_id: instance_id,\",\n          \"  resource_type: 'ManagedInstance',\",\n          \"  compliance_type: 'Custom:InSpec',\",\n          \"  execution_summary: {\",\n          \"    execution_time: Time.now,\",\n          \"    execution_id: execution_id,\",\n          \"    execution_type: 'Command'\",\n          \"  },\",\n          \"  items: Array.new() # this array will be populated below\",\n          \"};\",\n          \"\",\n          \"SEVERITIES= ['CRITICAL', 'HIGH', 'MEDIUM', 'LOW', 'INFORMATIONAL']\",\n          \"def impact_to_severity(impact)\",\n          \"  impact_f = impact.to_f;\",\n          \"  # map impact to severity using guidelines here: https://www.inspec.io/docs/reference/dsl_inspec/\",\n          \"  case impact_f\",\n          \"  when 0.0...0.01\",\n          \"    severity = SEVERITIES[4]; # none\",\n          \"  when 0.01...0.4\",\n          \"    severity = SEVERITIES[3]; # low\",\n          \"  when 0.4...0.7\",\n          \"    severity = SEVERITIES[2]; # medium\",\n          \"  when 0.7...0.9\",\n          \"    severity = SEVERITIES[1]; # high\",\n          \"  when 0.9..1.0\",\n          \"    severity = SEVERITIES[0]; # critical\",\n          \"  else\",\n          \"    # default to CRITICAL if impact value is outside ranges\",\n          \"    severity = SEVERITIES[0];\",\n          \"  end\",\n          \"\",\n          \"  return severity;\",\n          \"end\",\n          \"\",\n          \"def counts_by_sev(c)\",\n          \"  strs = []\",\n          \"  SEVERITIES.each do |sev|\",\n          \"    strs.push(\\\"#{c[sev]} #{sev.downcase}\\\")\",\n          \"  end\",\n          \"\",\n          \"  return strs.join(', ')\",\n          \"end\",\n          \"\",\n          \"compliant = 0;\",\n          \"non_compliant = 0;\",\n          \"\",\n          \"compliant_by_sev = Hash.new(0)\",\n          \"non_compliant_by_sev = Hash.new(0)\",\n          \"\",\n          \"results['profiles'].each do |profile|\",\n          \"  profile['controls'].each do |control|\",\n          \"    if(control.has_key?('results'))\",\n          \"      control['results'].each do |result|\",\n          \"        severity = impact_to_severity(control['impact']);\",\n          \"        title = \\\"#{control['title']} : #{result['code_desc']}\\\" # title + code_desc is most indicative of the test\",\n          \"        title = title[0..MAX_TITLE_LENGTH-1]\",\n          \"\",\n          \"        item = {\",\n          \"          id: \\\"#{control['id']}-#{comp[:items].length}\\\",\",\n          \"          severity: severity,\",\n          \"          title: title\",\n          \"        };\",\n          \"\",\n          \"        status = result['status'];\",\n          \"        if(status == 'passed')\",\n          \"          item[:status] = 'COMPLIANT';\",\n          \"          compliant += 1;\",\n          \"          compliant_by_sev[severity] += 1;\",\n          \"        elsif(status == \\\"failed\\\")\",\n          \"          item[:status] = 'NON_COMPLIANT';\",\n          \"          non_compliant += 1;\",\n          \"          non_compliant_by_sev[severity] += 1;\",\n          \"        else\",\n          \"          # skip any other statuses such as 'skipped'\",\n          \"          next;\",\n          \"        end\",\n          \"\",\n          \"        comp[:items].push(item);\",\n          \"      end\",\n          \"    end\",\n          \"  end\",\n          \"end\",\n          \"\",\n          \"#puts(JSON.pretty_generate(comp));\",\n          \"\",\n          \"# Try to put the compliance items, continue if it fails\",\n          \"put_ssm_failed = false\",\n          \"begin\",\n          \"    resp = ssm.put_compliance_items(comp);\",\n          \"    puts \\\"Wrote compliance items\\\"\",\n          \"rescue Aws::Errors::ServiceError => e\",\n          \"    put_ssm_failed = true\",\n          \"    puts \\\"Failed to put compliance items, continuing. See error below.\\\"\",\n          \"end\",\n          \"\",\n          \"# Try to write the full json to S3, continue if it fails\",\n          \"put_s3_failed = false\",\n          \"begin\",\n          \"    bucket = '{{ s3BucketName }}'\",\n          \"    prefix = '{{ s3KeyPrefix }}'\",\n          \"    account_num = sts.get_caller_identity().to_h[:account]\",\n          \"    key = !prefix.empty? && !prefix.end_with?('/') ? prefix + '/' : prefix\",\n          \"    key = key + account_num + '/' + instance_id + '.json'\",\n          \"    puts(\\\"Writing Inspec results to S3 bucket: #{bucket} key: #{key}\\\")\",\n          \"    obj = s3.bucket(bucket).object(key)\",\n          \"    obj.put(body: json_results, acl: \\\"bucket-owner-full-control\\\")\",\n          \"    puts \\\"Wrote JSON to S3\\\"\",\n          \"rescue Aws::Errors::ServiceError => e\",\n          \"    put_s3_failed = true\",\n          \"    puts \\\"Failed to write JSON to S3, continuing. See error below.\\\"\",\n          \"end\",\n          \"\",\n          \"# If we failed above, reraise the error\",\n          \"if put_ssm_failed || put_s3_failed\",\n          \"    puts \\\"Either SSM or S3 output failed, see error below.\\\"\",\n          \"    raise e\",\n          \"end\",\n          \"\",\n          \"puts(\\\"Completed InSpec checks and put #{compliant} compliant (#{counts_by_sev(compliant_by_sev)}) and #{non_compliant} non-compliant (#{counts_by_sev(non_compliant_by_sev)}) items\\\");\",\n          \"EOF\",\n          \")\",\n          \"\",\n          \"if [ $? -ne 0 ]; then\",\n          \"  echo \\\"Failed to execute InSpec tests: see stderr\\\"\",\n          \"  EXITCODE=2\",\n          \"fi\",\n          \"\",\n          \"# Uninstall ChefDK if we installed it above\",\n          \"if [ \\\"$CHEFDK_UNINSTALL\\\" = \\\"1\\\" ]; then\",\n          \"  # use the appropriate package manager\",\n          \"  echo \\\"Uninstalling Chef Development Kit\\\"\",\n          \"  if [ -x \\\"$(command -v yum)\\\" ]; then\",\n          \"    PACKAGE=`rpm -qa *chefdk*`\",\n          \"    yum remove -y $PACKAGE >> /dev/null 2>&1\",\n          \"  else\",\n          \"    dpkg -P chefdk >> /dev/null 2>&1\",\n          \"  fi\",\n          \"fi\",\n          \"\",\n          \"if [ $EXITCODE -ne 0 ] ; then\",\n          \"    echo 'Failed to run Inspec checks. Exiting.'\",\n          \"    exit 1\",\n          \"fi\"\n        ]\n      }\n    },\n    {\n      \"precondition\": {\n        \"StringEquals\": [\n          \"platformType\",\n          \"Windows\"\n        ]\n      },\n      \"action\": \"aws:runPowerShellScript\",\n      \"name\": \"runInSpecWindows\",\n      \"inputs\": {\n        \"runCommand\": [\n          \"\"\n        ]\n      }\n    }\n  ]\n}",
  "CreatedDate": "2020-11-10T03:24:42.23Z",
  "DisplayName": null,
  "DocumentFormat": {
    "Value": "JSON"
  },
  "DocumentType": {
    "Value": "Command"
  },
  "DocumentVersion": "4",
  "Name": "arn:aws:ssm:us-west-2:766082525853:document/AWSE-RunInspecChecks-Full",
  "Requires": [],
  "ReviewStatus": null,
  "Status": {
    "Value": "Active"
  },
  "StatusInformation": null,
  "VersionName": null,
  "ResponseMetadata": {
    "RequestId": "159b9f8d-2504-455a-820a-6b56c91be726",
    "Metadata": {},
    "ChecksumAlgorithm": 0,
    "ChecksumValidationStatus": 0
  },
  "ContentLength": 11824,
  "HttpStatusCode": 200,
  "LoggedAt": "2022-08-31T07:35:03.0970884+00:00"
}
