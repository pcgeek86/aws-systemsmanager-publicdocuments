{
  "AttachmentsContent": [],
  "Content": "{\n  \"description\" : \"## Id\\nAWSResilienceHub-RestoreS3BucketFromBackupSOP_2020-09-21\\n\\n## Intent\\nRestore an Amazon S3 bucket from a backup Amazon S3 bucket\\n\\n## Type\\nSOP\\n\\n## Risk\\nSmall\\n\\n## Requirements\\n  * Backup S3 bucket to restore files from it to the target bucket\\n  * Target S3 bucket\\n\\n## Depends on\\nAWSResilienceHub-CleanS3BucketUtil_2020-03-03\\n\\n## Permissions required for AutomationAssumeRole\\n  * s3:PutObject\\n  * s3:GetObject\\n  * s3:ListBucket\\n  * s3:ListObjectVersions\\n  * s3:ListBucketVersions\\n  * s3:DeleteObject\\n  * s3:DeleteObject*\\n  * SNS:Publish\\n  * ssm:StartAutomationExecution\\n  * ssm:GetAutomationExecution\\n  * iam:PassRole\\n\\n##### Permissions required in case KMS encryption is used\\n  * kms:GenerateDataKey\\n  * kms:Decrypt\\n  * kms:Encrypt\\n\\n## Supports Rollback\\nNo\\n\\n## Cancellation behavior\\nFail\\n\\n## Inputs\\n### (Required) AutomationAssumeRole\\n  * type: String\\n  * description: Amazon Resource Name (ARN) of the IAM role with permissions listed above.\\n\\n### (Required) S3BackupBucketName\\n  * type: String\\n  * description: The backup Amazon S3 bucket name to copy files from it to the restore Amazon S3 bucket.\\n\\n### (Required) S3BucketToRestoreName\\n  * type: String\\n  * description: The Amazon S3 bucket name to restore files from the backup Amazon S3 bucket.\\n\\n### (Required) SNSTopicARNForManualApproval\\n  * type: String\\n  * description: The Amazon Resource Name (ARN) of the Amazon SNS Topic. If there are any files, the user will receive a notification to manually approve the request to clean-up the restore Amazon S3 bucket.\\n\\n### (Required) IAMPrincipalForManualApproval\\n  * type: String\\n  * description: The Amazon Resource Name (ARN) of AWS authenticated principal who is authorised to either approve or reject the AWS S3 bucket clean-up restore task if there are any files. It can be either an AWS Identity and Access Management (IAM) user name, or IAM user ARN, or IAM role ARN, or IAM assume role user ARN.\\n\\n### (Optional) ApproveCleanRestoreBucketAutomatically\\n  * type: Boolean\\n  * description: If true and if there are files to delete, the request to clean-up the restore Amazon S3 bucket is automatically approved. Otherwise, the user will receive a notification to approve the request to clean-up the restore Amazon S3 bucket.\\n  * default: false\\n\\n## Details\\nThis document checks if the target Amazon S3 bucket has any files and requests approval to clean the target Amazon S3 bucket If necessary. \\nIt also cleans the target Amazon S3 bucket and copies files from the backup Amazon S3 bucket to the target Amazon S3 bucket.\\n\\n## Steps executed in normal flow\\n  * RecordStartTime\\n  * CheckExistenceOfObjectsInRestoreBucket\\n  * CleanOrRestoreBranch\\n  * ApproveCleanRestoreBucketOrCancel\\n  * CleanRestoreBucket\\n  * RestoreFromBackup\\n  * OutputRecoveryTime\\n\\n## Outputs\\n### CleanRestoreBucket.NumberOfDeletedObjects\\n  * type: String\\n  * description: Number of objects deleted from the target Amazon S3 bucket before restore.\\n\\n### RestoreFromBackup.RecoveryTimeSeconds\\n  * type: String\\n  * description: Time taken in seconds to copy files.\\n\\n### RestoreFromBackup.RestoredFilesNumber\\n  * type: String\\n  * description: Number of restored files.\\n\\n### OutputRecoveryTime.RecoveryTime\\n  * type: String\\n  * description: SOP execution time in seconds.\",\n  \"schemaVersion\" : \"0.3\",\n  \"assumeRole\" : \"{{AutomationAssumeRole}}\",\n  \"parameters\" : {\n    \"S3BackupBucketName\" : {\n      \"type\" : \"String\",\n      \"description\" : \"(Required) The backup S3 bucket name to copy files from it to the restore S3 bucket.\"\n    },\n    \"S3BucketToRestoreName\" : {\n      \"type\" : \"String\",\n      \"description\" : \"(Required) The S3 bucket name to restore files from the backup S3 bucket.\"\n    },\n    \"AutomationAssumeRole\" : {\n      \"type\" : \"String\",\n      \"description\" : \"(Required) The ARN of the role that allows Automation to perform the actions on your behalf.\"\n    },\n    \"SNSTopicARNForManualApproval\" : {\n      \"type\" : \"String\",\n      \"description\" : \"(Required) The (ARN) of the Amazon SNS Topic. If there are any files, the user will receive a notification to manually approve the request to clean-up the restore Amazon S3 bucket.\"\n    },\n    \"IAMPrincipalForManualApproval\" : {\n      \"type\" : \"String\",\n      \"description\" : \"(Required) The ARN of AWS authenticated principal who is authorised to either approve or reject the S3 bucket clean-up restore task if there are any files. \\nIt can be either an AWS Identity and Access Management (IAM) user name, or IAM user ARN, or IAM role ARN, or IAM assume role user ARN.\"\n    },\n    \"ApproveCleanRestoreBucketAutomatically\" : {\n      \"type\" : \"Boolean\",\n      \"description\" : \"(Optional) If true and if there are files to delete, the request to clean-up the restore Amazon S3 bucket is automatically approved. \\nOtherwise, the user will receive a notification to approve the request to clean-up the restore Amazon S3 bucket.\",\n      \"default\" : false\n    }\n  },\n  \"outputs\" : [ \"OutputRecoveryTime.RecoveryTime\", \"CleanRestoreBucket.NumberOfDeletedObjects\", \"RestoreFromBackup.RecoveryTimeSeconds\", \"RestoreFromBackup.RestoredFilesNumber\" ],\n  \"mainSteps\" : [ {\n    \"name\" : \"RecordStartTime\",\n    \"description\" : \"Start recording execution time\",\n    \"action\" : \"aws:executeScript\",\n    \"outputs\" : [ {\n      \"Name\" : \"StartTime\",\n      \"Selector\" : \"$.Payload\",\n      \"Type\" : \"String\"\n    } ],\n    \"inputs\" : {\n      \"Runtime\" : \"python3.8\",\n      \"Handler\" : \"start_time\",\n      \"Script\" : \"import boto3\\nimport logging\\nfrom datetime import datetime, timezone\\nimport time\\n\\nfrom botocore.exceptions import ClientError\\nfrom dateutil import parser\\n\\nlogger = logging.getLogger()\\nlogger.setLevel(logging.INFO)\\n\\n\\n\\ndef start_time(events, context):\\n    return datetime.now(timezone.utc).isoformat()\"\n    }\n  }, {\n    \"name\" : \"CheckExistenceOfObjectsInRestoreBucket\",\n    \"description\" : \"Check if there are already any files in restore bucket and output their amount\",\n    \"action\" : \"aws:executeScript\",\n    \"outputs\" : [ {\n      \"Name\" : \"NumberOfObjectsExistInRestoreBucket\",\n      \"Selector\" : \"$.Payload.NumberOfObjectsExistInRestoreBucket\",\n      \"Type\" : \"String\"\n    }, {\n      \"Name\" : \"AreObjectsExistInRestoreBucket\",\n      \"Selector\" : \"$.Payload.AreObjectsExistInRestoreBucket\",\n      \"Type\" : \"Boolean\"\n    } ],\n    \"inputs\" : {\n      \"Runtime\" : \"python3.7\",\n      \"Handler\" : \"check_existence_of_objects_in_bucket\",\n      \"InputPayload\" : {\n        \"S3BucketToRestoreName\" : \"{{S3BucketToRestoreName}}\"\n      },\n      \"Script\" : \"import boto3\\nfrom datetime import datetime\\nfrom botocore.config import Config\\n\\n\\n\\n\\ndef check_existence_of_objects_in_bucket(events, context):\\n    \\\"\\\"\\\"\\n    Check existence of versioned and deleted objects in bucket\\n    :return: Number of objects exist in restore bucket\\n    \\\"\\\"\\\"\\n    if 'S3BucketToRestoreName' not in events:\\n        raise KeyError('Requires S3BucketToRestoreName  in events')\\n\\n    s3_bucket_to_restore_name = events['S3BucketToRestoreName']\\n\\n    print(f'Sending the list_object_versions request fore the {s3_bucket_to_restore_name} bucket...')\\n    config = Config(retries={'max_attempts': 20, 'mode': 'standard'})\\n    response: dict = boto3.client('s3', config=config).list_object_versions(Bucket=s3_bucket_to_restore_name)\\n    print(f'The response from the list_object_versions: {response}')\\n\\n    versions: dict = response.get('Versions')\\n    delete_markers: dict = response.get('DeleteMarkers')\\n\\n    number_of_objects_exist_in_restore_bucket = 0\\n    if versions:\\n        number_of_objects_exist_in_restore_bucket += len(versions)\\n    if delete_markers:\\n        number_of_objects_exist_in_restore_bucket += len(delete_markers)\\n\\n    print(f'The number of existing objects in restore bucket is {number_of_objects_exist_in_restore_bucket}')\\n\\n    return {'NumberOfObjectsExistInRestoreBucket': str(number_of_objects_exist_in_restore_bucket),\\n            \\\"AreObjectsExistInRestoreBucket\\\": False if number_of_objects_exist_in_restore_bucket == 0 else True}\"\n    }\n  }, {\n    \"name\" : \"CleanOrRestoreBranch\",\n    \"description\" : \"Check if there are any files to clean and if approve is required\",\n    \"action\" : \"aws:branch\",\n    \"inputs\" : {\n      \"Choices\" : [ {\n        \"And\" : [ {\n          \"Variable\" : \"{{ApproveCleanRestoreBucketAutomatically}}\",\n          \"BooleanEquals\" : false\n        }, {\n          \"Variable\" : \"{{CheckExistenceOfObjectsInRestoreBucket.AreObjectsExistInRestoreBucket}}\",\n          \"BooleanEquals\" : true\n        } ],\n        \"NextStep\" : \"ApproveCleanRestoreBucketOrCancel\"\n      }, {\n        \"And\" : [ {\n          \"Variable\" : \"{{ApproveCleanRestoreBucketAutomatically}}\",\n          \"BooleanEquals\" : true\n        }, {\n          \"Variable\" : \"{{CheckExistenceOfObjectsInRestoreBucket.AreObjectsExistInRestoreBucket}}\",\n          \"BooleanEquals\" : true\n        } ],\n        \"NextStep\" : \"CleanRestoreBucket\"\n      } ],\n      \"Default\" : \"RestoreFromBackup\"\n    }\n  }, {\n    \"name\" : \"ApproveCleanRestoreBucketOrCancel\",\n    \"description\" : \"Request approve from user to clean target bucket\",\n    \"action\" : \"aws:approve\",\n    \"timeoutSeconds\" : 3600,\n    \"onFailure\" : \"Abort\",\n    \"inputs\" : {\n      \"NotificationArn\" : \"{{SNSTopicARNForManualApproval}}\",\n      \"Message\" : \"Do you agree to clean up the {{S3BucketToRestoreName}} bucket before the restore process? There {{CheckExistenceOfObjectsInRestoreBucket.NumberOfObjectsExistInRestoreBucket}} file(-s) exist.\",\n      \"MinRequiredApprovals\" : 1,\n      \"Approvers\" : [ \"{{IAMPrincipalForManualApproval}}\" ]\n    }\n  }, {\n    \"name\" : \"CleanRestoreBucket\",\n    \"description\" : \"Clean target bucket\",\n    \"action\" : \"aws:executeAutomation\",\n    \"inputs\" : {\n      \"DocumentName\" : \"AWSResilienceHub-CleanS3BucketUtil_2020-03-03\",\n      \"RuntimeParameters\" : {\n        \"AutomationAssumeRole\" : \"{{AutomationAssumeRole}}\",\n        \"S3BucketNameToClean\" : \"{{S3BucketToRestoreName}}\"\n      }\n    },\n    \"outputs\" : [ {\n      \"Name\" : \"NumberOfDeletedObjects\",\n      \"Selector\" : \"$.NumberOfDeletedObjects\",\n      \"Type\" : \"String\"\n    } ]\n  }, {\n    \"name\" : \"RestoreFromBackup\",\n    \"description\" : \"Restore by copying files from source bucket to target bucket\",\n    \"action\" : \"aws:executeScript\",\n    \"outputs\" : [ {\n      \"Name\" : \"RestoredFilesNumber\",\n      \"Selector\" : \"$.Payload.RestoredFilesNumber\",\n      \"Type\" : \"Integer\"\n    }, {\n      \"Name\" : \"RecoveryTimeSeconds\",\n      \"Selector\" : \"$.Payload.RecoveryTimeSeconds\",\n      \"Type\" : \"String\"\n    } ],\n    \"inputs\" : {\n      \"Runtime\" : \"python3.7\",\n      \"Handler\" : \"restore_from_backup\",\n      \"InputPayload\" : {\n        \"S3BackupBucketName\" : \"{{S3BackupBucketName}}\",\n        \"S3BucketToRestoreName\" : \"{{S3BucketToRestoreName}}\"\n      },\n      \"Script\" : \"import boto3\\nfrom datetime import datetime\\nfrom botocore.config import Config\\n\\n\\n\\n\\ndef restore_from_backup(events, context):\\n    \\\"\\\"\\\"\\n    Restore objects from backup bucket\\n    :return: Copied files number, recovery time seconds\\n    \\\"\\\"\\\"\\n    if 'S3BucketToRestoreName' not in events or 'S3BackupBucketName' not in events:\\n        raise KeyError('Requires S3BucketToRestoreName and S3BackupBucketName in events')\\n\\n    start = datetime.utcnow()\\n\\n    s3_backup_bucket_name = events['S3BackupBucketName']\\n    s3_bucket_to_restore_name = events['S3BucketToRestoreName']\\n    config = Config(retries={'max_attempts': 20, 'mode': 'standard'})\\n    s3_client = boto3.client('s3', config=config)\\n    paginator = s3_client.get_paginator('list_objects_v2')\\n    pages = paginator.paginate(Bucket=s3_backup_bucket_name)\\n\\n    print(f'Starting to copy files from the {s3_backup_bucket_name} bucket '\\n          f'to the {s3_bucket_to_restore_name} bucket...')\\n\\n    copied_count = 0\\n    for page in pages:\\n        print(f'The response from the list_objects_v2: {page}')\\n        if 'Contents' in page:\\n            for content in page[\\\"Contents\\\"]:\\n                print(f'Copying the file {content[\\\"Key\\\"]}...')\\n\\n                copy_source = {\\n                    'Bucket': s3_backup_bucket_name,\\n                    'Key': content[\\\"Key\\\"]\\n                }\\n                s3_client.copy(copy_source, s3_bucket_to_restore_name, content[\\\"Key\\\"])\\n\\n                print(f'The file {content[\\\"Key\\\"]} was successfully copied')\\n\\n                copied_count += 1\\n\\n    print(f'The file number of copied files is {copied_count}')\\n\\n    return {'CopiedFilesNumber': copied_count, 'RecoveryTimeSeconds': str((datetime.utcnow() - start).total_seconds())}\"\n    }\n  }, {\n    \"name\" : \"OutputRecoveryTime\",\n    \"description\" : \"Calculate execution time\",\n    \"action\" : \"aws:executeScript\",\n    \"outputs\" : [ {\n      \"Name\" : \"RecoveryTime\",\n      \"Selector\" : \"$.Payload\",\n      \"Type\" : \"Integer\"\n    } ],\n    \"inputs\" : {\n      \"Runtime\" : \"python3.8\",\n      \"Handler\" : \"recovery_time\",\n      \"Script\" : \"import boto3\\nimport logging\\nfrom datetime import datetime, timezone\\nimport time\\n\\nfrom botocore.exceptions import ClientError\\nfrom dateutil import parser\\n\\nlogger = logging.getLogger()\\nlogger.setLevel(logging.INFO)\\n\\n\\n\\ndef recovery_time(events, context):\\n    return (datetime.now(timezone.utc) - parser.parse(events['StartTime'])).seconds\",\n      \"InputPayload\" : {\n        \"StartTime\" : \"{{ RecordStartTime.StartTime }}\"\n      }\n    }\n  } ]\n}",
  "CreatedDate": "2022-11-08T12:36:51.868Z",
  "DisplayName": null,
  "DocumentFormat": {
    "Value": "JSON"
  },
  "DocumentType": {
    "Value": "Automation"
  },
  "DocumentVersion": "3",
  "Name": "AWSResilienceHub-RestoreS3BucketFromBackupSOP_2020-09-21",
  "Requires": [],
  "ReviewStatus": null,
  "Status": {
    "Value": "Active"
  },
  "StatusInformation": null,
  "VersionName": null,
  "ResponseMetadata": {
    "RequestId": "14b36ccd-77c8-4b35-b462-81b49668dfd0",
    "Metadata": {},
    "ChecksumAlgorithm": 0,
    "ChecksumValidationStatus": 0
  },
  "ContentLength": 14494,
  "HttpStatusCode": 200,
  "LoggedAt": "2023-01-15T07:11:16.6157491+00:00"
}
