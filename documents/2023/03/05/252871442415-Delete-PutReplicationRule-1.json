{
  "AttachmentsContent": [],
  "Content": "{\n  \"schemaVersion\": \"0.3\",\n  \"description\": \"Put an S3 replication rule to the specified S3 bucket.\",\n  \"assumeRole\": \"{{ AutomationAssumeRole }}\",\n  \"parameters\": {\n    \"ReplicationRuleName\": {\n      \"type\": \"String\",\n      \"allowedPattern\": \"^.*$\",\n      \"description\": \"(Required) The Replication rule name.\"\n    },\n    \"DestinationAccount\": {\n      \"type\": \"String\",\n      \"description\": \"(Required) The destination S3 bucket account ID, use the same account ID if the destination bucket is within the current account.\",\n      \"allowedPattern\": \"^[0-9]{12}$\"\n    },\n    \"DestinationBucketName\": {\n      \"type\": \"String\",\n      \"description\": \"(Required) The destination S3 bucket name.\",\n      \"allowedPattern\": \"^[a-z0-9]([-.a-z0-9]+)[a-z0-9]$\"\n    },\n    \"SourceBucketName\": {\n      \"type\": \"String\",\n      \"description\": \"(Required) The source S3 bucket Arn.\",\n      \"allowedPattern\": \"^[a-z0-9]([-.a-z0-9]+)[a-z0-9]$\"\n    },\n    \"ReplicationRole\": {\n      \"type\": \"String\",\n      \"description\": \"(Required) The ARN of the role that allows S3 to perform the replication on your behalf. The role name must begins with the prefix 'customer''; for example, 'customer-test-replication-role'.\",\n      \"allowedPattern\": \"^arn:(aws|aws-cn|aws-us-gov):iam::[0-9]{12}:role/customer[A-Za-z0-9_\\\\-/]+$\"\n    },\n    \"DecryptObjectKMSKey\": {\n      \"type\": \"StringList\",\n      \"description\": \"(Optional) The KMS key(s) used to decrypt objects in the source S3 bucket.\",\n      \"allowedPattern\": \"^(arn:(aws|aws-cn|aws-us-gov):kms:[a-z0-9-]+:[0-9]{12}:key/){0,1}[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$|^$\",\n      \"default\": []\n    },\n    \"EncryptReplicaKMSKey\": {\n      \"type\": \"String\",\n      \"description\": \"(Optional) The KMS key used to encrypt destination objects.\",\n      \"allowedPattern\": \"^(arn:(aws|aws-cn|aws-us-gov):kms:[a-z0-9-]+:[0-9]{12}:key/){0,1}[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$|^$\",\n      \"default\": \"\"\n    },\n    \"OwnerTranslation\": {\n      \"type\": \"Boolean\",\n      \"description\": \"(Optional) True to change replica ownership to the AWS account that owns the destination bucket, false to not change replica ownership.\",\n      \"default\": false\n    },\n    \"Prefix\": {\n      \"type\": \"String\",\n      \"description\": \"(Optional) An object key name prefix that identifies the subset of objects to which the rule applies; for example, 'customer-'.\",\n      \"allowedPattern\": \"^.*$\",\n      \"default\": \"\"\n    },\n    \"Priority\": {\n      \"type\": \"Integer\",\n      \"description\": \"(Optional) S3 uses the rule priority to determine which rule to apply. The higher the number, the higher the priority. Default rule priority is 1.\",\n      \"allowedPattern\": \"^[1-9]|[1-9][0-9]+$\",\n      \"default\": 1\n    },\n    \"AutomationAssumeRole\": {\n      \"type\": \"String\",\n      \"description\": \"(Required) The ARN of the role that allows Automation to perform the actions on your behalf.\",\n      \"allowedPattern\": \"^arn:(aws|aws-cn|aws-us-gov):iam::\\\\d{12}:role\\\\/[\\\\w+=,.@-]{1,64}$\"\n    }\n  },\n  \"mainSteps\": [\n    {\n      \"name\": \"validateInput\",\n      \"action\": \"aws:executeScript\",\n      \"nextStep\": \"createAndPutReplicationRule\",\n      \"inputs\": {\n        \"InputPayload\": {\n          \"SourceBucketName\": \"{{ SourceBucketName }}\",\n          \"DestinationBucketName\": \"{{ DestinationBucketName }}\",\n          \"Priority\": \"{{ Priority }}\",\n          \"ReplicationRole\": \"{{ ReplicationRole }}\",\n          \"DecryptObjectKMSKey\": \"{{ DecryptObjectKMSKey }}\",\n          \"EncryptReplicaKMSKey\": \"{{ EncryptReplicaKMSKey }}\"\n        },\n        \"Script\": \"import boto3\\nimport botocore.exceptions\\n\\n\\ndef script_handler(events, context):\\n    \\\"\\\"\\\"Validation handler function\\n\\n    This function will:\\n    1. validate if source bucket, destination bucket, kms key, replication role exist\\n    2. validate if kms key used to decrypt source objects is in the same region as source bucket\\n    3. validate if kms key used to encrypt object replicas exist for encrypted objects replication\\n    4. validate if source bucket is AMS internal infrastructure that starts with \\\"mc-\\\", \\\"ams-\\\" or \\\"awsms-\\\"\\n    5. validate if source bucket has any existing replication rule.\\n    6. validate if duplicated priority\\n    \\\"\\\"\\\"\\n    # Required parameters\\n    source_bucket = events[\\\"SourceBucketName\\\"]\\n    destination_bucket = events[\\\"DestinationBucketName\\\"]\\n    replication_role_arn = events[\\\"ReplicationRole\\\"]\\n\\n    # Optional parameters\\n    rule_priority = events.get(\\\"Priority\\\")\\n\\n    # validation processes\\n    bucket_region = validate_source_bucket(source_bucket)\\n    validate_destination_bucket(destination_bucket)\\n    existing_replication = get_existing_replication(source_bucket)\\n    validate_replication_role(replication_role_arn, existing_replication[\\\"existing_role\\\"])\\n    validate_priority(rule_priority, existing_replication[\\\"existing_rules\\\"])\\n\\n    if events.get(\\\"DecryptObjectKMSKey\\\"):\\n        if not events.get(\\\"EncryptReplicaKMSKey\\\"):\\n            raise Exception(\\n                \\\"Unable to find KMS key that used to encrypt object replicas in the destination account.\\\"\\n            )\\n        for source_kms_key_arn in events[\\\"DecryptObjectKMSKey\\\"]:\\n            validate_source_kms_key(source_kms_key_arn, bucket_region)\\n    elif events.get(\\\"EncryptReplicaKMSKey\\\"):\\n        raise Exception(\\n            \\\"Unable to find any KMS key that used to decrypt objects in the source account.\\\"\\n        )\\n\\n    return {\\\"ExistingReplicationRules\\\": existing_replication[\\\"existing_rules\\\"]}\\n\\n\\ndef validate_source_bucket(source_bucket) -> str:\\n    \\\"\\\"\\\"Validate if source bucket exist as well as if it is AMS internal bucket\\\"\\\"\\\"\\n    s3_client = boto3.client(\\\"s3\\\")\\n    bucket_region = None\\n\\n    try:\\n        bucket_region = s3_client.get_bucket_location(Bucket=source_bucket)[\\\"LocationConstraint\\\"]\\n        if bucket_region is None:\\n            bucket_region = \\\"us-east-1\\\"\\n    except botocore.exceptions.ClientError:\\n        raise Exception(\\\"The source bucket does not exist.\\\")\\n\\n    if source_bucket.startswith((\\\"mc-\\\", \\\"ams-\\\", \\\"awsms-\\\")):\\n        raise Exception(\\n            f\\\"Unable to proceed the request as {source_bucket} is an AMS internal bucket\\\"\\n        )\\n\\n    return bucket_region\\n\\n\\ndef validate_destination_bucket(destination_bucket):\\n    \\\"\\\"\\\"Validate if destination bucket exist as well as if it is AMS internal bucket\\\"\\\"\\\"\\n    s3_client = boto3.client(\\\"s3\\\")\\n\\n    try:\\n        s3_client.get_bucket_location(Bucket=destination_bucket)\\n    except botocore.exceptions.ClientError as error:\\n        if error.response[\\\"Error\\\"][\\\"Code\\\"] == \\\"NoSuchBucket\\\":\\n            raise Exception(\\n                \\\"Unable to proceed the request as the destination bucket does not exist.\\\"\\n            )\\n        else:\\n            pass\\n\\n    if destination_bucket.startswith((\\\"mc-\\\", \\\"ams-\\\", \\\"awsms-\\\")):\\n        raise Exception(\\n            f\\\"Unable to proceed the request as {destination_bucket} is an AMS internal bucket\\\"\\n        )\\n\\n\\ndef get_existing_replication(source_bucket) -> dict:\\n    \\\"\\\"\\\"Validate if any existing replication configuration\\n    :params source_bucket: The execution account which source bucket is located on.\\n    :params source_bucket: str\\n    :return: existing replication configurations\\n    :rtype: dict\\n    \\\"\\\"\\\"\\n    s3_client = boto3.client(\\\"s3\\\")\\n    existing_rules = []\\n    existing_role = \\\"\\\"\\n\\n    try:\\n        response = s3_client.get_bucket_replication(Bucket=source_bucket)\\n        existing_rules = response[\\\"ReplicationConfiguration\\\"][\\\"Rules\\\"]\\n        existing_role = response[\\\"ReplicationConfiguration\\\"][\\\"Role\\\"]\\n    except botocore.exceptions.ClientError:\\n        pass\\n\\n    return {\\\"existing_rules\\\": existing_rules, \\\"existing_role\\\": existing_role}\\n\\n\\ndef validate_replication_role(source_role_arn, existing_role):\\n    \\\"\\\"\\\"Validate if replicate role exist\\\"\\\"\\\"\\n    iam_client = boto3.client(\\\"iam\\\")\\n    role_name = source_role_arn.split(\\\"/\\\")[-1]\\n\\n    try:\\n        iam_client.get_role(RoleName=role_name)[\\\"Role\\\"]\\n    except botocore.exceptions.ClientError:\\n        raise Exception(\\\"Unable to find the replication role in the source bucket account.\\\")\\n\\n    if existing_role and source_role_arn != existing_role:\\n        raise Exception(\\\"The replication role doesn't match the existing replication role name.\\\")\\n\\n\\ndef validate_source_kms_key(source_kms_key_arn, region):\\n    \\\"\\\"\\\"Validate if source kms key exist as well as in enabled status\\n\\n    :params source_kms_key_arn: The KMS key that used to decrypt source objects, which should also in the same region as source bucket\\n    :type source_kms_key_arn: str\\n    :params region: the source bucket region\\n    :type region: str\\n    \\\"\\\"\\\"\\n    kms_client = boto3.client(\\\"kms\\\", region_name=region)\\n\\n    try:\\n        source_kms_key = kms_client.describe_key(KeyId=source_kms_key_arn)[\\\"KeyMetadata\\\"]\\n    except botocore.exceptions.ClientError:\\n        raise Exception(\\n            f\\\"Unable to find KMS key used to decrypt the source objects in region {region}.\\\"\\n        )\\n\\n    if not source_kms_key[\\\"Enabled\\\"]:\\n        raise Exception(\\\"Invalid status of KMS key used to decrypt the source objects.\\\")\\n\\n\\ndef validate_priority(rule_priority, existing_rules):\\n    \\\"\\\"\\\"Validate if duplicated priorities can be found\\\"\\\"\\\"\\n    if existing_rules:\\n        priority_list = []\\n        for rule in existing_rules:\\n            priority_list.append(rule[\\\"Priority\\\"])\\n\\n        if rule_priority in priority_list and rule_priority != 1:\\n            raise Exception(\\n                f\\\"Found duplicate priority: {rule_priority}. Please provide different priority value.\\\"\\n            )\\n\",\n        \"Handler\": \"script_handler\",\n        \"Runtime\": \"python3.8\"\n      },\n      \"outputs\": [\n        {\n          \"Name\": \"ExistingReplicationRules\",\n          \"Selector\": \"$.Payload.ExistingReplicationRules\",\n          \"Type\": \"MapList\"\n        }\n      ],\n      \"maxAttempts\": 3,\n      \"timeoutSeconds\": 180,\n      \"onFailure\": \"Abort\",\n      \"isCritical\": true\n    },\n    {\n      \"name\": \"createAndPutReplicationRule\",\n      \"action\": \"aws:executeScript\",\n      \"inputs\": {\n        \"InputPayload\": {\n          \"SourceBucketName\": \"{{ SourceBucketName }}\",\n          \"DestinationBucketName\": \"{{ DestinationBucketName }}\",\n          \"ReplicationRole\": \"{{ ReplicationRole }}\",\n          \"DestinationAccount\": \"{{ DestinationAccount }}\",\n          \"ReplicationRuleName\": \"{{ ReplicationRuleName }}\",\n          \"DecryptObjectKMSKey\": \"{{ DecryptObjectKMSKey }}\",\n          \"EncryptReplicaKMSKey\": \"{{ EncryptReplicaKMSKey}}\",\n          \"Prefix\": \"{{ Prefix }}\",\n          \"Priority\": \"{{ Priority }}\",\n          \"OwnerTranslation\": \"{{ OwnerTranslation }}\",\n          \"ExistingReplicationRules\": \"{{ validateInput.ExistingReplicationRules }}\"\n        },\n        \"Script\": \"import boto3\\nimport botocore.exceptions\\n\\n\\ndef script_handler(events, context):\\n    aws_partition = context.get(\\\"global:AWS_PARTITION\\\")\\n\\n    # Required parameters\\n    rule_name = events[\\\"ReplicationRuleName\\\"]\\n    source_bucket = events[\\\"SourceBucketName\\\"]\\n    destination_bucket = events[\\\"DestinationBucketName\\\"]\\n    replication_role_arn = events[\\\"ReplicationRole\\\"]\\n    destination_account = events[\\\"DestinationAccount\\\"]\\n    existing_replication_rules = events[\\\"ExistingReplicationRules\\\"]\\n\\n    # Optional parameters\\n    owner_translation = events.get(\\\"OwnerTranslation\\\")\\n    source_kms_key = events.get(\\\"DecryptObjectKMSKey\\\")\\n    destination_kms_key = events.get(\\\"EncryptReplicaKMSKey\\\")\\n    prefix = events.get(\\\"Prefix\\\")\\n    priority = events.get(\\\"Priority\\\")\\n\\n    replication_rules = create_json_input(\\n        aws_partition,\\n        rule_name,\\n        source_bucket,\\n        destination_bucket,\\n        replication_role_arn,\\n        destination_account,\\n        owner_translation,\\n        source_kms_key,\\n        destination_kms_key,\\n        prefix,\\n        priority,\\n        existing_replication_rules,\\n    )\\n    put_replication_rule(source_bucket, replication_rules)\\n\\n\\ndef create_json_input(\\n    aws_partition,\\n    rule_name,\\n    source_bucket,\\n    destination_bucket,\\n    replication_role_arn,\\n    destination_account,\\n    owner_translation,\\n    source_kms_key,\\n    destination_kms_key,\\n    prefix,\\n    priority,\\n    existing_replication_rules,\\n):\\n    \\\"\\\"\\\"Create replication configuration input json file\\\"\\\"\\\"\\n    destination_bucket_arn = f\\\"arn:{aws_partition}:s3:::{destination_bucket}\\\"\\n    json_input = {\\n        \\\"Role\\\": replication_role_arn,\\n        \\\"Rules\\\": [\\n            {\\n                \\\"Status\\\": \\\"Enabled\\\",\\n                \\\"ID\\\": rule_name,\\n                \\\"Priority\\\": priority,\\n                \\\"DeleteMarkerReplication\\\": {\\\"Status\\\": \\\"Disabled\\\"},\\n                \\\"Filter\\\": {\\\"Prefix\\\": prefix},\\n                \\\"Destination\\\": {\\\"Bucket\\\": destination_bucket_arn, \\\"Account\\\": destination_account},\\n            }\\n        ],\\n    }\\n    if source_kms_key and destination_kms_key:\\n        json_input[\\\"Rules\\\"][0][\\\"SourceSelectionCriteria\\\"] = {\\n            \\\"SseKmsEncryptedObjects\\\": {\\\"Status\\\": \\\"Enabled\\\"}\\n        }\\n        json_input[\\\"Rules\\\"][0][\\\"Destination\\\"][\\\"EncryptionConfiguration\\\"] = {\\n            \\\"ReplicaKmsKeyID\\\": destination_kms_key\\n        }\\n    if owner_translation:\\n        json_input[\\\"Rules\\\"][0][\\\"Destination\\\"][\\\"AccessControlTranslation\\\"] = {\\\"Owner\\\": \\\"Destination\\\"}\\n    if existing_replication_rules:\\n        priority_list = []\\n        for rule in existing_replication_rules:\\n            priority_list.append(rule[\\\"Priority\\\"])\\n        json_input[\\\"Rules\\\"][0][\\\"Priority\\\"] = priority if priority != 1 else max(priority_list) + 1\\n        json_input[\\\"Rules\\\"] += existing_replication_rules\\n\\n    return json_input\\n\\n\\ndef put_replication_rule(source_bucket, json_input):\\n    s3_client = boto3.client(\\\"s3\\\")\\n\\n    try:\\n        s3_client.put_bucket_versioning(\\n            Bucket=source_bucket, VersioningConfiguration={\\\"Status\\\": \\\"Enabled\\\"}\\n        )\\n\\n        s3_client.put_bucket_replication(Bucket=source_bucket, ReplicationConfiguration=json_input)\\n    except botocore.exceptions.ClientError as error:\\n        if \\\"Destination bucket must have versioning enabled\\\" in error.response[\\\"Error\\\"][\\\"Message\\\"]:\\n            raise Exception(\\n                \\\"Destination bucket does not have versioning enabled yet. Please enable versioning in the destination account or run ReceiveReplicationReplica document first.\\\"\\n            )\\n        else:\\n            raise Exception(\\n                f\\\"Unable to put replication rule in the source bucket. Error: {error.response['Error']['Message']}\\\"\\n            )\\n\",\n        \"Handler\": \"script_handler\",\n        \"Runtime\": \"python3.8\"\n      },\n      \"isCritical\": true,\n      \"onFailure\": \"Abort\",\n      \"timeoutSeconds\": 180,\n      \"maxAttempts\": 1,\n      \"nextStep\": \"describeReplicationRule\"\n    },\n    {\n      \"name\": \"describeReplicationRule\",\n      \"action\": \"aws:executeAwsApi\",\n      \"onFailure\": \"Abort\",\n      \"inputs\": {\n        \"Service\": \"s3\",\n        \"Api\": \"GetBucketReplication\",\n        \"Bucket\": \"{{ SourceBucketName }}\"\n      },\n      \"outputs\": [\n        {\n          \"Name\": \"Outcome\",\n          \"Selector\": \"$.ReplicationConfiguration\",\n          \"Type\": \"StringMap\"\n        }\n      ],\n      \"isCritical\": true,\n      \"timeoutSeconds\": 60,\n      \"maxAttempts\": 3,\n      \"isEnd\": true\n    }\n  ],\n  \"outputs\": [\n    \"describeReplicationRule.Outcome\"\n  ]\n}",
  "CreatedDate": "2023-01-06T22:34:59.528Z",
  "DisplayName": null,
  "DocumentFormat": {
    "Value": "JSON"
  },
  "DocumentType": {
    "Value": "Automation"
  },
  "DocumentVersion": "1",
  "Name": "arn:aws:ssm:us-west-2:252871442415:document/Delete-PutReplicationRule",
  "Requires": [],
  "ReviewStatus": null,
  "Status": {
    "Value": "Active"
  },
  "StatusInformation": null,
  "VersionName": null,
  "ResponseMetadata": {
    "RequestId": "05074062-bef2-4288-a83e-5c909e6cb2e5",
    "Metadata": {},
    "ChecksumAlgorithm": 0,
    "ChecksumValidationStatus": 0
  },
  "ContentLength": 17230,
  "HttpStatusCode": 200,
  "LoggedAt": "2023-03-05T07:11:57.509302+00:00"
}
