{
  "AttachmentsContent": [],
  "Content": "{\n  \"schemaVersion\" : \"0.3\",\n  \"description\" : \"## Intent\\n Test your application and a relevant health check alarm if a process suddenly dies across a percentage of instances for your Amazon EC2 ASG. For example, an alarm for the UnhealthyHostsCount metric of a load balancer can be used if the httpd process is killed.\\n\\n## Type\\n  Test\\n\\n## Risk\\n  Medium\\n\\n## Requirements\\n  * ASG has more than 1 instances\\n  * EC2 instance with Linux OS\\n  * Multiple Unhealthy Hosts Alarm is setup for ASG\\n\\n## Permissions required for AutomationAssumeRole\\n  * ssm:GetParameters\\n  * ssm:DescribeInstanceInformation\\n  * ssm:SendCommand\\n  * ssm:ListCommands\\n  * ssm:ListCommandInvocations\\n  * cloudwatch:DescribeAlarms\\n  * cloudwatch:DescribeAlarmHistory\\n  * autoscaling:DescribeAutoScalingGroups\\n\\n## Supports Rollback\\n  No.\\n\\n## Cancellation behavior\\n  Abort execution.\\n\\n## Inputs\\n### (Required) AutomationAssumeRole:\\n  * type: String\\n  * description: (Required) The ARN of the role that allows Automation to perform the actions on your behalf\\n  * allowedPattern: arn:aws:iam::\\\\d+:\\\\S+\\n\\n### (Required) AutoScalingGroupName:\\n  * type: String\\n  * description: (Required) Name of auto scaling group\\n\\n### (Required) ProcessName:\\n  * type: String\\n  * description: (Required) Process name to be killed\\n\\n### (Required) HealthCheckAlarmName:\\n  * type: String\\n  * description: (Required) An alarm which checks the health of your application that will be triggered if said process dies. For example, an alarm for the UnhealthyHostsCount metric of a load balancer can be used if the httpd process is killed.\\n\\n### (Optional) Signal:\\n  * type: String\\n  * description: (Optional) The SIGNAL to be sent along with the kill command (default: SIGTERM).\\n  * default: 'SIGTERM'\\n\\n### (Optional) PercentageOfInstances:\\n  * type: Integer\\n  * description: (Optional) Percentage of Amazon EC2 ASG instances to be impacted, default is 1% to put minimum impact on Amazon EC2 ASG instances if not provided\\n  * default: 1\\n\\n### (Optional) ExpectedRecoveryTimeInMinutes:\\n  * type: String\\n  * description: (Optional) The expected recovery time after process dies (default 10)\\n  * default: '10'\\n  * allowedPattern: ^(100|[1-9]?[0-9])$\\n\\n## Details\\n  * Get healthy ASG EC2 instance ids.\\n  * Get list of ASG EC2 instance ids which size is based on given percentage of instances for test.\\n  * Kill process on chosen instances based on previous step.\\n  * Wait for given expected recovery time duration.\\n  * Verify that the HealthCheckAlarmName alarm is in state 'OK' after recovery.\\n\\n## Steps executed in normal flow\\n  * AssertAlarmToBeGreenBeforeTest\\n  * GetAsgInstanceIds\\n  * GetInstancesByPercentage\\n  * KillProcess\\n  * WaitForRecoveryTime\\n  * AssertAlarmTriggered\\n  * AssertAlarmToBeGreen\\n\\n## Outputs\\n  None\",\n  \"assumeRole\" : \"{{AutomationAssumeRole}}\",\n  \"parameters\" : {\n    \"AutomationAssumeRole\" : {\n      \"type\" : \"String\",\n      \"description\" : \"(Required) The ARN of the role that allows Automation to perform the actions on your behalf\",\n      \"allowedPattern\" : \"arn:aws:iam::\\\\d+:\\\\S+\"\n    },\n    \"AutoScalingGroupName\" : {\n      \"type\" : \"String\",\n      \"description\" : \"(Required) Name of auto scaling group\"\n    },\n    \"ProcessName\" : {\n      \"type\" : \"String\",\n      \"description\" : \"(Required) Process name to be killed\"\n    },\n    \"Signal\" : {\n      \"type\" : \"String\",\n      \"description\" : \"(Optional) The SIGNAL to be sent along with the kill command (default: SIGTERM).\\nThe allowed values are:\\n* SIGTERM: Signal used for graceful process termination. Can be referred as soft kill, because the receiver may choose to ignore it.\\n* SIGKILL: Signal used for immediate process termination. Cannot be caught, ignored or blocked. Child processes are killed as well.\\n\",\n      \"default\" : \"SIGTERM\",\n      \"allowedValues\" : [ \"SIGTERM\", \"SIGKILL\" ]\n    },\n    \"HealthCheckAlarmName\" : {\n      \"type\" : \"String\",\n      \"description\" : \"(Required) An alarm which checks the health of your application that will be triggered if said process dies. For example, an alarm for the UnhealthyHostsCount metric of a load balancer can be used if the httpd process is killed.\"\n    },\n    \"PercentageOfInstances\" : {\n      \"type\" : \"Integer\",\n      \"description\" : \"(Optional) Percentage of Amazon EC2 ASG instances to be impacted, default is 1% to put minimum impact on Amazon EC2 ASG instances if not provided\",\n      \"default\" : 1\n    },\n    \"ExpectedRecoveryTimeInMinutes\" : {\n      \"type\" : \"String\",\n      \"description\" : \"(Optional) The expected recovery time after process dies (default 10)\",\n      \"default\" : \"10\",\n      \"allowedPattern\" : \"^(100|[1-9]?[0-9])$\"\n    }\n  },\n  \"mainSteps\" : [ {\n    \"name\" : \"AssertAlarmToBeGreenBeforeTest\",\n    \"description\" : \"Ensure alarm is green before starting test. Fail if alarm is not green within expected time.\",\n    \"action\" : \"aws:waitForAwsResourceProperty\",\n    \"inputs\" : {\n      \"Service\" : \"cloudwatch\",\n      \"Api\" : \"DescribeAlarms\",\n      \"AlarmNames\" : [ \"{{HealthCheckAlarmName}}\" ],\n      \"PropertySelector\" : \"$.MetricAlarms[0].StateValue\",\n      \"DesiredValues\" : [ \"OK\" ]\n    }\n  }, {\n    \"name\" : \"GetAsgInstanceIds\",\n    \"description\" : \"Get all healthy instances in ASG.\",\n    \"action\" : \"aws:executeScript\",\n    \"onFailure\" : \"Abort\",\n    \"outputs\" : [ {\n      \"Name\" : \"InstanceIds\",\n      \"Selector\" : \"$.Payload.InstanceIds\",\n      \"Type\" : \"StringList\"\n    } ],\n    \"inputs\" : {\n      \"Runtime\" : \"python3.8\",\n      \"Handler\" : \"get_healthy_instance_ids_in_asg\",\n      \"InputPayload\" : {\n        \"AutoScalingGroupName\" : \"{{AutoScalingGroupName}}\"\n      },\n      \"Script\" : \"import logging\\nimport random\\nimport time\\nfrom math import ceil\\n\\nimport boto3\\nfrom botocore.config import Config\\n\\nlogger = logging.getLogger(__name__)\\nlogger.setLevel(logging.INFO)\\n\\n\\n\\n\\ndef get_healthy_instance_ids_in_asg(events, context):\\n    if 'AutoScalingGroupName' not in events:\\n        raise KeyError('Requires AutoScalingGroupName in events')\\n    config = Config(retries={'max_attempts': 20, 'mode': 'standard'})\\n    autoscaling = boto3.client('autoscaling', config=config)\\n\\n    auto_scaling_groups = autoscaling.describe_auto_scaling_groups(\\n        AutoScalingGroupNames=[\\n            events['AutoScalingGroupName']\\n        ]\\n    )\\n\\n    # Take all healthy ASG EC2 instances\\n    asg_healthy_instances = []\\n    for instance in auto_scaling_groups['AutoScalingGroups'][0]['Instances']:\\n        if instance['HealthStatus'] == 'Healthy' and instance['LifecycleState'] == 'InService':\\n            asg_healthy_instances.append(instance['InstanceId'])\\n\\n    output = {}\\n    output['InstanceIds'] = asg_healthy_instances\\n    return output\"\n    }\n  }, {\n    \"name\" : \"GetInstancesByPercentage\",\n    \"description\" : \"Get instances based on input parameters.\",\n    \"action\" : \"aws:executeScript\",\n    \"onFailure\" : \"Abort\",\n    \"outputs\" : [ {\n      \"Name\" : \"InstanceIds\",\n      \"Selector\" : \"$.Payload.InstanceIds\",\n      \"Type\" : \"StringList\"\n    } ],\n    \"inputs\" : {\n      \"Runtime\" : \"python3.8\",\n      \"Handler\" : \"get_instance_ids_by_percentage\",\n      \"InputPayload\" : {\n        \"InstanceIds\" : \"{{GetAsgInstanceIds.InstanceIds}}\",\n        \"Percentage\" : \"{{PercentageOfInstances}}\"\n      },\n      \"Script\" : \"import logging\\nimport random\\nimport time\\nfrom math import ceil\\n\\nimport boto3\\nfrom botocore.config import Config\\n\\nlogger = logging.getLogger(__name__)\\nlogger.setLevel(logging.INFO)\\n\\n\\n\\n\\ndef get_instance_ids_by_percentage(events, context):\\n    if 'InstanceIds' not in events or 'Percentage' not in events:\\n        raise KeyError('Requires InstanceIds and Percentage in events')\\n    instanceIds = events['InstanceIds']\\n    percentage = events['Percentage']\\n    instance_count = len(instanceIds)\\n    output = {}\\n    output['InstanceIds'] = []\\n    if instance_count < 1:\\n        raise Exception('No given EC2 instances')\\n    if percentage < 1:\\n        raise Exception('Given percentage should not be lower than 1%')\\n    instance_count = ceil(instance_count / 100 * percentage)\\n    for i in range(instance_count):\\n        output['InstanceIds'].append(instanceIds[i])\\n    return output\"\n    }\n  }, {\n    \"name\" : \"KillProcess\",\n    \"description\" : \"Run FIS command document to kill process.\",\n    \"action\" : \"aws:runCommand\",\n    \"maxAttempts\" : 3,\n    \"inputs\" : {\n      \"DocumentName\" : \"AWSFIS-Run-Kill-Process\",\n      \"InstanceIds\" : [ \"{{GetInstancesByPercentage.InstanceIds}}\" ],\n      \"Parameters\" : {\n        \"ProcessName\" : \"{{ProcessName}}\",\n        \"Signal\" : \"{{Signal}}\"\n      }\n    }\n  }, {\n    \"name\" : \"WaitForRecoveryTime\",\n    \"description\" : \"Wait for expected recovery time.\",\n    \"action\" : \"aws:sleep\",\n    \"inputs\" : {\n      \"Duration\" : \"PT{{ExpectedRecoveryTimeInMinutes}}M\"\n    }\n  }, {\n    \"name\" : \"AssertAlarmTriggered\",\n    \"description\" : \"Verify multiple unhealthy instance alarm to be red after killing process.\",\n    \"action\" : \"aws:executeScript\",\n    \"onFailure\" : \"Abort\",\n    \"inputs\" : {\n      \"Runtime\" : \"python3.8\",\n      \"Handler\" : \"verify_alarm_triggered\",\n      \"InputPayload\" : {\n        \"AlarmName\" : \"{{HealthCheckAlarmName}}\",\n        \"DurationInMinutes\" : \"{{ExpectedRecoveryTimeInMinutes}}\"\n      },\n      \"Script\" : \"import logging\\nimport time\\nfrom datetime import datetime, timedelta, timezone\\nfrom typing import Any, Callable, Iterator, List\\n\\nimport boto3\\nfrom botocore.config import Config\\n\\nboto3_config = Config(retries={'max_attempts': 20, 'mode': 'standard'})\\n\\nPUT_METRIC_ALARM_PARAMS = ['AlarmName', 'AlarmDescription', 'ActionsEnabled', 'OKActions',\\n                           'AlarmActions', 'InsufficientDataActions', 'MetricName', 'Namespace', 'Statistic',\\n                           'ExtendedStatistic',\\n                           'Dimensions', 'Period', 'Unit', 'EvaluationPeriods', 'DatapointsToAlarm',\\n                           'Threshold', 'ComparisonOperator', 'TreatMissingData', 'EvaluateLowSampleCountPercentile',\\n                           'Metrics', 'Tags', 'ThresholdMetricId']\\n\\n\\n\\n\\ndef verify_alarm_triggered(events, context):\\n    \\\"\\\"\\\"\\n    Verify if alarm triggered\\n    \\\"\\\"\\\"\\n    if 'AlarmName' not in events or ('DurationInMinutes' not in events and 'DurationInSeconds' not in events):\\n        raise KeyError('Requires AlarmName and either DurationInMinutes or DurationInSeconds in events')\\n\\n    cw = boto3.client('cloudwatch', config=boto3_config)\\n\\n    if 'DurationInMinutes' in events:\\n        start_date = datetime.now() - timedelta(minutes=int(events['DurationInMinutes']))\\n    else:\\n        start_date = datetime.now() - timedelta(seconds=int(events['DurationInSeconds']))\\n\\n    response = cw.describe_alarm_history(\\n        AlarmName=events['AlarmName'],\\n        HistoryItemType='StateUpdate',\\n        MaxRecords=5,\\n        ScanBy='TimestampDescending',\\n        StartDate=start_date)\\n\\n    for alarm_history_item in response['AlarmHistoryItems']:\\n        if alarm_history_item['HistorySummary'] == \\\"Alarm updated from OK to ALARM\\\":\\n            return\\n\\n    raise Exception('Alarm was not triggered')\"\n    }\n  }, {\n    \"name\" : \"AssertAlarmToBeGreen\",\n    \"description\" : \"Wait for the alarm to be green after test is complete.\",\n    \"action\" : \"aws:assertAwsResourceProperty\",\n    \"inputs\" : {\n      \"Service\" : \"cloudwatch\",\n      \"Api\" : \"DescribeAlarms\",\n      \"AlarmNames\" : [ \"{{HealthCheckAlarmName}}\" ],\n      \"PropertySelector\" : \"$.MetricAlarms[0].StateValue\",\n      \"DesiredValues\" : [ \"OK\" ]\n    },\n    \"isEnd\" : true\n  } ]\n}",
  "CreatedDate": "2023-06-27T13:56:49.941Z",
  "DisplayName": null,
  "DocumentFormat": {
    "Value": "JSON"
  },
  "DocumentType": {
    "Value": "Automation"
  },
  "DocumentVersion": "1",
  "Name": "AWSResilienceHub-KillProcessInAsgTest_2021-10-22",
  "Requires": [],
  "ReviewStatus": null,
  "Status": {
    "Value": "Active"
  },
  "StatusInformation": null,
  "VersionName": null,
  "ResponseMetadata": {
    "RequestId": "6ab80cec-ddee-4b70-8603-f1e8d177d741",
    "Metadata": {},
    "ChecksumAlgorithm": 0,
    "ChecksumValidationStatus": 0
  },
  "ContentLength": 12541,
  "HttpStatusCode": 200,
  "LoggedAt": "2023-06-28T07:12:38.4756965+00:00"
}
