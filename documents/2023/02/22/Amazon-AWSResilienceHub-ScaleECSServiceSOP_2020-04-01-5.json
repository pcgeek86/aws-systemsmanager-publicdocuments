{
  "AttachmentsContent": [],
  "Content": "{\n  \"description\" : \"## Id\\nAWSResilienceHub-ScaleECSServiceSOP_2020-04-01\\n\\n## Intent\\nScales services horizontally and vertically, up and down (compatible on EC2 and Fargate)\\n\\n## Type\\nSOP\\n\\n## Risk\\nMÐµdium\\n\\n## Requirements:\\n  * Launch Amazon ECS cluster [Get setup for Amazon ECS](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/get-set-up-for-amazon-ecs.html)\\n\\n## Permissions required for AutomationAssumeRole:\\n  * ecs:DescribeTaskDefinition\\n  * ecs:DescribeServices\\n  * ecs:UpdateService\\n  * ecs:RegisterTaskDefinition\\n\\n## Cancellation behavior\\nFail\\n\\n## Inputs:\\n### (Required) ServiceName\\n* type: String\\n* description: The name of ECS Service\\n\\n### (Required) ClusterName\\n  * type: String\\n  * description: The name of the ECS Cluster\\n\\n### (Optional) TaskDefinitionCPU\\n     * type: Integer\\n     * description: The CPU(units) of the task definition. If not set, copied from the current version.\\n\\n### (Optional) TaskDefinitionRAM\\n* type: Integer\\n* description: The RAM(MiB) of the task definition.\\n               If not set, copied from the current version. Can take values from 0.5GB to 30 GB\\n\\n### (Optional) NewTaskDefinitionArn\\n  * type: String\\n  * description: The ARN of the new task definition.\\n                 All other CPU/RAM parameters are ignored if this parameter is set\\n\\n### (Optional) NumberOfTasks\\n* type: Integer\\n* description: The desired number of tasks in the service\\n\\n### (Required) AutomationAssumeRole\\n  * type: String\\n  * description: The ARN of the role that allows Automation to perform the actions on your behalf.\\n\\n## Details\\nThe document creates a new task definition and applies it to service.\\n\\nPlease, use the following AWS documentation guidelines if something was left in a bad state.\\n  * [Runtime Troubleshooting](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/troubleshooting.html)\\n\\n## Steps executed in normal flow:\\n  * RecordStartTime\\n  * GetNewTaskDefinition\\n  * ChangeTaskDefinition\\n  * OutputRecoveryTime\\n\\n## Outputs:\\n### OutputRecoveryTime.RecoveryTime\\n  * type: String\\n  * description: overall recovery time for ECS application to recover.\\n\\n### GetNewTaskDefinition.NewTaskDefinitionArn\\n* type: String\\n* description: The ARN of the new task definition.\",\n  \"schemaVersion\" : \"0.3\",\n  \"assumeRole\" : \"{{ AutomationAssumeRole }}\",\n  \"outputs\" : [ \"OutputRecoveryTime.RecoveryTime\", \"GetNewTaskDefinition.NewTaskDefinitionArn\" ],\n  \"parameters\" : {\n    \"ServiceName\" : {\n      \"type\" : \"String\",\n      \"description\" : \"(Required) The name of the service\"\n    },\n    \"ClusterName\" : {\n      \"type\" : \"String\",\n      \"description\" : \"(Required) The name of the cluster\"\n    },\n    \"TaskDefinitionCPU\" : {\n      \"type\" : \"Integer\",\n      \"description\" : \"(Optional) The CPU(units) of the task definition. If not set, copied from the current version.\",\n      \"default\" : -1\n    },\n    \"TaskDefinitionRAM\" : {\n      \"type\" : \"Integer\",\n      \"description\" : \"(Optional) The RAM(MiB) of the task definition . If not set, copied from the current version. Can take values from 0.5GB to 30 GB\",\n      \"default\" : -1\n    },\n    \"NewTaskDefinitionArn\" : {\n      \"type\" : \"String\",\n      \"description\" : \"(Optional) The ARN of the new task definition. All other CPU/RAM parameters are ignored if this parameter is set\",\n      \"default\" : \"\"\n    },\n    \"NumberOfTasks\" : {\n      \"type\" : \"Integer\",\n      \"description\" : \"(Optional) The desired number of tasks in the service\",\n      \"default\" : -1\n    },\n    \"AutomationAssumeRole\" : {\n      \"type\" : \"String\",\n      \"description\" : \"(Required) The ARN of the role that allows Automation to perform the actions on your behalf.\"\n    }\n  },\n  \"mainSteps\" : [ {\n    \"name\" : \"RecordStartTime\",\n    \"action\" : \"aws:executeScript\",\n    \"description\" : \"Start recording execution time.\",\n    \"outputs\" : [ {\n      \"Name\" : \"StartTime\",\n      \"Selector\" : \"$.Payload\",\n      \"Type\" : \"String\"\n    } ],\n    \"inputs\" : {\n      \"Runtime\" : \"python3.8\",\n      \"Handler\" : \"start_time\",\n      \"Script\" : \"import logging\\nimport time\\nfrom datetime import datetime, timezone\\n\\nimport boto3\\nfrom botocore.exceptions import ClientError\\nfrom dateutil import parser\\n\\nlogger = logging.getLogger()\\nlogger.setLevel(logging.INFO)\\n\\n\\n\\ndef start_time(events, context):\\n    return datetime.now(timezone.utc).isoformat()\"\n    }\n  }, {\n    \"name\" : \"GetNewTaskDefinition\",\n    \"action\" : \"aws:executeScript\",\n    \"description\" : \"Execute script that creates a new task definition if TaskDefinitionCPU or TaskDefinitionRAM aren't None or get new task definition from parameter.\",\n    \"outputs\" : [ {\n      \"Name\" : \"NewTaskDefinitionArn\",\n      \"Selector\" : \"$.Payload.TaskDefinitionArn\",\n      \"Type\" : \"String\"\n    } ],\n    \"inputs\" : {\n      \"Runtime\" : \"python3.8\",\n      \"Handler\" : \"create_new_task_definition\",\n      \"Script\" : \"import logging\\n\\nimport boto3\\nfrom botocore.config import Config\\nfrom botocore.exceptions import ClientError\\n\\nlogger = logging.getLogger(__name__)\\nlogger.setLevel(logging.INFO)\\n\\n\\n\\ndef check_required_params(required_params, events):\\n    for key in required_params:\\n        if key not in events:\\n            raise KeyError(f'Requires {key} in events')\\n\\n\\n\\ndef create_new_task_definition(events, context):\\n    \\\"\\\"\\\"\\n    Returns a new task definition. If  `NewTaskDefinitionArn` is provided, it simply returns it.\\n    If no `NewTaskDefinitionArn` provided, creates a new task definition, from a one in specified service/cluster\\n    with new cpu and memory, if specified\\n    :param events: The object which contains passed parameters from SSM document\\n     * `NewTaskDefinitionArn` - Optional. The predefined task definition arn\\n     * `ServiceName` - Optional. Must be specified if `NewTaskDefinitionArn` not set. Name of ECS Service\\n     * `ClusterName` - Optional. Must be specified if `NewTaskDefinitionArn` not set. Name of ECS Cluster\\n     * `TaskDefinitionCPU` - Optional. New CPU for TaskDefinition\\n     * `TaskDefinitionRAM` - Optional. New RAM for TaskDefinition\\n    :param context: context\\n    :return: The arn of newly created task definition, or the NewTaskDefinitionArn if specified\\n    \\\"\\\"\\\"\\n    config = Config(retries={'max_attempts': 20, 'mode': 'standard'})\\n    ecs_client = boto3.client('ecs', config=config)\\n\\n    if 'NewTaskDefinitionArn' in events and events['NewTaskDefinitionArn']:\\n        # describe_task_definition will raise ClientError if not such task definition exists\\n        ecs_client.describe_task_definition(\\n            taskDefinition=events['NewTaskDefinitionArn']\\n        )\\n        return {\\\"TaskDefinitionArn\\\": events['NewTaskDefinitionArn']}\\n    else:\\n        required_params = [\\n            'ServiceName',\\n            'ClusterName'\\n        ]\\n        check_required_params(required_params, events)\\n    services = ecs_client.describe_services(\\n        services=[events['ServiceName']],\\n        cluster=events['ClusterName']\\n    )\\n    if not services['services']:\\n        raise ClientError(error_response={\\n            \\\"Error\\\":\\n                {\\n                    \\\"Code\\\": \\\"ServiceNotFound\\\",\\n                    \\\"Message\\\": f\\\"Could not find service: {events['ServiceName']}\\\"\\n                }\\n        },\\n            operation_name='DescribeServices'\\n        )\\n    task_definition_arn = services['services'][0]['taskDefinition']\\n    task_definition = ecs_client.describe_task_definition(\\n        taskDefinition=task_definition_arn\\n    )['taskDefinition']\\n    for key in [\\n        'taskDefinitionArn',\\n        'revision',\\n        'status',\\n        'registeredAt',\\n        'registeredBy',\\n        'compatibilities',\\n        'requiresAttributes'\\n    ]:\\n        task_definition.pop(key)\\n    if 'TaskDefinitionCPU' in events and events['TaskDefinitionCPU'] > 0:\\n        task_definition['cpu'] = str(events['TaskDefinitionCPU'])\\n    if 'TaskDefinitionRAM' in events and events['TaskDefinitionRAM'] > 0:\\n        task_definition['memory'] = str(events['TaskDefinitionRAM'])\\n    response = ecs_client.register_task_definition(**task_definition)\\n\\n    return {\\\"TaskDefinitionArn\\\": response['taskDefinition']['taskDefinitionArn']}\",\n      \"InputPayload\" : {\n        \"ServiceName\" : \"{{ServiceName}}\",\n        \"ClusterName\" : \"{{ClusterName}}\",\n        \"NewTaskDefinitionArn\" : \"{{NewTaskDefinitionArn}}\",\n        \"TaskDefinitionCPU\" : \"{{TaskDefinitionCPU}}\",\n        \"TaskDefinitionRAM\" : \"{{TaskDefinitionRAM}}\"\n      }\n    }\n  }, {\n    \"name\" : \"ChangeTaskDefinition\",\n    \"action\" : \"aws:executeScript\",\n    \"description\" : \"Change task definition from parameter.\",\n    \"inputs\" : {\n      \"Runtime\" : \"python3.8\",\n      \"Handler\" : \"update_service\",\n      \"Script\" : \"import logging\\n\\nimport boto3\\nfrom botocore.config import Config\\nfrom botocore.exceptions import ClientError\\n\\nlogger = logging.getLogger(__name__)\\nlogger.setLevel(logging.INFO)\\n\\n\\n\\ndef update_service(events, context):\\n    \\\"\\\"\\\"\\n    Update service with `NewTaskDefinitionArn`.\\n    :param events: The object which contains passed parameters from SSM document\\n     * `ServiceName` - Required. Name of ECS Service\\n     * `ClusterName` - Required. Name of ECS Cluster\\n     * `TaskDefinitionArn` - Optional. Name of TaskDefinition\\n     * `NumberOfTasks` - Optional. Number of task. If NumberOfTasks < 1 or not set, used old\\n     value in the service\\n    :param context: context\\n    :return: True or error\\n    \\\"\\\"\\\"\\n    config = Config(retries={'max_attempts': 20, 'mode': 'standard'})\\n    ecs_client = boto3.client('ecs', config=config)\\n\\n    service_definition = {\\n        \\\"service\\\": events['ServiceName'],\\n        \\\"cluster\\\": events['ClusterName'],\\n        \\\"taskDefinition\\\": events['TaskDefinitionArn']\\n    }\\n\\n    number_of_task = events.get('NumberOfTasks', None)\\n    if number_of_task and number_of_task > 0:\\n        service_definition.update({\\n            \\\"desiredCount\\\": number_of_task\\n        })\\n\\n    ecs_client.update_service(**service_definition)\",\n      \"InputPayload\" : {\n        \"ServiceName\" : \"{{ServiceName}}\",\n        \"ClusterName\" : \"{{ClusterName}}\",\n        \"NumberOfTasks\" : \"{{NumberOfTasks}}\",\n        \"TaskDefinitionArn\" : \"{{GetNewTaskDefinition.NewTaskDefinitionArn}}\"\n      }\n    }\n  }, {\n    \"name\" : \"WaitForScaleUpToComplete\",\n    \"action\" : \"aws:executeScript\",\n    \"description\" : \"Wait for all status tasks in ECS application to be in \\\"RUNNING\\\" state\",\n    \"inputs\" : {\n      \"Runtime\" : \"python3.8\",\n      \"Handler\" : \"wait_services_stable\",\n      \"Script\" : \"import logging\\n\\nimport boto3\\nfrom botocore.config import Config\\nfrom botocore.exceptions import ClientError\\n\\nlogger = logging.getLogger(__name__)\\nlogger.setLevel(logging.INFO)\\n\\n\\n\\ndef check_required_params(required_params, events):\\n    for key in required_params:\\n        if key not in events:\\n            raise KeyError(f'Requires {key} in events')\\n\\n\\n\\ndef wait_services_stable(events, context):\\n    \\\"\\\"\\\"\\n    Wait while service will be stable.\\n    :param events: The object which contains passed parameters from SSM document\\n     * `ServiceName` - Required. Name of ECS Service\\n     * `ClusterName` - Required. Name of ECS Cluster\\n    :param context: context\\n    :return: True or error\\n    \\\"\\\"\\\"\\n    config = Config(retries={'max_attempts': 20, 'mode': 'standard'})\\n    ecs_client = boto3.client('ecs', config=config)\\n\\n    cluster_name = events['ClusterName']\\n    service = events.get('ServiceName')\\n\\n    if service:\\n        services = [service]\\n    else:\\n        services = []\\n        paginator = ecs_client.get_paginator('list_services')\\n        pages = paginator.paginate(cluster=cluster_name)\\n\\n        for page in pages:\\n            service_arns = page.get('serviceArns')\\n            services.extend(service_arns)\\n\\n    waiter = ecs_client.get_waiter('services_stable')\\n    waiter.wait(\\n        cluster=cluster_name,\\n        services=services,\\n        WaiterConfig={\\n            'Delay': 15,\\n            'MaxAttempts': 20\\n        }\\n    )\\n    return True\",\n      \"InputPayload\" : {\n        \"ServiceName\" : \"{{ServiceName}}\",\n        \"ClusterName\" : \"{{ClusterName}}\"\n      }\n    }\n  }, {\n    \"name\" : \"OutputRecoveryTime\",\n    \"action\" : \"aws:executeScript\",\n    \"description\" : \"Calculate execution time.\",\n    \"outputs\" : [ {\n      \"Name\" : \"RecoveryTime\",\n      \"Selector\" : \"$.Payload\",\n      \"Type\" : \"Integer\"\n    } ],\n    \"inputs\" : {\n      \"Runtime\" : \"python3.8\",\n      \"Handler\" : \"recovery_time\",\n      \"Script\" : \"import logging\\nimport time\\nfrom datetime import datetime, timezone\\n\\nimport boto3\\nfrom botocore.exceptions import ClientError\\nfrom dateutil import parser\\n\\nlogger = logging.getLogger()\\nlogger.setLevel(logging.INFO)\\n\\n\\n\\ndef recovery_time(events, context):\\n    return (datetime.now(timezone.utc) - parser.parse(events['StartTime'])).seconds\",\n      \"InputPayload\" : {\n        \"StartTime\" : \"{{ RecordStartTime.StartTime }}\"\n      }\n    }\n  } ]\n}",
  "CreatedDate": "2023-02-19T17:16:15.125Z",
  "DisplayName": null,
  "DocumentFormat": {
    "Value": "JSON"
  },
  "DocumentType": {
    "Value": "Automation"
  },
  "DocumentVersion": "5",
  "Name": "AWSResilienceHub-ScaleECSServiceSOP_2020-04-01",
  "Requires": [],
  "ReviewStatus": null,
  "Status": {
    "Value": "Active"
  },
  "StatusInformation": null,
  "VersionName": null,
  "ResponseMetadata": {
    "RequestId": "b033e012-cad5-4658-abe2-3119523523d3",
    "Metadata": {},
    "ChecksumAlgorithm": 0,
    "ChecksumValidationStatus": 0
  },
  "ContentLength": 14047,
  "HttpStatusCode": 200,
  "LoggedAt": "2023-02-22T07:12:54.7659206+00:00"
}
