{
  "AttachmentsContent": [],
  "Content": "{\n  \"schemaVersion\" : \"0.3\",\n  \"description\" : \"### Document name - AWSConfigRemediation-MoveLambdaToVPC\\n\\n## What does this document do?\\nThis document moves the given AWS Lambda function to the user specified Amazon Virtual Private Cloud (VPC) using the \\n[UpdateFunctionConfiguration](https://docs.aws.amazon.com/lambda/latest/dg/API_UpdateFunctionConfiguration.html) API.\\n\\n## Input Parameters\\n* AutomationAssumeRole: (Required) The ARN of the role that allows Automation to perform the actions on your behalf.\\n* FunctionName: (Required) The AWS Lambda function name.\\n* SubnetIds: (Required) The Amazon VPC subnet ids.\\n* SecurityGroupIds: (Required) The Amazon EC2 security group ids.\\n\\n## Output Parameters\\n* UpdateFunctionVPCConfiguration.Response: The standard HTTP response from the UpdateFunctionConfiguration API call.\\n\",\n  \"assumeRole\" : \"{{ AutomationAssumeRole }}\",\n  \"parameters\" : {\n    \"AutomationAssumeRole\" : {\n      \"type\" : \"String\",\n      \"description\" : \"(Required) The ARN of the role that allows Automation to perform the actions on your behalf.\",\n      \"allowedPattern\" : \"^arn:(aws[a-zA-Z-]*)?:iam::\\\\d{12}:role/[\\\\w+=,.@-]+\"\n    },\n    \"FunctionName\" : {\n      \"type\" : \"String\",\n      \"description\" : \"(Required) The AWS Lambda function name.\",\n      \"allowedPattern\" : \"[a-zA-Z0-9-_]*$\"\n    },\n    \"SubnetIds\" : {\n      \"type\" : \"StringList\",\n      \"description\" : \"(Required) The Amazon VPC subnet ids.\",\n      \"allowedPattern\" : \"[a-z0-9-,;]*\"\n    },\n    \"SecurityGroupIds\" : {\n      \"type\" : \"StringList\",\n      \"description\" : \"(Required) The Amazon EC2 security group ids.\",\n      \"allowedPattern\" : \"[a-z0-9-,;]*\"\n    }\n  },\n  \"outputs\" : [ \"UpdateFunctionVPCConfiguration.Response\" ],\n  \"mainSteps\" : [ {\n    \"name\" : \"UpdateFunctionVPCConfiguration\",\n    \"action\" : \"aws:executeAwsApi\",\n    \"description\" : \"## UpdateFunctionVPCConfiguration\\nMakes UpdateFunctionConfiguration API call using AWS Lambda function name to update Amazon VPC Configuration i.e, SubnetIds and SecurityGroupIds.\\n## Outputs\\n* Response: The standard response from the UpdateFunctionConfiguration API call.\\n\",\n    \"timeoutSeconds\" : 600,\n    \"isEnd\" : false,\n    \"inputs\" : {\n      \"Service\" : \"lambda\",\n      \"Api\" : \"UpdateFunctionConfiguration\",\n      \"FunctionName\" : \"{{FunctionName}}\",\n      \"VpcConfig\" : {\n        \"SecurityGroupIds\" : \"{{ SecurityGroupIds }}\",\n        \"SubnetIds\" : \"{{ SubnetIds }}\"\n      }\n    },\n    \"outputs\" : [ {\n      \"Name\" : \"Response\",\n      \"Selector\" : \"$\",\n      \"Type\" : \"StringMap\"\n    } ]\n  }, {\n    \"name\" : \"VerifyFunctionUpdateStatus\",\n    \"action\" : \"aws:waitForAwsResourceProperty\",\n    \"timeoutSeconds\" : 600,\n    \"isEnd\" : false,\n    \"description\" : \"## VerifyFunctionUpdateStatus\\nWaits for the given AWS Lambda function last update status set to be \\\"Successful\\\".\\n\",\n    \"inputs\" : {\n      \"Service\" : \"lambda\",\n      \"Api\" : \"GetFunction\",\n      \"FunctionName\" : \"{{FunctionName}}\",\n      \"PropertySelector\" : \"$.Configuration.LastUpdateStatus\",\n      \"DesiredValues\" : [ \"Successful\" ]\n    }\n  }, {\n    \"name\" : \"VerifyLambdaVPCConfiguration\",\n    \"action\" : \"aws:executeScript\",\n    \"description\" : \"## VerifyLambdaVPCConfiguration\\nVerifies the given AWS Lambda function VPC configuration.\\n## Outputs\\n* Output: The standard HTTP response from the GetFunctionConfiguration API call.\\n\",\n    \"isEnd\" : true,\n    \"timeoutSeconds\" : 600,\n    \"inputs\" : {\n      \"Runtime\" : \"python3.7\",\n      \"Handler\" : \"handler\",\n      \"InputPayload\" : {\n        \"FunctionName\" : \"{{ FunctionName }}\",\n        \"SecurityGroupIds\" : \"{{ SecurityGroupIds }}\",\n        \"SubnetIds\" : \"{{ SubnetIds }}\"\n      },\n      \"Script\" : \"import boto3\\ndef verifySecurityGroups(lambda_config_details, security_group_ids):\\n  for security_group in security_group_ids:\\n    if security_group not in lambda_config_details['VpcConfig']['SecurityGroupIds']:\\n      return False\\n  return True\\n\\ndef verifySubnetIds(lambda_config_details, subnet_ids):\\n  for subnet_id in subnet_ids:\\n    if subnet_id not in lambda_config_details['VpcConfig']['SubnetIds']:\\n      return False\\n  return True\\n\\ndef handler(event, context):\\n  lambda_client = boto3.client(\\\"lambda\\\")\\n  function_name = event[\\\"FunctionName\\\"]\\n  security_group_ids = event[\\\"SecurityGroupIds\\\"]\\n  subnet_ids = event[\\\"SubnetIds\\\"]\\n  lambda_config_details = lambda_client.get_function_configuration(FunctionName=function_name)\\n  if verifySecurityGroups(lambda_config_details,security_group_ids) and verifySubnetIds(lambda_config_details,subnet_ids):\\n    return {\\n        \\\"output\\\": {\\n            \\\"Message\\\": \\\"Verification of update Amazon VPC configuration for AWS Lambda function {} is successful.\\\".format(function_name),\\n            \\\"HTTPResponse\\\": lambda_config_details['ResponseMetadata']\\n        }\\n      }\\n  raise Exception(\\\"VERIFICATION FAILED. UPDATE AMAZON VPC CONFIGURATION FOR AWS LAMBDA FUNCTION {} IS FAILED\\\".format(function_name))         \"\n    },\n    \"outputs\" : [ {\n      \"Name\" : \"Output\",\n      \"Selector\" : \"$.Payload.output\",\n      \"Type\" : \"StringMap\"\n    } ]\n  } ]\n}",
  "CreatedDate": "2020-12-07T22:10:06.202Z",
  "DisplayName": null,
  "DocumentFormat": {
    "Value": "JSON"
  },
  "DocumentType": {
    "Value": "Automation"
  },
  "DocumentVersion": "1",
  "Name": "AWSConfigRemediation-MoveLambdaToVPC",
  "Requires": [],
  "ReviewStatus": null,
  "Status": {
    "Value": "Active"
  },
  "StatusInformation": null,
  "VersionName": null,
  "ResponseMetadata": {
    "RequestId": "37b8219f-1e9a-4445-a85d-e170eeb604d2",
    "Metadata": {},
    "ChecksumAlgorithm": 0,
    "ChecksumValidationStatus": 0
  },
  "ContentLength": 5700,
  "HttpStatusCode": 200,
  "LoggedAt": "2022-06-14T07:12:43.5876533+00:00"
}
