{
  "AttachmentsContent": [],
  "Content": "{\n  \"description\": \"The **AWSSupport-TroubleshootAPIGatewayHttpErrors** helps troubleshoot 5XX/4XX errors when invoking a deployed API Gateway REST API by:\\n1. Parsing access and/or execution logs\\n2. Analysing errors and providing remediation steps via re:Post articles and/or AWS documentation.\\n\\n## Limitations:\\n1. Logging must be enabled. See [Set up CloudWatch API logging using the API Gateway console](https://docs.aws.amazon.com/apigateway/latest/developerguide/set-up-logging.html#set-up-access-logging-using-console).\\n2. Logs must have been enabled prior to the error(s) occurring. Log capturing and analysis cannot be done retrospectively.\\n3. Errors covered: 500, 502, 503, 504, 401, 403, 429.\\n4. Only REST API. WebSocket and HTTP (v2) are **not** covered by this runbook.\\n\\n## Important:\\nUsing this runbook might incur extra charges against your AWS account for the CloudWatch Logs captured by your REST API, and CloudWatch Logs Insights used in the analysis. See [Amazon CloudWatch Pricing](https://aws.amazon.com/cloudwatch/pricing/) for more details on the charges that my be incurred.  If the ```aws:deletestack``` step fails, go to the AWS CloudFormation console to manually delete the stack. The stack name created by this runbook begins with ```AWSSupport-TroubleshootAPIGatewayHttpErrors```. For information about deleting AWS CloudFormation stacks, see [Deleting a stack](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/cfn-console-delete-stack.html) in the AWS CloudFormation User Guide.\",\n  \"schemaVersion\": \"0.3\",\n  \"assumeRole\": \"{{AutomationAssumeRole}}\",\n  \"parameters\": {\n    \"RestApiId\": {\n      \"type\": \"String\",\n      \"description\": \"(Required) The API ID for the API that requires troubleshooting.\",\n      \"allowedPattern\": \"^[a-zA-Z0-9]{10}$\"\n    },\n    \"StageName\": {\n      \"type\": \"String\",\n      \"description\": \"(Required) The name of the deployed stage.\",\n      \"allowedPattern\": \"^[a-zA-Z0-9_\\\\-]{1,128}$\"\n    },\n    \"ResourcePath\": {\n      \"type\": \"String\",\n      \"description\": \"(Required) The resource path for which method is configured. Examples: '/', '/store/items', '/{resource}' , etc.\",\n      \"allowedPattern\": \"^[a-zA-Z0-9{}/_\\\\-{}+]+$\",\n      \"default\": \"/\"\n    },\n    \"HttpMethod\": {\n      \"type\": \"String\",\n      \"description\": \"(Required) The method for the configured resource path.\",\n      \"allowedValues\": [\n        \"ANY\",\n        \"DELETE\",\n        \"HEAD\",\n        \"OPTIONS\",\n        \"GET\",\n        \"POST\",\n        \"PUT\",\n        \"PATCH\"\n      ],\n      \"default\": \"GET\"\n    },\n    \"StartTime\": {\n      \"type\": \"String\",\n      \"description\": \"(Required) The start date and time for querying the CloudWatch Logs. The format must be 'yyyy-MM-ddTHH:mm:ss' and timezone needs to be UTC. For example, 2023-01-20T00:00:00. If no date-time is entered, the start will be 3 days before the current date and time.\",\n      \"allowedPattern\": \"^$|^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])T(2[0-3]|[01][0-9]):[0-5][0-9]:[0-5][0-9]$\",\n      \"default\": \"\"\n    },\n    \"EndTime\": {\n      \"type\": \"String\",\n      \"description\": \"(Required) The end date and time for querying the CloudWatch Logs. The format must be 'yyyy-MM-ddTHH:mm:ss' and timezone needs to be UTC. For example, 2023-01-25T00:00:00. If no date-time is entered, the end will be the current date and time.\",\n      \"allowedPattern\": \"^$|^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])T(2[0-3]|[01][0-9]):[0-5][0-9]:[0-5][0-9]$\",\n      \"default\": \"\"\n    },\n    \"AccessLogs\": {\n      \"type\": \"Boolean\",\n      \"description\": \"(Required) Should access logs be analysed?\",\n      \"allowedValues\": [\n        true,\n        false\n      ],\n      \"default\": false\n    },\n    \"ExecutionId\": {\n      \"type\": \"String\",\n      \"description\": \"(Optional) The execution ID for request where error was observed.\",\n      \"allowedPattern\": \"^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$\"\n    },\n    \"AutomationAssumeRole\": {\n      \"type\": \"AWS::IAM::Role::Arn\",\n      \"description\": \"(Optional) The Amazon Resource Name (ARN) of the AWS Identity and Access Management (IAM) role that allows Systems Manager Automation to perform the actions on your behalf. If no role is specified, Systems Manager Automation uses the permissions of the user that starts this runbook.\",\n      \"default\": \"\"\n    }\n  },\n  \"mainSteps\": [\n    {\n      \"name\": \"CheckApiExists\",\n      \"action\": \"aws:executeScript\",\n      \"description\": \"Checks whether the provided REST API exists.\",\n      \"inputs\": {\n        \"Runtime\": \"python3.8\",\n        \"Script\": \"# Copyright 2023 Amazon.com, Inc. and its affiliates. All Rights Reserved.\\n# SPDX-License-Identifier: LicenseRef-.amazon.com.-AmznSL-1.0\\n# Licensed under the Amazon Software License (the \\\"License\\\").\\n# You may not use this file except in compliance with the License.\\n# A copy of the License is located at\\n#   http://aws.amazon.com/asl/\\n# or in the \\\"license\\\" file accompanying this file. This file is distributed\\n# on an \\\"AS IS\\\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\\n# express or implied. See the License for the specific language governing\\n# permissions and limitations under the License.\\n\\nimport sys\\nimport boto3\\n\\napigw = boto3.client('apigateway')\\n\\n\\ndef check_api_exists(event, context):\\n    exists = False\\n    authorized = True\\n    api_id = event['RestApiId']\\n    if not api_id:\\n        print(\\\"[WARNING] No API ID was provided\\\")\\n        return {\\\"ApiExists\\\": False, \\\"Authorized\\\": authorized}\\n    else:\\n        try:\\n            response = apigw.get_rest_api(\\n                restApiId=api_id\\n            )\\n            exists = response['id'] == api_id\\n        except apigw.exceptions.NotFoundException:\\n            print(f\\\"[WARNING] The API ID {api_id} was not found.\\\")\\n            exists = False\\n        except apigw.exceptions.UnauthorizedException:\\n            print(\\\"[WARNING] The IAM Role provided is not authorized to call apigateway:GetStage on the provided resource.\\\")\\n            authorized = False\\n        except Exception as err:\\n            print(f\\\"[ERROR] An issue occurred when attempting to retrieve the API ID {api_id}\\\\nError message: {str(err)}\\\")\\n            sys.exit(1)\\n    return {\\\"ApiExists\\\": exists, \\\"Authorized\\\": authorized}\\n\",\n        \"Handler\": \"check_api_exists\",\n        \"InputPayload\": {\n          \"RestApiId\": \"{{ RestApiId }}\"\n        }\n      },\n      \"outputs\": [\n        {\n          \"Name\": \"ApiExists\",\n          \"Selector\": \"$.Payload.ApiExists\",\n          \"Type\": \"Boolean\"\n        },\n        {\n          \"Name\": \"Authorized\",\n          \"Selector\": \"$.Payload.Authorized\",\n          \"Type\": \"Boolean\"\n        }\n      ]\n    },\n    {\n      \"name\": \"BranchApiExists\",\n      \"action\": \"aws:branch\",\n      \"description\": \"Confirms if the API exists and determines next step.\",\n      \"inputs\": {\n        \"Choices\": [\n          {\n            \"And\": [\n              {\n                \"Variable\": \"{{ CheckApiExists.ApiExists }}\",\n                \"BooleanEquals\": true\n              },\n              {\n                \"Variable\": \"{{ CheckApiExists.Authorized }}\",\n                \"BooleanEquals\": true\n              }\n            ],\n            \"NextStep\": \"CheckStageExists\"\n          }\n        ],\n        \"Default\": \"NoResourceOrNotAuthorized\"\n      }\n    },\n    {\n      \"name\": \"CheckStageExists\",\n      \"action\": \"aws:executeScript\",\n      \"description\": \"Checks whether the provided stage name exists in the given API.\",\n      \"inputs\": {\n        \"Runtime\": \"python3.8\",\n        \"Script\": \"# Copyright 2023 Amazon.com, Inc. and its affiliates. All Rights Reserved.\\n# SPDX-License-Identifier: LicenseRef-.amazon.com.-AmznSL-1.0\\n# Licensed under the Amazon Software License (the \\\"License\\\").\\n# You may not use this file except in compliance with the License.\\n# A copy of the License is located at\\n#   http://aws.amazon.com/asl/\\n# or in the \\\"license\\\" file accompanying this file. This file is distributed\\n# on an \\\"AS IS\\\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\\n# express or implied. See the License for the specific language governing\\n# permissions and limitations under the License.\\n\\nimport sys\\nimport boto3\\n\\napigw = boto3.client('apigateway')\\n\\n\\ndef check_stage_exists(event, context):\\n    exists = False\\n    authorized = True\\n    api_id = event['RestApiId']\\n    api_stage = event['StageName']\\n    access_log_group = \\\"\\\"\\n\\n    if not api_id or not api_stage:\\n        return {\\\"StageExists\\\": False, \\\"Authorized\\\": authorized}\\n    else:\\n        try:\\n            response = apigw.get_stage(\\n                restApiId=api_id,\\n                stageName=api_stage\\n            )\\n            exists = 'stageName' in response and response['stageName'] == api_stage\\n            if exists and 'accessLogSettings' in response:\\n                access_log_group = response['accessLogSettings']['destinationArn']\\n        except apigw.exceptions.NotFoundException:\\n            print(f\\\"[WARNING] The API stage {api_stage} for API ID {api_id} was not found.\\\")\\n            exists = False\\n        except apigw.exceptions.UnauthorizedException:\\n            print(\\\"[WARNING] The IAM Role provided is not authorized to call apigateway:GetStage on the provided resource.\\\")\\n            authorized = False\\n        except Exception as err:\\n            print(f\\\"[ERROR] An issue occurred when attempting to retrieve the stage {api_stage} for API ID {api_id}\\\\nError message: {str(err)}\\\")\\n            sys.exit(1)\\n\\n    return {\\\"StageExists\\\": exists, \\\"Authorized\\\": authorized, \\\"AccessLogGroup\\\": access_log_group}\\n\",\n        \"Handler\": \"check_stage_exists\",\n        \"InputPayload\": {\n          \"RestApiId\": \"{{ RestApiId }}\",\n          \"StageName\": \"{{ StageName }}\"\n        }\n      },\n      \"outputs\": [\n        {\n          \"Name\": \"StageExists\",\n          \"Selector\": \"$.Payload.StageExists\",\n          \"Type\": \"Boolean\"\n        },\n        {\n          \"Name\": \"Authorized\",\n          \"Selector\": \"$.Payload.Authorized\",\n          \"Type\": \"Boolean\"\n        },\n        {\n          \"Name\": \"CloudWatchLogsEnabled\",\n          \"Selector\": \"$.Payload.CloudWatchLogsEnabled\",\n          \"Type\": \"Boolean\"\n        },\n        {\n          \"Name\": \"AccessLogGroup\",\n          \"Selector\": \"$.Payload.AccessLogGroup\",\n          \"Type\": \"String\"\n        }\n      ]\n    },\n    {\n      \"name\": \"BranchStageExists\",\n      \"action\": \"aws:branch\",\n      \"description\": \"Confirms whether API exists and determines next step.\",\n      \"inputs\": {\n        \"Choices\": [\n          {\n            \"And\": [\n              {\n                \"Variable\": \"{{ CheckStageExists.StageExists }}\",\n                \"BooleanEquals\": true\n              },\n              {\n                \"Variable\": \"{{ CheckStageExists.Authorized }}\",\n                \"BooleanEquals\": true\n              }\n            ],\n            \"NextStep\": \"CheckResourceExists\"\n          }\n        ],\n        \"Default\": \"NoResourceOrNotAuthorized\"\n      }\n    },\n    {\n      \"name\": \"CheckResourceExists\",\n      \"action\": \"aws:executeScript\",\n      \"description\": \"Checks if the provided resouces exists in the API\",\n      \"inputs\": {\n        \"Runtime\": \"python3.8\",\n        \"Script\": \"# Copyright 2023 Amazon.com, Inc. and its affiliates. All Rights Reserved.\\n# SPDX-License-Identifier: LicenseRef-.amazon.com.-AmznSL-1.0\\n# Licensed under the Amazon Software License (the \\\"License\\\").\\n# You may not use this file except in compliance with the License.\\n# A copy of the License is located at\\n#   http://aws.amazon.com/asl/\\n# or in the \\\"license\\\" file accompanying this file. This file is distributed\\n# on an \\\"AS IS\\\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\\n# express or implied. See the License for the specific language governing\\n# permissions and limitations under the License.\\n\\nimport sys\\nimport boto3\\n\\napigw = boto3.client('apigateway')\\n\\n\\ndef check_resource_exists(event, context):\\n    exists = False\\n    authorized = True\\n    api_id = event['RestApiId']\\n    resource_path = event['ResourcePath']\\n    resource_id = ''\\n\\n    try:\\n        # No need to catch NotFoundException as existence is being checked here rather than by the API.\\n        paginator = apigw.get_paginator('get_resources')\\n        page_iterator = paginator.paginate(restApiId=api_id)\\n        for page in page_iterator:\\n            for item in page['items']:\\n                if item['path'] == resource_path:\\n                    exists = True\\n                    resource_id = item['id']\\n    except apigw.exceptions.NotFoundException:\\n        print(f\\\"[WARNING] The API resource path '{resource_path}' for API ID {api_id} was not found.\\\")\\n        exists = False\\n    except apigw.exceptions.UnauthorizedException:\\n        print(\\\"[WARNING] The IAM Role provided is not authorized to call apigateway:GetStage on the provided resource.\\\")\\n        authorized = False\\n    except Exception as err:\\n        print(f\\\"[ERROR] An issue occurred when attempting to retrieve the resource path '{resource_path}' for API ID {api_id}\\\\nError message: {str(err)}\\\")\\n        sys.exit(1)\\n    return {\\\"ResourceExists\\\": exists, \\\"Authorized\\\": authorized, \\\"ResourceId\\\": resource_id}\\n\",\n        \"Handler\": \"check_resource_exists\",\n        \"InputPayload\": {\n          \"RestApiId\": \"{{ RestApiId }}\",\n          \"ResourcePath\": \"{{ ResourcePath }}\"\n        }\n      },\n      \"outputs\": [\n        {\n          \"Name\": \"ResourceExists\",\n          \"Selector\": \"$.Payload.ResourceExists\",\n          \"Type\": \"Boolean\"\n        },\n        {\n          \"Name\": \"Authorized\",\n          \"Selector\": \"$.Payload.Authorized\",\n          \"Type\": \"Boolean\"\n        },\n        {\n          \"Name\": \"ResourceId\",\n          \"Selector\": \"$.Payload.ResourceId\",\n          \"Type\": \"String\"\n        }\n      ]\n    },\n    {\n      \"name\": \"BranchResourceExists\",\n      \"action\": \"aws:branch\",\n      \"description\": \"Confirms whether the provided resource exists and determines next step.\",\n      \"inputs\": {\n        \"Choices\": [\n          {\n            \"And\": [\n              {\n                \"Variable\": \"{{ CheckResourceExists.ResourceExists }}\",\n                \"BooleanEquals\": true\n              },\n              {\n                \"Variable\": \"{{ CheckResourceExists.Authorized }}\",\n                \"BooleanEquals\": true\n              }\n            ],\n            \"NextStep\": \"CheckMethodExists\"\n          }\n        ],\n        \"Default\": \"NoResourceOrNotAuthorized\"\n      }\n    },\n    {\n      \"name\": \"CheckMethodExists\",\n      \"action\": \"aws:executeScript\",\n      \"description\": \"Checks if the provided method exists in the given resource.\",\n      \"inputs\": {\n        \"Runtime\": \"python3.8\",\n        \"Script\": \"# Copyright 2023 Amazon.com, Inc. and its affiliates. All Rights Reserved.\\n# SPDX-License-Identifier: LicenseRef-.amazon.com.-AmznSL-1.0\\n# Licensed under the Amazon Software License (the \\\"License\\\").\\n# You may not use this file except in compliance with the License.\\n# A copy of the License is located at\\n#   http://aws.amazon.com/asl/\\n# or in the \\\"license\\\" file accompanying this file. This file is distributed\\n# on an \\\"AS IS\\\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\\n# express or implied. See the License for the specific language governing\\n# permissions and limitations under the License.\\n\\nimport sys\\nimport boto3\\n\\napigw = boto3.client('apigateway')\\n\\n\\ndef check_method_exists(event, context):\\n    exists = False\\n    authorized = True\\n    api_id = event['RestApiId']\\n    resource_id = event['ResourceId']\\n    http_method = event['HttpMethod']\\n\\n    try:\\n        response = apigw.get_method(restApiId=api_id, resourceId=resource_id, httpMethod=http_method)\\n\\n        if 'httpMethod' in response and response['httpMethod'] == http_method:\\n            exists = True\\n    except apigw.exceptions.NotFoundException:\\n        print(f\\\"[WARNING] The HTTP method {http_method} for resource ID {resource_id} for API ID {api_id} was not found.\\\")\\n        exists = False\\n    except apigw.exceptions.UnauthorizedException:\\n        print(\\\"[WARNING] The IAM Role provided is not authorized to call apigateway:GetStage on the provided resource.\\\")\\n        authorized = False\\n    except Exception as err:\\n        print(f\\\"[ERROR] An issue occurred when attempting to retrieve the HTTP method {http_method} for resource ID {resource_id} for API ID {api_id}\\\\nError message: {str(err)}\\\")\\n        sys.exit(1)\\n\\n    return {\\\"MethodExists\\\": exists, \\\"Authorized\\\": authorized}\\n\",\n        \"Handler\": \"check_method_exists\",\n        \"InputPayload\": {\n          \"RestApiId\": \"{{ RestApiId }}\",\n          \"ResourceId\": \"{{ CheckResourceExists.ResourceId }}\",\n          \"HttpMethod\": \"{{ HttpMethod }}\"\n        }\n      },\n      \"outputs\": [\n        {\n          \"Name\": \"MethodExists\",\n          \"Selector\": \"$.Payload.MethodExists\",\n          \"Type\": \"Boolean\"\n        },\n        {\n          \"Name\": \"Authorized\",\n          \"Selector\": \"$.Payload.Authorized\",\n          \"Type\": \"Boolean\"\n        }\n      ]\n    },\n    {\n      \"name\": \"BranchMethodExists\",\n      \"action\": \"aws:branch\",\n      \"description\": \"Confirms if the provided method exists and determines next step.\",\n      \"inputs\": {\n        \"Choices\": [\n          {\n            \"And\": [\n              {\n                \"Variable\": \"{{ CheckMethodExists.MethodExists }}\",\n                \"BooleanEquals\": true\n              },\n              {\n                \"Variable\": \"{{ CheckMethodExists.Authorized }}\",\n                \"BooleanEquals\": true\n              }\n            ],\n            \"NextStep\": \"AnalyseLogs\"\n          }\n        ],\n        \"Default\": \"NoResourceOrNotAuthorized\"\n      }\n    },\n    {\n      \"name\": \"NoResourceOrNotAuthorized\",\n      \"action\": \"aws:sleep\",\n      \"description\": \"Step to execute if no resource is found or the user is not authorized to describe the resources.\",\n      \"inputs\": {\n        \"Duration\": \"PT1S\"\n      },\n      \"isEnd\": true\n    },\n    {\n      \"name\": \"AnalyseLogs\",\n      \"action\": \"aws:executeScript\",\n      \"description\": \"Search for logs using the provided parameters and return recommendations based on an errors found\",\n      \"inputs\": {\n        \"Runtime\": \"python3.8\",\n        \"Script\": \"# Copyright 2023 Amazon.com, Inc. and its affiliates. All Rights Reserved.\\n# SPDX-License-Identifier: LicenseRef-.amazon.com.-AmznSL-1.0\\n# Licensed under the Amazon Software License (the \\\"License\\\").\\n# You may not use this file except in compliance with the License.\\n# A copy of the License is located at\\n#   http://aws.amazon.com/asl/\\n# or in the \\\"license\\\" file accompanying this file. This file is distributed\\n# on an \\\"AS IS\\\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\\n# express or implied. See the License for the specific language governing\\n# permissions and limitations under the License.\\n\\nimport re\\nimport sys\\nimport time\\nimport boto3\\nfrom dateutil import parser\\nfrom datetime import datetime\\n\\nlogs = boto3.client('logs')\\nbackoff_rate = 1.5\\n\\n\\nclass ErrorPattern:\\n\\n    def __init__(self, pattern, articles, redacted_message_pattern=r'', redact=True):\\n        self.pattern = pattern\\n        self.articles = articles\\n        self.redact = redact\\n        self.redacted_message_pattern\\n\\n    def pattern(self):\\n        return self.pattern\\n\\n    def articles(self):\\n        return self.articles\\n    \\n    def redact(self):\\n        return self.redact\\n\\n    def redacted_message_pattern(self):\\n        return self.redacted_message_pattern\\n\\n\\nERRORS = [\\n    ErrorPattern(\\n        pattern=r\\\"(.*[Nn]etwork error communicating with endpoint.*)\\\",\\n        articles=[\\\"https://repost.aws/knowledge-center/api-gateway-network-endpoint-error\\\"],\\n        redact=False\\n\\n    ),\\n    ErrorPattern(\\n        pattern=r\\\"(.*Execution failed due to configuration error: Invalid endpoint address.*)\\\",\\n        articles=[\\\"https://repost.aws/knowledge-center/api-gateway-invalid-endpoint-address\\\"],\\n        redact=False\\n    ),\\n    ErrorPattern(\\n        pattern=r\\\"(.*Execution failed due to a timeout error.*)\\\",\\n        articles=[\\\"https://repost.aws/knowledge-center/api-gateway-lambda-integration-errors\\\"],\\n        redact=False\\n    ),\\n    ErrorPattern(\\n        pattern=r\\\"(.*Malformed Lambda proxy response.*)\\\",\\n        articles=[\\\"https://repost.aws/knowledge-center/api-gateway-lambda-integration-errors\\\"],\\n        redact=False\\n    ),\\n    ErrorPattern(\\n        pattern=r\\\"(.*Lambda invocation failed with status: 429.*)\\\",\\n        articles=[\\\"https://repost.aws/knowledge-center/api-gateway-lambda-integration-errors\\\"],\\n        redact=False\\n    ),\\n    ErrorPattern(\\n        pattern=r\\\".*401 Unauthorized.*\\\",\\n        articles=[\\\"https://repost.aws/knowledge-center/api-gateway-cognito-401-unauthorized\\\",\\n        \\\"https://repost.aws/knowledge-center/api-gateway-401-error-lambda-authorizer\\\"],\\n        redact=True,\\n        redacted_message_pattern=r\\\"(\\\\([0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}\\\\)).*(401 Unauthorized).*\\\"\\n    ),\\n    ErrorPattern(\\n        pattern=r\\\"(.*Missing Authentication Token.*)\\\",\\n        articles=[\\\"https://repost.aws/knowledge-center/api-gateway-authentication-token-errors\\\",\\n        \\\"https://repost.aws/knowledge-center/api-gateway-troubleshoot-403-forbidden\\\"],\\n        redact=False\\n    ),\\n    ErrorPattern(\\n        pattern=r\\\"(.*not authorized to perform: execute-api:Invoke on resource.*)\\\",\\n        articles=[\\\"https://repost.aws/knowledge-center/api-gateway-403-error-lambda-authorizer\\\",\\n        \\\"https://repost.aws/knowledge-center/api-gateway-troubleshoot-403-forbidden\\\"],\\n        redact=True,\\n        redacted_message_pattern=r\\\"(\\\\([0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}\\\\)).*(not authorized to perform: execute-api:Invoke on resource).*\\\"\\n    ),\\n    ErrorPattern(\\n        pattern=r\\\"(.*not authorized to access this resource.*)\\\",\\n        articles=[\\\"https://repost.aws/knowledge-center/api-gateway-403-error-lambda-authorizer\\\"],\\n        redact=True,\\n        redacted_message_pattern=r\\\"(\\\\([0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}\\\\)).*(not authorized to access this resource).*\\\"\\n    ),\\n    ErrorPattern(\\n        pattern=r\\\"(.*User: anonymous is not authorized to perform: execute-api:Invoke on resource.*)\\\",\\n        articles=[\\\"https://repost.aws/knowledge-center/api-gateway-403-error-lambda-authorizer\\\",\\n        \\\"https://repost.aws/knowledge-center/api-gateway-troubleshoot-403-forbidden\\\"],\\n        redact=True,\\n        redacted_message_pattern=r\\\"(\\\\([0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}\\\\)).*(not authorized to perform: execute-api:Invoke on resource).*\\\"\\n    ),\\n    ErrorPattern(\\n        pattern=r\\\"(.*User is not authorized to access this resource with an explicit deny.*)\\\",\\n        articles=[\\\"https://repost.aws/knowledge-center/api-gateway-troubleshoot-403-forbidden\\\"],\\n        redact=True,\\n        redacted_message_pattern=r\\\"(\\\\([0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}\\\\)).*(not authorized to perform: execute-api:Invoke on resource).*\\\"\\n    ),\\n    ErrorPattern(\\n        pattern=r\\\"(.*The security token included in the request is invalid.*)\\\",\\n        articles=[\\\"https://repost.aws/knowledge-center/api-gateway-troubleshoot-403-forbidden\\\"],\\n        redact=False\\n    ),\\n    ErrorPattern(\\n        pattern=r\\\"(.*Signature expired.*)\\\",\\n        articles=[\\\"https://repost.aws/knowledge-center/api-gateway-troubleshoot-403-forbidden\\\"],\\n        redact=False\\n    ),\\n    ErrorPattern(\\n        pattern=r\\\"(.*Invalid API Key identifier specified.*)\\\",\\n        articles=[\\\"https://repost.aws/knowledge-center/api-gateway-troubleshoot-403-forbidden\\\"],\\n        redact=False\\n    ),\\n    ErrorPattern(\\n        pattern=r\\\"(.*The request signature we calculated does not match the signature you provided.*)\\\",\\n        articles=[\\\"https://repost.aws/knowledge-center/api-gateway-troubleshoot-403-forbidden\\\"],\\n        redact=False\\n    ),\\n    ErrorPattern(\\n        pattern=r\\\"(.*Forbidden.*)\\\",\\n        articles=[\\\"https://repost.aws/knowledge-center/api-gateway-troubleshoot-403-forbidden\\\",\\n        \\\"https://repost.aws/knowledge-center/api-gateway-vpc-connections\\\"],\\n        redact=False\\n    ),\\n    ErrorPattern(\\n        pattern=r\\\"(.*Authorization header requires.*)\\\",\\n        articles=[\\\"https://repost.aws/knowledge-center/api-gateway-troubleshoot-403-forbidden\\\"],\\n        redact=True,\\n        redacted_message_pattern=r\\\"(\\\\([0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}\\\\)).*(Authorization header requires).*\\\"\\n    ),\\n    ErrorPattern(\\n        pattern=r\\\"(.*Method completed with status: 502.*)\\\",\\n        articles=[\\\"https://repost.aws/knowledge-center/malformed-502-api-gateway\\\"],\\n        redact=False\\n    ),\\n    ErrorPattern(\\n        pattern=r\\\"(.*Execution failed due to configuration error.*)\\\",\\n        articles=[\\\"https://repost.aws/knowledge-center/api-gateway-500-error-vpc\\\"],\\n        redact=False\\n    )\\n]\\n\\n\\ndef analyse_logs(query_logs, access_log_message):\\n    if access_log_message:\\n        access_log_message = f'\\\\n{access_log_message}'\\n    if query_logs:\\n        for error in ERRORS:\\n            found = re.search(error.pattern, query_logs)\\n            if found:\\n                log_line = query_logs[found.start():found.end()]\\n                if error.redact:\\n                    to_redact = re.search(error.redacted_message_pattern, log_line)\\n                    log_line = ' '.join([match for match in to_redact.groups()]) + ' [sensitive information has been redacted]'\\n                articles = '\\\\n- '.join(error.articles)\\n                return f'Found the following error:\\\\n\\\\nLog: {log_line}\\\\n\\\\nRecommended articles:\\\\n{articles}{access_log_message}'\\n        return \\\"No error were found in the log group during the time range provided.\\\"\\n    else:\\n        return \\\"No log group was found for the API.\\\"\\n\\n\\ndef log_insights_query(query, log_group, start_time, end_time, is_access_log_query):\\n    try:\\n        query_response = logs.start_query(logGroupName=log_group, startTime=start_time, endTime=end_time, queryString=query)\\n    except logs.exceptions.ResourceNotFoundException:\\n        print(f'[WARNING] No logs found for {log_group}')\\n        return None\\n    except Exception as err:\\n        print(f\\\"[ERROR] An issue occurred when attempting to retrieve the logs for {log_group}.\\\\nError message: {str(err)}\\\")\\n        sys.exit(1)\\n    query_id = query_response['queryId']\\n\\n    response = logs.get_query_results(queryId=query_id)\\n    wait = 1\\n    while response['status'] == 'Running':\\n        time.sleep(wait)\\n        wait *= backoff_rate\\n        response = logs.get_query_results(queryId=query_id)\\n\\n    if not is_access_log_query and response['status'] in ['Failed', 'Timeout', 'Cancelled', 'Unknown']:\\n        print(f\\\"[WARNING] CloudWatch Log Insights query could not complete. Query status: {response['status']}\\\")\\n        sys.exit(1)\\n\\n    query_result = response['results']\\n    return '\\\\n'.join([line[0]['value'] for line in query_result])\\n\\n\\ndef check_logs(event, context):\\n    api_id = event['RestApiId']\\n    stage = event['StageName']\\n    start_time = event['StartTime'] or None\\n    if start_time:\\n        try:\\n            start_time = int(parser.parse(event['StartTime']).timestamp())\\n        except Exception as err:\\n            print(f\\\"[ERROR] Unable to parse the provided start timestamp.\\\\nCaught error: {str(err)}\\\")\\n            sys.exit(1)\\n    else:\\n        start_time = int((datetime.datetime.now() - datetime.timedelta(minutes=15)).timestamp())\\n\\n    end_time = event['EndTime'] or None\\n    if end_time:\\n        try:\\n            end_time = int(parser.parse(event['EndTime']).timestamp())\\n        except Exception as err:\\n            print(f\\\"[ERROR] Unable to parse the provided end timestamp.\\\\nCaught error: {str(err)}\\\")\\n            sys.exit(1)\\n    else:\\n        end_time = int(datetime.now().timestamp())\\n\\n    execution_id = event['ExecutionId'] or None\\n    access_logs_arn = event['AccessLogName'] or None\\n\\n    log_group = f\\\"API-Gateway-Execution-Logs_{api_id}/{stage}\\\"\\n    access_log_message = ''\\n\\n    if access_logs_arn:\\n        access_log_group = access_logs_arn.split(':')[-1]\\n        # specifically looking for 5XX errors\\n        access_logs_query = 'fields @message | filter status like \\\"5\\\" | sort @timestamp desc'\\n        access_logs = log_insights_query(access_logs_query, access_log_group, start_time, end_time, True)\\n        if type(access_logs) is list and len(access_logs) > 0:\\n            access_log_message = '5XX errors found in access logs. Recommended article for review:\\\\nhttps://repost.aws/knowledge-center/api-gateway-find-5xx-errors-cloudwatch'\\n\\n    query = 'fields @message | sort @timestamp desc'\\n    if execution_id:\\n        query = f'fields @message | parse @message \\\"(*) *\\\" as rid, msg | filter rid = \\\"{execution_id}\\\" | sort @timestamp desc'\\n\\n    cw_logs = log_insights_query(query, log_group, start_time, end_time, False)\\n    return analyse_logs(cw_logs, access_log_message)\\n\",\n        \"Handler\": \"check_logs\",\n        \"InputPayload\": {\n          \"RestApiId\": \"{{ RestApiId }}\",\n          \"StageName\": \"{{ StageName }}\",\n          \"ResourcePath\": \"{{ ResourcePath }}\",\n          \"ResourceId\": \"{{ CheckResourceExists.ResourceId }}\",\n          \"HttpMethod\": \"{{ HttpMethod }}\",\n          \"StartTime\": \"{{ StartTime }}\",\n          \"EndTime\": \"{{ EndTime }}\",\n          \"AccessLogs\": \"{{ AccessLogs }}\",\n          \"AccessLogName\": \"{{ CheckStageExists.AccessLogGroup }}\",\n          \"ExecutionId\": \"{{ ExecutionId }}\"\n        }\n      },\n      \"outputs\": [\n        {\n          \"Name\": \"Message\",\n          \"Selector\": \"$.Payload\",\n          \"Type\": \"String\"\n        }\n      ],\n      \"isEnd\": true\n    }\n  ],\n  \"outputs\": [\n    \"AnalyseLogs.Message\"\n  ]\n}",
  "CreatedDate": "2023-06-22T09:37:47.382Z",
  "DisplayName": null,
  "DocumentFormat": {
    "Value": "JSON"
  },
  "DocumentType": {
    "Value": "Automation"
  },
  "DocumentVersion": "2",
  "Name": "AWSSupport-TroubleshootAPIGatewayHttpErrors",
  "Requires": [],
  "ReviewStatus": null,
  "Status": {
    "Value": "Active"
  },
  "StatusInformation": null,
  "VersionName": null,
  "ResponseMetadata": {
    "RequestId": "84b4f463-b109-42c7-8fe4-f6c6695189a3",
    "Metadata": {},
    "ChecksumAlgorithm": 0,
    "ChecksumValidationStatus": 0
  },
  "ContentLength": 32194,
  "HttpStatusCode": 200,
  "LoggedAt": "2023-06-28T07:12:50.7229771+00:00"
}
