{
  "AttachmentsContent": [],
  "Content": "{\n  \"description\" : \"## Intent\\n  'Test that the application stays up even if all instances are replaced. This proves that the app will work even with fresh installs.'\\n\\n## Type\\n  Test\\n\\n## Risk\\n  Small\\n\\n## Requirements\\n  * ASG has more than 1 instances\\n  * There is a synthetic alarm setup for application\\n\\n## Permissions required for AutomationAssumeRole\\n  * cloudwatch:DescribeAlarms\\n  * autoscaling:DescribeAutoScalingGroups\\n  * autoscaling:DescribeInstanceRefreshes\\n  * autoscaling:StartInstanceRefresh\\n  * autoscaling:CancelInstanceRefresh\\n  * ssm:GetAutomationExecution\\n  * ssm:StartAutomationExecution\\n  * iam:PassRole (Restricted to same role)\\n\\n## Supports Rollback\\n  Yes.\\n\\n## Cancellation behavior\\n  Rollback execution.\\n\\n## Inputs\\n### (Required) AutomationAssumeRole:\\n  * type: String\\n  * description: (Required) The ARN of the role that allows Automation to perform the actions on your behalf\\n\\n### (Required) AutoScalingGroupName:\\n  * type: String\\n  * description: (Required) Name of auto scaling group\\n\\n### (Required) CanaryAlarmName:\\n  * type: String\\n  * description: (Required) Alarm which should stay green during this test.\\n\\n### (Optional) PercentageOfInstances:\\n  * type: Integer\\n  * description: (Optional) Percentage of ASG EC2 instances to be replaced at once.\\n  * default: 20\\n\\n### (Optional) IsRollback:\\n  * type: String\\n  * description: (Optional) Run the rollback steps of the document. True or False. If True, the parameter PreviousExecutionId should also be specified.\\n  * default: 'false'\\n\\n### (Optional) PreviousExecutionId:\\n  * type: String\\n  * description: (Optional) SSM execution ID of the previous execution of this document for which resources need to be cleaned up.\\n  * default: ''\\n\\n## Details\\n  * Start Instance Refresh in ASG\\n  * Wait for refresh to finish\\n  * Assert alarm to be green after test\\n\\n## Steps executed in normal flow\\n  * SelectExecutionMode\\n  * AssertAlarmToBeGreenBeforeTest\\n  * AssertNoSuspendedProcesses\\n  * AssertNoRefreshInProgress\\n  * StartInstanceRefresh\\n  * WaitForRefreshToFinish\\n  * AssertAlarmToBeGreen\\n\\n## Steps executed in rollback flow\\n  * SelectExecutionMode\\n  * GetInputsFromPreviousExecution\\n  * AssertAutoScalingGroupName\\n  * CancelInstanceRefresh\\n  * WaitForRefreshToBeCancelled\\n\\n## Outputs\\n  None\",\n  \"schemaVersion\" : \"0.3\",\n  \"assumeRole\" : \"{{ AutomationAssumeRole }}\",\n  \"parameters\" : {\n    \"AutoScalingGroupName\" : {\n      \"type\" : \"String\",\n      \"description\" : \"(Required) Name of AutoScalingGroup.\"\n    },\n    \"CanaryAlarmName\" : {\n      \"type\" : \"String\",\n      \"description\" : \"(Required) Alarm which should stay green during this test.\"\n    },\n    \"AutomationAssumeRole\" : {\n      \"type\" : \"String\",\n      \"description\" : \"(Required) The ARN of the role that allows Automation to perform the actions on your behalf.\"\n    },\n    \"PercentageOfInstances\" : {\n      \"type\" : \"Integer\",\n      \"description\" : \"(Optional) Percentage of instances to replace at once.\",\n      \"default\" : 20\n    },\n    \"IsRollback\" : {\n      \"type\" : \"String\",\n      \"description\" : \"(Optional) Run the rollback steps of the document. True or False. If True, the parameter PreviousExecutionId should also be specified.\",\n      \"default\" : \"false\"\n    },\n    \"PreviousExecutionId\" : {\n      \"type\" : \"String\",\n      \"description\" : \"(Optional) SSM execution ID of the previous execution of this document for which resources need to be cleaned up.\",\n      \"default\" : \"\"\n    }\n  },\n  \"mainSteps\" : [ {\n    \"name\" : \"SelectExecutionMode\",\n    \"description\" : \"Check if document should be executed in rollback mode\",\n    \"action\" : \"aws:branch\",\n    \"inputs\" : {\n      \"Choices\" : [ {\n        \"NextStep\" : \"AssertAlarmToBeGreenBeforeTest\",\n        \"Variable\" : \"{{IsRollback}}\",\n        \"StringEquals\" : \"false\"\n      } ],\n      \"Default\" : \"GetInputsFromPreviousExecution\"\n    }\n  }, {\n    \"name\" : \"AssertAlarmToBeGreenBeforeTest\",\n    \"description\" : \"Ensure alarm is green before starting test. Fail if alarm is not green within expected time.\",\n    \"action\" : \"aws:waitForAwsResourceProperty\",\n    \"inputs\" : {\n      \"Service\" : \"cloudwatch\",\n      \"Api\" : \"DescribeAlarms\",\n      \"AlarmNames\" : [ \"{{CanaryAlarmName}}\" ],\n      \"PropertySelector\" : \"$.MetricAlarms[0].StateValue\",\n      \"DesiredValues\" : [ \"OK\" ]\n    }\n  }, {\n    \"name\" : \"AssertNoSuspendedProcesses\",\n    \"description\" : \"Check for no suspended processes in ASG\",\n    \"action\" : \"aws:executeScript\",\n    \"onFailure\" : \"Abort\",\n    \"inputs\" : {\n      \"Runtime\" : \"python3.6\",\n      \"Handler\" : \"assert_no_suspended_process\",\n      \"InputPayload\" : {\n        \"AutoScalingGroupName\" : \"{{AutoScalingGroupName}}\"\n      },\n      \"Script\" : \"import logging\\nimport random\\nimport time\\nfrom math import ceil\\n\\nimport boto3\\nfrom botocore.config import Config\\n\\nlogger = logging.getLogger(__name__)\\nlogger.setLevel(logging.INFO)\\n\\n\\n\\n\\ndef assert_no_suspended_process(events, context):\\n    if 'AutoScalingGroupName' not in events:\\n        raise KeyError('Requires AutoScalingGroupName in events')\\n    config = Config(retries={'max_attempts': 20, 'mode': 'standard'})\\n    autoscaling = boto3.client('autoscaling', config=config)\\n    auto_scaling_groups = autoscaling.describe_auto_scaling_groups(\\n        AutoScalingGroupNames=[\\n            events['AutoScalingGroupName']\\n        ]\\n    )\\n\\n    if len(auto_scaling_groups['AutoScalingGroups'][0]['SuspendedProcesses']) > 0:\\n        raise Exception('ASG % has suspended processes', events['AutoScalingGroupName'])\"\n    }\n  }, {\n    \"name\" : \"AssertNoRefreshInProgress\",\n    \"description\" : \"Check for no refresh in progress already\",\n    \"action\" : \"aws:executeScript\",\n    \"onFailure\" : \"Abort\",\n    \"inputs\" : {\n      \"Runtime\" : \"python3.6\",\n      \"Handler\" : \"assert_no_refresh_in_progress\",\n      \"InputPayload\" : {\n        \"AutoScalingGroupName\" : \"{{AutoScalingGroupName}}\"\n      },\n      \"Script\" : \"import logging\\nimport random\\nimport time\\nfrom math import ceil\\n\\nimport boto3\\nfrom botocore.config import Config\\n\\nlogger = logging.getLogger(__name__)\\nlogger.setLevel(logging.INFO)\\n\\n\\n\\n\\ndef assert_no_refresh_in_progress(events, context):\\n    if 'AutoScalingGroupName' not in events:\\n        raise KeyError('Requires AutoScalingGroupName in events')\\n    config = Config(retries={'max_attempts': 20, 'mode': 'standard'})\\n    autoscaling = boto3.client('autoscaling', config=config)\\n    instance_refreshes = autoscaling.describe_instance_refreshes(\\n        AutoScalingGroupName=events['AutoScalingGroupName']\\n    )\\n\\n    for instance_refresh in instance_refreshes['InstanceRefreshes']:\\n        if instance_refresh['Status'] in ['Pending', 'InProgress', 'Cancelling']:\\n            raise Exception('Instance refresh in progress, refresh status %, refresh id %',\\n                            instance_refreshes['InstanceRefreshes'][0]['Status'],\\n                            instance_refreshes['InstanceRefreshes'][0]['InstanceRefreshId'])\"\n    }\n  }, {\n    \"name\" : \"StartInstanceRefresh\",\n    \"description\" : \"Start instance refresh in ASG\",\n    \"action\" : \"aws:executeScript\",\n    \"onFailure\" : \"Abort\",\n    \"onCancel\" : \"step:TriggerRollback\",\n    \"outputs\" : [ {\n      \"Name\" : \"InstanceRefreshId\",\n      \"Selector\" : \"$.Payload.InstanceRefreshId\",\n      \"Type\" : \"String\"\n    } ],\n    \"inputs\" : {\n      \"Runtime\" : \"python3.6\",\n      \"Handler\" : \"start_instance_refresh\",\n      \"InputPayload\" : {\n        \"AutoScalingGroupName\" : \"{{AutoScalingGroupName}}\",\n        \"PercentageOfInstances\" : \"{{PercentageOfInstances}}\"\n      },\n      \"Script\" : \"import logging\\nimport random\\nimport time\\nfrom math import ceil\\n\\nimport boto3\\nfrom botocore.config import Config\\n\\nlogger = logging.getLogger(__name__)\\nlogger.setLevel(logging.INFO)\\n\\n\\n\\n\\ndef start_instance_refresh(events, context):\\n    if 'AutoScalingGroupName' not in events or 'PercentageOfInstances' not in events:\\n        raise KeyError('Requires AutoScalingGroupName, PercentageOfInstances in events')\\n    config = Config(retries={'max_attempts': 20, 'mode': 'standard'})\\n    autoscaling = boto3.client('autoscaling', config=config)\\n    refresh_response = autoscaling.start_instance_refresh(\\n        AutoScalingGroupName=events['AutoScalingGroupName'],\\n        Strategy='Rolling',\\n        Preferences={'MinHealthyPercentage': (100 - events['PercentageOfInstances'])}\\n    )\\n\\n    output = {}\\n    output['InstanceRefreshId'] = refresh_response['InstanceRefreshId']\\n    return output\"\n    }\n  }, {\n    \"name\" : \"WaitForRefreshToFinish\",\n    \"description\" : \"Wait for refresh to finish\",\n    \"action\" : \"aws:waitForAwsResourceProperty\",\n    \"timeoutSeconds\" : 3600,\n    \"onFailure\" : \"step:CancelInstanceRefresh\",\n    \"onCancel\" : \"step:TriggerRollback\",\n    \"inputs\" : {\n      \"Service\" : \"autoscaling\",\n      \"Api\" : \"DescribeInstanceRefreshes\",\n      \"PropertySelector\" : \"$.InstanceRefreshes[0].Status\",\n      \"DesiredValues\" : [ \"Successful\" ],\n      \"AutoScalingGroupName\" : \"{{AutoScalingGroupName}}\",\n      \"InstanceRefreshIds\" : [ \"{{StartInstanceRefresh.InstanceRefreshId}}\" ]\n    }\n  }, {\n    \"name\" : \"AssertAlarmToBeGreen\",\n    \"description\" : \"Wait for the alarm to be green after test is complete.\",\n    \"action\" : \"aws:waitForAwsResourceProperty\",\n    \"maxAttempts\" : 1,\n    \"timeoutSeconds\" : 900,\n    \"onFailure\" : \"Abort\",\n    \"inputs\" : {\n      \"Service\" : \"cloudwatch\",\n      \"Api\" : \"DescribeAlarms\",\n      \"AlarmNames\" : [ \"{{CanaryAlarmName}}\" ],\n      \"PropertySelector\" : \"$.MetricAlarms[0].StateValue\",\n      \"DesiredValues\" : [ \"OK\" ]\n    },\n    \"isEnd\" : true\n  }, {\n    \"name\" : \"GetInputsFromPreviousExecution\",\n    \"description\" : \"Get input from previous execution. This will be used to validate that rollback is executed with the same input\",\n    \"action\" : \"aws:executeScript\",\n    \"outputs\" : [ {\n      \"Name\" : \"AutoScalingGroupName\",\n      \"Selector\" : \"$.Payload.AutoScalingGroupName[0]\",\n      \"Type\" : \"String\"\n    } ],\n    \"inputs\" : {\n      \"Runtime\" : \"python3.6\",\n      \"Handler\" : \"get_inputs_from_ssm_execution\",\n      \"InputPayload\" : {\n        \"ExecutionId\" : \"{{ PreviousExecutionId }}\"\n      },\n      \"Script\" : \"import json\\nimport boto3\\nfrom botocore.config import Config\\n\\n\\n\\n\\ndef get_inputs_from_ssm_execution(events, context):\\n    output = {}\\n    config = Config(retries={'max_attempts': 20, 'mode': 'standard'})\\n    ssm = boto3.client('ssm', config=config)\\n\\n    if 'ExecutionId' not in events:\\n        raise KeyError('Requires ExecutionId')\\n\\n    if not events['ExecutionId']:\\n        raise KeyError('Requires not empty ExecutionId')\\n\\n    response = ssm.get_automation_execution(AutomationExecutionId=events['ExecutionId'])\\n    response_parameters = response['AutomationExecution']['Parameters']\\n    # TODO DIG-853\\n    for parameter in response_parameters:\\n        output[parameter] = response_parameters[parameter]\\n\\n    return output\"\n    }\n  }, {\n    \"name\" : \"AssertAutoScalingGroupName\",\n    \"description\" : \"Validate that rollback is executed with the same input\",\n    \"action\" : \"aws:branch\",\n    \"inputs\" : {\n      \"Choices\" : [ {\n        \"NextStep\" : \"CancelInstanceRefresh\",\n        \"Variable\" : \"{{ GetInputsFromPreviousExecution.AutoScalingGroupName }}\",\n        \"StringEquals\" : \"{{ AutoScalingGroupName }}\"\n      } ]\n    },\n    \"isEnd\" : true\n  }, {\n    \"name\" : \"CancelInstanceRefresh\",\n    \"description\" : \"Cancel instance refresh\",\n    \"action\" : \"aws:executeScript\",\n    \"onFailure\" : \"Abort\",\n    \"outputs\" : [ {\n      \"Name\" : \"InstanceRefreshId\",\n      \"Selector\" : \"$.Payload.InstanceRefreshId\",\n      \"Type\" : \"String\"\n    } ],\n    \"inputs\" : {\n      \"Runtime\" : \"python3.6\",\n      \"Handler\" : \"cancel_instance_refresh\",\n      \"InputPayload\" : {\n        \"AutoScalingGroupName\" : \"{{AutoScalingGroupName}}\"\n      },\n      \"Script\" : \"import logging\\nimport random\\nimport time\\nfrom math import ceil\\n\\nimport boto3\\nfrom botocore.config import Config\\n\\nlogger = logging.getLogger(__name__)\\nlogger.setLevel(logging.INFO)\\n\\n\\n\\n\\ndef cancel_instance_refresh(events, context):\\n    if 'AutoScalingGroupName' not in events:\\n        raise KeyError('Requires AutoScalingGroupName in events')\\n    config = Config(retries={'max_attempts': 20, 'mode': 'standard'})\\n    autoscaling = boto3.client('autoscaling', config=config)\\n    output = autoscaling.cancel_instance_refresh(\\n        AutoScalingGroupName=events['AutoScalingGroupName']\\n    )\\n    return output\"\n    }\n  }, {\n    \"name\" : \"WaitForRefreshToBeCancelled\",\n    \"description\" : \"Wait for refresh to be cancelled\",\n    \"action\" : \"aws:waitForAwsResourceProperty\",\n    \"timeoutSeconds\" : 3600,\n    \"onFailure\" : \"Abort\",\n    \"inputs\" : {\n      \"Service\" : \"autoscaling\",\n      \"Api\" : \"DescribeInstanceRefreshes\",\n      \"PropertySelector\" : \"$.InstanceRefreshes[0].Status\",\n      \"DesiredValues\" : [ \"Cancelled\" ],\n      \"AutoScalingGroupName\" : \"{{GetInputsFromPreviousExecution.AutoScalingGroupName}}\",\n      \"InstanceRefreshIds\" : [ \"{{CancelInstanceRefresh.InstanceRefreshId}}\" ]\n    },\n    \"isEnd\" : true\n  }, {\n    \"name\" : \"TriggerRollback\",\n    \"description\" : \"This step is executed when ssm document is cancelled while it was in progress and starts a new execution of document in rollback mode to rollback the changes made as part of normal execution\",\n    \"action\" : \"aws:executeScript\",\n    \"onFailure\" : \"Abort\",\n    \"outputs\" : [ {\n      \"Name\" : \"RollbackExecutionId\",\n      \"Selector\" : \"$.Payload.RollbackExecutionId\",\n      \"Type\" : \"String\"\n    } ],\n    \"inputs\" : {\n      \"Runtime\" : \"python3.6\",\n      \"Handler\" : \"start_rollback_execution\",\n      \"InputPayload\" : {\n        \"ExecutionId\" : \"{{automation:EXECUTION_ID}}\"\n      },\n      \"Script\" : \"import json\\nimport boto3\\nfrom botocore.config import Config\\n\\n\\n\\n\\ndef start_rollback_execution(events, context):\\n    output = {}\\n    config = Config(retries={'max_attempts': 20, 'mode': 'standard'})\\n    ssm = boto3.client('ssm', config=config)\\n\\n    if 'ExecutionId' not in events or not events['ExecutionId']:\\n        raise KeyError('Requires not empty ExecutionId')\\n\\n    response = ssm.get_automation_execution(AutomationExecutionId=events['ExecutionId'])\\n\\n    # Get parameters for current execution and add IsRollback and PreviousExecutionId\\n    response_parameters = response['AutomationExecution']['Parameters']\\n    response_parameters['IsRollback'] = ['true']\\n    response_parameters['PreviousExecutionId'] = [events['ExecutionId']]\\n\\n    rollback_execution_response = ssm.start_automation_execution(\\n        DocumentName=response['AutomationExecution']['DocumentName'],\\n        DocumentVersion=response['AutomationExecution']['DocumentVersion'],\\n        Parameters=response_parameters\\n    )\\n    output['RollbackExecutionId'] = rollback_execution_response['AutomationExecutionId']\\n    return output\"\n    },\n    \"isEnd\" : true\n  } ]\n}",
  "CreatedDate": "2022-01-18T14:35:13.135Z",
  "DisplayName": null,
  "DocumentFormat": {
    "Value": "JSON"
  },
  "DocumentType": {
    "Value": "Automation"
  },
  "DocumentVersion": "4",
  "Name": "AWSResilienceHub-RefreshInstancesInAsgTest_2020-07-23",
  "Requires": [],
  "ReviewStatus": null,
  "Status": {
    "Value": "Active"
  },
  "StatusInformation": null,
  "VersionName": null,
  "ResponseMetadata": {
    "RequestId": "5c74420c-cb17-4d3a-9e1d-73763419c746",
    "Metadata": {},
    "ChecksumAlgorithm": 0,
    "ChecksumValidationStatus": 0
  },
  "ContentLength": 16198,
  "HttpStatusCode": 200,
  "LoggedAt": "2022-03-12T07:11:58.8632234+00:00"
}
