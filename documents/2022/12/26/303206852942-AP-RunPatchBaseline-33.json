{
  "AttachmentsContent": [],
  "Content": "{\n  \"schemaVersion\": \"2.2\",\n  \"description\": \"Nordcloud custom version of AWS-RunPatchBaseline\",\n  \"parameters\": {\n    \"Operation\": {\n      \"type\": \"String\",\n      \"description\": \"(Required) The update or configuration to perform on the instance. The system checks if patches specified in the patch baseline are installed on the instance. The install operation installs patches missing from the baseline.\",\n      \"allowedValues\": [\n        \"Scan\",\n        \"Install\"\n      ]\n    },\n    \"SnapshotId\": {\n      \"type\": \"String\",\n      \"description\": \"(Optional) The snapshot ID to use to retrieve a patch baseline snapshot.\",\n      \"allowedPattern\": \"(^$)|^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$\",\n      \"default\": \"\"\n    },\n    \"InstallOverrideList\": {\n      \"type\": \"String\",\n      \"description\": \"(Optional) An https URL or an Amazon S3 path-style URL to the list of patches to be installed. This patch installation list overrides the patches specified by the default patch baseline.\",\n      \"allowedPattern\": \"(^$)|^https://.+$|^s3://([^/]+)/(.*?([^/]+))$\",\n      \"default\": \"\"\n    },\n    \"BaselineOverride\": {\n      \"type\": \"String\",\n      \"description\": \"(Optional) An https URL or an Amazon S3 path-style URL to a list of baseline objects. These baselines override the default baseline and any baselines used by Patch Groups.\",\n      \"allowedPattern\": \"(^$)|^https://.+$|^s3://([^/]+)/(.*?([^/]+))$\",\n      \"default\": \"\"\n    },\n    \"RebootOption\": {\n      \"type\": \"String\",\n      \"description\": \"(Optional) Reboot behavior after a patch Install operation. If you choose NoReboot and patches are installed, the instance is marked as non-compliant until a subsequent reboot and scan.\",\n      \"allowedValues\": [\n        \"RebootIfNeeded\",\n        \"NoReboot\"\n      ],\n      \"default\": \"RebootIfNeeded\"\n    }\n  },\n  \"mainSteps\": [\n    {\n      \"precondition\": {\n        \"StringEquals\": [\n          \"platformType\",\n          \"Linux\"\n        ]\n      },\n      \"action\": \"aws:runShellScript\",\n      \"name\": \"PatchLinux\",\n      \"inputs\": {\n        \"timeoutSeconds\": 7200,\n        \"runCommand\": [\n          \"#!/bin/bash\",\n          \"# Copyright 2020-2022 Nordcloud Oy or its affiliates. All Rights Reserved.\",\n          \"# Mostly taken from AWS-RunPatchBaseline Amazon SSM document.\",\n          \"\",\n          \"PYTHON_CMD=''\",\n          \"\",\n          \"check_binary() {\",\n          \"    HAS_VAR_NAME=HAS_$2\",\n          \"    CMD_VAR_NAME=$2_CMD\",\n          \"    if [ \\\"$(eval echo \\\\${${HAS_VAR_NAME}})\\\" = \\\"0\\\" ]; then return; fi\",\n          \"    which $1 2>/dev/null\",\n          \"    RET_CODE=$?\",\n          \"    eval \\\"${HAS_VAR_NAME}=${RET_CODE}\\\"\",\n          \"    if [ ${RET_CODE} -eq 0 ]; then eval \\\"${CMD_VAR_NAME}=$1\\\"; fi\",\n          \"}\",\n          \"\",\n          \"check_binary python3 PYTHON3\",\n          \"check_binary python2.6 PYTHON2_6\",\n          \"check_binary python26 PYTHON26\",\n          \"check_binary python2.7 PYTHON2_7\",\n          \"check_binary python27 PYTHON27\",\n          \"check_binary python2 PYTHON2\",\n          \"\",\n          \"which python 2>/dev/null\",\n          \"if [ $? -eq 0 ]; then\",\n          \"  PYTHON_VERSION=$(python --version 2>&1 | grep -Po '(?<=Python )[\\\\d]')\",\n          \"  eval \\\"HAS_PYTHON${PYTHON_VERSION}=0\\\"\",\n          \"  eval \\\"PYTHON${PYTHON_VERSION}_CMD='python'\\\"\",\n          \"fi\",\n          \"\",\n          \"check_binary apt-get APT\",\n          \"check_binary yum YUM\",\n          \"check_binary dnf DNF\",\n          \"check_binary zypper ZYPP\",\n          \"\",\n          \"check_install_code() {\",\n          \"    if [ $1 -ne 0 ]\",\n          \"    then\",\n          \"        echo \\\"WARNING: Could not install the $2, this may cause the patching operation to fail.\\\" >&2\",\n          \"    fi\",\n          \"}\",\n          \"\",\n          \"get_env_var_hash_key() {\",\n          \"    # Get an environment variable that is a dictionary and retrieve the provided key.\",\n          \"    # $1 is the environment variable.\",\n          \"    # $2 is the dictionary key.\",\n          \"    # $3 is the python version & command found on instance.\",\n          \"    result=$(echo -e \\\"import json\\\\nimport os\\\\nprint(json.loads(os.environ[\\\\\\\"$1\\\\\\\"])[\\\\\\\"$2\\\\\\\"])\\\" | $3)\",\n          \"    if [ -z \\\"$result\\\" ]\",\n          \"    then\",\n          \"        exit 1\",\n          \"    fi\",\n          \"    echo $result\",\n          \"}\",\n          \"\",\n          \"get_creds() {\",\n          \"  check_binary curl CURL\",\n          \"  check_binary wget WGET\",\n          \"  TOKEN_HEADER=\\\":\\\"\",\n          \"  if [ $HAS_CURL -eq 0 ]\",\n          \"  then\",\n          \"      TOKEN=`curl -X PUT \\\"http://169.254.169.254/latest/api/token\\\" -m 10 -f -s -H \\\"X-aws-ec2-metadata-token-ttl-seconds: 21600\\\"`\",\n          \"      if [ -n \\\"$TOKEN\\\" ]; then TOKEN_HEADER=\\\"X-aws-ec2-metadata-token: $TOKEN\\\"; fi\",\n          \"      IAM_ROLE=`curl -H \\\"$TOKEN_HEADER\\\" -m 10 -f -s http://169.254.169.254/latest/meta-data/iam/security-credentials`\",\n          \"      export CREDENTIALS=`curl -H \\\"$TOKEN_HEADER\\\" -m 10 -f -s http://169.254.169.254/latest/meta-data/iam/security-credentials/$IAM_ROLE`\",\n          \"  elif [ $HAS_WGET -eq 0 ]\",\n          \"  then\",\n          \"      TOKEN=\\\"`wget -qO- -T 10 --method PUT --header \\\"X-aws-ec2-metadata-token-ttl-seconds: 21600\\\" http://169.254.169.254/latest/api/token`\\\"\",\n          \"      if [ -n \\\"$TOKEN\\\" ]; then TOKEN_HEADER=\\\"X-aws-ec2-metadata-token: $TOKEN\\\"; fi\",\n          \"      IAM_ROLE=\\\"`wget -qO- -T 10 --header \\\"$TOKEN_HEADER\\\" http://169.254.169.254/latest/meta-data/iam/security-credentials`\\\"\",\n          \"      export CREDENTIALS=\\\"`wget -qO- -T 10 --header \\\"$TOKEN_HEADER\\\" http://169.254.169.254/latest/meta-data/iam/security-credentials/$IAM_ROLE`\\\"\",\n          \"  fi\",\n          \"\",\n          \"  if [ -z \\\"$CREDENTIALS\\\" ]; then return 1; fi\",\n          \"  export AWS_ACCESS_KEY_ID=$(get_env_var_hash_key \\\"CREDENTIALS\\\" \\\"AccessKeyId\\\" $1)\",\n          \"  export AWS_SECRET_ACCESS_KEY=$(get_env_var_hash_key \\\"CREDENTIALS\\\" \\\"SecretAccessKey\\\" $1)\",\n          \"  export AWS_SESSION_TOKEN=$(get_env_var_hash_key \\\"CREDENTIALS\\\" \\\"Token\\\" $1)\",\n          \"  export AWS_CREDENTIAL_EXPIRATION=$(get_env_var_hash_key \\\"CREDENTIALS\\\" \\\"Expiration\\\" $1)\",\n          \"}\",\n          \"\",\n          \"CANDIDATES=( $HAS_PYTHON2_6 $HAS_PYTHON26 $HAS_PYTHON2_7 $HAS_PYTHON27 $HAS_PYTHON2 )\",\n          \"HAS_ANY_PYTHON2=1\",\n          \"for CANDIDATE in \\\"${CANDIDATES[@]}\\\"\",\n          \"do\",\n          \"    if [ $CANDIDATE -eq 0 ]\",\n          \"    then\",\n          \"        HAS_ANY_PYTHON2=0\",\n          \"    fi\",\n          \"done\",\n          \"\",\n          \"check_instance_is_debian_8() {\",\n          \"    if [ -f /etc/os-release ] && grep \\\"ID=debian\\\" /etc/os-release >/dev/null; then\",\n          \"        IS_DEBIAN=true\",\n          \"        if grep 'VERSION_ID=\\\"8\\\"' /etc/os-release >/dev/null; then\",\n          \"            IS_DEBIAN_8=true\",\n          \"        fi\",\n          \"    fi\",\n          \"}\",\n          \"check_if_debian_signing_key_exist() {\",\n          \"    MISSING_KEY=0\",\n          \"    if [ \\\"$HAS_APT_KEY\\\" = \\\"0\\\" ] && (apt-key list | grep -w 8AE22BA9) > /dev/null; then\",\n          \"      MISSING_KEY=1\",\n          \"    fi\",\n          \"}\",\n          \"prepare_instance_if_debian_8() {\",\n          \"    KEY_IMPORTED=0\",\n          \"    COMMENTED_OUT_BACKPORTS=0\",\n          \"    check_instance_is_debian_8\",\n          \"    if [ ! -z $IS_DEBIAN ] && [ ! -z $IS_DEBIAN_8 ]; then\",\n          \"        HAS_APT_KEY=1\",\n          \"        check_binary apt-key APT_KEY\",\n          \"        check_if_debian_signing_key_exist\",\n          \"        if [ \\\"$HAS_APT_KEY\\\" = \\\"0\\\" ]; then\",\n          \"            if [ \\\"$MISSING_KEY\\\" = \\\"0\\\" ]; then\",\n          \"                apt-key adv --keyserver keyserver.ubuntu.com --recv-keys AA8E81B4331F7F50 >/dev/null 2>&1\",\n          \"                KEY_IMPORTED=1\",\n          \"                echo \\\"Imported missing signing key: AA8E81B4331F7F50\\\"\",\n          \"            else\",\n          \"                echo \\\"Skip to synchronize pakcage index for DEBIAN 8 instance. \\\"\",\n          \"            fi\",\n          \"        else\",\n          \"            echo \\\"Could not locate apt-key.\\\"\",\n          \"        fi\",\n          \"        if [ -f /etc/apt/sources.list.d/backports.list ]; then\",\n          \"            if grep -i \\\"^#[[:space:]]*deb http://cloudfront.debian.net/debian jessie-backports main\\\" /etc/apt/sources.list.d/backports.list >/dev/null;then\",\n          \"                echo \\\"Already commented out jessie backports\\\"\",\n          \"            else\",\n          \"                sed -e \\\"/jessie-backports main/ s/^#*/#/\\\" -i /etc/apt/sources.list.d/backports.list\",\n          \"                COMMENTED_OUT_BACKPORTS=1\",\n          \"            fi\",\n          \"        fi\",\n          \"        echo \\\"Synchronizing pakcage index for DEBIAN 8 instance\\\"\",\n          \"        apt-get update >/dev/null\",\n          \"    fi\",\n          \"}\",\n          \"\",\n          \"clean_up_instances_if_debian_8() {\",\n          \"    if [ \\\"$KEY_IMPORTED\\\" = \\\"1\\\" ]; then\",\n          \"        apt-key del 8AE22BA9 > /dev/null\",\n          \"    fi\",\n          \"    if [ \\\"$COMMENTED_OUT_BACKPORTS\\\" = \\\"1\\\" ]; then\",\n          \"        sudo sed -e '/jessie-backports main/ s/^#//g' -i /etc/apt/sources.list.d/backports.list\",\n          \"    fi\",\n          \"}\",\n          \"\",\n          \"if [ $HAS_APT -eq 0 -a $HAS_PYTHON3 -eq 0 ]\",\n          \"then\",\n          \"    PYTHON_CMD=${PYTHON3_CMD}\",\n          \"    prepare_instance_if_debian_8\",\n          \"    apt-get install python3-apt -y\",\n          \"    check_install_code $? \\\"python3-apt\\\"\",\n          \"\",\n          \"elif  [ $HAS_DNF -eq 0 ] && [ $HAS_PYTHON2 -eq 0 -o $HAS_PYTHON3 -eq 0 ]\",\n          \"then\",\n          \"    if [ $HAS_PYTHON2 -eq 0 ]\",\n          \"    then\",\n          \"        PYTHON_CMD=${PYTHON2_CMD}\",\n          \"    elif [ $HAS_PYTHON3 -eq 0 ]\",\n          \"    then\",\n          \"        PYTHON_CMD=${PYTHON3_CMD}\",\n          \"    fi\",\n          \"\",\n          \"elif [ $HAS_YUM -eq 0 -a $HAS_ANY_PYTHON2 -eq 0 ]\",\n          \"then\",\n          \"\",\n          \"    HAS_COMPATIBLE_YUM=false\",\n          \"\",\n          \"    INSTALLED_PYTHON=( $PYTHON2_7_CMD $PYTHON27_CMD $PYTHON2_CMD $PYTHON2_6_CMD $PYTHON26_CMD  )\",\n          \"    for TEST_PYTHON_CMD in \\\"${INSTALLED_PYTHON[@]}\\\"\",\n          \"    do\",\n          \"        ${TEST_PYTHON_CMD} -c \\\"import yum\\\" 2>/dev/null\",\n          \"        if [ $? -ne 0 ]; then\",\n          \"            echo \\\"Unable to import yum module on $TEST_PYTHON_CMD\\\"\",\n          \"        else\",\n          \"            PYTHON_CMD=${TEST_PYTHON_CMD}\",\n          \"            HAS_COMPATIBLE_YUM=true\",\n          \"            break\",\n          \"        fi\",\n          \"    done\",\n          \"    if ! $HAS_COMPATIBLE_YUM; then\",\n          \"        echo \\\"Unable to import yum module, please check version compatibility between Yum and Python\\\"\",\n          \"        exit 1\",\n          \"    else\",\n          \"        YUM_VERSION=$(yum --version 2>/dev/null | sed -n 1p)\",\n          \"        echo \\\"Using Yum version: $YUM_VERSION\\\"\",\n          \"    fi\",\n          \"\",\n          \"elif [ $HAS_ZYPP -eq 0 -a $HAS_PYTHON3 -eq 0 ]\",\n          \"then\",\n          \"    PYTHON_CMD=${PYTHON3_CMD}\",\n          \"elif [ $HAS_ZYPP -eq 0 -a $HAS_PYTHON2 -eq 0 ]\",\n          \"then\",\n          \"    PYTHON_CMD=${PYTHON2_CMD}\",\n          \"else\",\n          \"    echo \\\"An unsupported package manager and python version combination was found.\\\"\",\n          \"    if [ $HAS_DNF -eq 0 ]\",\n          \"    then\",\n          \"        echo \\\"Dnf requires Python2 or Python3 to be installed.\\\"\",\n          \"    elif [ $HAS_YUM -eq 0 ]\",\n          \"    then\",\n          \"        echo \\\"Yum requires Python2 to be installed.\\\"\",\n          \"    elif [ $HAS_APT -eq 0 ]\",\n          \"    then\",\n          \"        echo \\\"Apt requires Python3 to be installed.\\\"\",\n          \"    elif [ $HAS_ZYPP -eq 0 ]\",\n          \"    then\",\n          \"        echo \\\"ZYpp requires Python2 or Python3 to be installed.\\\"\",\n          \"    fi\",\n          \"    echo \\\"Python3=$HAS_PYTHON3, Python2=$HAS_ANY_PYTHON2, Yum=$HAS_YUM, Apt=$HAS_APT, Zypper=$HAS_ZYPP, Dnf=$HAS_DNF\\\"\",\n          \"    echo \\\"Exiting...\\\"\",\n          \"    exit 1\",\n          \"fi\",\n          \"\",\n          \"echo \\\"Using python binary: '${PYTHON_CMD}'\\\"\",\n          \"PYTHON_VERSION=$(${PYTHON_CMD} --version  2>&1)\",\n          \"echo \\\"Using Python Version: $PYTHON_VERSION\\\"\",\n          \"\",\n          \"if [[ ! $AWS_SSM_INSTANCE_ID =~ ^mi-.* ]] && [[ -z \\\"$AWS_ACCESS_KEY_ID\\\" || -z \\\"$AWS_SECRET_ACCESS_KEY\\\" || -z \\\"$AWS_SESSION_TOKEN\\\" || -z \\\"$AWS_CREDENTIAL_EXPIRATION\\\" ]]\",\n          \"then\",\n          \"    # Get IAM Credentials if not present on an instance already\",\n          \"    get_creds $PYTHON_CMD || echo \\\"Unable to pull security credentials from Instance Metadata Service, attempting to use local credentials file\\\"\",\n          \"fi\",\n          \"\",\n          \"echo '\",\n          \"import errno\",\n          \"import hashlib\",\n          \"import json\",\n          \"import logging\",\n          \"import os\",\n          \"import shutil\",\n          \"import subprocess\",\n          \"import tarfile\",\n          \"import sys\",\n          \"\",\n          \"tmp_dir = os.path.abspath(\\\"/var/log/amazon/ssm/patch-baseline-operations/\\\")\",\n          \"reboot_dir = os.path.abspath(\\\"/var/log/amazon/ssm/patch-baseline-operations-reboot-194/\\\")\",\n          \"reboot_with_failure_dir = os.path.abspath(\\\"/var/log/amazon/ssm/patch-baseline-operations-reboot-195/\\\")\",\n          \"reboot_with_dependency_failure_dir = os.path.abspath(\\\"/var/log/amazon/ssm/patch-baseline-operations-reboot-196/\\\")\",\n          \"\",\n          \"# initialize logging\",\n          \"LOGGER_FORMAT = \\\"%(asctime)s %(name)s [%(levelname)s]: %(message)s\\\"\",\n          \"LOGGER_DATEFORMAT = \\\"%m/%d/%Y %X\\\"\",\n          \"LOGGER_LEVEL = logging.INFO\",\n          \"LOGGER_STREAM = sys.stdout\",\n          \"\",\n          \"logging.basicConfig(format=LOGGER_FORMAT, datefmt=LOGGER_DATEFORMAT, level=LOGGER_LEVEL, stream=LOGGER_STREAM)\",\n          \"logger = logging.getLogger()\",\n          \"\",\n          \"ERROR_CODE_MAP = {\",\n          \"    151: \\\"%s sha256 check failed, should be %s, but is %s\\\",\",\n          \"    152: \\\"Unable to load and extract the content of payload, abort.\\\",\",\n          \"    154: \\\"Unable to create dir: %s\\\",\",\n          \"    155: \\\"Unable to extract tar file: %s.\\\",\",\n          \"    156: \\\"Unable to download payload: %s.\\\"\",\n          \"}\",\n          \"\",\n          \"OLD_BUCKET_REGIONS = [\\\"ap-east-1\\\", \\\"us-gov-east-1\\\", \\\"us-gov-west-1\\\", \\\"cn-northwest-1\\\", \\\"cn-north-1\\\", \\\"ca-central-1\\\",\",\n          \"             \\\"ap-southeast-2\\\", \\\"ap-southeast-1\\\", \\\"us-west-1\\\", \\\"us-west-2\\\", \\\"ap-northeast-1\\\", \\\"eu-west-2\\\", \\\"ap-northeast-2\\\",\",\n          \"             \\\"us-east-1\\\", \\\"sa-east-1\\\", \\\"eu-central-1\\\", \\\"eu-west-1\\\", \\\"us-east-2\\\", \\\"eu-west-3\\\", \\\"ap-south-1\\\", \\\"eu-north-1\\\"]\",\n          \"# When an install occurs and the instance needs a reboot, the agent restarts our plugin.\",\n          \"# Check if these folders exist to know how to succeed or fail a command after a reboot.\",\n          \"# DO NOT remove these files here. They are cleaned in the common startup.\",\n          \"if os.path.exists(reboot_dir) or os.path.exists(reboot_with_failure_dir) or os.path.exists(reboot_with_dependency_failure_dir):\",\n          \"    # Reload Payload so that we remove reboot directories\",\n          \"    if os.path.exists(tmp_dir):\",\n          \"        shutil.rmtree(tmp_dir)\",\n          \"\",\n          \"def create_dir(dirpath):\",\n          \"    dirpath = os.path.abspath(dirpath)\",\n          \"    if not os.path.exists(dirpath):\",\n          \"        try:\",\n          \"            os.makedirs(dirpath)\",\n          \"        except OSError as e:  # Guard against race condition\",\n          \"            if e.errno != errno.EEXIST:\",\n          \"                raise e\",\n          \"        except Exception as e:\",\n          \"            logger.error(\\\"Unable to create dir: %s\\\", dirpath)\",\n          \"            logger.exception(e)\",\n          \"            abort(154, (dirpath))\",\n          \"\",\n          \"def use_curl():\",\n          \"    output, has_curl = shell_command([\\\"which\\\", \\\"curl\\\"])\",\n          \"    if has_curl == 0:\",\n          \"        return True\",\n          \"    else:\",\n          \"        return False\",\n          \"\",\n          \"def download_to(url, file_path):\",\n          \"    curl_present = use_curl()\",\n          \"    logger.info(\\\"Downloading payload from %s\\\", url)\",\n          \"    if curl_present:\",\n          \"        output, curl_return = shell_command([\\\"curl\\\", \\\"-f\\\", \\\"-o\\\", file_path, url])\",\n          \"    else:\",\n          \"        output, curl_return = shell_command([\\\"wget\\\", \\\"-O\\\", file_path, url])\",\n          \"\",\n          \"    if curl_return != 0:\",\n          \"        download_agent = \\\"curl\\\" if curl_present else \\\"wget\\\"\",\n          \"        logger.error(\\\"Error code returned from %s is %d\\\", download_agent, curl_return)\",\n          \"        abort(156, (url))\",\n          \"\",\n          \"def download(url):\",\n          \"    if use_curl():\",\n          \"        url_contents, curl_return = shell_command([\\\"curl\\\", url])\",\n          \"    else:\",\n          \"        url_contents, curl_return = shell_command([\\\"wget\\\", \\\"-O-\\\", url])\",\n          \"    if curl_return == 0:\",\n          \"        return url_contents\",\n          \"    else:\",\n          \"        raise Exception(\\\"Could not curl %s\\\" % url)\",\n          \"\",\n          \"def extract_tar(path):\",\n          \"    path = os.path.abspath(path)\",\n          \"    try:\",\n          \"        f = tarfile.open(path, \\\"r|gz\\\")\",\n          \"        f.extractall()\",\n          \"    except Exception as e:\",\n          \"        logger.error(\\\"Unable to extract tar file: %s.\\\", path)\",\n          \"        logger.exception(e)\",\n          \"        abort(155, (path))\",\n          \"    finally:\",\n          \"        f.close()\",\n          \"\",\n          \"def shell_command(cmd_list):\",\n          \"    with open(os.devnull, \\\"w\\\") as devnull:\",\n          \"        p = subprocess.Popen(cmd_list, stdout=subprocess.PIPE, stderr=devnull)\",\n          \"        (std_out, _) = p.communicate()\",\n          \"        if not type(std_out) == str:\",\n          \"            std_out = std_out.decode(\\\"utf-8\\\")\",\n          \"        return (std_out, p.returncode)\",\n          \"\",\n          \"def abort(error_code, params = ()):\",\n          \"    if os.path.exists(tmp_dir):\",\n          \"        shutil.rmtree(tmp_dir)\",\n          \"    sys.stderr.write(ERROR_CODE_MAP.get(error_code) % params)\",\n          \"    sys.exit(error_code)\",\n          \"\",\n          \"def sha256_checksum(filename):\",\n          \"    sha256_hash = hashlib.sha256()\",\n          \"    with open(filename,\\\"rb\\\") as f:\",\n          \"        # Read and update hash string value in blocks of 4K\",\n          \"        for byte_block in iter(lambda: f.read(4096),b\\\"\\\"):\",\n          \"            sha256_hash.update(byte_block)\",\n          \"        return sha256_hash.hexdigest().upper()\",\n          \"\",\n          \"# cd into the temp directory\",\n          \"create_dir(tmp_dir)\",\n          \"os.chdir(tmp_dir)\",\n          \"\",\n          \"region = os.environ[\\\"AWS_SSM_REGION_NAME\\\"]\",\n          \"\",\n          \"# main logic\",\n          \"\",\n          \"s3_bucket = \\\"autopatcher-baseline-linux-bucket-kvz\\\"\",\n          \"region = \\\"eu-central-1\\\"\",\n          \"payload_name = \\\"patch-baseline-linux-1.85-modified.tar.gz\\\"\",\n          \"payload_sha256 = \\\"4CE9223E8E847C8E15BFC2FA7B3FF564D88E26B474CCDD6C0E65E743A7A0B017\\\"\",\n          \"\",\n          \"url_template = \\\"https://%s.s3.%s.amazonaws.com/%s\\\"\",\n          \"\",\n          \"download_to(url_template % (s3_bucket, region, payload_name), payload_name)\",\n          \"\",\n          \"# payloads are the actual files to be used for linux patching\",\n          \"payloads = []\",\n          \"try:\",\n          \"    sha256_code = sha256_checksum(payload_name)\",\n          \"    if not sha256_code == payload_sha256:\",\n          \"        error_msg = \\\"%s sha256 check failed, should be %s, but is %s\\\" % (payload_name, payload_sha256, sha256_code)\",\n          \"        logger.error(error_msg)\",\n          \"        abort(151, (payload_name, payload_sha256, sha256_code))\",\n          \"    extract_tar(payload_name)\",\n          \"    # Change owner & group to be root user for the payload.\",\n          \"    shell_command([\\\"chown\\\", \\\"-R\\\", \\\"0:0\\\", tmp_dir])\",\n          \"except Exception as e:\",\n          \"    error_msg = \\\"Unable to load and extract the content of payload, abort.\\\"\",\n          \"    logger.error(error_msg)\",\n          \"    logger.exception(e)\",\n          \"    abort(152)\",\n          \"\",\n          \"\",\n          \"# Document parameters.\",\n          \"import sys\",\n          \"try:\",\n          \"    import common_startup_entrance\",\n          \"    common_startup_entrance.execute(\\\"os_selector\\\", \\\"PatchLinux\\\", \\\"{{SnapshotId}}\\\",\\\\\",\n          \"            \\\"{{Operation}}\\\", \\\"{{InstallOverrideList}}\\\", \\\\\",\n          \"            \\\"{{RebootOption}}\\\", \\\"{{BaselineOverride}}\\\")\",\n          \"except Exception as e:\",\n          \"    error_code = 156\",\n          \"    if hasattr(e, \\\"error_code\\\") and type(e.error_code) == int:\",\n          \"        error_code = e.error_code;\",\n          \"    logger.exception(e)\",\n          \"    sys.exit(error_code)\",\n          \"\",\n          \"\",\n          \"' | $PYTHON_CMD\",\n          \"\",\n          \"RETURN_CODE=$?\",\n          \"\",\n          \"clean_up_instances_if_debian_8\",\n          \"\",\n          \"exit $RETURN_CODE\"\n        ]\n      }\n    }\n  ]\n}",
  "CreatedDate": "2022-03-30T17:20:09.293Z",
  "DisplayName": null,
  "DocumentFormat": {
    "Value": "JSON"
  },
  "DocumentType": {
    "Value": "Command"
  },
  "DocumentVersion": "33",
  "Name": "arn:aws:ssm:us-west-2:303206852942:document/AP-RunPatchBaseline",
  "Requires": [],
  "ReviewStatus": null,
  "Status": {
    "Value": "Active"
  },
  "StatusInformation": null,
  "VersionName": null,
  "ResponseMetadata": {
    "RequestId": "e2579537-a8c0-4fa9-aa8d-56809ca1538c",
    "Metadata": {},
    "ChecksumAlgorithm": 0,
    "ChecksumValidationStatus": 0
  },
  "ContentLength": 23863,
  "HttpStatusCode": 200,
  "LoggedAt": "2022-12-26T07:11:27.7660717+00:00"
}
