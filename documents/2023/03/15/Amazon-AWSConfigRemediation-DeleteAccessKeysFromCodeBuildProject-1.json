{
  "AttachmentsContent": [],
  "Content": "{\n  \"schemaVersion\" : \"0.3\",\n  \"description\" : \"### Document name - AWSConfigRemediation-DeleteAccessKeysFromCodeBuildProject\\n\\n## What does this document do?\\nThis document deletes AWS_ACCESS_KEY_ID and AWS_SECRET_ACCESS_KEY environment variables from the given \\nAWS CodeBuild project using [UpdateProject](https://docs.aws.amazon.com/codebuild/latest/APIReference/API_UpdateProject.html) API.\\n\\n## Input Parameters\\n* AutomationAssumeRole: (Required) The ARN of the role that allows Automation to perform the actions on your behalf.\\n* ResourceId: (Required) The AWS CodeBuild project resource id from AWS Config.\\n\\n## Output Parameters\\n* DeleteAndVerifyCodeBuildEnvironmentVariables.Output: The standard HTTP response from the UpdateProject API call.\\n\",\n  \"assumeRole\" : \"{{ AutomationAssumeRole }}\",\n  \"parameters\" : {\n    \"AutomationAssumeRole\" : {\n      \"type\" : \"String\",\n      \"description\" : \"(Required) The ARN of the role that allows Automation to perform the actions on your behalf.\",\n      \"allowedPattern\" : \"^arn:(aws[a-zA-Z-]*)?:iam::\\\\d{12}:role/[\\\\w+=,.@/-]+$\"\n    },\n    \"ResourceId\" : {\n      \"type\" : \"String\",\n      \"description\" : \"(Required) The AWS CodeBuild project resource id from AWS Config.\",\n      \"allowedPattern\" : \"[a-z0-9-]{2,255}\"\n    }\n  },\n  \"outputs\" : [ \"DeleteAndVerifyCodeBuildEnvironmentVariables.Output\" ],\n  \"mainSteps\" : [ {\n    \"name\" : \"DeleteAndVerifyCodeBuildEnvironmentVariables\",\n    \"action\" : \"aws:executeScript\",\n    \"description\" : \"## DeleteAndVerifyCodeBuildEnvironmentVariables\\nDeletes and verifies the deletion of environment variables (AWS_ACCESS_KEY_ID and AWS_SECRET_ACCESS_KEY) from the given AWS CodeBuild project.\\n## Outputs\\n* Output: The standard HTTP response from the UpdateProject API call.\\n\",\n    \"isEnd\" : true,\n    \"timeoutSeconds\" : 600,\n    \"inputs\" : {\n      \"Runtime\" : \"python3.7\",\n      \"Handler\" : \"handler\",\n      \"InputPayload\" : {\n        \"ResourceId\" : \"{{ ResourceId }}\"\n      },\n      \"Script\" : \"import boto3\\nimport botocore\\n\\ndef get_project_name(config_client, resource_id):\\n    list_discovered_resources_response = config_client.list_discovered_resources(\\n        resourceType=\\\"AWS::CodeBuild::Project\\\",\\n        resourceIds=[resource_id]\\n    )\\n    resource_name = list_discovered_resources_response[\\\"resourceIdentifiers\\\"][0][\\\"resourceName\\\"]\\n    return resource_name\\n\\ndef delete_and_update_environment_variables(codebuild_client, project_name):\\n    batch_get_projects_response = codebuild_client.batch_get_projects(names=[project_name])\\n    environment = batch_get_projects_response[\\\"projects\\\"][0][\\\"environment\\\"]\\n    environment_variables = batch_get_projects_response[\\\"projects\\\"][0][\\\"environment\\\"][\\\"environmentVariables\\\"]\\n    environment_variables_length = len(batch_get_projects_response[\\\"projects\\\"][0][\\\"environment\\\"][\\\"environmentVariables\\\"])\\n\\n    if(environment_variables_length > 0):\\n      index = environment_variables_length - 1\\n      while index >= 0:\\n        if environment_variables[index][\\\"name\\\"] in [\\\"AWS_ACCESS_KEY_ID\\\",\\\"AWS_SECRET_ACCESS_KEY\\\"]:\\n          del environment_variables[index]\\n          index = index - 1\\n\\n      codebuild_client.update_project(\\n          name = project_name,\\n          environment = environment\\n      )\\n\\ndef verify_project_environment_variables(codebuild_client, project_name):\\n    batch_get_projects_response = codebuild_client.batch_get_projects(names=[project_name])\\n    environment_variables = batch_get_projects_response[\\\"projects\\\"][0][\\\"environment\\\"][\\\"environmentVariables\\\"]\\n    for environment_variable in environment_variables:\\n      if environment_variable[\\\"name\\\"] in [\\\"AWS_ACCESS_KEY_ID\\\", \\\"AWS_SECRET_ACCESS_KEY\\\"]:\\n          return False\\n    return True\\n\\ndef handler(event, context):\\n    config_client = boto3.client(\\\"config\\\")\\n    codebuild_client = boto3.client(\\\"codebuild\\\")\\n    resource_id = event[\\\"ResourceId\\\"]\\n\\n    # Get the project name using resource id\\n    project_name = get_project_name(config_client, resource_id)\\n\\n    # Delete and update the environment variables\\n    delete_and_update_environment_variables(codebuild_client, project_name)\\n\\n    # Verify the deletion of environment variables\\n    if verify_project_environment_variables(codebuild_client, project_name):\\n        return {\\n              \\\"output\\\": {\\n                  \\\"Message\\\": \\\"Verification of delete AWS CodeBuild project {} environment variables (AWS_ACCESS_KEY_ID and AWS_SECRET_ACCESS_KEY) successful.\\\".format(project_name)\\n          }\\n        }\\n    raise Exception(\\n          \\\"VERIFICATION FAILED. DELETE AWS CODEBUILD PROJECT {} ENVIRONMENT VARIABLES (AWS_ACCESS_KEY_ID AND AWS_SECRET_ACCESS_KEY) FAILED.\\\".format(project_name)\\n    )\"\n    },\n    \"outputs\" : [ {\n      \"Name\" : \"Output\",\n      \"Selector\" : \"$.Payload.output\",\n      \"Type\" : \"StringMap\"\n    } ]\n  } ]\n}",
  "CreatedDate": "2020-12-07T22:07:58.198Z",
  "DisplayName": null,
  "DocumentFormat": {
    "Value": "JSON"
  },
  "DocumentType": {
    "Value": "Automation"
  },
  "DocumentVersion": "1",
  "Name": "AWSConfigRemediation-DeleteAccessKeysFromCodeBuildProject",
  "Requires": [],
  "ReviewStatus": null,
  "Status": {
    "Value": "Active"
  },
  "StatusInformation": null,
  "VersionName": null,
  "ResponseMetadata": {
    "RequestId": "c5a2cf52-73da-44d3-a732-36a535c9631e",
    "Metadata": {},
    "ChecksumAlgorithm": 0,
    "ChecksumValidationStatus": 0
  },
  "ContentLength": 5430,
  "HttpStatusCode": 200,
  "LoggedAt": "2023-03-15T07:11:30.7668298+00:00"
}
