{
  "AttachmentsContent": [],
  "Content": "{\n  \"description\" : \"# Id sns:sop:enable_dead_letter_queue:2020-11-26\\n## Intent Enable a dead-letter queue when it is not set up for a topic's subscription\\n## Type Software Outage SOP\\n## Risk Small\\n## Requirements * An existing SNS topic with a subscription * An SQS queue that will be used as the dead-letter queue for the subscription.\\n## Permissions required for AutomationAssumeRole * sns:SetSubscriptionAttributes\\n## Supports Rollback Yes\\n## Inputs ### `SubscriptionArn`:\\n    type: String\\n    description: (Required) Amazon SNS subscription ARN.\\n### `DeadLetterQueueArn`:\\n    type: String\\n    description: (Required) The dead-letter queue ARN for the subscription.\\n### `AutomationAssumeRole`:\\n    type: String\\n    description: (Required) The ARN of the role that allows automation to perform the actions on your behalf.\\n### `Dryrun`:\\n    type: String\\n    description: (Optional) Dryrun indicates a testing run and the changes will be rolled back.\\n    default: true\\n\\n## Details Given an SNS subscription ARN that does not have a dead-letter queue enabled, enable the same for that subscription. Supports dryrun (rollback).\\n## Steps executed in normal flow\\n  * RecordStartTime\\n  * SNSSubEnableDlq\\n  * OutputRecoveryTime\\n  * DryrunBranch\\n  * EmptyStepForEnd\\n\\n## Steps executed in dry-run flow\\n  * RecordStartTime\\n  * SNSSubEnableDlq\\n  * OutputRecoveryTime\\n  * DryrunBranch\\n  * SleepAfterEnableDlq\\n  * SleepBeforeRollback\\n  * RollbackEnableDlq\\n  * EmptyStepForEnd\\n\\n## Outputs `OutputRecoveryTime.RecoveryTime`\",\n  \"schemaVersion\" : \"0.3\",\n  \"assumeRole\" : \"{{AutomationAssumeRole}}\",\n  \"outputs\" : [ \"OutputRecoveryTime.RecoveryTime\" ],\n  \"parameters\" : {\n    \"SubscriptionArn\" : {\n      \"type\" : \"String\",\n      \"description\" : \"(Required) An Amazon SNS subscription ARN.\"\n    },\n    \"DeadLetterQueueArn\" : {\n      \"type\" : \"String\",\n      \"description\" : \"(Required) The dead-letter queue ARN for the subscription.\"\n    },\n    \"AutomationAssumeRole\" : {\n      \"type\" : \"String\",\n      \"description\" : \"(Required) The ARN of the role that allows automation to perform the actions on your behalf.\"\n    },\n    \"Dryrun\" : {\n      \"type\" : \"Boolean\",\n      \"default\" : true,\n      \"description\" : \"(Optional) Dryrun indicates a testing run and the changes will be rolled back.\"\n    }\n  },\n  \"mainSteps\" : [ {\n    \"name\" : \"RecordStartTime\",\n    \"action\" : \"aws:executeScript\",\n    \"outputs\" : [ {\n      \"Name\" : \"StartTime\",\n      \"Selector\" : \"$.Payload\",\n      \"Type\" : \"String\"\n    } ],\n    \"inputs\" : {\n      \"Runtime\" : \"python3.8\",\n      \"Handler\" : \"start_time\",\n      \"Script\" : \"import boto3\\nimport logging\\nfrom datetime import datetime, timezone\\nimport time\\n\\nfrom botocore.exceptions import ClientError\\nfrom dateutil import parser\\n\\nlogger = logging.getLogger()\\nlogger.setLevel(logging.INFO)\\n\\n\\n\\ndef start_time(events, context):\\n    return datetime.now(timezone.utc).isoformat()\"\n    }\n  }, {\n    \"name\" : \"SNSSubEnableDlq\",\n    \"description\" : \"Execute a script that gets an SNS subscription ARN as input, and enables DLQ for that subscription.\",\n    \"action\" : \"aws:executeScript\",\n    \"outputs\" : [ {\n      \"Name\" : \"TimeElapsed\",\n      \"Selector\" : \"$.Payload.TimeElapsed\",\n      \"Type\" : \"String\"\n    } ],\n    \"inputs\" : {\n      \"Runtime\" : \"python3.8\",\n      \"Handler\" : \"sns_sub_set_dlq\",\n      \"InputPayload\" : {\n        \"SubscriptionArn\" : \"{{SubscriptionArn}}\",\n        \"DeadLetterQueueArn\" : \"{{DeadLetterQueueArn}}\"\n      },\n      \"Script\" : \"\\\"\\\"\\\"SNS util.\\\"\\\"\\\"\\n\\nimport json\\nimport logging\\nimport random\\nfrom datetime import datetime\\nimport time\\nfrom typing import List, Callable, Optional\\nfrom uuid import uuid4\\n\\nimport boto3\\nfrom botocore.config import Config\\nfrom botocore.exceptions import ClientError\\n\\nINITIAL_COUNT_OF_SUBSCRIPTIONS = 1\\n\\n\\n\\ndef sns_sub_set_dlq(events: dict, context: dict) -> dict:\\n    start_execution = datetime.utcnow()\\n    sns_config = Config(\\n        signature_version='v4',\\n        retries={\\n            'max_attempts': 10,\\n            'mode': 'standard'\\n        }\\n    )\\n    sns_client = boto3.client('sns', config=sns_config)\\n    sub_arn: str = events['SubscriptionArn']\\n    dlq_arn = events.get('DeadLetterQueueArn')\\n\\n    if dlq_arn:\\n        sns_client.set_subscription_attributes(SubscriptionArn=sub_arn, AttributeName='RedrivePolicy',\\n                                               AttributeValue=f'{{\\\"deadLetterTargetArn\\\":\\\"{dlq_arn}\\\"}}')\\n    else:\\n        sns_client.set_subscription_attributes(SubscriptionArn=sub_arn, AttributeName='RedrivePolicy')\\n\\n    return {'TimeElapsed': str((datetime.utcnow() - start_execution).total_seconds())}\"\n    }\n  }, {\n    \"name\" : \"OutputRecoveryTime\",\n    \"action\" : \"aws:executeScript\",\n    \"outputs\" : [ {\n      \"Name\" : \"RecoveryTime\",\n      \"Selector\" : \"$.Payload\",\n      \"Type\" : \"Integer\"\n    } ],\n    \"inputs\" : {\n      \"Runtime\" : \"python3.8\",\n      \"Handler\" : \"recovery_time\",\n      \"Script\" : \"import boto3\\nimport logging\\nfrom datetime import datetime, timezone\\nimport time\\n\\nfrom botocore.exceptions import ClientError\\nfrom dateutil import parser\\n\\nlogger = logging.getLogger()\\nlogger.setLevel(logging.INFO)\\n\\n\\n\\ndef recovery_time(events, context):\\n    return (datetime.now(timezone.utc) - parser.parse(events['StartTime'])).seconds\",\n      \"InputPayload\" : {\n        \"StartTime\" : \"{{ RecordStartTime.StartTime }}\"\n      }\n    }\n  }, {\n    \"name\" : \"DryrunBranch\",\n    \"action\" : \"aws:branch\",\n    \"inputs\" : {\n      \"Choices\" : [ {\n        \"NextStep\" : \"EmptyStepForEnd\",\n        \"Variable\" : \"{{Dryrun}}\",\n        \"BooleanEquals\" : false\n      }, {\n        \"NextStep\" : \"SleepAfterEnableDlq\",\n        \"Variable\" : \"{{Dryrun}}\",\n        \"BooleanEquals\" : true\n      } ]\n    }\n  }, {\n    \"name\" : \"SleepAfterEnableDlq\",\n    \"action\" : \"aws:sleep\",\n    \"inputs\" : {\n      \"Duration\" : \"PT600S\"\n    },\n    \"description\" : \"Sleep after enabling DLQ to allow testing the alarm reliably during dry-runs.\"\n  }, {\n    \"name\" : \"SleepBeforeRollback\",\n    \"action\" : \"aws:sleep\",\n    \"inputs\" : {\n      \"Duration\" : \"PT30S\"\n    },\n    \"description\" : \"Sleep before rollback opertation to allow testing the alarm reliably during dry-runs.\"\n  }, {\n    \"name\" : \"RollbackEnableDlq\",\n    \"description\" : \"Execute a script that gets an SNS subscription ARN as input, and resets DLQ for that subscription.\",\n    \"action\" : \"aws:executeScript\",\n    \"outputs\" : [ {\n      \"Name\" : \"TimeElapsed\",\n      \"Selector\" : \"$.Payload.TimeElapsed\",\n      \"Type\" : \"String\"\n    } ],\n    \"inputs\" : {\n      \"Runtime\" : \"python3.8\",\n      \"Handler\" : \"sns_sub_set_dlq\",\n      \"InputPayload\" : {\n        \"SubscriptionArn\" : \"{{SubscriptionArn}}\"\n      },\n      \"Script\" : \"\\\"\\\"\\\"SNS util.\\\"\\\"\\\"\\n\\nimport json\\nimport logging\\nimport random\\nfrom datetime import datetime\\nimport time\\nfrom typing import List, Callable, Optional\\nfrom uuid import uuid4\\n\\nimport boto3\\nfrom botocore.config import Config\\nfrom botocore.exceptions import ClientError\\n\\nINITIAL_COUNT_OF_SUBSCRIPTIONS = 1\\n\\n\\n\\ndef sns_sub_set_dlq(events: dict, context: dict) -> dict:\\n    start_execution = datetime.utcnow()\\n    sns_config = Config(\\n        signature_version='v4',\\n        retries={\\n            'max_attempts': 10,\\n            'mode': 'standard'\\n        }\\n    )\\n    sns_client = boto3.client('sns', config=sns_config)\\n    sub_arn: str = events['SubscriptionArn']\\n    dlq_arn = events.get('DeadLetterQueueArn')\\n\\n    if dlq_arn:\\n        sns_client.set_subscription_attributes(SubscriptionArn=sub_arn, AttributeName='RedrivePolicy',\\n                                               AttributeValue=f'{{\\\"deadLetterTargetArn\\\":\\\"{dlq_arn}\\\"}}')\\n    else:\\n        sns_client.set_subscription_attributes(SubscriptionArn=sub_arn, AttributeName='RedrivePolicy')\\n\\n    return {'TimeElapsed': str((datetime.utcnow() - start_execution).total_seconds())}\"\n    }\n  }, {\n    \"name\" : \"EmptyStepForEnd\",\n    \"action\" : \"aws:sleep\",\n    \"inputs\" : {\n      \"Duration\" : \"PT1S\"\n    },\n    \"description\" : \"End\"\n  } ]\n}",
  "CreatedDate": "2022-11-16T09:47:22.6Z",
  "DisplayName": null,
  "DocumentFormat": {
    "Value": "JSON"
  },
  "DocumentType": {
    "Value": "Automation"
  },
  "DocumentVersion": "3",
  "Name": "AWSResilienceHub-EnableSNSTopicDLQSOP_2020-11-26",
  "Requires": [],
  "ReviewStatus": null,
  "Status": {
    "Value": "Active"
  },
  "StatusInformation": null,
  "VersionName": null,
  "ResponseMetadata": {
    "RequestId": "737e3c2c-9d9f-49f4-9fbd-733f4ae0e8fd",
    "Metadata": {},
    "ChecksumAlgorithm": 0,
    "ChecksumValidationStatus": 0
  },
  "ContentLength": 8897,
  "HttpStatusCode": 200,
  "LoggedAt": "2022-12-28T07:12:14.2515011+00:00"
}
