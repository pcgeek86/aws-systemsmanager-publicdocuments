{
  "AttachmentsContent": [],
  "Content": "{\n  \"schemaVersion\" : \"0.3\",\n  \"description\" : \"**This Document is not intended to run by itself, but to be invoked from the main document AWSEC2-CloneInstanceAndUpgradeWindows**  Given a running Instance with SSM Agent installed, upgrade to Windows Server 2016 or 2019. This document will create an AMI from the running instance and launch a new instance from the Image and will upgrade the new instance. Note that if the running instance does not have SSM installed, we will attempt to install SSM in the new instance before it is upgraded. The running instance remains untouched.\",\n  \"parameters\" : {\n    \"InstanceId\" : {\n      \"type\" : \"String\",\n      \"description\" : \"(Required) The Instance running Windows Server 2012 R2 with the SSM agent installed.\",\n      \"allowedPattern\" : \"^i-[a-z0-9]{8,17}$\"\n    },\n    \"IamInstanceProfile\" : {\n      \"type\" : \"String\",\n      \"description\" : \"(Required) The IAM profile having access to run SSM on EC2 Instance. Please refer https://docs.aws.amazon.com/systems-manager/latest/userguide/sysman-configuring-access-role.html\"\n    },\n    \"SubnetId\" : {\n      \"type\" : \"String\",\n      \"description\" : \"(Required) Provide a subnet for the upgrade process to use. Please ensure the subnet has outbound connectivity to AWS services, S3, and Microsoft for download patches. \",\n      \"allowedPattern\" : \"^subnet-[a-z0-9]{8,17}$\"\n    },\n    \"TargetWindowVersion\" : {\n      \"type\" : \"String\",\n      \"description\" : \"(Required) Select the target Windows version\",\n      \"default\" : \"2019\",\n      \"allowedValues\" : [ \"2016\", \"2019\" ]\n    },\n    \"amiName\" : {\n      \"type\" : \"String\",\n      \"description\" : \"(Optional) Name of the image with upgraded OS\",\n      \"default\" : \"\",\n      \"allowedPattern\" : \"^$|^([a-zA-Z0-9\\\\.\\\\/\\\\[\\\\]\\\\(\\\\)\\\\ '@_-]){3,128}$\"\n    },\n    \"BYOLWindowsMediaSnapshotId\" : {\n      \"type\" : \"String\",\n      \"description\" : \"(Optional) Required only if you are upgrading a BYOL instance. Please create an EBS snapshot of Windows Server Installation media using the steps detailed in the automation doc page.\",\n      \"default\" : \"\",\n      \"allowedPattern\" : \"^$|^snap-[a-z0-9]{8,17}$\"\n    },\n    \"AlternativeKeyPairName\" : {\n      \"type\" : \"String\",\n      \"description\" : \"(Optional) The name of an alternative key pair to use during the upgrade process. Useful in situations where the key pair used on the original instance is not available.\",\n      \"default\" : \"\"\n    },\n    \"KeepPreUpgradeImageBackUp\" : {\n      \"type\" : \"String\",\n      \"description\" : \"(Optional) If set True SSM will keep the pre-upgrade image created from the instance and it's your responsibility to delete the Image. Default is False. \",\n      \"default\" : \"False\",\n      \"allowedValues\" : [ \"True\", \"False\" ]\n    },\n    \"RebootInstanceBeforeTakingImage\" : {\n      \"type\" : \"String\",\n      \"description\" : \"(Optional) Default is False (no reboot). If set True, SSM will reboot the instance before creating an AMI for the upgrade. \",\n      \"default\" : \"False\",\n      \"allowedValues\" : [ \"True\", \"False\" ]\n    }\n  },\n  \"mainSteps\" : [ {\n    \"name\" : \"describeOriginalInstanceDetails\",\n    \"action\" : \"aws:executeAwsApi\",\n    \"maxAttempts\" : 2,\n    \"onFailure\" : \"Abort\",\n    \"inputs\" : {\n      \"Service\" : \"ec2\",\n      \"Api\" : \"DescribeInstances\",\n      \"InstanceIds\" : [ \"{{ InstanceId }}\" ]\n    },\n    \"outputs\" : [ {\n      \"Name\" : \"InstanceType\",\n      \"Selector\" : \"$.Reservations[0].Instances[0].InstanceType\",\n      \"Type\" : \"String\"\n    }, {\n      \"Name\" : \"AvailabilityZone\",\n      \"Selector\" : \"$.Reservations[0].Instances[0].Placement.AvailabilityZone\",\n      \"Type\" : \"String\"\n    }, {\n      \"Name\" : \"RootDeviceName\",\n      \"Selector\" : \"$.Reservations[0].Instances[0].RootDeviceName\",\n      \"Type\" : \"String\"\n    }, {\n      \"Name\" : \"KeyName\",\n      \"Selector\" : \"$.Reservations[0].Instances[0].KeyName\",\n      \"Type\" : \"String\"\n    }, {\n      \"Name\" : \"SecurityGroupIds\",\n      \"Selector\" : \"$.Reservations[0].Instances[0].SecurityGroups..GroupId\",\n      \"Type\" : \"StringList\"\n    }, {\n      \"Name\" : \"BlockDeviceMappings\",\n      \"Selector\" : \"$.Reservations[0].Instances[0].BlockDeviceMappings..DeviceName\",\n      \"Type\" : \"StringList\"\n    } ],\n    \"nextStep\" : \"assertRootVolumeIsEbs\"\n  }, {\n    \"name\" : \"assertRootVolumeIsEbs\",\n    \"action\" : \"aws:assertAwsResourceProperty\",\n    \"onFailure\" : \"Abort\",\n    \"inputs\" : {\n      \"Service\" : \"ec2\",\n      \"Api\" : \"DescribeInstances\",\n      \"InstanceIds\" : [ \"{{ InstanceId }}\" ],\n      \"PropertySelector\" : \"$.Reservations[0].Instances[0].RootDeviceType\",\n      \"DesiredValues\" : [ \"ebs\" ]\n    },\n    \"isCritical\" : \"true\",\n    \"nextStep\" : \"assertSubnetHasAutoAssignIPV4\"\n  }, {\n    \"name\" : \"assertSubnetHasAutoAssignIPV4\",\n    \"action\" : \"aws:assertAwsResourceProperty\",\n    \"onFailure\" : \"Abort\",\n    \"inputs\" : {\n      \"Service\" : \"ec2\",\n      \"Api\" : \"DescribeSubnets\",\n      \"Filters\" : [ {\n        \"Name\" : \"subnet-id\",\n        \"Values\" : [ \"{{ SubnetId }}\" ]\n      } ],\n      \"PropertySelector\" : \"$.Subnets[0].MapPublicIpOnLaunch\",\n      \"DesiredValues\" : [ \"True\" ]\n    },\n    \"isCritical\" : \"true\",\n    \"nextStep\" : \"branchOnRebootInstanceBeforeTakingImage\"\n  }, {\n    \"name\" : \"branchOnRebootInstanceBeforeTakingImage\",\n    \"action\" : \"aws:branch\",\n    \"onFailure\" : \"Abort\",\n    \"inputs\" : {\n      \"Choices\" : [ {\n        \"NextStep\" : \"createImageWithReboot\",\n        \"Variable\" : \"{{ RebootInstanceBeforeTakingImage }}\",\n        \"EqualsIgnoreCase\" : \"True\"\n      } ],\n      \"Default\" : \"createImageWithNoReboot\"\n    },\n    \"isCritical\" : \"true\"\n  }, {\n    \"name\" : \"createImageWithReboot\",\n    \"action\" : \"aws:executeAwsApi\",\n    \"maxAttempts\" : 2,\n    \"onFailure\" : \"step:deleteServerUpgradeInstance\",\n    \"inputs\" : {\n      \"Service\" : \"ec2\",\n      \"Api\" : \"CreateImage\",\n      \"InstanceId\" : \"{{ InstanceId }}\",\n      \"Name\" : \"AWSEC2_ImageFromOriginalInstance_{{ automation:EXECUTION_ID }}\",\n      \"NoReboot\" : false\n    },\n    \"outputs\" : [ {\n      \"Name\" : \"ImageId\",\n      \"Selector\" : \"$.ImageId\",\n      \"Type\" : \"String\"\n    } ],\n    \"nextStep\" : \"describeOriginalInstanceImage\"\n  }, {\n    \"name\" : \"createImageWithNoReboot\",\n    \"action\" : \"aws:executeAwsApi\",\n    \"maxAttempts\" : 2,\n    \"onFailure\" : \"step:deleteServerUpgradeInstance\",\n    \"inputs\" : {\n      \"Service\" : \"ec2\",\n      \"Api\" : \"CreateImage\",\n      \"InstanceId\" : \"{{ InstanceId }}\",\n      \"Name\" : \"AWSEC2_ImageFromOriginalInstance_{{ automation:EXECUTION_ID }}\",\n      \"NoReboot\" : true\n    },\n    \"outputs\" : [ {\n      \"Name\" : \"ImageId\",\n      \"Selector\" : \"$.ImageId\",\n      \"Type\" : \"String\"\n    } ],\n    \"nextStep\" : \"describeOriginalInstanceImage\"\n  }, {\n    \"name\" : \"describeOriginalInstanceImage\",\n    \"action\" : \"aws:executeAwsApi\",\n    \"maxAttempts\" : 2,\n    \"onFailure\" : \"step:deleteServerUpgradeInstance\",\n    \"inputs\" : {\n      \"Service\" : \"ec2\",\n      \"Api\" : \"DescribeImages\",\n      \"Filters\" : [ {\n        \"Name\" : \"name\",\n        \"Values\" : [ \"AWSEC2_ImageFromOriginalInstance_{{ automation:EXECUTION_ID }}\" ]\n      } ]\n    },\n    \"outputs\" : [ {\n      \"Name\" : \"ImageId\",\n      \"Selector\" : \"$.Images[0].ImageId\",\n      \"Type\" : \"String\"\n    } ],\n    \"nextStep\" : \"waitTillOriginalInstanceImageImageReady\"\n  }, {\n    \"name\" : \"waitTillOriginalInstanceImageImageReady\",\n    \"action\" : \"aws:waitForAwsResourceProperty\",\n    \"onFailure\" : \"step:deleteServerUpgradeInstance\",\n    \"maxAttempts\" : 2,\n    \"inputs\" : {\n      \"Service\" : \"ec2\",\n      \"Api\" : \"DescribeImages\",\n      \"ImageIds\" : [ \"{{ describeOriginalInstanceImage.ImageId }}\" ],\n      \"PropertySelector\" : \"$.Images[0].State\",\n      \"DesiredValues\" : [ \"available\" ]\n    },\n    \"nextStep\" : \"branchUseAlternativeKeyPair\"\n  }, {\n    \"name\" : \"branchUseAlternativeKeyPair\",\n    \"action\" : \"aws:branch\",\n    \"onFailure\" : \"Abort\",\n    \"inputs\" : {\n      \"Choices\" : [ {\n        \"NextStep\" : \"serverUpgradeInstanceWithAlternativeKeyPair\",\n        \"Not\" : {\n          \"Variable\" : \"{{ AlternativeKeyPairName }}\",\n          \"StringEquals\" : \"\"\n        }\n      } ],\n      \"Default\" : \"serverUpgradeInstanceWithOriginalKeyPair\"\n    },\n    \"isCritical\" : \"true\"\n  }, {\n    \"name\" : \"serverUpgradeInstanceWithAlternativeKeyPair\",\n    \"action\" : \"aws:runInstances\",\n    \"timeoutSeconds\" : 7200,\n    \"maxAttempts\" : 3,\n    \"onFailure\" : \"Abort\",\n    \"inputs\" : {\n      \"ImageId\" : \"{{ describeOriginalInstanceImage.ImageId }}\",\n      \"InstanceType\" : \"{{ describeOriginalInstanceDetails.InstanceType }}\",\n      \"MinInstanceCount\" : 1,\n      \"MaxInstanceCount\" : 1,\n      \"IamInstanceProfileName\" : \"{{ IamInstanceProfile }}\",\n      \"SubnetId\" : \"{{ SubnetId }}\",\n      \"KeyName\" : \"{{ AlternativeKeyPairName }}\",\n      \"SecurityGroupIds\" : [ \"{{ describeOriginalInstanceDetails.SecurityGroupIds }}\" ],\n      \"TagSpecifications\" : [ {\n        \"ResourceType\" : \"instance\",\n        \"Tags\" : [ {\n          \"Key\" : \"Name\",\n          \"Value\" : \"AWSEC2_UpgradeInstance_{{ automation:EXECUTION_ID }}\"\n        } ]\n      } ],\n      \"UserData\" : \"PHBvd2Vyc2hlbGw+CiRzZXJ2aWNlTmFtZSA9ICJBbWF6b25TU01BZ2VudCIKJHNlcnZpY2VEb3dubG9hZFBhdGggPSAiQzpcdGVtcFxBbWF6b25TU01BZ2VudFNldHVwLmV4ZSIKCklmIChHZXQtU2VydmljZSAkc2VydmljZU5hbWUgLUVycm9yQWN0aW9uIFNpbGVudGx5Q29udGludWUgLVdhcm5pbmdBY3Rpb24gU2lsZW50bHlDb250aW51ZSkgewogICAgSWYgKChHZXQtU2VydmljZSAkc2VydmljZU5hbWUpLlN0YXR1cyAtbmUgIlJ1bm5pbmciKSB7CiAgICAgICAgU3RhcnQtU2VydmljZSAkc2VydmljZU5hbWUKICAgICAgICBXcml0ZS1Ib3N0ICIkc2VydmljZU5hbWUgZm91bmQsIGJ1dCBpdCBpcyBub3QgcnVubmluZywgc28gc3RhcnRlZCBpdC4iCiAgICB9Cn0gRWxzZSB7CiAgICBXcml0ZS1Ib3N0ICIkc2VydmljZU5hbWUgbm90IGZvdW5kLCB0cnlpbmcgdG8gaW5zdGFsbC4iCiAgICAgTmV3LUl0ZW0gLUl0ZW1UeXBlIERpcmVjdG9yeSAtRm9yY2UgLVBhdGggIkM6XHRlbXAiICAKICAgIChOZXctT2JqZWN0IFN5c3RlbS5OZXQuV2ViQ2xpZW50KS5Eb3dubG9hZEZpbGUoImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS9lYzItZG93bmxvYWRzLXdpbmRvd3MvU1NNQWdlbnQvbGF0ZXN0L3dpbmRvd3NfYW1kNjQvQW1hem9uU1NNQWdlbnRTZXR1cC5leGUiLCAiJHNlcnZpY2VEb3dubG9hZFBhdGgiKQogICAgU3RhcnQtUHJvY2VzcyAtRmlsZVBhdGggIiRzZXJ2aWNlRG93bmxvYWRQYXRoIiAgLUFyZ3VtZW50TGlzdCBAKCIvcXVpZXQiLCAiL25vcmVzdGFydCIsICIvbG9nIiwgInNzbS1pbnN0YWxsLmxvZyIsICJBTExPV0VDMklOU1RBTEw9WUVTIikgLVdhaXQKICAgIFN0YXJ0LVNsZWVwIC1zIDEwCiAgICBTdGFydC1TZXJ2aWNlICRzZXJ2aWNlTmFtZQogICAgV3JpdGUtSG9zdCAiJHNlcnZpY2VOYW1lIGluc3RhbGxlZCBhbmQgc3RhcnRlZC4iCn0KPC9wb3dlcnNoZWxsPgo8cGVyc2lzdD50cnVlPC9wZXJzaXN0Pg==\"\n    },\n    \"isCritical\" : \"true\",\n    \"nextStep\" : \"getServerUpgradeInstance\"\n  }, {\n    \"name\" : \"serverUpgradeInstanceWithOriginalKeyPair\",\n    \"action\" : \"aws:runInstances\",\n    \"timeoutSeconds\" : 7200,\n    \"maxAttempts\" : 3,\n    \"onFailure\" : \"Abort\",\n    \"inputs\" : {\n      \"ImageId\" : \"{{ describeOriginalInstanceImage.ImageId }}\",\n      \"InstanceType\" : \"{{ describeOriginalInstanceDetails.InstanceType }}\",\n      \"MinInstanceCount\" : 1,\n      \"MaxInstanceCount\" : 1,\n      \"IamInstanceProfileName\" : \"{{ IamInstanceProfile }}\",\n      \"SubnetId\" : \"{{ SubnetId }}\",\n      \"KeyName\" : \"{{ describeOriginalInstanceDetails.KeyName }}\",\n      \"SecurityGroupIds\" : [ \"{{ describeOriginalInstanceDetails.SecurityGroupIds }}\" ],\n      \"TagSpecifications\" : [ {\n        \"ResourceType\" : \"instance\",\n        \"Tags\" : [ {\n          \"Key\" : \"Name\",\n          \"Value\" : \"AWSEC2_UpgradeInstance_{{ automation:EXECUTION_ID }}\"\n        } ]\n      } ],\n      \"UserData\" : \"PHBvd2Vyc2hlbGw+CiRzZXJ2aWNlTmFtZSA9ICJBbWF6b25TU01BZ2VudCIKJHNlcnZpY2VEb3dubG9hZFBhdGggPSAiQzpcdGVtcFxBbWF6b25TU01BZ2VudFNldHVwLmV4ZSIKCklmIChHZXQtU2VydmljZSAkc2VydmljZU5hbWUgLUVycm9yQWN0aW9uIFNpbGVudGx5Q29udGludWUgLVdhcm5pbmdBY3Rpb24gU2lsZW50bHlDb250aW51ZSkgewogICAgSWYgKChHZXQtU2VydmljZSAkc2VydmljZU5hbWUpLlN0YXR1cyAtbmUgIlJ1bm5pbmciKSB7CiAgICAgICAgU3RhcnQtU2VydmljZSAkc2VydmljZU5hbWUKICAgICAgICBXcml0ZS1Ib3N0ICIkc2VydmljZU5hbWUgZm91bmQsIGJ1dCBpdCBpcyBub3QgcnVubmluZywgc28gc3RhcnRlZCBpdC4iCiAgICB9Cn0gRWxzZSB7CiAgICBXcml0ZS1Ib3N0ICIkc2VydmljZU5hbWUgbm90IGZvdW5kLCB0cnlpbmcgdG8gaW5zdGFsbC4iCiAgICAgTmV3LUl0ZW0gLUl0ZW1UeXBlIERpcmVjdG9yeSAtRm9yY2UgLVBhdGggIkM6XHRlbXAiICAKICAgIChOZXctT2JqZWN0IFN5c3RlbS5OZXQuV2ViQ2xpZW50KS5Eb3dubG9hZEZpbGUoImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS9lYzItZG93bmxvYWRzLXdpbmRvd3MvU1NNQWdlbnQvbGF0ZXN0L3dpbmRvd3NfYW1kNjQvQW1hem9uU1NNQWdlbnRTZXR1cC5leGUiLCAiJHNlcnZpY2VEb3dubG9hZFBhdGgiKQogICAgU3RhcnQtUHJvY2VzcyAtRmlsZVBhdGggIiRzZXJ2aWNlRG93bmxvYWRQYXRoIiAgLUFyZ3VtZW50TGlzdCBAKCIvcXVpZXQiLCAiL25vcmVzdGFydCIsICIvbG9nIiwgInNzbS1pbnN0YWxsLmxvZyIsICJBTExPV0VDMklOU1RBTEw9WUVTIikgLVdhaXQKICAgIFN0YXJ0LVNsZWVwIC1zIDEwCiAgICBTdGFydC1TZXJ2aWNlICRzZXJ2aWNlTmFtZQogICAgV3JpdGUtSG9zdCAiJHNlcnZpY2VOYW1lIGluc3RhbGxlZCBhbmQgc3RhcnRlZC4iCn0KPC9wb3dlcnNoZWxsPgo8cGVyc2lzdD50cnVlPC9wZXJzaXN0Pg==\"\n    },\n    \"isCritical\" : \"true\",\n    \"nextStep\" : \"getServerUpgradeInstance\"\n  }, {\n    \"name\" : \"getServerUpgradeInstance\",\n    \"action\" : \"aws:executeAwsApi\",\n    \"onFailure\" : \"step:deleteServerUpgradeInstance\",\n    \"inputs\" : {\n      \"Service\" : \"ec2\",\n      \"Api\" : \"DescribeInstances\",\n      \"Filters\" : [ {\n        \"Name\" : \"tag:Name\",\n        \"Values\" : [ \"AWSEC2_UpgradeInstance_{{ automation:EXECUTION_ID }}\" ]\n      } ]\n    },\n    \"outputs\" : [ {\n      \"Name\" : \"InstanceId\",\n      \"Selector\" : \"$.Reservations[0].Instances[0].InstanceId\",\n      \"Type\" : \"String\"\n    } ],\n    \"isCritical\" : \"true\",\n    \"nextStep\" : \"waitForInstanceToReady\"\n  }, {\n    \"name\" : \"waitForInstanceToReady\",\n    \"action\" : \"aws:waitForAwsResourceProperty\",\n    \"onFailure\" : \"step:rebootToMakeItReady\",\n    \"timeoutSeconds\" : 600,\n    \"maxAttempts\" : 2,\n    \"inputs\" : {\n      \"Service\" : \"ec2\",\n      \"Api\" : \"DescribeInstanceStatus\",\n      \"InstanceIds\" : [ \"{{ getServerUpgradeInstance.InstanceId }}\" ],\n      \"PropertySelector\" : \"$.InstanceStatuses[0].InstanceStatus.Details[0].Status\",\n      \"DesiredValues\" : [ \"passed\" ]\n    },\n    \"isCritical\" : \"false\",\n    \"nextStep\" : \"checkForSSMAgent\"\n  }, {\n    \"name\" : \"rebootToMakeItReady\",\n    \"action\" : \"aws:executeAwsApi\",\n    \"onFailure\" : \"step:waitForInstanceToBeReadyAfterReboot\",\n    \"inputs\" : {\n      \"Service\" : \"ec2\",\n      \"Api\" : \"RebootInstances\",\n      \"InstanceIds\" : [ \"{{ getServerUpgradeInstance.InstanceId }}\" ]\n    },\n    \"isCritical\" : \"false\",\n    \"nextStep\" : \"waitForInstanceToBeReadyAfterReboot\"\n  }, {\n    \"name\" : \"waitForInstanceToBeReadyAfterReboot\",\n    \"action\" : \"aws:waitForAwsResourceProperty\",\n    \"onFailure\" : \"step:deleteServerUpgradeInstance\",\n    \"timeoutSeconds\" : 600,\n    \"maxAttempts\" : 2,\n    \"inputs\" : {\n      \"Service\" : \"ec2\",\n      \"Api\" : \"DescribeInstanceStatus\",\n      \"InstanceIds\" : [ \"{{ getServerUpgradeInstance.InstanceId }}\" ],\n      \"PropertySelector\" : \"$.InstanceStatuses[0].InstanceStatus.Details[0].Status\",\n      \"DesiredValues\" : [ \"passed\" ]\n    },\n    \"isCritical\" : \"true\",\n    \"nextStep\" : \"checkForSSMAgent\"\n  }, {\n    \"name\" : \"checkForSSMAgent\",\n    \"action\" : \"aws:waitForAwsResourceProperty\",\n    \"timeoutSeconds\" : 600,\n    \"maxAttempts\" : 3,\n    \"onFailure\" : \"step:prepareServerInstanceForSSMInstall\",\n    \"inputs\" : {\n      \"Service\" : \"ssm\",\n      \"Api\" : \"DescribeInstanceInformation\",\n      \"InstanceInformationFilterList\" : [ {\n        \"key\" : \"InstanceIds\",\n        \"valueSet\" : [ \"{{ getServerUpgradeInstance.InstanceId }}\" ]\n      } ],\n      \"PropertySelector\" : \"$.InstanceInformationList[0].PingStatus\",\n      \"DesiredValues\" : [ \"Online\" ]\n    },\n    \"isCritical\" : \"false\",\n    \"nextStep\" : \"getUpgradeServerInstanceDetails\"\n  }, {\n    \"name\" : \"prepareServerInstanceForSSMInstall\",\n    \"action\" : \"aws:executeAutomation\",\n    \"maxAttempts\" : 3,\n    \"timeoutSeconds\" : 3600,\n    \"onFailure\" : \"step:deleteServerUpgradeInstance\",\n    \"inputs\" : {\n      \"DocumentName\" : \"AWSSupport-StartEC2RescueWorkflow\",\n      \"RuntimeParameters\" : {\n        \"InstanceId\" : [ \"{{ getServerUpgradeInstance.InstanceId }}\" ],\n        \"OfflineScript\" : [ \"JEVDMlNldHRpbmdzRmlsZT0iJHtlbnY6RUMyUkVTQ1VFX09GRkxJTkVfUFJPR1JBTV9GSUxFU19ESVJ9XEFtYXpvblxFYzJDb25maWdTZXJ2aWNlXFNldHRpbmdzXENvbmZpZy54bWwiCndyaXRlLWhvc3QgIkZvdW5kIEVDMiBTZXR0aW5ncyBmaWxlIGluICQoJEVDMlNldHRpbmdzRmlsZSkiCiR4bWwgPSBbeG1sXShnZXQtY29udGVudCAkRUMyU2V0dGluZ3NGaWxlKQokeG1sRWxlbWVudCA9ICR4bWwuZ2V0X0RvY3VtZW50RWxlbWVudCgpCiR4bWxFbGVtZW50VG9Nb2RpZnkgPSAkeG1sRWxlbWVudC5QbHVnaW5zCndyaXRlLWhvc3QgIlNldHRpbmcgQ29uZmlnLnhtbCIKZm9yZWFjaCAoJGVsZW1lbnQgaW4gJHhtbEVsZW1lbnRUb01vZGlmeS5QbHVnaW4pCnsKCXdyaXRlLWhvc3QgIiAkKCRlbGVtZW50Lm5hbWUpIgoJaWYgKCRlbGVtZW50Lm5hbWUgLWVxICJFYzJIYW5kbGVVc2VyRGF0YSIpCgl7CgkJd3JpdGUtaG9zdCAiYWJvdXQgdG8gdXBkYXRlICQoJGVsZW1lbnQubmFtZSkiCgkJJGVsZW1lbnQuU3RhdGU9IkVuYWJsZWQiCgl9CgkJCgl3cml0ZS1ob3N0ICIgICQoJGVsZW1lbnQuU3RhdGUpIgp9CiR4bWwuU2F2ZSgkRUMyU2V0dGluZ3NGaWxlKQ==\" ]\n      }\n    },\n    \"isCritical\" : \"true\",\n    \"nextStep\" : \"startServerInstanceWithSSMInstall\"\n  }, {\n    \"name\" : \"startServerInstanceWithSSMInstall\",\n    \"action\" : \"aws:changeInstanceState\",\n    \"maxAttempts\" : 3,\n    \"timeoutSeconds\" : 600,\n    \"onFailure\" : \"step:deleteServerUpgradeInstance\",\n    \"inputs\" : {\n      \"InstanceIds\" : [ \"{{ getServerUpgradeInstance.InstanceId }}\" ],\n      \"CheckStateOnly\" : false,\n      \"DesiredState\" : \"running\"\n    },\n    \"isCritical\" : \"true\",\n    \"nextStep\" : \"waitSSMAgentOnlineOnServerUpgradeInstance\"\n  }, {\n    \"name\" : \"waitSSMAgentOnlineOnServerUpgradeInstance\",\n    \"action\" : \"aws:waitForAwsResourceProperty\",\n    \"timeoutSeconds\" : 600,\n    \"maxAttempts\" : 3,\n    \"onFailure\" : \"step:deleteServerUpgradeInstance\",\n    \"inputs\" : {\n      \"Service\" : \"ssm\",\n      \"Api\" : \"DescribeInstanceInformation\",\n      \"InstanceInformationFilterList\" : [ {\n        \"key\" : \"InstanceIds\",\n        \"valueSet\" : [ \"{{ getServerUpgradeInstance.InstanceId }}\" ]\n      } ],\n      \"PropertySelector\" : \"$.InstanceInformationList[0].PingStatus\",\n      \"DesiredValues\" : [ \"Online\" ]\n    },\n    \"isCritical\" : \"true\",\n    \"nextStep\" : \"getUpgradeServerInstanceDetails\"\n  }, {\n    \"name\" : \"getUpgradeServerInstanceDetails\",\n    \"action\" : \"aws:executeAwsApi\",\n    \"maxAttempts\" : 2,\n    \"onFailure\" : \"step:deleteServerUpgradeInstance\",\n    \"inputs\" : {\n      \"Service\" : \"ec2\",\n      \"Api\" : \"DescribeInstances\",\n      \"InstanceIds\" : [ \"{{ getServerUpgradeInstance.InstanceId }}\" ]\n    },\n    \"outputs\" : [ {\n      \"Name\" : \"AvailabilityZone\",\n      \"Selector\" : \"$.Reservations[0].Instances[0].Placement.AvailabilityZone\",\n      \"Type\" : \"String\"\n    }, {\n      \"Name\" : \"SubnetId\",\n      \"Selector\" : \"$.Reservations[0].Instances[0].NetworkInterfaces[0].SubnetId\",\n      \"Type\" : \"String\"\n    } ],\n    \"isCritical\" : \"true\",\n    \"nextStep\" : \"assertSupportedWindowsVersion2019\"\n  }, {\n    \"name\" : \"assertSupportedWindowsVersion2019\",\n    \"action\" : \"aws:runCommand\",\n    \"maxAttempts\" : 3,\n    \"onFailure\" : \"step:deleteServerUpgradeInstance\",\n    \"timeoutSeconds\" : 600,\n    \"isCritical\" : \"true\",\n    \"nextStep\" : \"runScriptBeforeWindowServerUpgrade2019\",\n    \"inputs\" : {\n      \"DocumentName\" : \"AWS-RunPowerShellScript\",\n      \"InstanceIds\" : [ \"{{ getServerUpgradeInstance.InstanceId }}\" ],\n      \"Parameters\" : {\n        \"executionTimeout\" : \"600\",\n        \"commands\" : [ \"function Validate-InstanceLicensing([string]$WindowSnapshotId) {\", \"$IsError = $True\", \"try {\", \"Add-Type -AssemblyName System.Security\", \"$region = \\\"us-west-2\\\"\", \"$certificate_string = (Invoke-RestMethod -Uri \\\"https://s3.us-west-2.amazonaws.com/aws.portingassistant.dotnet.datastore/certificates/imds_certificates.json\\\").certificates.$region\", \"$certificate_bytes_arr = [system.Text.Encoding]::UTF8.GetBytes($certificate_string)\", \"$token = (Invoke-RestMethod -Method Put -Uri http://169.254.169.254/latest/api/token -Headers @{\\\"X-aws-ec2-metadata-token-ttl-seconds\\\"=\\\"60\\\"})\", \"$Signature = [Convert]::FromBase64String((Invoke-WebRequest -UseBasicParsing -Headers @{'X-aws-ec2-metadata-token' = [string]$token} http://169.254.169.254/latest/dynamic/instance-identity/rsa2048).Content)\", \"$Document = [Text.Encoding]::UTF8.GetBytes((Invoke-WebRequest -UseBasicParsing -Headers @{'X-aws-ec2-metadata-token' = [string]$token} http://169.254.169.254/latest/dynamic/instance-identity/document).Content)\", \"$X509Certificate2 = New-Object -TypeName Security.Cryptography.X509Certificates.X509Certificate2 -ArgumentList @(,$certificate_bytes_arr)\", \"$Store = New-Object -TypeName Security.Cryptography.X509Certificates.X509Certificate2Collection -ArgumentList $X509Certificate2\", \"$SignatureDocument = New-Object -TypeName Security.Cryptography.Pkcs.SignedCms\", \"$SignatureDocument.Decode($Signature)\", \"$verify_result = $SignatureDocument.CheckSignature($Store, $true)\", \"if(![Linq.Enumerable]::SequenceEqual($SignatureDocument.ContentInfo.Content, $Document) -or $verify_result) {\", \"throw \\\"Instance Identity Document Cannot be Validated.\\\"\", \"}\", \"$token = (Invoke-RestMethod -Method Put -Uri http://169.254.169.254/latest/api/token -Headers @{\\\"X-aws-ec2-metadata-token-ttl-seconds\\\"=\\\"60\\\"})\", \"$webrequest = [System.Net.WebRequest]::Create(\\\"http://169.254.169.254/latest/dynamic/instance-identity/document\\\")\", \"$webrequest.Headers.Add(\\\"X-aws-ec2-metadata-token\\\",$token)\", \"$response = $webrequest.GetResponse()\", \"$stream = $response.GetResponseStream()\", \"$sr = new-object System.IO.StreamReader($stream)\", \"$content = $sr.ReadToEnd();\", \"[System.Reflection.Assembly]::LoadWithPartialName(\\\"System.Web.Extensions\\\") | out-null\", \"$ser = New-Object System.Web.Script.Serialization.JavaScriptSerializer\", \"$billingProduct = $ser.DeserializeObject($content).billingProducts\", \"if (($billingProduct -eq \\\"bp-6ba54002\\\") -or ($billingProduct -eq \\\"bp-68a54001\\\")) {\", \"$IsError = $False\", \"Write-Host \\\"Instance has license included\\\"\", \"}\", \"elseif (-not [string]::IsNullOrEmpty($WindowSnapshotId)) {\", \"$IsError = $False\", \"Write-Host \\\"Instance will use $WindowSnapshotId for BYOL\\\"\", \"}\", \"else {\", \"$IsError = $True\", \"Write-Host \\\"Your instance is BYOL, but you did not provide a BYOL Windows installation media snapshot id. Please re-run this automation with the necessary paramaters.\\\"\", \"}\", \"}\", \"catch {\", \"Write-Error $_.Exception.Message\", \"}\", \"finally {\", \"if ($sr -ne $null) { $sr.Close(); }\", \"if ($response -ne $null) { $response.Close(); }\", \"if ($IsError) {\", \"exit 1\", \"}\", \"else {\", \"exit 0\", \"}\", \"}\", \"}\", \"\", \"function Check-OSUpgradeCompatibility {\", \"$osInfo = (Get-WmiObject -class Win32_OperatingSystem)\", \"# ProductType 3 = Server OS - Not a Domain Controller\", \"if ($osInfo.ProductType -ne 3) {\", \"Write-Host \\\"This upgrade automation is not supported on Domain Controller or Work Station role.\\\"\", \"exit 1\", \"}\", \"$OSVersion = $osInfo.Caption.ToUpper()\", \"if (($OSVersion.indexOf(\\\"2012 R2\\\") -ge 0) -or ($OSVersion.indexOf(\\\"2016\\\") -ge 0)) {\", \"Write-Host \\\"OSVersion : $OSVersion\\\"\", \"}\", \"else {\", \"Write-Host \\\"This upgrade automation only supports Windows 2012 R2/2016.\\\"\", \"exit 1\", \"}\", \"$Space = (Get-WMIObject Win32_Logicaldisk -filter \\\"deviceid='$($osInfo.systemdrive)'\\\").FreeSpace\", \"$AvailableGBSpace = [math]::floor($Space / 1GB)\", \"if ($AvailableGBSpace -le 20 ) {\", \"Write-Host \\\"Not enough space to continue upgrade. Available space $AvailableGBSpace GB, minimum required is 20 GB\\\"\", \"exit 1\", \"}\", \"}\", \"\", \"Check-OSUpgradeCompatibility\", \"$WindowSnapShotId = \\\"{{ BYOLWindowsMediaSnapshotId }}\\\"\", \"Validate-InstanceLicensing($WindowSnapShotId)\" ]\n      }\n    }\n  }, {\n    \"name\" : \"runScriptBeforeWindowServerUpgrade2019\",\n    \"action\" : \"aws:runCommand\",\n    \"maxAttempts\" : 3,\n    \"onFailure\" : \"step:deleteServerUpgradeInstance\",\n    \"inputs\" : {\n      \"DocumentName\" : \"AWS-RunPowerShellScript\",\n      \"InstanceIds\" : [ \"{{ getServerUpgradeInstance.InstanceId }}\" ],\n      \"Parameters\" : {\n        \"commands\" : [ \"function Enable-OfflineDisk {\", \"$offlinedisk = \\\"rescan`nlist disk\\\" | diskpart | Where-Object { $_ -match \\\"offline\\\" }\", \"if ($offlinedisk) {\", \"foreach ($offdisk in $offlinedisk) {\", \"$offdiskS = $offdisk.Substring(2, 6)\", \"$OnlineDisk = @\\\"\", \"select $offdiskS\", \"attributes disk clear readonly\", \"online disk\", \"attributes disk clear readonly\", \"\\\"@\", \"$noOut = $OnlineDisk | diskpart\", \"Start-Sleep 5\", \"}\", \"if (($offlinedisk = \\\"list disk\\\" | diskpart | Where-Object { $_ -match \\\"offline\\\" } )) {\", \"Write-Host \\\"Failed to bring the following disk(s) online\\\"\", \"$offlinedisk\", \"Exit 1\", \"}\", \"}\", \"}\", \"\", \"function GetSnapshot-ForCulture {\", \"$culture = Get-Culture\", \"if ($culture.Name -eq \\\"de-DE\\\") {\", \"Write-Host -NoNewline \\\"Windows {{ TargetWindowVersion }} German Installation Media\\\"\", \"}\", \"elseif ($culture.Name -eq \\\"fr-FR\\\") {\", \"Write-Host -NoNewline \\\"Windows {{ TargetWindowVersion }} French Installation Media\\\"\", \"}\", \"elseif ($culture.Name -eq \\\"ja-JP\\\") {\", \"Write-Host -NoNewline \\\"Windows {{ TargetWindowVersion }} Japanese Installation Media\\\"\", \"}\", \"elseif ($culture.Name -eq \\\"cs-CZ\\\") {\", \"Write-Host -NoNewline \\\"Windows {{ TargetWindowVersion }} Czech Installation Media\\\"\", \"}\", \"elseif ($culture.Name -eq \\\"pt-BR\\\") {\", \"Write-Host -NoNewline \\\"Windows {{ TargetWindowVersion }} Portuguese_Brazil Installation Media\\\"\", \"}\", \"elseif ($culture.Name -eq \\\"nl-NL\\\") {\", \"Write-Host -NoNewline \\\"Windows {{ TargetWindowVersion }} Dutch Installation Media\\\"\", \"}\", \"else {\", \"Write-Host -NoNewline \\\"Windows {{ TargetWindowVersion }} English Installation Media\\\"\", \"}\", \"}\", \"\", \"$TEMPSTORAGE = \\\"C:\\\\WindowsUpgrade\\\\{{ automation:EXECUTION_ID }}\\\"\", \"$TEMPSTOGAREFILE = \\\"$TEMPSTORAGE\\\\drive.txt\\\"\", \"Enable-OfflineDisk\", \"New-Item -ItemType directory -Path $TEMPSTORAGE | out-null\", \"([System.IO.DriveInfo]::getdrives() | select-object -ExpandProperty Name) -join ',' | Out-File \\\"$TEMPSTOGAREFILE\\\" | out-null\", \"GetSnapshot-ForCulture\" ]\n      }\n    },\n    \"isCritical\" : \"true\",\n    \"nextStep\" : \"getAmazonOwnedWindowsServerSnapShotId\"\n  }, {\n    \"name\" : \"getAmazonOwnedWindowsServerSnapShotId\",\n    \"action\" : \"aws:executeAwsApi\",\n    \"maxAttempts\" : 3,\n    \"onFailure\" : \"step:deleteServerUpgradeInstance\",\n    \"timeoutSeconds\" : 600,\n    \"inputs\" : {\n      \"Service\" : \"ec2\",\n      \"Api\" : \"DescribeSnapshots\",\n      \"OwnerIds\" : [ \"amazon\" ],\n      \"Filters\" : [ {\n        \"Name\" : \"description\",\n        \"Values\" : [ \"{{ runScriptBeforeWindowServerUpgrade2019.Output }}\" ]\n      } ]\n    },\n    \"outputs\" : [ {\n      \"Name\" : \"SnapShotId\",\n      \"Selector\" : \"$.Snapshots[0].SnapshotId\",\n      \"Type\" : \"String\"\n    } ],\n    \"isCritical\" : \"true\",\n    \"nextStep\" : \"branchOnLicensingToGetWindowMediaSnapshot\"\n  }, {\n    \"name\" : \"branchOnLicensingToGetWindowMediaSnapshot\",\n    \"action\" : \"aws:branch\",\n    \"onFailure\" : \"step:deleteServerUpgradeInstance\",\n    \"inputs\" : {\n      \"Choices\" : [ {\n        \"And\" : [ {\n          \"Variable\" : \"{{ assertSupportedWindowsVersion2019.Output }}\",\n          \"Contains\" : \"BYOL\"\n        }, {\n          \"Variable\" : \"{{ BYOLWindowsMediaSnapshotId }}\",\n          \"StringEquals\" : \"{{ getAmazonOwnedWindowsServerSnapShotId.SnapShotId }}\"\n        } ],\n        \"NextStep\" : \"assertFailBecauseSameSnapshotOwnedByAmazon\"\n      }, {\n        \"Variable\" : \"{{ assertSupportedWindowsVersion2019.Output }}\",\n        \"Contains\" : \"BYOL\",\n        \"NextStep\" : \"useCustomerWindowMediaSnapshotToCreateVolume\"\n      } ],\n      \"Default\" : \"useAmazonProvidedWindowMediaSnapshotToCreateVolume\"\n    },\n    \"isCritical\" : \"true\"\n  }, {\n    \"name\" : \"assertFailBecauseSameSnapshotOwnedByAmazon\",\n    \"action\" : \"aws:assertAwsResourceProperty\",\n    \"onFailure\" : \"step:deleteServerUpgradeInstance\",\n    \"inputs\" : {\n      \"Service\" : \"ec2\",\n      \"Api\" : \"DescribeSnapshots\",\n      \"SnapshotIds\" : [ \"{{ BYOLWindowsMediaSnapshotId }}\" ],\n      \"PropertySelector\" : \"$.Snapshots[0].SnapshotId\",\n      \"DesiredValues\" : [ \"{{ automation:EXECUTION_ID }}\" ]\n    },\n    \"isCritical\" : \"true\",\n    \"nextStep\" : \"deleteServerUpgradeInstance\"\n  }, {\n    \"name\" : \"useCustomerWindowMediaSnapshotToCreateVolume\",\n    \"action\" : \"aws:executeAwsApi\",\n    \"maxAttempts\" : 3,\n    \"timeoutSeconds\" : 600,\n    \"inputs\" : {\n      \"Service\" : \"ec2\",\n      \"Api\" : \"CreateVolume\",\n      \"AvailabilityZone\" : \"{{ getUpgradeServerInstanceDetails.AvailabilityZone }}\",\n      \"SnapshotId\" : \"{{ BYOLWindowsMediaSnapshotId }}\",\n      \"VolumeType\" : \"gp2\",\n      \"TagSpecifications\" : [ {\n        \"ResourceType\" : \"volume\",\n        \"Tags\" : [ {\n          \"Key\" : \"ServerUpgradeKeyVolume-{{ automation:EXECUTION_ID }}\",\n          \"Value\" : \"Volume-{{ automation:EXECUTION_ID }}\"\n        } ]\n      } ]\n    },\n    \"onFailure\" : \"step:deleteServerUpgradeInstance\",\n    \"isCritical\" : \"true\",\n    \"nextStep\" : \"describeWindowMediaSnapshotVolume\"\n  }, {\n    \"name\" : \"useAmazonProvidedWindowMediaSnapshotToCreateVolume\",\n    \"action\" : \"aws:executeAwsApi\",\n    \"maxAttempts\" : 3,\n    \"timeoutSeconds\" : 600,\n    \"inputs\" : {\n      \"Service\" : \"ec2\",\n      \"Api\" : \"CreateVolume\",\n      \"AvailabilityZone\" : \"{{ getUpgradeServerInstanceDetails.AvailabilityZone }}\",\n      \"SnapshotId\" : \"{{ getAmazonOwnedWindowsServerSnapShotId.SnapShotId }}\",\n      \"VolumeType\" : \"gp2\",\n      \"TagSpecifications\" : [ {\n        \"ResourceType\" : \"volume\",\n        \"Tags\" : [ {\n          \"Key\" : \"ServerUpgradeKeyVolume-{{ automation:EXECUTION_ID }}\",\n          \"Value\" : \"Volume-{{ automation:EXECUTION_ID }}\"\n        } ]\n      } ]\n    },\n    \"onFailure\" : \"step:deleteServerUpgradeInstance\",\n    \"isCritical\" : \"true\",\n    \"nextStep\" : \"sleepForVolumetoBeCreated\"\n  }, {\n    \"name\" : \"sleepForVolumetoBeCreated\",\n    \"action\" : \"aws:sleep\",\n    \"inputs\" : {\n      \"Duration\" : \"PT2M\"\n    },\n    \"isCritical\" : \"false\",\n    \"onFailure\" : \"step:deleteServerUpgradeInstance\",\n    \"nextStep\" : \"tryToGetWindowMediaSnapshotVolume\"\n  }, {\n    \"name\" : \"tryToGetWindowMediaSnapshotVolume\",\n    \"action\" : \"aws:executeAwsApi\",\n    \"maxAttempts\" : 3,\n    \"timeoutSeconds\" : 600,\n    \"onFailure\" : \"Continue\",\n    \"inputs\" : {\n      \"Service\" : \"ec2\",\n      \"Api\" : \"DescribeVolumes\",\n      \"Filters\" : [ {\n        \"Name\" : \"tag-key\",\n        \"Values\" : [ \"ServerUpgradeKeyVolume-{{ automation:EXECUTION_ID }}\" ]\n      }, {\n        \"Name\" : \"availability-zone\",\n        \"Values\" : [ \"{{ getUpgradeServerInstanceDetails.AvailabilityZone }}\" ]\n      } ]\n    },\n    \"outputs\" : [ {\n      \"Name\" : \"VolumeId\",\n      \"Selector\" : \"$.Volumes[0].VolumeId\",\n      \"Type\" : \"String\"\n    } ],\n    \"isCritical\" : \"false\",\n    \"nextStep\" : \"describeWindowMediaSnapshotVolume\"\n  }, {\n    \"name\" : \"describeWindowMediaSnapshotVolume\",\n    \"action\" : \"aws:executeAwsApi\",\n    \"maxAttempts\" : 3,\n    \"timeoutSeconds\" : 600,\n    \"onFailure\" : \"step:deleteServerUpgradeInstance\",\n    \"inputs\" : {\n      \"Service\" : \"ec2\",\n      \"Api\" : \"DescribeVolumes\",\n      \"Filters\" : [ {\n        \"Name\" : \"tag-key\",\n        \"Values\" : [ \"ServerUpgradeKeyVolume-{{ automation:EXECUTION_ID }}\" ]\n      }, {\n        \"Name\" : \"availability-zone\",\n        \"Values\" : [ \"{{ getUpgradeServerInstanceDetails.AvailabilityZone }}\" ]\n      } ]\n    },\n    \"outputs\" : [ {\n      \"Name\" : \"VolumeId\",\n      \"Selector\" : \"$.Volumes[0].VolumeId\",\n      \"Type\" : \"String\"\n    } ],\n    \"isCritical\" : \"false\",\n    \"nextStep\" : \"waitUntilWindowMediaSnapshotVolumeIsAvailable\"\n  }, {\n    \"name\" : \"waitUntilWindowMediaSnapshotVolumeIsAvailable\",\n    \"action\" : \"aws:waitForAwsResourceProperty\",\n    \"onFailure\" : \"step:deleteServerUpgradeInstance\",\n    \"timeoutSeconds\" : 600,\n    \"inputs\" : {\n      \"Service\" : \"ec2\",\n      \"Api\" : \"DescribeVolumes\",\n      \"Filters\" : [ {\n        \"Name\" : \"volume-id\",\n        \"Values\" : [ \"{{ describeWindowMediaSnapshotVolume.VolumeId }}\" ]\n      } ],\n      \"PropertySelector\" : \"$.Volumes[0].State\",\n      \"DesiredValues\" : [ \"available\" ]\n    },\n    \"isCritical\" : \"true\",\n    \"nextStep\" : \"findAvailableDeviceMapping2019\"\n  }, {\n    \"name\" : \"findAvailableDeviceMapping2019\",\n    \"action\" : \"aws:executeScript\",\n    \"inputs\" : {\n      \"Runtime\" : \"PowerShell Core 6.0\",\n      \"Script\" : \"$inputPayload = $env:InputPayload | ConvertFrom-Json\\n$instanceMappings = $inputPayload.mappedDevices\\n\\nfunction Get-DeviceList {\\nforeach ($letterMapping in 98..122) {\\nif (-not ($instanceMappings -match \\\"sd$([char]$letterMapping)\\\" -or $instanceMappings -match \\\"xvd$([char]$letterMapping)\\\")) {\\nreturn \\\"xvd$([char]$letterMapping)\\\"\\n}\\n}\\n}\\n$availableDevice = Get-DeviceList\\n\\nif (-not $availableDevice) {\\nWrite-Host \\\"ERROR: No free device available.\\\"\\nExit 1\\n}\\nelse {\\nreturn @{availableDevice = \\\"$availableDevice\\\" }\\nExit 0\\n}\",\n      \"InputPayload\" : {\n        \"mappedDevices\" : \"{{ describeOriginalInstanceDetails.BlockDeviceMappings }}\"\n      }\n    },\n    \"outputs\" : [ {\n      \"Name\" : \"availableDevice\",\n      \"Selector\" : \"$.Payload.availableDevice\",\n      \"Type\" : \"String\"\n    } ],\n    \"nextStep\" : \"attachInstallationMediaToUpgradeInstance\"\n  }, {\n    \"name\" : \"attachInstallationMediaToUpgradeInstance\",\n    \"action\" : \"aws:executeAwsApi\",\n    \"timeoutSeconds\" : 600,\n    \"inputs\" : {\n      \"Service\" : \"ec2\",\n      \"Api\" : \"AttachVolume\",\n      \"Device\" : \"{{ findAvailableDeviceMapping2019.availableDevice }}\",\n      \"InstanceId\" : \"{{ getServerUpgradeInstance.InstanceId }}\",\n      \"VolumeId\" : \"{{ describeWindowMediaSnapshotVolume.VolumeId }}\"\n    },\n    \"onFailure\" : \"step:deleteServerUpgradeInstance\",\n    \"isCritical\" : \"true\",\n    \"nextStep\" : \"waitTillAttachedInstallationMediaToUpgradeInstance\"\n  }, {\n    \"name\" : \"waitTillAttachedInstallationMediaToUpgradeInstance\",\n    \"action\" : \"aws:waitForAwsResourceProperty\",\n    \"timeoutSeconds\" : 1800,\n    \"inputs\" : {\n      \"Service\" : \"ec2\",\n      \"Api\" : \"DescribeVolumes\",\n      \"Filters\" : [ {\n        \"Name\" : \"volume-id\",\n        \"Values\" : [ \"{{ describeWindowMediaSnapshotVolume.VolumeId }}\" ]\n      }, {\n        \"Name\" : \"attachment.instance-id\",\n        \"Values\" : [ \"{{ getServerUpgradeInstance.InstanceId }}\" ]\n      } ],\n      \"PropertySelector\" : \"$.Volumes[0].State\",\n      \"DesiredValues\" : [ \"in-use\" ]\n    },\n    \"onFailure\" : \"step:deleteServerUpgradeInstance\",\n    \"isCritical\" : \"true\",\n    \"nextStep\" : \"sleepBeforeWindowUpgradeAndStart\"\n  }, {\n    \"name\" : \"sleepBeforeWindowUpgradeAndStart\",\n    \"action\" : \"aws:sleep\",\n    \"inputs\" : {\n      \"Duration\" : \"PT1M\"\n    },\n    \"isCritical\" : \"false\",\n    \"onFailure\" : \"step:deleteServerUpgradeInstance\",\n    \"nextStep\" : \"runWindowsServerUpgrade2019\"\n  }, {\n    \"name\" : \"runWindowsServerUpgrade2019\",\n    \"action\" : \"aws:runCommand\",\n    \"maxAttempts\" : 3,\n    \"inputs\" : {\n      \"DocumentName\" : \"AWS-RunPowerShellScript\",\n      \"InstanceIds\" : [ \"{{ getServerUpgradeInstance.InstanceId }}\" ],\n      \"Parameters\" : {\n        \"commands\" : [ \"function Write-Log {\", \"PARAM\", \"(\", \"[Parameter(Mandatory = $true)] [string] $logMessage\", \", [ValidateSet(\\\"Green\\\", \\\"Yellow\\\", \\\"Red\\\")] [string] $Color\", \")\", \"$Datestamp = [datetime]::Now.ToString(\\\"yyyy-MM-dd HH:mm:ss.fff\\\")\", \"$FullMessage = \\\"$Datestamp $logMessage\\\"\", \"if ($Color) {\", \"Write-Host $FullMessage -ForegroundColor $Color\", \"}\", \"else {\", \"Write-Host $FullMessage\", \"}\", \"$FullMessage | out-file -encoding ASCII $LogFilePath -Append\", \"\", \"}\", \"function Enable-OfflineDisk {\", \"$offlinedisk = \\\"rescan`nlist disk\\\" | diskpart | Where-Object { $_ -match \\\"offline\\\" }\", \"if ($offlinedisk) {\", \"Write-Host \\\"Following Offline disk(s) found..Trying to bring Online.\\\"\", \"foreach ($offdisk in $offlinedisk) {\", \"$offdiskS = $offdisk.Substring(2, 6)\", \"Write-Host \\\"Enabling $offdiskS\\\"\", \"$OnlineDisk = @\\\"\", \"select $offdiskS\", \"attributes disk clear readonly\", \"online disk\", \"attributes disk clear readonly\", \"\\\"@\", \"\", \"$noOut = $OnlineDisk | diskpart\", \"Start-Sleep 5\", \"}\", \"\", \"if (($offlinedisk = \\\"list disk\\\" | diskpart | Where-Object { $_ -match \\\"offline\\\" } )) {\", \"Write-Host \\\"Failed to bring the following disk(s) online\\\"\", \"$offlinedisk\", \"Exit 1\", \"}\", \"else {\", \"Write-Host \\\"Disk(s) are now online.\\\"\", \"}\", \"}\", \"else {\", \"Write-Host \\\"All disk(s) are online!\\\"\", \"}\", \"}\", \"\", \"function Find-WindowSetupPath {\", \"Enable-OfflineDisk\", \"$CurrentDrives = ([System.IO.DriveInfo]::getdrives() | select-object -ExpandProperty Name) -join ','\", \"Write-host \\\"Current drives are $CurrentDrives\\\"\", \"$OldDrives = Get-Content -Path \\\"C:\\\\WindowsUpgrade\\\\{{ automation:EXECUTION_ID }}\\\\drive.txt\\\" -TotalCount 1\", \"$oldDriveArray = $OldDrives.split(',')\", \"$newDriveArray = $CurrentDrives.split(',')\", \"foreach ($drive in $newDriveArray) {\", \"if (-not ($oldDriveArray -contains $drive)) {\", \"$NewDrive = $drive\", \"break\", \"}\", \"}\", \"if (-not $NewDrive) {\", \"Write-Log \\\"Can't find the new drive\\\"\", \"exit -1\", \"}\", \"$SetupLocation = \\\"$NewDrive\\\\setup.exe\\\"\", \"if ((Test-Path $SetupLocation) -eq $false) {\", \"$isomount = $(Mount-DiskImage -ImagePath \\\"$NewDrive$(Get-Childitem -Path $NewDrive -Include *.ISO -Recurse | Select-Object Name -ExpandProperty Name)\\\" -PassThru | Get-DiskImage | Get-Volume).DriveLetter\", \"$SetupLocation = \\\"{0}:\\\\setup.exe\\\" -f $isomount\", \"Write-Host \\\"Found ISO in the installation media $NewDrive . ISO Mounted as\\\"$isomount\\\":\\\\ .\\\"\", \"}\", \"Write-host \\\"Olddrives $OldDrives , Currentdrives $CurrentDrives, Newdrive $NewDrive, Setup location is $SetupLocation \\\"\", \"if ((Test-Path $SetupLocation) -eq $false) {\", \"Write-Log \\\"Error: Couldn't find Windows Server {{ TargetWindowVersion }} installation media snapshot. Please contact AWS Premium Support.\\\" \\\"Red\\\"\", \"exit -1\", \"}\", \"Return $SetupLocation\", \"}\", \"\", \"function Extract-WindowsImage {\", \"$OriginalWim = $UpgradeSetUpPath.TrimEnd(\\\"setup.exe\\\") + \\\"sources\\\\install.wim\\\"\", \"if ((Test-Path $OriginalWim) -eq $false) {\", \"Write-Log \\\"Error: Couldn't find Windows Server 2016 installation image (WIM file) on media. Please contact AWS Premium Support.\\\" \\\"Red\\\"\", \"exit -1\", \"}\", \"$ExportedWim = $UpgradeDirectory + \\\"\\\\install.wim\\\"\", \"Export-WindowsImage -SourceImagePath $OriginalWim -SourceIndex $version -DestinationImagePath $ExportedWim | Out-Null\", \"Return $ExportedWim\", \"}\", \"\", \"function Upgrade-Server {\", \"sc.exe config AmazonSSMAgent start= delayed-auto\", \"Start-sleep -s 5\", \"$CommandFile = \\\"$UpgradeDirectory\\\\upgrade.cmd\\\"\", \"$osInfo = (Get-WmiObject -class Win32_OperatingSystem)\", \"$OSVersion = $osInfo.Caption.ToUpper()\", \"if ($OSVersion.indexOf(\\\"DATACENTER\\\") -ge 0) { $version = 4 }\", \"else { $version = 2 }\", \"$TargetVersion = \\\"{{ TargetWindowVersion }}\\\"\", \"Set-Content -Path $CommandFile -Value \\\"@echo off\\\" -Force\", \"if ($TargetVersion -eq \\\"2016\\\") {\", \"$ExportedImagePath = Extract-WindowsImage\", \"Add-Content -Path $CommandFile -Value \\\"$UpgradeSetUpPath /installfrom $ExportedImagePath /auto upgrade /quiet /compat ignorewarning /showoobe none\\\" -Force\", \"}\", \"else {\", \"Add-Content -Path $CommandFile -Value \\\"$UpgradeSetUpPath /auto upgrade /imageindex $version /compat ignorewarning /showoobe none\\\" -Force\", \"}\", \"Add-Content -Path $CommandFile -Value \\\"echo %ERRORLEVEL% > $UpgradeDirectory\\\\check.txt\\\" -Force\", \"cmd.exe /c \\\"$CommandFile\\\" | Out-Null\", \"}\", \"\", \"try {\", \"$UpgradeDirectory = \\\"C:\\\\WindowsUpgrade\\\\{{ automation:EXECUTION_ID }}\\\"\", \"$Global:LogFilePath = $UpgradeDirectory + \\\"\\\\Logfile.txt\\\"\", \"$UpgradeSetUpPath = Find-WindowSetupPath\", \"Upgrade-Server\", \"}\", \"catch {\", \"Write-Host $_.Exception.Message\", \"exit 1\", \"}\" ]\n      }\n    },\n    \"onFailure\" : \"step:getTheErrorDetails\",\n    \"isCritical\" : \"true\",\n    \"nextStep\" : \"sleepForWindowUpgradeAndStart\"\n  }, {\n    \"name\" : \"getTheErrorDetails\",\n    \"action\" : \"aws:runCommand\",\n    \"maxAttempts\" : 3,\n    \"onFailure\" : \"step:deleteServerUpgradeInstance\",\n    \"timeoutSeconds\" : 300,\n    \"inputs\" : {\n      \"DocumentName\" : \"AWS-RunPowerShellScript\",\n      \"InstanceIds\" : [ \"{{ getServerUpgradeInstance.InstanceId }}\" ],\n      \"Parameters\" : {\n        \"executionTimeout\" : \"300\",\n        \"commands\" : [ \"get-content \\\"C:\\\\WindowsUpgrade\\\\{{ automation:EXECUTION_ID }}\\\\check.txt\\\" -Raw\", \"get-content \\\"C:\\\\$WINDOWS.~BT\\\\Sources\\\\Panther\\\\setuperr.log\\\" -Raw\", \"get-content \\\"C:\\\\$WINDOWS.~BT\\\\Sources\\\\Rollback\\\\setuperr.log\\\" -Raw\" ]\n      }\n    },\n    \"isCritical\" : \"true\",\n    \"nextStep\" : \"deleteServerUpgradeInstance\"\n  }, {\n    \"name\" : \"sleepForWindowUpgradeAndStart\",\n    \"action\" : \"aws:sleep\",\n    \"onFailure\" : \"step:deleteServerUpgradeInstance\",\n    \"inputs\" : {\n      \"Duration\" : \"PT10M\"\n    },\n    \"isCritical\" : \"false\",\n    \"nextStep\" : \"checkAfterWindowsUpgrade2019\"\n  }, {\n    \"name\" : \"checkAfterWindowsUpgrade2019\",\n    \"action\" : \"aws:runCommand\",\n    \"onFailure\" : \"step:deleteServerUpgradeInstance\",\n    \"maxAttempts\" : 3,\n    \"inputs\" : {\n      \"DocumentName\" : \"AWS-RunPowerShellScript\",\n      \"InstanceIds\" : [ \"{{ getServerUpgradeInstance.InstanceId }}\" ],\n      \"Parameters\" : {\n        \"commands\" : [ \"function Check-ServerUpgrade {\", \"$osInfo = (Get-WmiObject -class Win32_OperatingSystem)\", \"$OSVersion = $osInfo.Caption.ToUpper()\", \"if ($OSVersion.indexOf(\\\"{{ TargetWindowVersion }}\\\") -ge 0) {\", \"return $true\", \"}\", \"else {\", \"return $false\", \"}\", \"}\", \"\", \"function Write-Log {\", \"PARAM\", \"(\", \"[Parameter(Mandatory = $true)] [string] $logMessage\", \", [ValidateSet(\\\"Green\\\", \\\"Yellow\\\", \\\"Red\\\")] [string] $Color\", \")\", \"$Datestamp = [datetime]::Now.ToString(\\\"yyyy-MM-dd HH:mm:ss.fff\\\")\", \"$FullMessage = \\\"$Datestamp $logMessage\\\"\", \"if ($Color) {\", \"Write-Host $FullMessage -ForegroundColor $Color\", \"}\", \"else {\", \"Write-Host $FullMessage\", \"}\", \"$FullMessage | out-file -encoding ASCII $LogFilePath -Append\", \"}\", \"\", \"function Start-Services {\", \"param([string[]]$serviceNames)\", \"\", \"Foreach ($service in $serviceNames) {\", \"$startUpType = Get-WmiObject -Class Win32_Service -Property StartMode -Filter \\\"Name='$service'\\\" | Findstr \\\"StartMode\\\"\", \"if ($startUpType) {\", \"if ($startUpType.indexOf(\\\"Disabled\\\") -gt 0) {\", \"Set-Service $service -StartupType Automatic\", \"Start-Sleep -Seconds 5\", \"}\", \"else {\", \"Write-Log \\\"$service start up type is $startUpType\\\"\", \"}\", \"\", \"If (Get-Service $service -ErrorAction SilentlyContinue) {\", \"If ((Get-Service $service).Status -eq \\\"Running\\\") {\", \"Write-Log \\\"Service is up\\\"\", \"}\", \"Else {\", \"Start-Service $service\", \"Write-Log \\\"$service found, but it is not running, so started\\\"\", \"Start-Sleep -Seconds 5\", \"}\", \"}\", \"else {\", \"Write-Log \\\"$serviceName not found\\\" -Color Red\", \"}\", \"}\", \"else {\", \"Write-Log \\\"Can't find Startup type for service $service\\\" -Color Red\", \"}\", \"}\", \"}\", \"\", \"$UpgradeDirectory = \\\"C:\\\\WindowsUpgrade\\\\{{ automation:EXECUTION_ID }}\\\"\", \"$Global:LogFilePath = $UpgradeDirectory + \\\"\\\\Logfile.txt\\\"\", \"try {\", \"if (Check-ServerUpgrade) {\", \"Start-Services -serviceNames \\\"MSSQLSERVER\\\" , \\\"SQLSERVERAGENT\\\"\", \"Remove-Item -path \\\"$UpgradeDirectory\\\" -recurse\", \"exit 0\", \"}\", \"else {\", \"Write-Log \\\"Error: Upgrade failed with following error\\\"\", \"If ((Test-Path \\\"$UpgradeDirectory\\\\check.txt\\\") -eq $true) {\", \"Write-Log \\\"ErrorLevel: $(get-content \\\"$UpgradeDirectory\\\\check.txt\\\")\\\"\", \"}\", \"If ((Test-Path \\\"C:\\\\$WINDOWS.~BT\\\\Sources\\\\Panther\\\\setuperr.log\\\") -eq $true) {\", \"Write-Log \\\"Panther setuperr:`n$(get-content \\\"C:\\\\$WINDOWS.~BT\\\\Sources\\\\Panther\\\\setuperr.log\\\" -Raw)\\\"\", \"}\", \"\", \"If ((Test-Path \\\"C:\\\\$WINDOWS.~BT\\\\Sources\\\\Rollback\\\\setuperr.log\\\") -eq $true) {\", \"Write-Log \\\"Rollback setuperr:`n$(get-content \\\"C:\\\\$WINDOWS.~BT\\\\Sources\\\\Rollback\\\\setuperr.log\\\" -Raw)\\\"\", \"}\", \"exit 1\", \"}\", \"}\", \"catch {\", \"Write-Error $_.Exception.Message\", \"If ((Test-Path \\\"$UpgradeDirectory\\\") -eq $true) {\", \"Remove-Item -path \\\"$UpgradeDirectory\\\" -recurse\", \"}\", \"exit 1\", \"}\", \"\" ]\n      }\n    },\n    \"isCritical\" : \"true\",\n    \"nextStep\" : \"branchOnWindowsUpgradeSuccess\"\n  }, {\n    \"name\" : \"branchOnWindowsUpgradeSuccess\",\n    \"action\" : \"aws:branch\",\n    \"maxAttempts\" : 3,\n    \"onFailure\" : \"step:deleteServerUpgradeInstance\",\n    \"inputs\" : {\n      \"Choices\" : [ {\n        \"Variable\" : \"{{ checkAfterWindowsUpgrade2019.Output }}\",\n        \"Contains\" : \"Error: Upgrade failed\",\n        \"NextStep\" : \"deleteServerUpgradeInstance\"\n      } ],\n      \"Default\" : \"branchOnLicensingTypeToActivateLicense\"\n    },\n    \"isCritical\" : \"true\"\n  }, {\n    \"name\" : \"branchOnLicensingTypeToActivateLicense\",\n    \"action\" : \"aws:branch\",\n    \"onFailure\" : \"step:deleteServerUpgradeInstance\",\n    \"inputs\" : {\n      \"Choices\" : [ {\n        \"NextStep\" : \"DetachVolume\",\n        \"Variable\" : \"{{ assertSupportedWindowsVersion2019.Output }}\",\n        \"Contains\" : \"BYOL\"\n      } ],\n      \"Default\" : \"activateWindowsWithAmazonLicense\"\n    },\n    \"isCritical\" : \"true\"\n  }, {\n    \"name\" : \"activateWindowsWithAmazonLicense\",\n    \"action\" : \"aws:executeAutomation\",\n    \"maxAttempts\" : 3,\n    \"timeoutSeconds\" : 3600,\n    \"onFailure\" : \"Continue\",\n    \"inputs\" : {\n      \"DocumentName\" : \"AWSSupport-ActivateWindowsWithAmazonLicense\",\n      \"RuntimeParameters\" : {\n        \"InstanceId\" : [ \"{{ getServerUpgradeInstance.InstanceId }}\" ],\n        \"ForceActivation\" : [ \"True\" ]\n      }\n    },\n    \"isCritical\" : \"false\",\n    \"nextStep\" : \"DetachVolume\"\n  }, {\n    \"name\" : \"DetachVolume\",\n    \"action\" : \"aws:executeAwsApi\",\n    \"isCritical\" : \"true\",\n    \"inputs\" : {\n      \"Service\" : \"ec2\",\n      \"Api\" : \"DetachVolume\",\n      \"InstanceId\" : \"{{ getServerUpgradeInstance.InstanceId }}\",\n      \"VolumeId\" : \"{{ describeWindowMediaSnapshotVolume.VolumeId }}\",\n      \"Force\" : true\n    },\n    \"maxAttempts\" : 3,\n    \"onFailure\" : \"step:deleteServerUpgradeInstance\",\n    \"timeoutSeconds\" : 1800,\n    \"nextStep\" : \"waitUntilInstallationMediaIsDetached\"\n  }, {\n    \"name\" : \"waitUntilInstallationMediaIsDetached\",\n    \"action\" : \"aws:waitForAwsResourceProperty\",\n    \"inputs\" : {\n      \"Service\" : \"ec2\",\n      \"Api\" : \"DescribeVolumes\",\n      \"Filters\" : [ {\n        \"Name\" : \"volume-id\",\n        \"Values\" : [ \"{{ describeWindowMediaSnapshotVolume.VolumeId }}\" ]\n      } ],\n      \"PropertySelector\" : \"$.Volumes[0].State\",\n      \"DesiredValues\" : [ \"available\" ]\n    },\n    \"maxAttempts\" : 3,\n    \"isCritical\" : \"true\",\n    \"onFailure\" : \"step:deleteServerUpgradeInstance\",\n    \"timeoutSeconds\" : 1800,\n    \"nextStep\" : \"DeleteVolume\"\n  }, {\n    \"name\" : \"DeleteVolume\",\n    \"action\" : \"aws:executeAwsApi\",\n    \"inputs\" : {\n      \"Service\" : \"ec2\",\n      \"Api\" : \"DeleteVolume\",\n      \"VolumeId\" : \"{{ describeWindowMediaSnapshotVolume.VolumeId }}\"\n    },\n    \"maxAttempts\" : 3,\n    \"isCritical\" : \"true\",\n    \"onFailure\" : \"step:deleteServerUpgradeInstance\",\n    \"timeoutSeconds\" : 300,\n    \"nextStep\" : \"UpdateEC2Launch\"\n  }, {\n    \"name\" : \"UpdateEC2Launch\",\n    \"action\" : \"aws:runCommand\",\n    \"maxAttempts\" : 3,\n    \"onFailure\" : \"Continue\",\n    \"timeoutSeconds\" : 7200,\n    \"inputs\" : {\n      \"DocumentName\" : \"AWS-RunPowerShellScript\",\n      \"InstanceIds\" : [ \"{{ getServerUpgradeInstance.InstanceId }}\" ],\n      \"Parameters\" : {\n        \"commands\" : [ \"$zipFilename = \\\"AWSUpdateWindowsInstance_1_4_4_0.zip\\\"\", \"$zipFileHash = \\\"CD337ADCFBA463DE895B8D8248A3991940ABB03ADF8525ECA1302385D6A1DDA6\\\"\", \"$moduleName = \\\"AWSUpdateWindowsInstance\\\"\", \"$tempPath = $env:TEMP\", \"$moduleDirectory = Join-Path $tempPath -ChildPath $moduleName\", \"$moduleZipFilePath = Join-Path $tempPath -ChildPath $zipFilename\", \"$moduleManifestPath = Join-Path $moduleDirectory -ChildPath ('{0}.psd1' -f $moduleName)\", \"\", \"$ssmAgentService = Get-ItemProperty \\\"HKLM:SYSTEM\\\\CurrentControlSet\\\\Services\\\\AmazonSSMAgent\\\\\\\" -ErrorAction SilentlyContinue\", \"if ($ssmAgentService -and $ssmAgentService.Version -ge \\\"2.0.533.0\\\") {\", \"$region = $env:AWS_SSM_REGION_NAME\", \"}\", \"\", \"if (-not $region) {\", \"try {\", \"$token = (Invoke-RestMethod -Method Put -Uri http://169.254.169.254/latest/api/token -Headers @{\\\"X-aws-ec2-metadata-token-ttl-seconds\\\"=\\\"60\\\"})\", \"$identityDocumentUrl = \\\"http://169.254.169.254/latest/dynamic/instance-identity/document\\\"\", \"$region = ((Invoke-WebRequest -UseBasicParsing -uri $identityDocumentUrl -Headers @{\\\"X-aws-ec2-metadata-token\\\"=[string]$token} ).Content | ConvertFrom-Json).region\", \"}\", \"catch {\", \"$region = \\\"us-east-1\\\"\", \"}\", \"}\", \"\", \"function Main {\", \"Test-PreCondition\", \"Clear-WindowsUpdateModule\", \"Get-WindowsUpdateModule\", \"Expand-WindowsUpdateModule\", \"if ([Environment]::OSVersion.Version.Major -ge 10) {\", \"Invoke-UpdateEC2Launch\", \"}\", \"else {\", \"Invoke-UpdateEC2Config\", \"}\", \"}\", \"\", \"function Test-PreCondition {\", \"try {\", \"$osversion = [Environment]::OSVersion.Version\", \"if ($osversion.Major -le 5) {\", \"Write-Host \\\"This document is not supported on Windows Server 2003 or earlier.\\\"\", \"Exit -1\", \"}\", \"\", \"if ($osversion.Version -ge \\\"10.0\\\") {\", \"$sku = (Get-CimInstance -ClassName Win32_OperatingSystem).OperatingSystemSKU\", \"if ($sku -eq 143 -or $sku -eq 144) {\", \"Write-Host \\\"This document is not supported on Windows 2016 Nano\\t Server.\\\"\", \"Exit -1\", \"}\", \"}\", \"}\", \"catch {\", \"Write-Host \\\"Executing Test-PreCondition resulted in error: $($_)\\\"\", \"Exit -1\", \"}\", \"}\", \"\", \"function Clear-WindowsUpdateModule {\", \"try {\", \"if (Test-Path $moduleDirectory) {\", \"Remove-Item $moduleDirectory -Force -Recurse\", \"}\", \"if (Test-Path $moduleZipFilePath) {\", \"Remove-Item $moduleZipFilePath -Force\", \"}\", \"}\", \"catch {\", \"Write-Host \\\"Cleaning Windows update module resulted in error: $($_)\\\"\", \"}\", \"}\", \"\", \"function Get-WindowsUpdateModule {\", \"try {\", \"if ($region.StartsWith(\\\"cn-\\\")) {\", \"$s3Location = \\\"https://s3.{0}.amazonaws.com.cn/aws-windows-downloads-{0}/PSModules/AWSUpdateWindowsInstance/{1}\\\"\", \"}\", \"elseif ($region.StartsWith(\\\"us-gov-\\\")) {\", \"$s3Location = \\\"https://s3-fips-{0}.amazonaws.com/aws-windows-downloads-{0}/PSModules/AWSUpdateWindowsInstance/{1}\\\"\", \"}\", \"elseif ($region -eq \\\"us-east-1\\\") {\", \"$s3Location = \\\"https://s3.amazonaws.com/aws-windows-downloads-{0}/PSModules/AWSUpdateWindowsInstance/{1}\\\"\", \"}\", \"else {\", \"$s3Location = \\\"https://aws-windows-downloads-{0}.s3.amazonaws.com/PSModules/AWSUpdateWindowsInstance/{1}\\\"\", \"}\", \"\", \"$source = $s3Location -f $region, $zipFilename\", \"$moduleLocalPath = Join-Path $tempPath -ChildPath $zipFilename\", \"Start-BitsTransfer -Source $source -Destination $moduleLocalPath\", \"\", \"$fileStream = New-Object System.IO.FileStream($moduleLocalPath, [System.IO.FileMode]::Open, [System.IO.FileAccess]::Read)\", \"$sha256 = [System.Security.Cryptography.HashAlgorithm]::Create(\\\"System.Security.Cryptography.SHA256CryptoServiceProvider\\\")\", \"$currentHash = [System.BitConverter]::ToString($sha256.ComputeHash($fileStream), 0).Replace(\\\"-\\\", \\\"\\\").ToLowerInvariant()\", \"$sha256.Dispose()\", \"$fileStream.Dispose()\", \"\", \"if ($currentHash -ne $zipFileHash) {\", \"Write-Host \\\"The SHA hash of the module does not match the expected value.\\\"\", \"Exit -1\", \"}\", \"}\", \"catch {\", \"Write-Host (\\\"Error encountered while getting the module: {0}.\\\" -f $_.Exception.Message)\", \"Exit -1\", \"}\", \"}\", \"\", \"function Expand-WindowsUpdateModule {\", \"try {\", \"[System.Reflection.Assembly]::LoadWithPartialName(\\\"System.IO.Compression.FileSystem\\\") | Out-Null\", \"$zip = [System.IO.Compression.ZipFile]::OpenRead($moduleZipFilePath)\", \"foreach ($item in $zip.Entries) {\", \"$extractPath = Join-Path $tempPath -ChildPath $item.FullName\", \"if ($item.Length -eq 0) {\", \"if (-not (Test-Path $extractPath)) {\", \"New-Item $extractPath -ItemType Directory | Out-Null\", \"}\", \"}\", \"else {\", \"$parentPath = Split-Path $extractPath\", \"if (-not (Test-Path $parentPath)) {\", \"New-Item $parentPath -ItemType Directory | Out-Null\", \"}\", \"[System.IO.Compression.ZipFileExtensions]::ExtractToFile($item, $extractPath, $true)\", \"}\", \"}\", \"}\", \"catch {\", \"Write-Host (\\\"Error encountered when extracting module file: {0}.\\\" -f $_.Exception.Message)\", \"Exit -1\", \"}\", \"finally {\", \"$zip.Dispose()\", \"}\", \"}\", \"\", \"function Invoke-UpdateEC2Config {\", \"try {\", \"Import-Module $moduleManifestPath\", \"$command = \\\"Install-AwsUwiEC2Config -Region $region\\\"\", \"if ($id) { $command += \\\" -Id $($id)\\\" }\", \"Invoke-Expression $command\", \"}\", \"catch {\", \"Write-Host \\\"Executing Invoke-AwsUwiEC2Config resulted in error: $($_)\\\"\", \"Exit -1\", \"}\", \"}\", \"\", \"function Invoke-UpdateEC2Launch {\", \"try {\", \"Import-Module $moduleManifestPath\", \"$command = \\\"Install-AwsUwiEC2Launch\\\"\", \"if ($id) { $command += \\\" -Id $($id)\\\" }\", \"Invoke-Expression $command\", \"}\", \"catch {\", \"Write-Host \\\"Executing Invoke-AwsUwiEC2Launch resulted in error: $($_)\\\"\", \"Exit -1\", \"}\", \"}\", \"\", \"Main\" ]\n      }\n    },\n    \"isCritical\" : \"false\",\n    \"nextStep\" : \"UpdateSSMAgent\"\n  }, {\n    \"name\" : \"UpdateSSMAgent\",\n    \"action\" : \"aws:runCommand\",\n    \"maxAttempts\" : 3,\n    \"onFailure\" : \"Continue\",\n    \"timeoutSeconds\" : 600,\n    \"inputs\" : {\n      \"DocumentName\" : \"AWS-UpdateSSMAgent\",\n      \"InstanceIds\" : [ \"{{ getServerUpgradeInstance.InstanceId }}\" ],\n      \"Parameters\" : {\n        \"allowDowngrade\" : \"false\"\n      }\n    },\n    \"isCritical\" : \"false\",\n    \"nextStep\" : \"removeEC2Config\"\n  }, {\n    \"name\" : \"removeEC2Config\",\n    \"action\" : \"aws:runCommand\",\n    \"maxAttempts\" : 3,\n    \"onFailure\" : \"Continue\",\n    \"timeoutSeconds\" : 300,\n    \"inputs\" : {\n      \"DocumentName\" : \"AWS-RunPowerShellScript\",\n      \"InstanceIds\" : [ \"{{ getServerUpgradeInstance.InstanceId }}\" ],\n      \"Parameters\" : {\n        \"commands\" : [ \"Get-ChildItem \\\"HKLM:\\\\SOFTWARE\\\\WOW6432Node\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Uninstall\\\\\\\" -rec -ea SilentlyContinue | ForEach-Object {\", \"$item = Get-ItemProperty -Path $_.PsPath\", \"if ($item.DisplayName -match \\\"EC2ConfigService\\\") {\", \"$exec = $item.QuietUninstallString.Split('\\\"')[1]\", \"$arg = $item.QuietUninstallString.Split('\\\"')[2]\", \"Write-host \\\"Executing... $exec $arg\\\"\", \"$process = Start-Process -Wait -FilePath $exec -ArgumentList \\\"$arg\\\" -PassThru\", \"if ($process.ExitCode -gt 0) {\", \"Write-host \\\"Removing... $_\\\"\", \"Remove-Item -Path $_.PsPath -Recurse\", \"}\", \"}\", \"}\" ]\n      }\n    },\n    \"isCritical\" : \"false\",\n    \"nextStep\" : \"UpgradeIntel82599VF2019\"\n  }, {\n    \"name\" : \"UpgradeIntel82599VF2019\",\n    \"action\" : \"aws:runCommand\",\n    \"maxAttempts\" : 3,\n    \"onFailure\" : \"Continue\",\n    \"timeoutSeconds\" : 300,\n    \"inputs\" : {\n      \"DocumentName\" : \"AWS-RunPowerShellScript\",\n      \"InstanceIds\" : [ \"{{ getServerUpgradeInstance.InstanceId }}\" ],\n      \"Parameters\" : {\n        \"commands\" : [ \"$sourceFile = $env:TEMP + \\\"\\\\PROWinx64.zip\\\"\", \"$targetFolder = $env:TEMP + \\\"\\\\PROWinx64\\\"\", \"\", \"[Net.ServicePointManager]::SecurityProtocol = \\\"tls12, tls11, tls\\\"\", \"$Ethernet = Invoke-WebRequest -UseBasicParsing -uri \\\"https://downloadcenter.intel.com/json/pageresults?pageNumber=1&productId=36773&keyword=&filterOS=Windows+Server+2019*&filterType=&hitsPerPage=20&offset=0\\\"\", \"$Http = Invoke-WebRequest -UseBasicParsing -URI $(\\\"https://downloadcenter.intel.com{0}\\\" -f $( $Ethernet | Select -ExpandProperty Content | ConvertFrom-Json | Select -ExpandProperty ResultsForDisplay | Select -ExpandProperty FullDescriptionUrl))\", \"$download = $($($Http.Links | Where-Object { $_.outerHTML -like \\\"*>Download<*\\\" } | Select-Object -ExpandProperty href).split('=')[1] -replace \\\"%2F\\\", \\\"/\\\" -replace \\\"%3A\\\", \\\":\\\")\", \"\", \"$retryCount = 0\", \"$Retries = 2\", \"$completed = $false\", \"$response = $null\", \"\", \"while (-not $completed) {\", \"try {\", \"$response = Invoke-WebRequest -UseBasicParsing -Uri $download -OutFile $sourceFile -Passthru\", \"if ($response.StatusCode -ne 200) {\", \"throw \\\"Expecting response code 200, was: $($response.StatusCode)\\\"\", \"}\", \"$completed = $true\", \"}\", \"catch {\", \"if ($retrycount -ge $Retries) {\", \"Write-Warning \\\"Request to $download failed the maximum number of $retryCount times.\\\"\", \"throw\", \"}\", \"else {\", \"Write-Warning \\\"Request to $download failed. Retrying in 5 seconds.\\\"\", \"Start-Sleep 5\", \"$retrycount++\", \"}\", \"}\", \"}\", \"\", \"New-Item -ItemType directory -Path $targetFolder | out-null\", \"\", \"[System.Reflection.Assembly]::LoadWithPartialName(\\\"System.IO.Compression.FileSystem\\\") | out-null\", \"[System.IO.Compression.ZipFile]::ExtractToDirectory($sourceFile, $targetFolder) | out-null\", \"\", \"Remove-Item -Path $sourceFile | out-null\", \"\", \"$osInfo = (Get-WmiObject -class Win32_OperatingSystem)\", \"$OSVersion = $osInfo.Caption.ToUpper()\", \"\", \"If ( $OSVersion.indexOf(\\\"2019\\\") -ge 0 ) {\", \"& pnputil -a $($targetFolder + \\\"\\\\PROXGB\\\\Winx64\\\\NDIS68\\\\vxn68x64.inf\\\")\", \"if ($LASTEXITCODE -eq 0) { Write-Host \\\"Driver added successfully on Windows 2019\\\" } else { Write-Host \\\"Driver addition failed on Windows 2019\\\" }\", \"& pnputil -i -a $($targetFolder + \\\"\\\\PROXGB\\\\Winx64\\\\NDIS68\\\\vxn68x64.inf\\\")\", \"if ($LASTEXITCODE -eq 0) { Write-Host \\\"Driver installed successfully on Windows 2019\\\" } else { Write-Host \\\"Driver installation failed on Windows 2019\\\" }\", \"}\", \"elseif ( $OSVersion.indexOf(\\\"2016\\\") -gt 0 ) {\", \"& pnputil -a $($targetFolder + \\\"\\\\PROXGB\\\\Winx64\\\\NDIS65\\\\vxn65x64.inf\\\")\", \"if ($LASTEXITCODE -eq 0) { Write-Host \\\"Driver added successfully on Windows 2016\\\" } else { Write-Host \\\"Driver addition failed on Windows 2016\\\" }\", \"& pnputil -i -a $($targetFolder + \\\"\\\\PROXGB\\\\Winx64\\\\NDIS65\\\\vxn65x64.inf\\\")\", \"if ($LASTEXITCODE -eq 0) { Write-Host \\\"Driver installed successfully on Windows 2016\\\" } else { Write-Host \\\"Driver installation failed on Windows 2016\\\" }\", \"}\", \"elseif ( $OSVersion.indexOf(\\\"2012 R2\\\") -gt 0 ) {\", \"& pnputil -a $($targetFolder + \\\"\\\\PROXGB\\\\Winx64\\\\NDIS64\\\\vxn64x64.inf\\\")\", \"if ($LASTEXITCODE -eq 0) { Write-Host \\\"Driver added successfully on Windows 2012 R2\\\" } else { Write-Host \\\"Driver addition failed on Windows 2012 R2\\\" }\", \"& pnputil -i -a $($targetFolder + \\\"\\\\PROXGB\\\\Winx64\\\\NDIS64\\\\vxn64x64.inf\\\")\", \"if ($LASTEXITCODE -eq 0) { Write-Host \\\"Driver installed successfully on Windows 2012 R2\\\" } else { Write-Host \\\"Driver installation failed on Windows 2012 R2\\\" }\", \"}\", \"elseif ( $OSVersion.indexOf(\\\"2012\\\") -gt 0 ) {\", \"& pnputil -a $($targetFolder + \\\"\\\\PROXGB\\\\Winx64\\\\NDIS63\\\\vxn63x64.inf\\\")\", \"if ($LASTEXITCODE -eq 0) { Write-Host \\\"Driver added successfully on Windows 2012\\\" } else { Write-Host \\\"Driver addition failed on Windows 2012\\\" }\", \"& pnputil -i -a $($targetFolder + \\\"\\\\PROXGB\\\\Winx64\\\\NDIS63\\\\vxn63x64.inf\\\")\", \"if ($LASTEXITCODE -eq 0) { Write-Host \\\"Driver installed successfully on Windows 2012\\\" } else { Write-Host \\\"Driver installation failed on Windows 2012\\\" }\", \"}\", \"elseif ( $OSVersion.indexOf(\\\"2008 R2\\\") -gt 0 ) {\", \"& pnputil -a $($targetFolder + \\\"\\\\PROXGB\\\\Winx64\\\\NDIS62\\\\vxn62x64.inf\\\")\", \"if ($LASTEXITCODE -eq 0) { Write-Host \\\"Driver added successfully on Windows 2008 R2\\\" } else { Write-Host \\\"Driver addition failed on Windows 2008 R2\\\" }\", \"& pnputil -i -a $($targetFolder + \\\"\\\\PROXGB\\\\Winx64\\\\NDIS62\\\\vxn62x64.inf\\\")\", \"if ($LASTEXITCODE -eq 0) { Write-Host \\\"Driver installed successfully on Windows 2008 R2\\\" } else { Write-Host \\\"Driver installation failed on Windows 2008 R2\\\" }\", \"}\", \"\", \"Remove-Item -Path $targetFolder -Recurse -Force:$True | out-null\" ]\n      }\n    },\n    \"isCritical\" : \"false\",\n    \"nextStep\" : \"upgradeWindowsAWSDrivers\"\n  }, {\n    \"name\" : \"upgradeWindowsAWSDrivers\",\n    \"action\" : \"aws:executeAutomation\",\n    \"timeoutSeconds\" : 3600,\n    \"onFailure\" : \"Continue\",\n    \"inputs\" : {\n      \"DocumentName\" : \"AWSSupport-UpgradeWindowsAWSDrivers\",\n      \"RuntimeParameters\" : {\n        \"InstanceId\" : [ \"{{ getServerUpgradeInstance.InstanceId }}\" ]\n      }\n    },\n    \"isCritical\" : \"false\",\n    \"nextStep\" : \"getPreBackUpAMIFromDriverUpgrade\"\n  }, {\n    \"name\" : \"getPreBackUpAMIFromDriverUpgrade\",\n    \"action\" : \"aws:executeAwsApi\",\n    \"onFailure\" : \"Continue\",\n    \"inputs\" : {\n      \"Service\" : \"ssm\",\n      \"Api\" : \"GetAutomationExecution\",\n      \"AutomationExecutionId\" : \"{{ upgradeWindowsAWSDrivers.ExecutionId }}\"\n    },\n    \"outputs\" : [ {\n      \"Name\" : \"ImageId\",\n      \"Selector\" : \"$.AutomationExecution.Outputs.'preUpgradeBackup.ImageId'[0]\",\n      \"Type\" : \"String\"\n    } ],\n    \"isCritical\" : \"false\",\n    \"nextStep\" : \"deletePreBackupAMIFromDriverUpgrade\"\n  }, {\n    \"name\" : \"deletePreBackupAMIFromDriverUpgrade\",\n    \"action\" : \"aws:deleteImage\",\n    \"inputs\" : {\n      \"ImageId\" : \"{{ getPreBackUpAMIFromDriverUpgrade.ImageId }}\"\n    },\n    \"maxAttempts\" : 3,\n    \"isCritical\" : \"false\",\n    \"onFailure\" : \"Continue\",\n    \"timeoutSeconds\" : 600,\n    \"nextStep\" : \"installWindowUpdates\"\n  }, {\n    \"name\" : \"installWindowUpdates\",\n    \"action\" : \"aws:runCommand\",\n    \"maxAttempts\" : 3,\n    \"onFailure\" : \"Continue\",\n    \"timeoutSeconds\" : 3600,\n    \"inputs\" : {\n      \"DocumentName\" : \"AWS-InstallWindowsUpdates\",\n      \"InstanceIds\" : [ \"{{ getServerUpgradeInstance.InstanceId }}\" ],\n      \"Parameters\" : {\n        \"Action\" : \"Install\",\n        \"Categories\" : \"CriticalUpdates,SecurityUpdates\",\n        \"SeverityLevels\" : \"Critical,Important\"\n      }\n    },\n    \"isCritical\" : \"false\",\n    \"nextStep\" : \"enableEC2Launch\"\n  }, {\n    \"name\" : \"enableEC2Launch\",\n    \"action\" : \"aws:runCommand\",\n    \"maxAttempts\" : 3,\n    \"onFailure\" : \"Continue\",\n    \"timeoutSeconds\" : 300,\n    \"inputs\" : {\n      \"DocumentName\" : \"AWS-RunPowerShellScript\",\n      \"InstanceIds\" : [ \"{{ getServerUpgradeInstance.InstanceId }}\" ],\n      \"Parameters\" : {\n        \"commands\" : [ \"$LaunchConfig = \\\"C:\\\\ProgramData\\\\Amazon\\\\EC2-Windows\\\\Launch\\\\Config\\\\LaunchConfig.json\\\"\", \"if ((Test-Path $LaunchConfig) -eq $true) {\", \"$Launch = Get-Content $LaunchConfig | ConvertFrom-Json\", \"$Launch.addDnsSuffixList = $false\", \"$Launch.handleUserData = $false\", \"$Launch.adminPasswordType = \\\"DoNothing\\\"\", \"$Launch | ConvertTo-Json | Set-Content $LaunchConfig\", \"& C:\\\\ProgramData\\\\Amazon\\\\EC2-Windows\\\\Launch\\\\Scripts\\\\InitializeInstance.ps1 -Schedule\", \"} else {\", \"Write-Host \\\"EC2Launch is not installed!\\\"\", \"Exit 1\", \"}\" ]\n      }\n    },\n    \"isCritical\" : \"false\",\n    \"nextStep\" : \"amiName\"\n  }, {\n    \"name\" : \"amiName\",\n    \"action\" : \"aws:executeScript\",\n    \"inputs\" : {\n      \"Runtime\" : \"PowerShell Core 6.0\",\n      \"Script\" : \"$inputPayload = $env:InputPayload | ConvertFrom-Json\\n$amiName = $inputPayload.amiName\\n$targetVersion = $inputPayload.TargetVersion\\n$instanceId = $inputPayload.InstanceId\\n$executionId = $inputPayload.executionId\\nif ([string]::IsNullOrWhitespace($amiName)) {\\nreturn @{message = \\\"AWSEC2_UPGRADED_AMI_TO_{0}_FOR_INSTANCE_{1}_{2}\\\" -f $targetVersion, $instanceId, $executionId }\\n}\\nelse {\\nreturn @{message = \\\"$amiName\\\" }\\n}\",\n      \"InputPayload\" : {\n        \"amiName\" : \"{{ amiName }}\",\n        \"TargetVersion\" : \"{{ TargetWindowVersion }}\",\n        \"InstanceId\" : \"{{ InstanceId }}\",\n        \"executionId\" : \"{{ automation:EXECUTION_ID }}\"\n      }\n    },\n    \"outputs\" : [ {\n      \"Name\" : \"message\",\n      \"Selector\" : \"$.Payload.message\",\n      \"Type\" : \"String\"\n    } ],\n    \"nextStep\" : \"createImageServerUpgradeInstance\"\n  }, {\n    \"name\" : \"createImageServerUpgradeInstance\",\n    \"action\" : \"aws:executeAwsApi\",\n    \"inputs\" : {\n      \"Service\" : \"ec2\",\n      \"Api\" : \"CreateImage\",\n      \"InstanceId\" : \"{{ getServerUpgradeInstance.InstanceId }}\",\n      \"Name\" : \"{{ amiName.message }}\",\n      \"NoReboot\" : false\n    },\n    \"outputs\" : [ {\n      \"Name\" : \"ImageId\",\n      \"Selector\" : \"$.ImageId\",\n      \"Type\" : \"String\"\n    } ],\n    \"maxAttempts\" : 3,\n    \"isCritical\" : \"true\",\n    \"onFailure\" : \"step:deleteServerUpgradeInstance\",\n    \"timeoutSeconds\" : 600,\n    \"nextStep\" : \"waitTillImageReadyForInterim\"\n  }, {\n    \"name\" : \"waitTillImageReadyForInterim\",\n    \"action\" : \"aws:waitForAwsResourceProperty\",\n    \"inputs\" : {\n      \"Service\" : \"ec2\",\n      \"Api\" : \"DescribeImages\",\n      \"ImageIds\" : [ \"{{ createImageServerUpgradeInstance.ImageId }}\" ],\n      \"PropertySelector\" : \"$.Images[0].State\",\n      \"DesiredValues\" : [ \"available\" ]\n    },\n    \"maxAttempts\" : 3,\n    \"isCritical\" : \"true\",\n    \"onFailure\" : \"step:deleteServerUpgradeInstance\",\n    \"nextStep\" : \"deleteServerUpgradeInstance\"\n  }, {\n    \"name\" : \"deleteServerUpgradeInstance\",\n    \"action\" : \"aws:executeAwsApi\",\n    \"inputs\" : {\n      \"Service\" : \"ec2\",\n      \"Api\" : \"TerminateInstances\",\n      \"InstanceIds\" : [ \"{{ getServerUpgradeInstance.InstanceId }}\" ]\n    },\n    \"maxAttempts\" : 3,\n    \"isCritical\" : \"true\",\n    \"onFailure\" : \"Continue\",\n    \"timeoutSeconds\" : 1800,\n    \"nextStep\" : \"branchOnDeletingImageFromOriginalInstance\"\n  }, {\n    \"name\" : \"branchOnDeletingImageFromOriginalInstance\",\n    \"action\" : \"aws:branch\",\n    \"onFailure\" : \"step:describeInstallationMediaVolume\",\n    \"inputs\" : {\n      \"Choices\" : [ {\n        \"NextStep\" : \"deleteImageFromOriginalInstance\",\n        \"Variable\" : \"{{ KeepPreUpgradeImageBackUp }}\",\n        \"EqualsIgnoreCase\" : \"False\"\n      } ],\n      \"Default\" : \"describeInstallationMediaVolume\"\n    },\n    \"isCritical\" : \"true\"\n  }, {\n    \"name\" : \"deleteImageFromOriginalInstance\",\n    \"action\" : \"aws:deleteImage\",\n    \"inputs\" : {\n      \"ImageId\" : \"{{ describeOriginalInstanceImage.ImageId }}\"\n    },\n    \"maxAttempts\" : 3,\n    \"isCritical\" : \"true\",\n    \"onFailure\" : \"Continue\",\n    \"timeoutSeconds\" : 600,\n    \"nextStep\" : \"describeInstallationMediaVolume\"\n  }, {\n    \"name\" : \"describeInstallationMediaVolume\",\n    \"action\" : \"aws:executeAwsApi\",\n    \"inputs\" : {\n      \"Service\" : \"ec2\",\n      \"Api\" : \"DescribeVolumes\",\n      \"Filters\" : [ {\n        \"Name\" : \"volume-id\",\n        \"Values\" : [ \"{{ describeWindowMediaSnapshotVolume.VolumeId }}\" ]\n      } ]\n    },\n    \"outputs\" : [ {\n      \"Name\" : \"State\",\n      \"Selector\" : \"$.Volumes[0].State\",\n      \"Type\" : \"String\"\n    } ],\n    \"maxAttempts\" : 3,\n    \"isCritical\" : \"false\",\n    \"onFailure\" : \"Continue\",\n    \"timeoutSeconds\" : 300,\n    \"nextStep\" : \"branchOnInstallationMediaVolumeStatus\"\n  }, {\n    \"name\" : \"branchOnInstallationMediaVolumeStatus\",\n    \"action\" : \"aws:branch\",\n    \"onFailure\" : \"step:getUpgradedImageDetails\",\n    \"inputs\" : {\n      \"Choices\" : [ {\n        \"NextStep\" : \"retryDeletingInstallationMediaVolume\",\n        \"Or\" : [ {\n          \"Variable\" : \"{{ describeInstallationMediaVolume.State }}\",\n          \"EqualsIgnoreCase\" : \"available\"\n        }, {\n          \"Variable\" : \"{{ describeInstallationMediaVolume.State }}\",\n          \"EqualsIgnoreCase\" : \"in-use\"\n        } ]\n      } ],\n      \"Default\" : \"getUpgradedImageDetails\"\n    },\n    \"isCritical\" : \"false\"\n  }, {\n    \"name\" : \"retryDeletingInstallationMediaVolume\",\n    \"action\" : \"aws:executeAwsApi\",\n    \"inputs\" : {\n      \"Service\" : \"ec2\",\n      \"Api\" : \"DeleteVolume\",\n      \"VolumeId\" : \"{{ describeWindowMediaSnapshotVolume.VolumeId }}\"\n    },\n    \"maxAttempts\" : 3,\n    \"isCritical\" : \"false\",\n    \"onFailure\" : \"step:getUpgradedImageDetails\",\n    \"timeoutSeconds\" : 600,\n    \"nextStep\" : \"getUpgradedImageDetails\"\n  }, {\n    \"name\" : \"getUpgradedImageDetails\",\n    \"action\" : \"aws:executeAwsApi\",\n    \"maxAttempts\" : 2,\n    \"inputs\" : {\n      \"Service\" : \"ec2\",\n      \"Api\" : \"DescribeImages\",\n      \"ImageIds\" : [ \"{{ createImageServerUpgradeInstance.ImageId }}\" ]\n    },\n    \"outputs\" : [ {\n      \"Name\" : \"ImageId\",\n      \"Selector\" : \"$.Images[0].ImageId\",\n      \"Type\" : \"String\"\n    }, {\n      \"Name\" : \"Name\",\n      \"Selector\" : \"$.Images[0].Name\",\n      \"Type\" : \"String\"\n    } ],\n    \"isCritical\" : \"true\",\n    \"isEnd\" : \"true\"\n  } ],\n  \"outputs\" : [ \"getUpgradedImageDetails.ImageId\", \"getUpgradedImageDetails.Name\" ]\n}",
  "CreatedDate": "2022-03-16T06:56:35.808Z",
  "DisplayName": null,
  "DocumentFormat": {
    "Value": "JSON"
  },
  "DocumentType": {
    "Value": "Automation"
  },
  "DocumentVersion": "10",
  "Name": "AWSEC2-CloneInstanceAndUpgradeWindows2019",
  "Requires": [],
  "ReviewStatus": null,
  "Status": {
    "Value": "Active"
  },
  "StatusInformation": null,
  "VersionName": null,
  "ResponseMetadata": {
    "RequestId": "d0b8bfed-32dd-404a-bbdc-8f8b54dc59de",
    "Metadata": {},
    "ChecksumAlgorithm": 0,
    "ChecksumValidationStatus": 0
  },
  "ContentLength": 73681,
  "HttpStatusCode": 200,
  "LoggedAt": "2022-04-14T07:13:35.0751611+00:00"
}
