{
  "AttachmentsContent": [],
  "Content": "{\n  \"description\": \"Detach EBS Volume\",\n  \"schemaVersion\": \"0.3\",\n  \"assumeRole\": \"{{ AutomationAssumeRole }}\",\n  \"parameters\": {\n    \"VolumeId\": {\n      \"type\": \"String\",\n      \"description\": \"(Required) The ID of the EBS volume. The volume and instance must be within the same Availability Zone\"\n    },\n    \"LambdaAssumeRole\": {\n      \"type\": \"String\",\n      \"description\": \"(Optional) The ARN of the role assumed by lambda\",\n      \"default\": \"\"\n    },\n    \"AutomationAssumeRole\": {\n      \"type\": \"String\",\n      \"description\": \"(Optional) The ARN of the role that allows Automation to perform the actions on your behalf. \",\n      \"default\": \"\"\n    }\n  },\n  \"mainSteps\": [\n    {\n      \"name\": \"createDocumentStack\",\n      \"action\": \"aws:createStack\",\n      \"inputs\": {\n        \"Capabilities\": [\n          \"CAPABILITY_IAM\"\n        ],\n        \"StackName\": \"DetachEBSVolumeStack{{automation:EXECUTION_ID}}\",\n        \"Parameters\": [\n          {\n            \"ParameterKey\": \"LambdaRoleArn\",\n            \"ParameterValue\": \"{{LambdaAssumeRole}}\"\n          },\n          {\n            \"ParameterKey\": \"LambdaName\",\n            \"ParameterValue\": \"DetachVolumeLambda-{{automation:EXECUTION_ID}}\"\n          }\n        ],\n        \"TemplateBody\": \"AWSTemplateFormatVersion: '2010-09-09'\\nConditions:\\n  LambdaAssumeRoleNotSpecified:\\n    Fn::Or:\\n    - Fn::Equals:\\n      - Ref: LambdaRoleArn\\n      - ''\\n    - Fn::Equals:\\n      - Ref: LambdaRoleArn\\n      - undefined\\nDescription: Automation Stack for Detach EBS Volumes\\nParameters:\\n  LambdaName:\\n    Description: 'The lambda function name\\n\\n      '\\n    Type: String\\n  LambdaRoleArn:\\n    Default: ''\\n    Description: 'The ARN of the role that allows Lambda created by Automation to\\n      perform the action on your behalf\\n\\n      '\\n    Type: String\\nResources:\\n  DetachVolumeLambda:\\n    Properties:\\n      Code:\\n        ZipFile: \\\"#\\\\n# Copyright 2018 Amazon.com, Inc. or its affiliates. All Rights\\\\\\n          \\\\ Reserved.\\\\n#\\\\n# Permission is hereby granted, free of charge, to any person\\\\\\n          \\\\ obtaining a copy of this\\\\n# software and associated documentation files\\\\\\n          \\\\ (the \\\\\\\"Software\\\\\\\"), to deal in the Software\\\\n# without restriction, including\\\\\\n          \\\\ without limitation the rights to use, copy, modify,\\\\n# merge, publish,\\\\\\n          \\\\ distribute, sublicense, and/or sell copies of the Software, and to\\\\n#\\\\\\n          \\\\ permit persons to whom the Software is furnished to do so.\\\\n#\\\\n# THE SOFTWARE\\\\\\n          \\\\ IS PROVIDED \\\\\\\"AS IS\\\\\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,\\\\n\\\\\\n          # INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\\\\\\n          \\\\ FOR A\\\\n# PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\\\\\n          \\\\ AUTHORS OR COPYRIGHT\\\\n# HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\\\\\n          \\\\ LIABILITY, WHETHER IN AN ACTION\\\\n# OF CONTRACT, TORT OR OTHERWISE, ARISING\\\\\\n          \\\\ FROM, OUT OF OR IN CONNECTION WITH THE\\\\n# SOFTWARE OR THE USE OR OTHER\\\\\\n          \\\\ DEALINGS IN THE SOFTWARE.\\\\n#\\\\nimport boto3\\\\nimport time\\\\nimport logging\\\\n\\\\\\n          \\\\nlogger = logging.getLogger()\\\\nlogger.setLevel(logging.INFO)\\\\n\\\\n\\\\ndef handler(event,\\\\\\n          \\\\ context):\\\\n\\\\tec2 = boto3.resource('ec2')\\\\n\\\\n\\\\tvolume_id = event[\\\\\\\"VolumeId\\\\\\\"\\\\\\n          ]\\\\n\\\\tvolume = ec2.Volume(volume_id)\\\\n\\\\tvolume.detach_from_instance()\\\\n\\\\n\\\\\\n          \\\\tretry_count = 0\\\\n\\\\tattachment_state = 'detaching'\\\\n\\\\n\\\\twhile retry_count\\\\\\n          \\\\ < 35:\\\\n\\\\n\\\\t\\\\tretry_count += 1\\\\n\\\\t\\\\tvolume.reload()\\\\n\\\\n\\\\t\\\\tif len(volume.attachments)\\\\\\n          \\\\ == 0:\\\\n\\\\t\\\\t\\\\tattachment_state = 'detached'\\\\n\\\\t\\\\t\\\\tbreak\\\\n\\\\t\\\\tattachment_state\\\\\\n          \\\\ = volume.attachments[0]['State']\\\\n\\\\t\\\\tif attachment_state == 'detached'\\\\\\n          \\\\ or attachment_state == 'busy':\\\\n\\\\t\\\\t\\\\tbreak\\\\n\\\\n\\\\t\\\\ttime.sleep(1)\\\\n\\\\t\\\\t\\\\\\n          logger.info(\\\\\\\"Current Attachment State:\\\\\\\" + attachment_state + \\\\\\\", tries:\\\\\\\"\\\\\\n          \\\\ + str(retry_count))\\\\n\\\\n\\\\tlogger.info(\\\\\\\"Last Attachment State:\\\\\\\" + attachment_state\\\\\\n          \\\\ + \\\\\\\", tries:\\\\\\\" + str(retry_count))\\\\n\\\\n\\\\tif attachment_state == 'busy':\\\\n\\\\\\n          \\\\t\\\\tlogger.warn('Volume still mounted. Will detach once volume is unmounted\\\\\\n          \\\\ from instance.')\\\\n\\\\t\\\\traise Exception('Volume still mounted. Will detach\\\\\\n          \\\\ once volume is unmounted from instance.')\\\\n\\\\n\\\\tif attachment_state !=\\\\\\n          \\\\ 'detached':\\\\n\\\\t\\\\traise Exception('Failed to detach volume.  Current state\\\\\\n          \\\\ is:' + attachment_state)\\\\n\\\"\\n      FunctionName:\\n        Ref: LambdaName\\n      Handler: index.handler\\n      MemorySize: 128\\n      Role:\\n        Fn::If:\\n        - LambdaAssumeRoleNotSpecified\\n        - Fn::GetAtt:\\n          - LambdaRole\\n          - Arn\\n        - Ref: LambdaRoleArn\\n      Runtime: python3.7\\n      Timeout: 60\\n    Type: AWS::Lambda::Function\\n  LambdaRole:\\n    Condition: LambdaAssumeRoleNotSpecified\\n    Properties:\\n      AssumeRolePolicyDocument:\\n        Statement:\\n        - Action:\\n          - sts:AssumeRole\\n          Effect: Allow\\n          Principal:\\n            Service:\\n            - lambda.amazonaws.com\\n        Version: '2012-10-17'\\n      Path: /\\n      Policies:\\n      - PolicyDocument:\\n          Statement:\\n            Action:\\n            - ec2:DescribeVolumes\\n            - ec2:DetachVolume\\n            Effect: Allow\\n            Resource: '*'\\n          Version: '2012-10-17'\\n        PolicyName: DetachVolumeLambdaPolicy\\n    Type: AWS::IAM::Role\\n\"\n      }\n    },\n    {\n      \"name\": \"detachVolume\",\n      \"action\": \"aws:invokeLambdaFunction\",\n      \"inputs\": {\n        \"FunctionName\": \"DetachVolumeLambda-{{automation:EXECUTION_ID}}\",\n        \"Payload\": \"{\\\"VolumeId\\\": \\\"{{VolumeId}}\\\"}\",\n        \"LogType\": \"Tail\"\n      }\n    },\n    {\n      \"name\": \"deleteCloudFormationTemplate\",\n      \"action\": \"aws:deleteStack\",\n      \"inputs\": {\n        \"StackName\": \"DetachEBSVolumeStack{{automation:EXECUTION_ID}}\"\n      }\n    }\n  ],\n  \"outputs\": [\n    \"detachVolume.LogResult\"\n  ]\n}\n",
  "CreatedDate": "2021-11-09T18:09:53.849Z",
  "DisplayName": null,
  "DocumentFormat": {
    "Value": "JSON"
  },
  "DocumentType": {
    "Value": "Automation"
  },
  "DocumentVersion": "1",
  "Name": "AWS-DetachEBSVolume",
  "Requires": [],
  "ReviewStatus": null,
  "Status": {
    "Value": "Active"
  },
  "StatusInformation": null,
  "VersionName": null,
  "ResponseMetadata": {
    "RequestId": "1101fa85-279e-4956-94d0-ad7d20076e15",
    "Metadata": {}
  },
  "ContentLength": 6987,
  "HttpStatusCode": 200,
  "LoggedAt": "2022-02-06T07:11:01.9830201+00:00"
}
