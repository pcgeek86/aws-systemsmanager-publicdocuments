{
  "AttachmentsContent": [],
  "Content": "{\n  \"description\" : \"## Id\\nAWSResilienceHub-CreateEFSReplicationSOP_2023-01-01\\n\\n## Intent\\nCreate a EFS Replication configuration \\n\\n## Type\\nSOP\\n\\n## Risk\\nLow\\n\\n## Requirements\\n  * EFS file system\\n  * Target Region\\n  * One Zone Boolean Value\\n\\n\\n## Permissions required for AutomationAssumeRole\\n  * elasticfilesystem:CreateReplicationConfiguration\\n  * elasticfilesystem:DescribeReplicationConfigurations\\n  * elasticfilesystem:CreateFileSystem\\n\\n## Supports Rollback\\nNo\\n\\n## Cancellation behavior\\nFail\\n\\n## Inputs\\n### (Required) AutomationAssumeRole\\n  * type: String\\n  * description: ARN of the IAM role with permissions listed above\\n### (Required) FileSystemId\\n  * type: String\\n  * description: ID of the EFS file system\\n### (Required) Region\\n  * type: String\\n  * description: (Required)Replica Target Region\\n ### (Required) OneZone:\\n  * type: Boolean\\n  * description: Explicitly state if the replica should be a One Zone EFS\\n### (Optional)AvailabilityZoneName:\\n  * type: String\\n  * description: If One Zone is true, add the desired AZ\\n ### (Optional) KmsKeyId:\\n  * type: String\\n  * description: KMS key for encryption. If you do not specify a KMS key, Amazon EFS uses your default KMS key for Amazon EFS, /aws/elasticfilesystem.\\n\\n## Details\\nThe document creates an EFS Replication Configuration\\n\\n## Steps executed in normal flow\\n \\n  * RecordStartTime\\n  * OneZoneOrMultiZone\\n  * Create<X>ZoneReplication\\n  * OutputRecoveryTime\\n\\n## Outputs\\n### OutputRecoveryTime.RecoveryTime\\n  * type: Integer\\n  * description: SOP execution time in seconds\\n  \",\n  \"schemaVersion\" : \"0.3\",\n  \"assumeRole\" : \"{{ AutomationAssumeRole }}\",\n  \"parameters\" : {\n    \"FileSystemId\" : {\n      \"type\" : \"String\",\n      \"description\" : \"(Required) ID of the EFS\"\n    },\n    \"AutomationAssumeRole\" : {\n      \"type\" : \"String\",\n      \"description\" : \"(Required) The ARN of the role that allows Automation to perform the actions on your behalf\"\n    },\n    \"OneZone\" : {\n      \"type\" : \"Boolean\",\n      \"description\" : \"(Required) Explicitly state if the replica should be a One Zone EFS\"\n    },\n    \"AvailabilityZoneName\" : {\n      \"type\" : \"String\",\n      \"description\" : \"(Optional)If One Zone is true, add the desired AZ\",\n      \"default\" : \"\"\n    },\n    \"Region\" : {\n      \"type\" : \"String\",\n      \"description\" : \"(Required)Replica Target Region\"\n    },\n    \"KmsKeyId\" : {\n      \"type\" : \"String\",\n      \"description\" : \"(Optional)KMS key for encryption. If you do not specify a KMS key, Amazon EFS uses your default KMS key for Amazon EFS, /aws/elasticfilesystem.\",\n      \"allowedPattern\" : \"(arn:aws:kms:\\\\S+:\\\\d+:key\\\\/\\\\S+)|(^$)\",\n      \"default\" : \"\"\n    }\n  },\n  \"outputs\" : [ \"OutputRecoveryTime.RecoveryTime\" ],\n  \"mainSteps\" : [ {\n    \"name\" : \"RecordStartTime\",\n    \"description\" : \"Start recording execution time\",\n    \"action\" : \"aws:executeScript\",\n    \"outputs\" : [ {\n      \"Name\" : \"StartTime\",\n      \"Selector\" : \"$.Payload\",\n      \"Type\" : \"String\"\n    } ],\n    \"inputs\" : {\n      \"Runtime\" : \"python3.8\",\n      \"Handler\" : \"start_time\",\n      \"Script\" : \"import logging\\nimport time\\nfrom datetime import datetime, timezone\\n\\nimport boto3\\nfrom botocore.exceptions import ClientError\\nfrom dateutil import parser\\n\\nlogger = logging.getLogger()\\nlogger.setLevel(logging.INFO)\\n\\n\\n\\ndef start_time(events, context):\\n    return datetime.now(timezone.utc).isoformat()\"\n    }\n  }, {\n    \"name\" : \"OneZoneOrMultiZone\",\n    \"action\" : \"aws:branch\",\n    \"description\" : \"Efs Replication Zone Type\",\n    \"inputs\" : {\n      \"Choices\" : [ {\n        \"NextStep\" : \"CreateOneZoneReplication\",\n        \"Variable\" : \"{{OneZone}}\",\n        \"BooleanEquals\" : true\n      }, {\n        \"NextStep\" : \"CreateMultiZoneReplication\",\n        \"Variable\" : \"{{OneZone}}\",\n        \"BooleanEquals\" : false\n      } ]\n    }\n  }, {\n    \"name\" : \"CreateOneZoneReplication\",\n    \"description\" : \"Create Replication\",\n    \"action\" : \"aws:executeScript\",\n    \"nextStep\" : \"OutputRecoveryTime\",\n    \"outputs\" : [ {\n      \"Name\" : \"Destination\",\n      \"Selector\" : \"$.Payload\",\n      \"Type\" : \"StringMap\"\n    } ],\n    \"inputs\" : {\n      \"Runtime\" : \"python3.8\",\n      \"Handler\" : \"create_one_zone_efs_replication\",\n      \"InputPayload\" : {\n        \"FileSystemId\" : \"{{ FileSystemId }}\",\n        \"Region\" : \"{{Region}}\",\n        \"AvailabilityZoneName\" : \"{{AvailabilityZoneName}}\",\n        \"KmsKeyId\" : \"{{KmsKeyId}}\"\n      },\n      \"Script\" : \"import logging\\nimport time\\nfrom typing import List\\nimport json\\nimport uuid\\nimport sys\\nimport subprocess\\n\\nimport boto3\\nfrom botocore.exceptions import ClientError\\n\\n\\nlogger = logging.getLogger(__name__)\\nlogger.setLevel(logging.INFO)\\n\\n\\n\\ndef update_boto3_version():\\n    boto_modules = []\\n    for m in sys.modules.keys():\\n        if m.startswith(\\\"boto\\\"):\\n            boto_modules.append(m)\\n    for m in boto_modules:\\n        del sys.modules[m]\\n    subprocess.check_call(\\n        [sys.executable, \\\"-m\\\", \\\"pip\\\", \\\"install\\\", \\\"boto3\\\", \\\"-t\\\", \\\"/tmp/\\\"]\\n    )\\n    sys.path.insert(0, \\\"/tmp/\\\")\\n\\n\\n\\ndef create_one_zone_efs_replication(events, context):\\n    update_boto3_version()\\n    import boto3\\n    efs_client = boto3.client(\\\"efs\\\")\\n\\n    destination = {\\n        \\\"Region\\\": events[\\\"Region\\\"],\\n        \\\"AvailabilityZoneName\\\": events[\\\"AvailabilityZoneName\\\"],\\n    }\\n\\n    if bool(events.get(\\\"KmsKeyId\\\")):\\n        destination[\\\"KmsKeyId\\\"] = events[\\\"KmsKeyId\\\"]\\n    replicaConfigData = efs_client.create_replication_configuration(\\n        SourceFileSystemId=events[\\\"FileSystemId\\\"],\\n        Destinations=[\\n            destination\\n        ],\\n    )\\n    return replicaConfigData[\\\"Destinations\\\"][0]\"\n    }\n  }, {\n    \"name\" : \"CreateMultiZoneReplication\",\n    \"description\" : \"Create Replication\",\n    \"action\" : \"aws:executeScript\",\n    \"outputs\" : [ {\n      \"Name\" : \"Destination\",\n      \"Selector\" : \"$.Payload\",\n      \"Type\" : \"StringMap\"\n    } ],\n    \"inputs\" : {\n      \"Runtime\" : \"python3.8\",\n      \"Handler\" : \"create_multi_zone_efs_replication\",\n      \"InputPayload\" : {\n        \"FileSystemId\" : \"{{ FileSystemId }}\",\n        \"Region\" : \"{{Region}}\",\n        \"KmsKeyId\" : \"{{KmsKeyId}}\"\n      },\n      \"Script\" : \"import logging\\nimport time\\nfrom typing import List\\nimport json\\nimport uuid\\nimport sys\\nimport subprocess\\n\\nimport boto3\\nfrom botocore.exceptions import ClientError\\n\\n\\nlogger = logging.getLogger(__name__)\\nlogger.setLevel(logging.INFO)\\n\\n\\n\\ndef update_boto3_version():\\n    boto_modules = []\\n    for m in sys.modules.keys():\\n        if m.startswith(\\\"boto\\\"):\\n            boto_modules.append(m)\\n    for m in boto_modules:\\n        del sys.modules[m]\\n    subprocess.check_call(\\n        [sys.executable, \\\"-m\\\", \\\"pip\\\", \\\"install\\\", \\\"boto3\\\", \\\"-t\\\", \\\"/tmp/\\\"]\\n    )\\n    sys.path.insert(0, \\\"/tmp/\\\")\\n\\n\\n\\ndef create_multi_zone_efs_replication(events, context):\\n    update_boto3_version()\\n    import boto3\\n\\n    efs_client = boto3.client(\\\"efs\\\")\\n    destination = {\\n        \\\"Region\\\": events[\\\"Region\\\"],\\n    }\\n\\n    if bool(events.get(\\\"KmsKeyId\\\")):\\n        destination[\\\"KmsKeyId\\\"] = events[\\\"KmsKeyId\\\"]\\n    replicaConfigData = efs_client.create_replication_configuration(\\n        SourceFileSystemId=events[\\\"FileSystemId\\\"],\\n        Destinations=[destination],\\n    )\\n    return replicaConfigData[\\\"Destinations\\\"][0]\"\n    }\n  }, {\n    \"name\" : \"OutputRecoveryTime\",\n    \"description\" : \"Calculate execution time\",\n    \"action\" : \"aws:executeScript\",\n    \"outputs\" : [ {\n      \"Name\" : \"RecoveryTime\",\n      \"Selector\" : \"$.Payload\",\n      \"Type\" : \"Integer\"\n    } ],\n    \"inputs\" : {\n      \"Runtime\" : \"python3.8\",\n      \"Handler\" : \"recovery_time\",\n      \"Script\" : \"import logging\\nimport time\\nfrom datetime import datetime, timezone\\n\\nimport boto3\\nfrom botocore.exceptions import ClientError\\nfrom dateutil import parser\\n\\nlogger = logging.getLogger()\\nlogger.setLevel(logging.INFO)\\n\\n\\n\\ndef recovery_time(events, context):\\n    return (datetime.now(timezone.utc) - parser.parse(events['StartTime'])).seconds\",\n      \"InputPayload\" : {\n        \"StartTime\" : \"{{ RecordStartTime.StartTime }}\"\n      }\n    }\n  } ]\n}",
  "CreatedDate": "2023-03-22T12:06:30.332Z",
  "DisplayName": null,
  "DocumentFormat": {
    "Value": "JSON"
  },
  "DocumentType": {
    "Value": "Automation"
  },
  "DocumentVersion": "2",
  "Name": "AWSResilienceHub-CreateEFSReplicationSOP_2023-01-01",
  "Requires": [],
  "ReviewStatus": null,
  "Status": {
    "Value": "Active"
  },
  "StatusInformation": null,
  "VersionName": null,
  "ResponseMetadata": {
    "RequestId": "5a626a81-65b7-468d-841a-9603ab32337f",
    "Metadata": {},
    "ChecksumAlgorithm": 0,
    "ChecksumValidationStatus": 0
  },
  "ContentLength": 9172,
  "HttpStatusCode": 200,
  "LoggedAt": "2023-04-09T07:10:36.3562501+00:00"
}
