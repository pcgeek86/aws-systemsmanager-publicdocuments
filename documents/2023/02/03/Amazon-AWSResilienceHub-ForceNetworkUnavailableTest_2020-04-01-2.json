{
  "AttachmentsContent": [],
  "Content": "{\n  \"description\" : \"Test ELB when network unavailable\",\n  \"schemaVersion\" : \"0.3\",\n  \"assumeRole\" : \"{{ AutomationAssumeRole }}\",\n  \"parameters\" : {\n    \"LoadBalancerArn\" : {\n      \"type\" : \"String\",\n      \"description\" : \"(Required) LoadBalancerArn\"\n    },\n    \"SecurityGroupIdsToDelete\" : {\n      \"type\" : \"StringList\",\n      \"description\" : \"(Optional) The list of security group ids to delete\",\n      \"maxItems\" : 5,\n      \"default\" : [ ]\n    },\n    \"AutomationAssumeRole\" : {\n      \"type\" : \"String\",\n      \"description\" : \"(Required) The ARN of the role that allows Automation to perform the actions on your behalf.\"\n    },\n    \"UnHealthyHostCountAlarmName\" : {\n      \"type\" : \"String\",\n      \"description\" : \"(Required) Alarm for metric `UnHealthyHostCount`, which should be red after injection of the failure and green after the rollback process in the end of the test.\"\n    },\n    \"IsRollback\" : {\n      \"type\" : \"String\",\n      \"description\" : \"(Optional) Run rollback step of the given previous execution (parameter `PreviousExecutionId`). Can be either true or false.\",\n      \"default\" : \"false\"\n    },\n    \"PreviousExecutionId\" : {\n      \"type\" : \"String\",\n      \"description\" : \"(Optional) Previous execution id for which resources need to be cleaned up.\",\n      \"default\" : \"\"\n    }\n  },\n  \"mainSteps\" : [ {\n    \"name\" : \"CheckIsRollback\",\n    \"action\" : \"aws:branch\",\n    \"inputs\" : {\n      \"Choices\" : [ {\n        \"NextStep\" : \"GetInputsFromPreviousExecution\",\n        \"Variable\" : \"{{IsRollback}}\",\n        \"StringEquals\" : \"true\"\n      } ],\n      \"Default\" : \"AssertAlarmToBeGreenBeforeTest\"\n    }\n  }, {\n    \"name\" : \"GetInputsFromPreviousExecution\",\n    \"action\" : \"aws:executeScript\",\n    \"outputs\" : [ {\n      \"Name\" : \"LoadBalancerArn\",\n      \"Selector\" : \"$.Payload.LoadBalancerArn[0]\",\n      \"Type\" : \"String\"\n    } ],\n    \"inputs\" : {\n      \"Runtime\" : \"python3.8\",\n      \"Handler\" : \"get_inputs_from_ssm_execution\",\n      \"InputPayload\" : {\n        \"ExecutionId\" : \"{{ PreviousExecutionId }}\"\n      },\n      \"Script\" : \"import json\\nimport boto3\\nfrom botocore.config import Config\\n\\n\\n\\n\\ndef get_inputs_from_ssm_execution(events, context):\\n    output = {}\\n    config = Config(retries={'max_attempts': 20, 'mode': 'standard'})\\n    ssm = boto3.client('ssm', config=config)\\n\\n    if 'ExecutionId' not in events:\\n        raise KeyError('Requires ExecutionId')\\n\\n    if not events['ExecutionId']:\\n        raise KeyError('Requires not empty ExecutionId')\\n\\n    response = ssm.get_automation_execution(AutomationExecutionId=events['ExecutionId'])\\n    response_parameters = response['AutomationExecution']['Parameters']\\n    # TODO DIG-853\\n    for parameter in response_parameters:\\n        output[parameter] = response_parameters[parameter]\\n\\n    return output\"\n    }\n  }, {\n    \"name\" : \"GetBackedUpSecurityGroupsFromPreviousExecution\",\n    \"action\" : \"aws:executeScript\",\n    \"outputs\" : [ {\n      \"Name\" : \"SecurityGroups\",\n      \"Selector\" : \"$.Payload.SecurityGroups\",\n      \"Type\" : \"StringList\"\n    } ],\n    \"inputs\" : {\n      \"Runtime\" : \"python3.8\",\n      \"Handler\" : \"get_output_from_ssm_step_execution\",\n      \"InputPayload\" : {\n        \"ExecutionId\" : \"{{ PreviousExecutionId }}\",\n        \"StepName\" : \"BackupCurrentExecution\",\n        \"ResponseField\" : \"SecurityGroups\"\n      },\n      \"Script\" : \"import json\\nimport boto3\\nfrom botocore.config import Config\\n\\n\\n\\n\\ndef get_output_from_ssm_step_execution(events, context):\\n    config = Config(retries={'max_attempts': 20, 'mode': 'standard'})\\n    ssm = boto3.client('ssm', config=config)\\n\\n    if 'ExecutionId' not in events or 'StepName' not in events or 'ResponseField' not in events:\\n        raise KeyError('Requires ExecutionId, StepName and ResponseField in events')\\n\\n    ssm_response = ssm.get_automation_execution(AutomationExecutionId=events['ExecutionId'])\\n    for step in ssm_response['AutomationExecution']['StepExecutions']:\\n        if step['StepName'] == events['StepName']:\\n            response_fields = events['ResponseField'].split(',')\\n            output = {}\\n            for response_field in response_fields:\\n                if response_field in step['Outputs']:\\n                    # Sets values in string type regardless of what is the original value type. In order to set\\n                    # values with original types please use 'get_typed_output_from_ssm_step_execution'.\\n                    output[response_field] = step['Outputs'][response_field]\\n                else:\\n                    \\\"\\\"\\\"\\n                    By default SSM ignores empty values when encodes API outputs to JSON. It may result in\\n                    a situation when an empty value is a valid value but step output completely misses it.\\n                    Usually happens with SQS queue policies, default policy is returned by API as an empty value\\n                    and executeApi step output ignores it. As a result, further steps in rollback execution will fail.\\n                    Instead of ignoring this value we should use a default empty value in rollback, i.e. empty string\\n                    represents a default sqs policy\\n                    \\\"\\\"\\\"\\n                    output[response_field] = ['']\\n            return output\\n\\n    # Could not find step name\\n    raise Exception('Can not find step name % in ssm execution response', events['StepName'])\"\n    }\n  }, {\n    \"name\" : \"AssertLoadBalancerArn\",\n    \"action\" : \"aws:branch\",\n    \"inputs\" : {\n      \"Choices\" : [ {\n        \"NextStep\" : \"RollbackPreviousExecution\",\n        \"Variable\" : \"{{ GetInputsFromPreviousExecution.LoadBalancerArn }}\",\n        \"StringEquals\" : \"{{ LoadBalancerArn }}\"\n      } ]\n    },\n    \"isEnd\" : true\n  }, {\n    \"name\" : \"RollbackPreviousExecution\",\n    \"action\" : \"aws:executeAwsApi\",\n    \"inputs\" : {\n      \"Service\" : \"elbv2\",\n      \"Api\" : \"SetSecurityGroups\",\n      \"LoadBalancerArn\" : \"{{ LoadBalancerArn }}\",\n      \"SecurityGroups\" : \"{{ GetBackedUpSecurityGroupsFromPreviousExecution.SecurityGroups }}\"\n    },\n    \"outputs\" : [ {\n      \"Name\" : \"LoadBalancerSecurityGroups\",\n      \"Selector\" : \"$.SecurityGroupIds\",\n      \"Type\" : \"StringList\"\n    } ],\n    \"isEnd\" : true\n  }, {\n    \"name\" : \"AssertAlarmToBeGreenBeforeTest\",\n    \"action\" : \"aws:waitForAwsResourceProperty\",\n    \"maxAttempts\" : 1,\n    \"timeoutSeconds\" : 1200,\n    \"inputs\" : {\n      \"Service\" : \"cloudwatch\",\n      \"Api\" : \"DescribeAlarms\",\n      \"AlarmNames\" : [ \"{{UnHealthyHostCountAlarmName}}\" ],\n      \"PropertySelector\" : \"$.MetricAlarms[0].StateValue\",\n      \"DesiredValues\" : [ \"OK\" ]\n    }\n  }, {\n    \"name\" : \"BackupCurrentExecution\",\n    \"action\" : \"aws:executeAwsApi\",\n    \"inputs\" : {\n      \"Service\" : \"elbv2\",\n      \"Api\" : \"DescribeLoadBalancers\",\n      \"LoadBalancerArns\" : [ \"{{ LoadBalancerArn }}\" ]\n    },\n    \"outputs\" : [ {\n      \"Name\" : \"SecurityGroups\",\n      \"Selector\" : \"$.LoadBalancers[0].SecurityGroups\",\n      \"Type\" : \"StringList\"\n    } ]\n  }, {\n    \"name\" : \"GetVpcId\",\n    \"action\" : \"aws:executeAwsApi\",\n    \"inputs\" : {\n      \"Service\" : \"elbv2\",\n      \"Api\" : \"DescribeLoadBalancers\",\n      \"LoadBalancerArns\" : [ \"{{ LoadBalancerArn }}\" ]\n    },\n    \"outputs\" : [ {\n      \"Name\" : \"VpcId\",\n      \"Selector\" : \"$.LoadBalancers[0].VpcId\",\n      \"Type\" : \"String\"\n    } ]\n  }, {\n    \"name\" : \"NumberOfSecurityGroupsIdsToDelete\",\n    \"action\" : \"aws:executeScript\",\n    \"onFailure\" : \"Abort\",\n    \"outputs\" : [ {\n      \"Name\" : \"Length\",\n      \"Selector\" : \"$.Payload\",\n      \"Type\" : \"Integer\"\n    } ],\n    \"inputs\" : {\n      \"Runtime\" : \"python3.8\",\n      \"Handler\" : \"get_length_of_list\",\n      \"InputPayload\" : {\n        \"List\" : \"{{ SecurityGroupIdsToDelete }}\"\n      },\n      \"Script\" : \"import json\\nimport boto3\\nimport logging\\n\\nfrom botocore.config import Config\\nfrom time import sleep\\n\\nlogger = logging.getLogger(__name__)\\nlogger.setLevel(logging.INFO)\\n\\nITS_TIME_TO_SLEEP_A_LITTLE = 0.1\\nANGRY_WORD = 'Property to wait type mismatch: only str, int or list allowed'\\n\\n\\n\\n\\ndef check_required_params(required_params, events):\\n    for key in required_params:\\n        if key not in events:\\n            raise KeyError(f'Requires {key} in events')\\n\\n\\n\\ndef get_length_of_list(events: dict, context: dict) -> int:\\n    \\\"\\\"\\\"\\n    :param events:\\n    :param context:\\n    :return:\\n    \\\"\\\"\\\"\\n    required_params = [\\n        \\\"List\\\"\\n    ]\\n    check_required_params(required_params, events)\\n\\n    return len(events['List'])\"\n    }\n  }, {\n    \"name\" : \"CheckSecurityGroupIdsToDeleteParamIsNotEmpty\",\n    \"action\" : \"aws:branch\",\n    \"inputs\" : {\n      \"Choices\" : [ {\n        \"NextStep\" : \"RemoveSecurityGroupsFromList\",\n        \"Variable\" : \"{{ NumberOfSecurityGroupsIdsToDelete.Length }}\",\n        \"NumericGreater\" : 0\n      } ],\n      \"Default\" : \"CreateEmptySecurityGroup\"\n    }\n  }, {\n    \"name\" : \"RemoveSecurityGroupsFromList\",\n    \"action\" : \"aws:executeScript\",\n    \"outputs\" : [ {\n      \"Name\" : \"NewSecurityGroupIds\",\n      \"Selector\" : \"$.Payload\",\n      \"Type\" : \"StringList\"\n    } ],\n    \"inputs\" : {\n      \"Runtime\" : \"python3.8\",\n      \"Handler\" : \"remove_security_groups_from_list\",\n      \"InputPayload\" : {\n        \"SecurityGroups\" : \"{{ BackupCurrentExecution.SecurityGroups }}\",\n        \"SecurityGroupIdsToDelete\" : \"{{ SecurityGroupIdsToDelete }}\"\n      },\n      \"Script\" : \"import json\\nimport boto3\\nimport logging\\n\\nfrom botocore.config import Config\\nfrom time import sleep\\n\\nlogger = logging.getLogger(__name__)\\nlogger.setLevel(logging.INFO)\\n\\nITS_TIME_TO_SLEEP_A_LITTLE = 0.1\\nANGRY_WORD = 'Property to wait type mismatch: only str, int or list allowed'\\n\\n\\n\\n\\ndef check_required_params(required_params, events):\\n    for key in required_params:\\n        if key not in events:\\n            raise KeyError(f'Requires {key} in events')\\n\\n\\n\\ndef remove_security_groups_from_list(events: dict, context: dict) -> list:\\n    \\\"\\\"\\\"\\n    Return result of subtraction security_group ids from the original list of security group ids\\n    :param events: SecurityGroupIdsToDelete, SecurityGroups\\n    :param context:\\n    \\\"\\\"\\\"\\n    required_params = [\\n        \\\"SecurityGroups\\\",\\n        \\\"SecurityGroupIdsToDelete\\\"\\n    ]\\n    check_required_params(required_params, events)\\n\\n    security_group_ids_to_delete = events['SecurityGroupIdsToDelete']\\n    security_groups = events['SecurityGroups']\\n\\n    new_security_groups = []\\n    for security_group in security_groups:\\n        if security_group not in security_group_ids_to_delete:\\n            new_security_groups.append(security_group)\\n\\n    return new_security_groups\"\n    },\n    \"nextStep\" : \"SetNewSecurityGroups\"\n  }, {\n    \"name\" : \"SetNewSecurityGroups\",\n    \"action\" : \"aws:executeAwsApi\",\n    \"onFailure\" : \"step:RollbackCurrentExecution\",\n    \"onCancel\" : \"step:TriggerRollback\",\n    \"inputs\" : {\n      \"Service\" : \"elbv2\",\n      \"Api\" : \"SetSecurityGroups\",\n      \"LoadBalancerArn\" : \"{{ LoadBalancerArn }}\",\n      \"SecurityGroups\" : \"{{ RemoveSecurityGroupsFromList.NewSecurityGroupIds }}\"\n    },\n    \"outputs\" : [ {\n      \"Name\" : \"LoadBalancerSecurityGroups\",\n      \"Selector\" : \"$.SecurityGroupIds\",\n      \"Type\" : \"StringList\"\n    } ],\n    \"nextStep\" : \"AssertAlarmToBeRed\"\n  }, {\n    \"name\" : \"CreateEmptySecurityGroup\",\n    \"action\" : \"aws:executeScript\",\n    \"onFailure\" : \"step:RollbackCurrentExecution\",\n    \"onCancel\" : \"step:TriggerRollback\",\n    \"outputs\" : [ {\n      \"Name\" : \"EmptySecurityGroupId\",\n      \"Selector\" : \"$.Payload.EmptySecurityGroupId\",\n      \"Type\" : \"String\"\n    } ],\n    \"inputs\" : {\n      \"Runtime\" : \"python3.8\",\n      \"Handler\" : \"create_empty_security_group\",\n      \"InputPayload\" : {\n        \"VpcId\" : \"{{GetVpcId.VpcId}}\",\n        \"Tag\" : \"load-balancer:test:force_network_unavailable\",\n        \"ExecutionId\" : \"{{automation:EXECUTION_ID}}\"\n      },\n      \"Script\" : \"import boto3\\nimport logging\\nfrom datetime import datetime, timezone\\nimport time\\n\\nfrom botocore.exceptions import ClientError\\nfrom dateutil import parser\\n\\nlogger = logging.getLogger()\\nlogger.setLevel(logging.INFO)\\n\\n\\n\\n\\ndef remove_empty_security_group(events, context):\\n    required_params = [\\n        'EmptySecurityGroupId'\\n    ]\\n\\n    for key in required_params:\\n        if key not in events:\\n            raise KeyError(f'Requires {key} in events')\\n\\n    time_to_wait = 1800\\n    ec2_client = boto3.client('ec2')\\n    if 'Timeout' in events:\\n        time_to_wait = events['Timeout']\\n    timeout_timestamp = time.time() + int(time_to_wait)\\n\\n    while time.time() < timeout_timestamp:\\n        try:\\n            logger.info(f'Deleting empty security group: {events[\\\"EmptySecurityGroupId\\\"]}')\\n            group_list = ec2_client.describe_security_groups(\\n                Filters=[\\n                    {\\n                        'Name': 'group-id',\\n                        'Values': [\\n                            events[\\\"EmptySecurityGroupId\\\"],\\n                        ]\\n                    },\\n                ]\\n            )\\n            if not group_list['SecurityGroups']:\\n                break\\n            group_id = group_list['SecurityGroups'][0]['GroupId']\\n            logger.info(f'Deleting empty security group: {group_id}')\\n            response = ec2_client.delete_security_group(\\n                GroupId=group_id\\n            )\\n            if response['ResponseMetadata']['HTTPStatusCode'] < 400:\\n                break\\n        except ClientError as error:\\n            if error.response['Error']['Code'] == 'InvalidGroup.NotFound':\\n                logger.info(f\\\"Empty security group doesn't exist: {events['EmptySecurityGroupId']}\\\")\\n                break\\n            elif error.response['Error']['Code'] == 'DependencyViolation' \\\\\\n                    or error.response['Error']['Code'] == 'RequestLimitExceeded':\\n                time.sleep(5)\\n                continue\\n            else:\\n                raise error\\n\\n    if datetime.timestamp(datetime.now()) > timeout_timestamp:\\n        raise TimeoutError(f'Security group {events[\\\"EmptySecurityGroupId\\\"]} couldn\\\\'t '\\n                           f'be deleted in {time_to_wait} seconds')\\n\\n\\n\\n\\ndef create_empty_security_group(events: dict, context: dict) -> dict:\\n    \\\"\\\"\\\"\\n    Creates a empty security group in provided VPC\\n    The name of this SG contains Execution Id of the SSM execution\\n    :param events: The dictionary that supposed to have the following keys:\\n        * `VpcId` - The vpc id to create SG into\\n        * `ExecutionId` - The execution id of SSM\\n        * `Tag` - a value of `AWSResilienceHub` tag to assign\\n    :param context:\\n    :return: Dict with two keys:\\n        * EmptySecurityGroupId - string wih SG id, you can use it as String parameter in SSM\\n        * EmptySecurityGroupId - one element list wih SG id, you can use it as StringList parameter in SSM\\n    \\\"\\\"\\\"\\n    required_params = [\\n        'VpcId',\\n        'ExecutionId',\\n        'Tag'\\n    ]\\n\\n    for key in required_params:\\n        if key not in events:\\n            raise KeyError(f'Requires {key} in events')\\n\\n    ec2_client = boto3.client('ec2')\\n\\n    group_id = ec2_client.create_security_group(\\n        Description=f'Empty SG for executionID {events[\\\"ExecutionId\\\"]}',\\n        GroupName=f'EmptySG-{events[\\\"ExecutionId\\\"]}',\\n        VpcId=events['VpcId'],\\n        TagSpecifications=[\\n            {\\n                'ResourceType': 'security-group',\\n                'Tags': [\\n                    {\\n                        'Key': 'AWSResilienceHub',\\n                        'Value': events['Tag']\\n                    },\\n                ]\\n            }\\n        ]\\n    )['GroupId']\\n\\n    result = ec2_client.revoke_security_group_egress(\\n        GroupId=group_id,\\n        IpPermissions=[\\n            {\\n                \\\"IpProtocol\\\": \\\"-1\\\",\\n                \\\"IpRanges\\\": [\\n                    {\\n                        \\\"CidrIp\\\": \\\"0.0.0.0/0\\\"\\n                    }\\n                ],\\n                \\\"Ipv6Ranges\\\": [],\\n                \\\"PrefixListIds\\\": [],\\n                \\\"UserIdGroupPairs\\\": []\\n            }\\n        ]\\n    )\\n    if not result['Return']:\\n        remove_empty_security_group({'EmptySecurityGroupId': group_id}, context)\\n        raise ClientError(\\n            error_response={\\n                \\\"Error\\\":\\n                {\\n                    \\\"Code\\\": \\\"CouldNotRevoke\\\",\\n                    \\\"Message\\\": f\\\"Could not revoke egress from sg: {group_id}\\\"\\n                }\\n            },\\n            operation_name='RevokeSecurityGroupEgress'\\n        )\\n    return {'EmptySecurityGroupId': group_id, 'EmptySecurityGroupIdList': [group_id]}\"\n    },\n    \"nextStep\" : \"SetEmptySecurityGroupForLoadBalancer\"\n  }, {\n    \"name\" : \"SetEmptySecurityGroupForLoadBalancer\",\n    \"action\" : \"aws:executeAwsApi\",\n    \"onFailure\" : \"step:RollbackCurrentExecution\",\n    \"onCancel\" : \"step:TriggerRollback\",\n    \"inputs\" : {\n      \"Service\" : \"elbv2\",\n      \"Api\" : \"SetSecurityGroups\",\n      \"LoadBalancerArn\" : \"{{ LoadBalancerArn }}\",\n      \"SecurityGroups\" : [ \"{{ CreateEmptySecurityGroup.EmptySecurityGroupId }}\" ]\n    },\n    \"outputs\" : [ {\n      \"Name\" : \"LoadBalancerSecurityGroups\",\n      \"Selector\" : \"$.SecurityGroupIds\",\n      \"Type\" : \"StringList\"\n    } ],\n    \"nextStep\" : \"AssertAlarmToBeRed\"\n  }, {\n    \"name\" : \"AssertAlarmToBeRed\",\n    \"action\" : \"aws:waitForAwsResourceProperty\",\n    \"maxAttempts\" : 1,\n    \"timeoutSeconds\" : 900,\n    \"onFailure\" : \"step:RollbackCurrentExecution\",\n    \"onCancel\" : \"step:TriggerRollback\",\n    \"inputs\" : {\n      \"Service\" : \"cloudwatch\",\n      \"Api\" : \"DescribeAlarms\",\n      \"AlarmNames\" : [ \"{{UnHealthyHostCountAlarmName}}\" ],\n      \"PropertySelector\" : \"$.MetricAlarms[0].StateValue\",\n      \"DesiredValues\" : [ \"ALARM\" ]\n    }\n  }, {\n    \"name\" : \"RollbackCurrentExecution\",\n    \"action\" : \"aws:executeAwsApi\",\n    \"onCancel\" : \"step:TriggerRollback\",\n    \"inputs\" : {\n      \"Service\" : \"elbv2\",\n      \"Api\" : \"SetSecurityGroups\",\n      \"LoadBalancerArn\" : \"{{ LoadBalancerArn }}\",\n      \"SecurityGroups\" : \"{{ BackupCurrentExecution.SecurityGroups }}\"\n    },\n    \"outputs\" : [ {\n      \"Name\" : \"LoadBalancerSecurityGroups\",\n      \"Selector\" : \"$.SecurityGroupIds\",\n      \"Type\" : \"StringList\"\n    } ]\n  }, {\n    \"name\" : \"DeleteEmptySecurityGroupIfCreated\",\n    \"action\" : \"aws:branch\",\n    \"inputs\" : {\n      \"Choices\" : [ {\n        \"NextStep\" : \"DeleteEmptySecurityGroup\",\n        \"Variable\" : \"{{ NumberOfSecurityGroupsIdsToDelete.Length }}\",\n        \"NumericEquals\" : 0\n      } ],\n      \"Default\" : \"AssertAlarmToBeGreen\"\n    }\n  }, {\n    \"name\" : \"DeleteEmptySecurityGroup\",\n    \"action\" : \"aws:executeScript\",\n    \"onCancel\" : \"step:TriggerRollback\",\n    \"timeoutSeconds\" : 900,\n    \"maxAttempts\" : 3,\n    \"inputs\" : {\n      \"Runtime\" : \"python3.8\",\n      \"Handler\" : \"remove_empty_security_group\",\n      \"InputPayload\" : {\n        \"EmptySecurityGroupId\" : \"{{CreateEmptySecurityGroup.EmptySecurityGroupId}}\"\n      },\n      \"Script\" : \"import boto3\\nimport logging\\nfrom datetime import datetime, timezone\\nimport time\\n\\nfrom botocore.exceptions import ClientError\\nfrom dateutil import parser\\n\\nlogger = logging.getLogger()\\nlogger.setLevel(logging.INFO)\\n\\n\\n\\n\\ndef remove_empty_security_group(events, context):\\n    required_params = [\\n        'EmptySecurityGroupId'\\n    ]\\n\\n    for key in required_params:\\n        if key not in events:\\n            raise KeyError(f'Requires {key} in events')\\n\\n    time_to_wait = 1800\\n    ec2_client = boto3.client('ec2')\\n    if 'Timeout' in events:\\n        time_to_wait = events['Timeout']\\n    timeout_timestamp = time.time() + int(time_to_wait)\\n\\n    while time.time() < timeout_timestamp:\\n        try:\\n            logger.info(f'Deleting empty security group: {events[\\\"EmptySecurityGroupId\\\"]}')\\n            group_list = ec2_client.describe_security_groups(\\n                Filters=[\\n                    {\\n                        'Name': 'group-id',\\n                        'Values': [\\n                            events[\\\"EmptySecurityGroupId\\\"],\\n                        ]\\n                    },\\n                ]\\n            )\\n            if not group_list['SecurityGroups']:\\n                break\\n            group_id = group_list['SecurityGroups'][0]['GroupId']\\n            logger.info(f'Deleting empty security group: {group_id}')\\n            response = ec2_client.delete_security_group(\\n                GroupId=group_id\\n            )\\n            if response['ResponseMetadata']['HTTPStatusCode'] < 400:\\n                break\\n        except ClientError as error:\\n            if error.response['Error']['Code'] == 'InvalidGroup.NotFound':\\n                logger.info(f\\\"Empty security group doesn't exist: {events['EmptySecurityGroupId']}\\\")\\n                break\\n            elif error.response['Error']['Code'] == 'DependencyViolation' \\\\\\n                    or error.response['Error']['Code'] == 'RequestLimitExceeded':\\n                time.sleep(5)\\n                continue\\n            else:\\n                raise error\\n\\n    if datetime.timestamp(datetime.now()) > timeout_timestamp:\\n        raise TimeoutError(f'Security group {events[\\\"EmptySecurityGroupId\\\"]} couldn\\\\'t '\\n                           f'be deleted in {time_to_wait} seconds')\"\n    }\n  }, {\n    \"name\" : \"AssertAlarmToBeGreen\",\n    \"action\" : \"aws:waitForAwsResourceProperty\",\n    \"maxAttempts\" : 1,\n    \"timeoutSeconds\" : 1200,\n    \"inputs\" : {\n      \"Service\" : \"cloudwatch\",\n      \"Api\" : \"DescribeAlarms\",\n      \"AlarmNames\" : [ \"{{UnHealthyHostCountAlarmName}}\" ],\n      \"PropertySelector\" : \"$.MetricAlarms[0].StateValue\",\n      \"DesiredValues\" : [ \"OK\" ]\n    },\n    \"isEnd\" : true\n  }, {\n    \"name\" : \"TriggerRollback\",\n    \"action\" : \"aws:executeScript\",\n    \"onFailure\" : \"Abort\",\n    \"outputs\" : [ {\n      \"Name\" : \"RollbackExecutionId\",\n      \"Selector\" : \"$.Payload.RollbackExecutionId\",\n      \"Type\" : \"String\"\n    } ],\n    \"inputs\" : {\n      \"Runtime\" : \"python3.8\",\n      \"Handler\" : \"start_rollback_execution\",\n      \"InputPayload\" : {\n        \"ExecutionId\" : \"{{automation:EXECUTION_ID}}\"\n      },\n      \"Script\" : \"import json\\nimport boto3\\nfrom botocore.config import Config\\n\\n\\n\\n\\ndef start_rollback_execution(events, context):\\n    output = {}\\n    config = Config(retries={'max_attempts': 20, 'mode': 'standard'})\\n    ssm = boto3.client('ssm', config=config)\\n\\n    if 'ExecutionId' not in events or not events['ExecutionId']:\\n        raise KeyError('Requires not empty ExecutionId')\\n\\n    response = ssm.get_automation_execution(AutomationExecutionId=events['ExecutionId'])\\n\\n    # Get parameters for current execution and add IsRollback and PreviousExecutionId\\n    response_parameters = response['AutomationExecution']['Parameters']\\n    response_parameters['IsRollback'] = ['true']\\n    response_parameters['PreviousExecutionId'] = [events['ExecutionId']]\\n\\n    rollback_execution_response = ssm.start_automation_execution(\\n        DocumentName=response['AutomationExecution']['DocumentName'],\\n        DocumentVersion=response['AutomationExecution']['DocumentVersion'],\\n        Parameters=response_parameters\\n    )\\n    output['RollbackExecutionId'] = rollback_execution_response['AutomationExecutionId']\\n    return output\"\n    },\n    \"isEnd\" : true\n  } ]\n}",
  "CreatedDate": "2022-08-16T09:16:34.649Z",
  "DisplayName": null,
  "DocumentFormat": {
    "Value": "JSON"
  },
  "DocumentType": {
    "Value": "Automation"
  },
  "DocumentVersion": "2",
  "Name": "AWSResilienceHub-ForceNetworkUnavailableTest_2020-04-01",
  "Requires": [],
  "ReviewStatus": null,
  "Status": {
    "Value": "Active"
  },
  "StatusInformation": null,
  "VersionName": null,
  "ResponseMetadata": {
    "RequestId": "c462c752-0b72-45de-84ab-b7b75c73bf04",
    "Metadata": {},
    "ChecksumAlgorithm": 0,
    "ChecksumValidationStatus": 0
  },
  "ContentLength": 25330,
  "HttpStatusCode": 200,
  "LoggedAt": "2023-02-03T07:12:13.1905086+00:00"
}
