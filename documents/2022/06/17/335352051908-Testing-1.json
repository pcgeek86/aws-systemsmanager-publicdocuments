{
  "AttachmentsContent": [],
  "Content": "{\n    \"schemaVersion\": \"1.2\",\n    \"description\": \"List missing Microsoft Windows updates.\",\n    \"parameters\": {\n        \"UpdateLevel\": {\n            \"type\": \"String\",\n            \"default\": \"Important\",\n            \"description\": \"Choose one - Important: Search for missing updates classified as Important by Windows Update. Optional: Search for missing updates classified as Optional by Windows Update. All: Search for all missing Windows updates.\",\n            \"allowedValues\": [\n                \"None\",\n                \"All\",\n                \"Important\",\n                \"Optional\"\n            ]\n        },\n        \"KbArticleIds\": {\n            \"type\": \"String\",\n            \"default\": \"\",\n            \"description\": \"(Optional) Search for specific Microsoft Knowledge Base (KB) article IDs. You can search for multiple IDs using comma-separated values. Valid formats: KB9876543 or 9876543.\",\n            \"allowedPattern\": \"(^$)|^((KB){0,1}[0-9]{1,7})(,((KB){0,1}[0-9]{1,7}))*$\"\n        }\n    },\n    \"runtimeConfig\": {\n        \"aws:runPowerShellScript\": {\n            \"properties\": [\n                {\n                    \"id\": \"0.aws:runPowerShellScript\",\n                    \"timeoutSeconds\": 7200,\n                    \"runCommand\": [\n                        \"# Check backward compatiability first with OS, Ec2Config and/or SSMAgent version\",\n                        \"if ([Environment]::OSVersion.Version.Major -le 5) {\",\n                        \"    Write-Error \\\"This command is not supported on Windows 2003 or lower.\\\"\",\n                        \"    exit -1\",\n                        \"} elseif ([Environment]::OSVersion.Version -ge \\\"10.0\\\") {\",\n                        \"    $ssmAgentService = Get-ItemProperty \\\"HKLM:SYSTEM\\\\CurrentControlSet\\\\Services\\\\AmazonSSMAgent\\\"\",\n                        \"    $sku = (Get-CimInstance -ClassName Win32_OperatingSystem).OperatingSystemSKU\",\n                        \"    if ($sku -eq 143 -or $sku -eq 144) {\",\n                        \"        Write-Host \\\"This command is not supported on Windows 2016 Nano Server.\\\"\",\n                        \"        exit -1\",\n                        \"    } elseif (-not $ssmAgentService -or $ssmAgentService.Version -le \\\"1.2.371.0\\\") {\",\n                        \"        Write-Host \\\"This command is not supported with SSM Agent 1.2.371 or lower on Windows 2016.\\\"\",\n                        \"        exit -1\",\n                        \"    }\",\n                        \"} else {\",\n                        \"    $minVersion = New-Object System.Version('3.14.786')\",\n                        \"    $ec2Config = 'C:\\\\Program Files\\\\Amazon\\\\Ec2ConfigService\\\\Ec2Config.exe'\",\n                        \"    $ec2ConfigVersion = New-Object System.Version([System.Diagnostics.FileVersionInfo]::GetVersionInfo($ec2Config).FileVersion)\",\n                        \"    if ($ec2ConfigVersion.CompareTo($minVersion) -lt 0) {\",\n                        \"        Write-Error (\\\"This command requires EC2Config version {0} or higher. Please run the command AWS-UpdateEC2Config to update EC2Config and try again.\\\" -f $minVersion.ToString())\",\n                        \"        exit -1\",\n                        \"    }\",                        \n                        \"}\",\n                        \"\",\n                        \"$appName = 'PatchNow'\",\n                        \"$psModuleFileName = 'Amazon.PatchNow.dll'\",\n                        \"$s3FileName = 'Amazon.PatchNow-1.0.zip'\",\n                        \"$s3Location = 'https://s3{0}.amazonaws.com/aws-ssm-{1}/' + $appName.ToLower() + '/' + $s3FileName\",\n                        \"$s3FileHash = 'ed09ae7c6085cdfaa7eb11b0dfff5a69e7c9af2f576b8db6725e9363a449321a'\",\n                        \"$psModuleFileHash = 'cf45d68c31e78de50c3b821e85fd068789c92d6edc316837d2d9e50aa5ddebac'\",\n                        \"$metadataLocation = 'http://169.254.169.254/latest/dynamic/instance-identity/document/region'\",\n                        \"$tempDirectory = $env:TEMP\",\n                        \"$downloadPath = [IO.Path]::Combine($tempDirectory, $s3FileName)\",\n                        \"$psModuleInstallLocation = [IO.Path]::Combine([Environment]::GetEnvironmentVariable([Environment+SpecialFolder]::ProgramFiles), 'Amazon', $appName)\",\n                        \"$psModuleInstallFile = [IO.Path]::Combine($psModuleInstallLocation, $psModuleFileName)\",\n                        \"$log = @()\",\n                        \"\",\n\t\t\t\"function ExtractZipCoreOs ([string]$zipFilePath, [string]$destPath) {\",\n\t\t\t\"    try\",\n\t\t\t\"    {\",\n\t\t\t\"        [System.Reflection.Assembly]::LoadWithPartialName(\\\"System.IO.Compression.FileSystem\\\") | Out-Null\",\n\t\t\t\"\",\n\t\t\t\"        $zip = [System.IO.Compression.ZipFile]::OpenRead($zipFilePath)\",\n\t\t\t\"\",\n\t\t\t\"        foreach ($item in $zip.Entries) {\",\n\t\t\t\"            $extractedPath = Join-Path $destPath $item.FullName\",\n\t\t\t\"\",\n\t\t\t\"            if ($item.Length -eq 0) {\",\n\t\t\t\"                if ((Test-Path $extractedPath) -eq 0) {\",\n\t\t\t\"                    mkdir $extractedPath | Out-Null\",\n\t\t\t\"                }\",\n\t\t\t\"            } else {\",\n\t\t\t\"                $fileParent = Split-Path $extractedPath\",\n\t\t\t\"\",\n\t\t\t\"                if ((Test-Path $fileParent) -eq 0) {\",\n\t\t\t\"                    mkdir $fileParent | Out-Null\",\n\t\t\t\"                }\",\n\t\t\t\"\",\n\t\t\t\"                [System.IO.Compression.ZipFileExtensions]::ExtractToFile($item,(Join-Path -Path $fileParent -ChildPath $item.FullName), $true)\",\n\t\t\t\"            }\",\n\t\t\t\"        }\",\n\t\t\t\"    } \",\n\t\t\t\"    catch\",\n\t\t\t\"    {\",\n\t\t\t\"        throw \\\"Error encountered when extracting PatchNow zip file.`n$($_.Exception.Message)\\\"\",\n\t\t\t\"    }\",\n\t\t\t\"    finally\",\n\t\t\t\"    {\",\n\t\t\t\"        $zip.Dispose()\",\n\t\t\t\"    }\",\n\t\t\t\"}\",\n                        \"\",\n                        \"function RunModule {\",\n                        \"    Import-Module $psModuleInstallFile\",\n                        \"\",\n                        \"    $cmd = 'Find-WindowsUpdates -UpdateLevel ' + '{{ UpdateLevel }}'\",\n                        \"    $kbs = '{{ KbArticleIds }}'.Trim()\",\n                        \"\",\n                        \"    if ($kbs) {\",\n                        \"        $cmd = $cmd + ' -KbArticleIds ' + (ProcessKbList $kbs)\",\n                        \"    }\",\n                        \"\",\n                        \"    $response = iex $cmd\",\n                        \"\",\n                        \"    if ($response.ExitCode -ne 3010)\",\n                        \"    {\",\n                        \"        $response.Report\",\n                        \"        $response.Summary.ImportantUpdates\",\n                        \"        $response.Summary.OptionalUpdates\",\n                        \"    }\",\n                        \"\",\n                        \"    exit $response.ExitCode\",\n                        \"}\",\n                        \"\",\n                        \"function ProcessKbList ($kbs) {\",\n                        \"    $delim = (',',';',' ','|')\",\n                        \"    $values = ($kbs -split {$delim -contains $_}) | ForEach-Object { $_.Trim() } | Where-Object { $_ -ne '' }\",\n                        \"\",\n                        \"    return ($values -join ',')\",\n                        \"}\",\n                        \"\",\n                        \"function CheckFileHash ($filePath, $fileHash) {\",\n                        \"    if (Test-Path($filePath)) {\",\n                        \"        $fileStream = New-Object System.IO.FileStream($filePath, [System.IO.FileMode]::Open, [System.IO.FileAccess]::Read)\",\n                        \"        $sha256 = [System.Security.Cryptography.HashAlgorithm]::Create('System.Security.Cryptography.SHA256CryptoServiceProvider')\",\n                        \"        $sourceHash = [System.BitConverter]::ToString($sha256.ComputeHash($fileStream), 0).Replace('-', '').ToLowerInvariant()\",\n                        \"        $sha256.Dispose()\",\n                        \"        $fileStream.Dispose()\",\n                        \"        \",\n                        \"        if ($sourceHash -ne $fileHash) {\",\n                        \"            return $false\",\n                        \"        }\",\n                        \"        else {\",\n                        \"            return $true\",\n                        \"        }\",\n                        \"    }\",\n                        \"    else {\",\n                        \"        return $false\",\n                        \"    }\",\n                        \"}\",\n                        \"\",\n                        \"function PrepareToRunModule {\",\n                        \"    try {\",\n                        \"        $isInstalled = $false\",\n                        \"\",\n                        \"        if (-Not (CheckFileHash $psModuleInstallFile $psModuleFileHash)) {\",\n                        \"            try {\",\n                        \"                $log += (\\\"Preparing to download {0} PowerShell module from S3.`r`n\\\" -f $appName)\",\n                        \"                $log += \\\"Obtaining instance region from instance metadata.`r`n\\\"\",\n                        \"                [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\",\n                        \"                $metadata = (New-Object Net.WebClient).DownloadString($metadataLocation)\",\n                        \"                $region = (ConvertFrom-JSON $metadata).region\",\n                        \"                if ($region -eq 'us-east-1') {\",\n                        \"                    $s3Location = $s3Location -f '', $region\",\n                        \"                } else {\",\n                        \"                    $s3Address = '-' + $region\",\n                        \"                    $s3Location = $s3Location -f $s3Address, $region\",\n                        \"                }\",\n                        \"\",\n                        \"                if (-Not (Test-Path($psModuleInstallLocation))) {\",\n                        \"                    $noOp = New-Item $psModuleInstallLocation -ItemType Directory\",\n                        \"                }\",\n                        \"\",\n                        \"                if (-Not (Test-Path($tempDirectory))) {\",\n                        \"                    $noOp = New-Item $tempDirectory -ItemType Directory\",\n                        \"                }\",\n                        \"\",\n                        \"                $log += (\\\"Downloading {0} PowerShell module from {1} to {2}.`r`n\\\" -f $appName, $s3Location, $downloadPath)\",\n                        \"                (New-Object Net.WebClient).DownloadFile($s3Location, $downloadPath)\",\n                        \"\",\n                        \"                if (CheckFileHash $downloadPath $s3FileHash ) {\",\n                        \"                    $log += (\\\"Extracting {0} zip file contents to temporary folder.`r`n\\\" -f $appName)\",\n\t\t\t\"                    try {\",\n\t\t\t\"                        (New-Object -Com Shell.Application).namespace($psModuleInstallLocation).CopyHere((New-Object -Com Shell.Application).namespace($downloadPath).Items(), 16)\",\n\t\t\t\"                    } catch [Exception] {\",\n\t\t\t\"                        ExtractZipCoreOs $downloadPath $psModuleInstallLocation\",\n\t\t\t\"                    }\",\n                        \"                }\",\n                        \"                else {\",\n                        \"                    throw ('The SHA hash of the {0} S3 source file does not match the expected value.' -f $appName)\",\n                        \"                }\",\n                        \"            } catch [Exception] {\",\n                        \"                $exceptionMessage = 'Exception thrown while downloading {0} PowerShell module with message: {1}' -f $appName, $_.Exception.Message\",\n                        \"                throw $exceptionMessage\",\n                        \"            }\",\n                        \"\",\n                        \"            $log += (\\\"Verifying SHA 256 of the {0} PowerShell module.`r`n\\\" -f $appName)\",\n                        \"            if (CheckFileHash $psModuleInstallFile $psModuleFileHash) {\",\n                        \"                $log += (\\\"Successfully downloaded and installed the {0} PowerShell module.`r`n\\\" -f $appName)\",\n                        \"            }\",\n                        \"            else {\",\n                        \"                throw ('The SHA hash of the {0} PowerShell module does not match the expected value.' -f $appName)\",\n                        \"            }\",\n                        \"        }\",\n                        \"    }\",\n                        \"    catch [Exception] {\",\n                        \"        $msg = \\\"An error occurred when executing {0}: {1}`r`nDetails:`r`n{2}\\\" -f $appName, $_.Exception.Message, $log\",\n                        \"        Write-Error $msg\",\n                        \"    \",\n                        \"        exit -1\",\n                        \"    }\",\n                        \"    finally {\",\n                        \"        if (Test-Path $downloadPath) {\",\n                        \"            rm $downloadPath\",\n                        \"        }\",\n                        \"    }\",\n                        \"}\",\n                        \"\",\n                        \"# Run the script\",\n                        \"PrepareToRunModule\",\n                        \"RunModule\"\n                    ]\n                }\n            ]\n        }\n    }\n}\n",
  "CreatedDate": "2017-07-21T21:52:48.975Z",
  "DisplayName": null,
  "DocumentFormat": {
    "Value": "JSON"
  },
  "DocumentType": {
    "Value": "Command"
  },
  "DocumentVersion": "1",
  "Name": "arn:aws:ssm:us-west-2:335352051908:document/Testing",
  "Requires": [],
  "ReviewStatus": null,
  "Status": {
    "Value": "Active"
  },
  "StatusInformation": null,
  "VersionName": null,
  "ResponseMetadata": {
    "RequestId": "c21b3a4e-0476-4dc6-9bbe-7b7eb1746755",
    "Metadata": {},
    "ChecksumAlgorithm": 0,
    "ChecksumValidationStatus": 0
  },
  "ContentLength": 14453,
  "HttpStatusCode": 200,
  "LoggedAt": "2022-06-17T07:13:34.7389329+00:00"
}
