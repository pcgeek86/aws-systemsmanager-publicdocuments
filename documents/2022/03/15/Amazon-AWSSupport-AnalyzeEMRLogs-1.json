{
  "AttachmentsContent": [],
  "Content": "{\n  \"description\": \"This is a SSM Automation Document which tries to detect an error (if there is any) while you are running an EMR job on a Cluster. It provides you 3 options: \\\"To run automation once\\\", \\\"Schedule automation to run at a specific time interval\\\", \\\"Remove schedule created via automation\\\".\\n\",\n  \"schemaVersion\": \"0.3\",\n  \"assumeRole\": \"{{ AutomationAssumeRole }}\",\n  \"outputs\": [\n    \"GetClusterInformation.ClusterName\",\n    \"GetClusterInformation.ClusterState\",\n    \"ListingClusterInstances.InstanceIDs\",\n    \"CreatingScheduleCloudFormationStack.StackStatus\",\n    \"RemovingScheduleByDeletingScheduleCloudFormationStack.StackStatus\",\n    \"CheckIfLogGroupExists.output\",\n    \"FindLogPatternOnEMRNode.CommandId\"\n  ],\n  \"parameters\": {\n    \"ClusterID\": {\n      \"type\": \"String\",\n      \"description\": \"This is the cluster ID of the cluster whose nodes logs will be monitored.\",\n      \"allowedPattern\": \"^j-[A-Z0-9]{1,13}$\"\n    },\n    \"AutomationAssumeRole\": {\n      \"type\": \"String\",\n      \"description\": \"The ARN of the role that allows Automation to perform the actions on your behalf.\"\n    },\n    \"Operation\": {\n      \"type\": \"String\",\n      \"description\": \"Operation to perform on the cluster.\",\n      \"allowedValues\": [\n        \"Schedule\",\n        \"Run Once\",\n        \"Remove Schedule\"\n      ]\n    },\n    \"IntervalTime\": {\n      \"type\": \"String\",\n      \"description\": \"The Interval time represent the duration after which the execution of this automation document will be triggered regularly. Only applicable if you select 'Schedule' as 'Operation'\",\n      \"allowedValues\": [\n        \"5 minutes\",\n        \"10 minutes\",\n        \"15 minutes\",\n        \"None\"\n      ],\n      \"default\": \"5 minutes\"\n    },\n    \"LogToCloudWatchLogs\": {\n      \"type\": \"String\",\n      \"description\": \"This will create a cloudwatch log group with the name specified in parameter \\\"CloudWatchLogGroup\\\" to store any matched log lines.\",\n      \"allowedValues\": [\n        \"Yes\",\n        \"No\"\n      ],\n      \"default\": \"No\"\n    },\n    \"CloudWatchLogGroup\": {\n      \"type\": \"String\",\n      \"description\": \"Cloudwatch log group name to store any matched log lines. Only applicable if you select \\\"Yes\\\" in \\\"LogToCloudWatchLogs\\\" parameter.\",\n      \"default\": \"AWSSupport-AnalyzeEMRLogs\",\n      \"allowedPattern\": \"^[0-9A-Za-z\\\\-\\\\_]{1,512}$\"\n    },\n    \"CreateLogInsightsDashboard\": {\n      \"type\": \"String\",\n      \"description\": \"If you choose option \\\"Yes\\\", logs will be pushed to the log group with name as mentioned in  parameter \\\"CloudWatchLogGroup\\\" and a cloudwatch Dashboard will also be created if it does not exists already. Choosing option \\\"No\\\" will simply push the log in the log group with name as mentioned in  parameter \\\"CloudWatchLogGroup\\\". Only applicable if you select \\\"Yes\\\" in \\\"LogToCloudWatchLogs\\\" parameter.\",\n      \"default\": \"No\",\n      \"allowedValues\": [\n        \"Yes\",\n        \"No\"\n      ]\n    },\n    \"CreateMetricFilters\": {\n      \"type\": \"String\",\n      \"allowedValues\": [\n        \"Yes\",\n        \"No\"\n      ],\n      \"description\": \"Yes, if you want to create metric filters. Only applicable if you select \\\"Yes\\\" in \\\"LogToCloudWatchLogs\\\" parameter.\",\n      \"default\": \"No\"\n    }\n  },\n  \"mainSteps\": [\n    {\n      \"name\": \"GetClusterInformation\",\n      \"nextStep\": \"BranchForRemoveSchedule\",\n      \"action\": \"aws:executeAwsApi\",\n      \"outputs\": [\n        {\n          \"Name\": \"ClusterName\",\n          \"Selector\": \"$.Cluster.Name\",\n          \"Type\": \"String\"\n        },\n        {\n          \"Name\": \"ClusterState\",\n          \"Selector\": \"$.Cluster.Status.State\",\n          \"Type\": \"String\"\n        }\n      ],\n      \"inputs\": {\n        \"Service\": \"emr\",\n        \"Api\": \"DescribeCluster\",\n        \"ClusterId\": \"{{ ClusterID }}\"\n      },\n      \"description\": \"This step execute an AWS API call which describes the cluster if provided with the cluster ID. \\nThis step also fetch the name of the cluster and show that in output.\"\n    },\n    {\n      \"name\": \"CheckingIfClusterExists\",\n      \"nextStep\": \"ListingClusterInstances\",\n      \"action\": \"aws:assertAwsResourceProperty\",\n      \"inputs\": {\n        \"Service\": \"emr\",\n        \"Api\": \"DescribeCluster\",\n        \"ClusterId\": \"{{ ClusterID }}\",\n        \"PropertySelector\": \"$.Cluster.Status.State\",\n        \"DesiredValues\": [\n          \"RUNNING\",\n          \"WAITING\"\n        ]\n      },\n      \"description\": \"This step checks if cluster is in desired state.\"\n    },\n    {\n      \"name\": \"ListingClusterInstances\",\n      \"nextStep\": \"CheckingIfInstancesAreManagedBySSM\",\n      \"action\": \"aws:executeAwsApi\",\n      \"inputs\": {\n        \"Service\": \"emr\",\n        \"Api\": \"ListInstances\",\n        \"InstanceStates\": [\n          \"RUNNING\"\n        ],\n        \"ClusterId\": \"{{ ClusterID }}\"\n      },\n      \"description\": \"In this step, an AWS API call will fetch the instance ID's of all running nodes in EMR cluster.\",\n      \"outputs\": [\n        {\n          \"Name\": \"InstanceIDs\",\n          \"Selector\": \"$.Instances..Ec2InstanceId\",\n          \"Type\": \"StringList\"\n        }\n      ]\n    },\n    {\n      \"name\": \"BranchForRemoveSchedule\",\n      \"action\": \"aws:branch\",\n      \"inputs\": {\n        \"Choices\": [\n          {\n            \"NextStep\": \"CheckingIfStackExists\",\n            \"Variable\": \"{{Operation}}\",\n            \"StringEquals\": \"Remove Schedule\"\n          }\n        ],\n        \"Default\": \"CheckingIfClusterExists\"\n      },\n      \"description\": \"Branch to Remove Schedule\"\n    },\n    {\n      \"name\": \"CheckingIfInstancesAreManagedBySSM\",\n      \"nextStep\": \"BranchOnOperation\",\n      \"action\": \"aws:assertAwsResourceProperty\",\n      \"inputs\": {\n        \"Service\": \"ssm\",\n        \"Api\": \"DescribeInstanceInformation\",\n        \"PropertySelector\": \"$.InstanceInformationList[0].PingStatus\",\n        \"DesiredValues\": [\n          \"Online\"\n        ],\n        \"InstanceInformationFilterList\": [\n          {\n            \"key\": \"InstanceIds\",\n            \"valueSet\": [\n              \"{{ ListingClusterInstances.InstanceIDs }}\"\n            ]\n          }\n        ]\n      },\n      \"description\": \"Check if the SSM agent is running on nodes or not.\"\n    },\n    {\n      \"name\": \"BranchOnOperation\",\n      \"action\": \"aws:branch\",\n      \"inputs\": {\n        \"Choices\": [\n          {\n            \"NextStep\": \"BranchOnLogToCloudWatchLogsChoice\",\n            \"Variable\": \"{{Operation}}\",\n            \"StringEquals\": \"Run Once\"\n          },\n          {\n            \"NextStep\": \"CreatingScheduleCloudFormationStack\",\n            \"Variable\": \"{{Operation}}\",\n            \"StringEquals\": \"Schedule\"\n          }\n        ]\n      },\n      \"description\": \"Branch to Check to Run this automation document once or on schedule\"\n    },\n    {\n      \"name\": \"BranchOnLogToCloudWatchLogsChoice\",\n      \"action\": \"aws:branch\",\n      \"inputs\": {\n        \"Choices\": [\n          {\n            \"NextStep\": \"CheckIfLogGroupExists\",\n            \"Variable\": \"{{LogToCloudWatchLogs}}\",\n            \"StringEquals\": \"Yes\"\n          },\n          {\n            \"NextStep\": \"FindLogPatternOnEMRNode\",\n            \"Variable\": \"{{LogToCloudWatchLogs}}\",\n            \"StringEquals\": \"No\"\n          }\n        ]\n      },\n      \"description\": \"It is a branch step to branch the step based on the input selected in LogToCloudWatchLogs parameter.\"\n    },\n    {\n      \"name\": \"CheckingIfStackExists\",\n      \"nextStep\": \"RemovingScheduleByDeletingScheduleCloudFormationStack\",\n      \"action\": \"aws:executeAwsApi\",\n      \"inputs\": {\n        \"Api\": \"DescribeStacks\",\n        \"Service\": \"cloudformation\",\n        \"StackName\": \"AWSSupport-AnalyzeEMRLogs-{{ClusterID}}\"\n      },\n      \"outputs\": [\n        {\n          \"Name\": \"StackId\",\n          \"Selector\": \"$.Stacks[0].StackId\",\n          \"Type\": \"String\"\n        },\n        {\n          \"Name\": \"StackName\",\n          \"Selector\": \"$.Stacks[0].StackName\",\n          \"Type\": \"String\"\n        }\n      ],\n      \"description\": \"This step DescribeStacks to check if one is already created by automation document for the the cluster mentioned as input.\"\n    },\n    {\n      \"name\": \"RemovingScheduleByDeletingScheduleCloudFormationStack\",\n      \"action\": \"aws:deleteStack\",\n      \"inputs\": {\n        \"StackName\": \"AWSSupport-AnalyzeEMRLogs-{{ClusterID}}\"\n      },\n      \"description\": \"This will stop the scheduling by deleting the event rule and IAM role that triggered the event.\",\n      \"outputs\": [\n        {\n          \"Name\": \"StackStatus\",\n          \"Selector\": \"$\",\n          \"Type\": \"String\"\n        }\n      ],\n      \"isEnd\": true,\n      \"timeoutSeconds\": 120\n    },\n    {\n      \"name\": \"FindLogPatternOnEMRNode\",\n      \"action\": \"aws:runCommand\",\n      \"inputs\": {\n        \"DocumentName\": \"AWS-RunShellScript\",\n        \"Parameters\": {\n          \"commands\": [\n            \"#!/usr/bin/env python3\",\n            \"\",\n            \"import ast, io, subprocess, re, sqlite3, hashlib, os, math, tempfile, multiprocessing, json, time, pip, importlib\",\n            \"from datetime import datetime\",\n            \"\",\n            \"logToCWL = \\\"{{LogToCloudWatchLogs}}\\\"\",\n            \"logGroup = \\\"{{CloudWatchLogGroup}}\\\"\",\n            \"#installing boto3 if required\",\n            \"try:\",\n            \"    importlib.import_module(\\\"boto3\\\")\",\n            \"except ImportError:\",\n            \"    install_cmd = \\\"python3 -m pip install boto3\\\"\",\n            \"    install_out = subprocess.Popen([install_cmd], shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE).stderr.readlines()\",\n            \"    for line in install_out:\",\n            \"        line = str(line.decode(\\\"utf-8\\\").strip())\",\n            \"        if \\\"WARNING: Running pip install with root privileges is generally not a good idea\\\" not in line:\",\n            \"            print(install_out)\",\n            \"\",\n            \"\",\n            \"import boto3\",\n            \"\",\n            \"def post_logs_cwl(logGroup, logStream, eventtime, event):\",\n            \"\",\n            \"# we need to check if the log group exists and create it if thats not the case\",\n            \"# The names in use here should be unique enough that we don\\\"t need to test for exact matches, just for existence but we can discuss that.\",\n            \"\",\n            \"  #log(\\\"Started Post to CWL\\\")\",\n            \"  currentTimestamp = int(round(time.time() * 1000))\",\n            \"  client = boto3.client(\\\"logs\\\",region_name=\\\"{{global:REGION}}\\\")\",\n            \"  try:\",\n            \"    logGroupFinder = client.describe_log_groups(\",\n            \"        logGroupNamePrefix=logGroup,\",\n            \"        limit=10\",\n            \"    )\",\n            \"  except:\",\n            \"    log(\\\"Unable to describe Log Groups\\\")\",\n            \" \",\n            \"  if len(logGroupFinder[\\\"logGroups\\\"]) == 0:\",\n            \"    try:\",\n            \"      createdLogGroup = client.create_log_group(\",\n            \"        logGroupName=logGroup\",\n            \"      )\",\n            \"    except:\",\n            \"      log(\\\"Unable to Create Log Group\\\")\",\n            \" \",\n            \" \",\n            \"  # Now, we need to check if there\\\"s a logstream for this instance\",\n            \" \",\n            \"  try:\",\n            \"    logStreamFinder = client.describe_log_streams(\",\n            \"        logGroupName=logGroup,\",\n            \"        logStreamNamePrefix=logStream,\",\n            \"        orderBy=\\\"LogStreamName\\\",\",\n            \"        descending=True,\",\n            \"    )\",\n            \"  except:\",\n            \"    print(\\\"Unable to query logStreams\\\")\",\n            \"\",\n            \"  if len(logStreamFinder[\\\"logStreams\\\"]) == 0:\",\n            \"    try:\",\n            \"      createdLogStream = client.create_log_stream(\",\n            \"        logGroupName=logGroup,\",\n            \"        logStreamName=logStream\",\n            \"      )\",\n            \"    except:\",\n            \"      log(\\\"Unable to Create Log Stream\\\")\",\n            \"  # Since we just created the logStream, we can upload events without being concerned about sequence token.\",\n            \"    try:\",\n            \"      response = client.put_log_events(\",\n            \"          logGroupName=logGroup,\",\n            \"          logStreamName=logStream,\",\n            \"          logEvents=[\",\n            \"              {\",\n            \"                  \\\"timestamp\\\": currentTimestamp,\",\n            \"                  \\\"message\\\": event\",\n            \"              },\",\n            \"          ]\",\n            \"      )   \",\n            \"    except:\",\n            \"      log(response)\",\n            \"\",\n            \"  if len(logStreamFinder[\\\"logStreams\\\"]) == 1:\",\n            \"    # We need to capture the sequence number for uploading the logs in this case\",\n            \"    print(logStreamFinder[\\\"logStreams\\\"])\",\n            \"    token=logStreamFinder[\\\"logStreams\\\"][0][\\\"uploadSequenceToken\\\"]\",\n            \"    try: \",\n            \"      # The epoch time might come in as float, we need to cast as int to be able to upload the log entry\",\n            \"      response = client.put_log_events(\",\n            \"        logGroupName=logGroup,\",\n            \"        logStreamName=logStream,\",\n            \"        logEvents=[\",\n            \"            {\",\n            \"                \\\"timestamp\\\": currentTimestamp ,\",\n            \"                \\\"message\\\": event\",\n            \"            },\",\n            \"        ],\",\n            \"        sequenceToken=token\",\n            \"    )\",\n            \"    except:\",\n            \"      log(\\\"Unable to upload logs\\\")\",\n            \"    \",\n            \" \",\n            \"\",\n            \"\",\n            \"\",\n            \"def run_grep(filename_pattern, regex_type, search_string, grep_arg, post_cmd):\",\n            \"        if regex_type == \\\"\\\":\",\n            \"                dir_name = filename_pattern[0 : filename_pattern.rfind(\\\"/\\\") + 1]\",\n            \"                file_name = \\\"\\\\\\\"\\\" + filename_pattern[filename_pattern.rfind(\\\"/\\\") + 1 :] + \\\"\\\\\\\"\\\"\",\n            \"                cmd_str = \\\"find \\\" + dir_name + \\\" -name \\\" + file_name + \\\" -print0\\\"\",\n            \"        else:\",\n            \"                cmd_str = (\\\"find\\\" + filename_pattern + \\\" -regextype posix-extended -regex \\\" + regex_type + \\\" -print0\\\")\",\n            \"        if grep_arg == \\\"\\\":\",\n            \"                cmd_str = cmd_str + \\\" | xargs -0 -n1 -P2 zgrep \\\" + search_string + \\\" \\\" + post_cmd\",\n            \"        else:\",\n            \"                cmd_str = (cmd_str + \\\" | xargs -0 -n1 -P2 zgrep \\\" + grep_arg + \\\" \\\" + search_string + \\\" \\\" + post_cmd)\",\n            \"        #log(\\\"Running command: \\\" + cmd_str)\",\n            \"        cmd_output = subprocess.Popen([cmd_str], shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE).stdout.readlines()\",\n            \"        return cmd_output\",\n            \"\",\n            \"\",\n            \"\",\n            \"def run_cmd(cmd):\",\n            \"        #log(\\\"Running Command:\\\" + cmd)\",\n            \"        cmd_output = subprocess.Popen([cmd], shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE).stdout.readlines()\",\n            \"        return cmd_output\",\n            \"\",\n            \"\",\n            \"\",\n            \"def is_float(string_value):\",\n            \"       try:\",\n            \"              float(string_value)\",\n            \"              return True\",\n            \"       except ValueError:\",\n            \"              return False\",\n            \"\",\n            \"\",\n            \"\",\n            \"def output_events(id_to_fetch):\",\n            \"        c.execute(\\\"SELECT metricdata FROM events WHERE id = ?\\\", (id_to_fetch,),)\",\n            \"        event_data = \\\"\\\"\",\n            \"        results = c.fetchall()\",\n            \"        if len(results) > 0:\",\n            \"                 for line in results:\",\n            \"                         event_data = event_data + line[0] + \\\"\\\\n\\\"\",\n            \"                         print(event_data)\",\n            \"\",\n            \"\",\n            \"\",\n            \"def create_postcommand(check_name, log_file, log_sig):\",\n            \"        if(check_name == \\\"node_state_change\\\"):\",\n            \"                post_cmd = (\\\"| tr \\\\\\\"\\\\\\\\n\\\\\\\" \\\\\\\" \\\\\\\" | sed \\\\\\\"s/slaveRecords/\\\\\\\\nslaveRecords/g\\\\\\\" | grep \\\\\\\"slaveRecords\\\\\\\" | grep -v \\\\\\\"state: RUNNING\\\\\\\"\\\")\",\n            \"                cur_result = run_grep(log_file, \\\"\\\", log_sig, \\\"-A7\\\", post_cmd)\",\n            \"        elif (check_name == \\\"step_failure\\\"):\",\n            \"                post_cmd = (\\\"| tr \\\\\\\"\\\\\\\\n\\\\\\\" \\\\\\\" \\\\\\\" | sed \\\\\\\"s/stepRecord/\\\\\\\\nstepRecord/g\\\\\\\" | grep \\\\\\\"state: FAILED\\\\\\\" | grep -v \\\\\\\"state: RUNNING\\\\\\\"\\\")\",\n            \"                cur_result = run_grep(log_file, \\\"\\\", log_sig, \\\"-A9\\\", post_cmd)\",\n            \"        elif (check_name == \\\"no_core_nodes_running\\\"):\",\n            \"                post_cmd = (\\\"| tr \\\\\\\"\\\\\\\\n\\\\\\\" \\\\\\\" \\\\\\\" | sed \\\\\\\"s/--/\\\\\\\\n/g\\\\\\\" | grep \\\\\\\"Present Capacity: 0\\\\\\\" | tail -n1\\\")\",\n            \"                cur_result = run_grep(log_file, \\\"\\\", log_sig, \\\"-A8\\\", post_cmd)\",\n            \"        elif (check_name == \\\"hdfs_missing_blocks\\\"):\",\n            \"                post_cmd = (\\\"| grep -v \\\\\\\"Failed to update HDFS app monitor \\\\\\\" | grep -v \\\\\\\"Return code of \\\\\\\" | tr \\\\\\\"\\\\\\\\n\\\\\\\" \\\\\\\" \\\\\\\" | sed \\\\\\\"s/--/\\\\\\\\n/g\\\\\\\" | grep -v \\\\\\\"Missing blocks: 0\\\\\\\" | tail -n1\\\")\",\n            \"                cur_result = run_grep(log_file, \\\"\\\", log_sig, \\\"-A8\\\", post_cmd)\",\n            \"        elif (check_name == \\\"hdfs_high_util\\\"):\",\n            \"                post_cmd = (\\\"| tr \\\\\\\"\\\\\\\\n\\\\\\\" \\\\\\\" \\\\\\\" | sed \\\\\\\"s/--/\\\\\\\\n/g\\\\\\\" | grep -e \\\\\\\"DFS Used%: 9[0-9]\\\\.\\\\\\\" | tail -n1\\\")\",\n            \"                cur_result = run_grep(log_file, \\\"\\\", log_sig, \\\"-A8\\\", post_cmd)\",\n            \"        elif (check_name == \\\"instance_controller_restart\\\"):\",\n            \"                post_cmd = (\\\"| tail -n1\\\")\",\n            \"                cur_result = run_grep(log_file, \\\"\\\", log_sig, \\\"\\\", post_cmd)\",\n            \"        elif (check_name == \\\"instance_controller_restart_legacy\\\"):\",\n            \"                cur_result = run_grep(log_file, \\\"\\\", log_sig, \\\"\\\", \\\"\\\")\",\n            \"                if (len(cur_result) > 1):\",\n            \"                        cur_result = [cur_result[len(cur_result)-1]]\",\n            \"        elif (check_name == \\\"high_load\\\"):\",\n            \"                cmd = (\\\"cat \\\" + log_file + \\\" | cut -d\\\\\\\" \\\\\\\" -f1\\\")\",\n            \"                load_avg = run_cmd(cmd)[0]\",\n            \"                if is_float(load_avg):\",\n            \"                        load_avg = float(load_avg)\",\n            \"                        num_vcores = multiprocessing.cpu_count()\",\n            \"                        cpu_util = math.ceil(load_avg / float(num_vcores) * 100)\",\n            \"                        if (float(cpu_util) > 95.0):\",\n            \"                                cur_result = [(datetime.now().isoformat(\\\" \\\") + \\\" 5-Minute Load Average: \\\" + str(load_avg) + \\\", Num vCores: \\\" + str(num_vcores) + \\\", Effective CPU Utilization: \\\" + str(cpu_util) + \\\"%\\\")]\",\n            \"                        else:\",\n            \"                                cur_result = []\",\n            \"                else:\",\n            \"                        cur_result = []\",\n            \"        else:\",\n            \"                cur_result = run_grep(log_file, \\\"\\\", log_sig, \\\"\\\", \\\"\\\")\",\n            \"        return cur_result\",\n            \"\",\n            \"\",\n            \"\",\n            \"def get_node_info():\",\n            \"        instance_id = \\\"\\\"\",\n            \"        jobflow_id = \\\"\\\"\",\n            \"        try:\",\n            \"                instance_id = subprocess.Popen([\\\"curl http://169.254.169.254/latest/meta-data/instance-id\\\"],shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE).stdout.readlines()[0]\",\n            \"                instance_id = str(instance_id.decode(\\\"utf-8\\\").strip())\",\n            \"        except IndexError:\",\n            \"                log(\\\"Error\\\\tCould not obtain instance ID\\\")\",\n            \"        try:\",\n            \"                jobflow_json = read_file(\\\"/emr/instance-controller/lib/info/job-flow.json\\\")\",\n            \"                jobflow_id = jobflow_json[\\\"jobFlowId\\\"]\",\n            \"        except FileNotFoundError:\",\n            \"                log(\\\"Error\\\\tCould not obtain jobflow ID\\\")\",\n            \"        return instance_id, jobflow_id\",\n            \"\",\n            \"\",\n            \"\",\n            \"def read_file(filename):\",\n            \"        with io.open(filename, \\\"r\\\",encoding=\\\"utf-8\\\") as file_obj:\",\n            \"                file_data=ast.literal_eval(file_obj.read())\",\n            \"        return file_data\",\n            \"\",\n            \"\",\n            \"def log(message):\",\n            \"        timestamp = datetime.now().isoformat(\\\" \\\")\",\n            \"        print(str(timestamp) + \\\"\\\\t\\\" + message)\",\n            \"\",\n            \"if __name__ == \\\"__main__\\\":\",\n            \"        #print(\\\"Start\\\")\",\n            \"\",\n            \"        run_start_time = datetime.now()\",\n            \"\",\n            \"        #log(\\\"1. Starting log monitoring now\\\")\",\n            \"        cwd = os.path.dirname(os.path.abspath(__file__))\",\n            \"        pwd = \\\"/mnt\\\" +cwd\",\n            \"        bisect=\\\"orchestration\\\"\",\n            \"        db_path=pwd.partition(bisect)[0]\",\n            \"\",\n            \"        #print(pwd)\",\n            \"        #print(db_path)\",\n            \"\",\n            \"        log_defs= {\\\"log_items\\\":[{\\\"name\\\":\\\"container_out_of_memory\\\",\\\"location\\\":\\\"/var/log/hadoop-yarn/*-yarn-nodemanager-*.log\\\",\\\"signature\\\":\\\"-e \\\\\\\"is running beyond physical memory limits\\\\\\\" -e \\\\\\\"Exit code from container .* is : 137$\\\\\\\"\\\",\\\"timestamp_format\\\":\\\"(\\\\\\\\d\\\\\\\\d\\\\\\\\d\\\\\\\\d\\\\\\\\-\\\\\\\\d\\\\\\\\d\\\\\\\\-\\\\\\\\d\\\\\\\\d\\\\\\\\s\\\\\\\\d\\\\\\\\d\\\\\\\\:\\\\\\\\d\\\\\\\\d\\\\\\\\:\\\\\\\\d\\\\\\\\d)\\\\\\\\,\\\\\\\\d\\\\\\\\d\\\\\\\\d\\\",\\\"description\\\":\\\"YARN container ran out of memory, running job may fail\\\",\\\"kb_link\\\":\\\"https://aws.amazon.com/premiumsupport/knowledge-center/emr-spark-yarn-memory-limit/\\\"},{\\\"name\\\":\\\"yarn_nodemanager_health\\\",\\\"location\\\":\\\"/var/log/hadoop-yarn/*-yarn-nodemanager-*.log\\\",\\\"signature\\\":\\\"\\\\\\\"Most of the disks failed\\\\\\\"\\\",\\\"timestamp_format\\\":\\\"(\\\\\\\\d\\\\\\\\d\\\\\\\\d\\\\\\\\d\\\\\\\\-\\\\\\\\d\\\\\\\\d\\\\\\\\-\\\\\\\\d\\\\\\\\d\\\\\\\\s\\\\\\\\d\\\\\\\\d\\\\\\\\:\\\\\\\\d\\\\\\\\d\\\\\\\\:\\\\\\\\d\\\\\\\\d)\\\\\\\\,\\\\\\\\d\\\\\\\\d\\\\\\\\d\\\",\\\"description\\\":\\\"CORE or TASK node is running low on disk space and will not be able to run tasks\\\",\\\"kb_link\\\":\\\"https://aws.amazon.com/premiumsupport/knowledge-center/core-node-emr-cluster-disk-space/\\\"},{\\\"name\\\":\\\"node_state_change\\\",\\\"location\\\":\\\"/emr/instance-controller/lib/info/job-flow-state.txt\\\",\\\"signature\\\":\\\"\\\\\\\"slaveRecords\\\\\\\"\\\",\\\"timestamp_format\\\":\\\"lastStateChangeTime: (\\\\\\\\d\\\\\\\\d\\\\\\\\d\\\\\\\\d\\\\\\\\d\\\\\\\\d\\\\\\\\d\\\\\\\\d\\\\\\\\d\\\\\\\\d\\\\\\\\d\\\\\\\\d\\\\\\\\d)\\\",\\\"description\\\":\\\"CORE or TASK node is unreachable by the MASTER node\\\",\\\"kb_link\\\":\\\"https://docs.aws.amazon.com/emr/latest/ManagementGuide/emr-troubleshoot-error-resource.html\\\"},{\\\"name\\\":\\\"step_failure\\\",\\\"location\\\":\\\"/emr/instance-controller/lib/info/job-flow-state.txt\\\",\\\"signature\\\":\\\"\\\\\\\"stepRecord\\\\\\\"\\\",\\\"timestamp_format\\\":\\\"endInstant: (\\\\\\\\d\\\\\\\\d\\\\\\\\d\\\\\\\\d\\\\\\\\d\\\\\\\\d\\\\\\\\d\\\\\\\\d\\\\\\\\d\\\\\\\\d\\\\\\\\d\\\\\\\\d\\\\\\\\d)\\\",\\\"description\\\":\\\"An EMR Step has failed\\\",\\\"kb_link\\\":\\\"https://docs.aws.amazon.com/emr/latest/ManagementGuide/emr-troubleshoot-failed-4.html\\\"},{\\\"name\\\":\\\"no_core_nodes_running\\\",\\\"location\\\":\\\"/emr/instance-controller/log/instance-controller.log\\\",\\\"signature\\\":\\\"\\\\\\\"hdfs dfsadmin -report\\\\\\\"\\\",\\\"timestamp_format\\\":\\\"(\\\\\\\\d\\\\\\\\d\\\\\\\\d\\\\\\\\d\\\\\\\\-\\\\\\\\d\\\\\\\\d\\\\\\\\-\\\\\\\\d\\\\\\\\d\\\\\\\\s\\\\\\\\d\\\\\\\\d\\\\\\\\:\\\\\\\\d\\\\\\\\d\\\\\\\\:\\\\\\\\d\\\\\\\\d)\\\\\\\\,\\\\\\\\d\\\\\\\\d\\\\\\\\d\\\",\\\"description\\\":\\\"No CORE nodes are currently running, cluster is unhealthy\\\",\\\"kb_link\\\":\\\"https://docs.aws.amazon.com/emr/latest/ManagementGuide/emr-cluster-NO_SLAVE_LEFT-FAILED_BY_MASTER.html\\\"},{\\\"name\\\":\\\"hdfs_missing_blocks\\\",\\\"location\\\":\\\"/emr/instance-controller/log/instance-controller.log\\\",\\\"signature\\\":\\\"\\\\\\\"hdfs dfsadmin -report\\\\\\\"\\\",\\\"timestamp_format\\\":\\\"(\\\\\\\\d\\\\\\\\d\\\\\\\\d\\\\\\\\d\\\\\\\\-\\\\\\\\d\\\\\\\\d\\\\\\\\-\\\\\\\\d\\\\\\\\d\\\\\\\\s\\\\\\\\d\\\\\\\\d\\\\\\\\:\\\\\\\\d\\\\\\\\d\\\\\\\\:\\\\\\\\d\\\\\\\\d)\\\\\\\\,\\\\\\\\d\\\\\\\\d\\\\\\\\d\\\",\\\"description\\\":\\\"There are missing HDFS blocks which could lead to dataloss\\\",\\\"kb_link\\\":\\\"https://docs.aws.amazon.com/emr/latest/ManagementGuide/enough-hdfs-space.html\\\"},{\\\"name\\\":\\\"hdfs_high_util\\\",\\\"location\\\":\\\"/emr/instance-controller/log/instance-controller.log\\\",\\\"signature\\\":\\\"\\\\\\\"hdfs dfsadmin -report\\\\\\\"\\\",\\\"timestamp_format\\\":\\\"(\\\\\\\\d\\\\\\\\d\\\\\\\\d\\\\\\\\d\\\\\\\\-\\\\\\\\d\\\\\\\\d\\\\\\\\-\\\\\\\\d\\\\\\\\d\\\\\\\\s\\\\\\\\d\\\\\\\\d\\\\\\\\:\\\\\\\\d\\\\\\\\d\\\\\\\\:\\\\\\\\d\\\\\\\\d)\\\\\\\\,\\\\\\\\d\\\\\\\\d\\\\\\\\d\\\",\\\"description\\\":\\\"HDFS Utilization is high, which may affect jobs and cluster health\\\",\\\"kb_link\\\":\\\"https://docs.aws.amazon.com/emr/latest/ManagementGuide/emr-troubleshoot-error-resource-2.html\\\"},{\\\"name\\\":\\\"instance_controller_restart\\\",\\\"location\\\":\\\"/emr/instance-controller/log/monitor.log\\\",\\\"signature\\\":\\\"\\\\\\\"MonitorReactionExecutor failed\\\\\\\"\\\",\\\"timestamp_format\\\":\\\"(\\\\\\\\d\\\\\\\\d\\\\\\\\d\\\\\\\\d\\\\\\\\-\\\\\\\\d\\\\\\\\d\\\\\\\\-\\\\\\\\d\\\\\\\\d\\\\\\\\s\\\\\\\\d\\\\\\\\d\\\\\\\\:\\\\\\\\d\\\\\\\\d\\\\\\\\:\\\\\\\\d\\\\\\\\d)\\\\\\\\,\\\\\\\\d\\\\\\\\d\\\\\\\\d\\\",\\\"description\\\":\\\"Instance-Controller process has restarted. This process is essential for cluster health\\\",\\\"kb_link\\\":\\\"https://docs.aws.amazon.com/emr/latest/ManagementGuide/emr-process-restart-stop-view.html\\\"},{\\\"name\\\":\\\"instance_controller_restart_legacy\\\",\\\"location\\\":\\\"/emr/service-nanny/log/service-nanny-*\\\",\\\"signature\\\":\\\"\\\\\\\"starting instance-controller\\\\\\\"\\\",\\\"timestamp_format\\\":\\\"(\\\\\\\\d\\\\\\\\d\\\\\\\\d\\\\\\\\d\\\\\\\\-\\\\\\\\d\\\\\\\\d\\\\\\\\-\\\\\\\\d\\\\\\\\d\\\\\\\\s\\\\\\\\d\\\\\\\\d\\\\\\\\:\\\\\\\\d\\\\\\\\d\\\\\\\\:\\\\\\\\d\\\\\\\\d)\\\\\\\\s\\\",\\\"description\\\":\\\"Instance-Controller process has restarted. This process is essential for cluster health\\\",\\\"kb_link\\\":\\\"https://docs.aws.amazon.com/emr/latest/ManagementGuide/emr-process-restart-stop-view.html\\\"},{\\\"name\\\":\\\"high_load\\\",\\\"location\\\":\\\"/proc/loadavg\\\",\\\"signature\\\":\\\"\\\\\\\"\\\\\\\"\\\",\\\"timestamp_format\\\":\\\"(\\\\\\\\d\\\\\\\\d\\\\\\\\d\\\\\\\\d\\\\\\\\-\\\\\\\\d\\\\\\\\d\\\\\\\\-\\\\\\\\d\\\\\\\\d\\\\\\\\s\\\\\\\\d\\\\\\\\d\\\\\\\\:\\\\\\\\d\\\\\\\\d\\\\\\\\:\\\\\\\\d\\\\\\\\d)\\\",\\\"description\\\":\\\"High Load Average detected, may affect node health reporting or result in timeouts or slowdowns\\\",\\\"kb_link\\\":\\\"https://docs.aws.amazon.com/emr/latest/ManagementGuide/emr-troubleshoot-slow-4.html\\\"},{\\\"name\\\":\\\"yarn_node_blacklisted\\\",\\\"location\\\":\\\"/var/log/hadoop-yarn/*-yarn-resourcemanager-*.log\\\",\\\"signature\\\":\\\"\\\\\\\"blacklist are updated in Scheduler.blacklistAdditions\\\\\\\"\\\",\\\"timestamp_format\\\":\\\"(\\\\\\\\d\\\\\\\\d\\\\\\\\d\\\\\\\\d\\\\\\\\-\\\\\\\\d\\\\\\\\d\\\\\\\\-\\\\\\\\d\\\\\\\\d\\\\\\\\s\\\\\\\\d\\\\\\\\d\\\\\\\\:\\\\\\\\d\\\\\\\\d\\\\\\\\:\\\\\\\\d\\\\\\\\d)\\\\\\\\,\\\\\\\\d\\\\\\\\d\\\\\\\\d\\\",\\\"description\\\":\\\"CORE or TASK node has been blacklisted by YARN from running tasks\\\",\\\"kb_link\\\":\\\"https://docs.aws.amazon.com/emr/latest/ManagementGuide/emr-process-restart-stop-view.html\\\"},{\\\"name\\\":\\\"yarn_node_lost\\\",\\\"location\\\":\\\"/var/log/hadoop-yarn/*-yarn-resourcemanager-*.log\\\",\\\"signature\\\":\\\"\\\\\\\"Node Transitioned from RUNNING to LOST\\\\\\\"\\\",\\\"timestamp_format\\\":\\\"(\\\\\\\\d\\\\\\\\d\\\\\\\\d\\\\\\\\d\\\\\\\\-\\\\\\\\d\\\\\\\\d\\\\\\\\-\\\\\\\\d\\\\\\\\d\\\\\\\\s\\\\\\\\d\\\\\\\\d\\\\\\\\:\\\\\\\\d\\\\\\\\d\\\\\\\\:\\\\\\\\d\\\\\\\\d)\\\\\\\\,\\\\\\\\d\\\\\\\\d\\\\\\\\d\\\",\\\"description\\\":\\\"CORE or TASK node has been marked as LOST by YARN, possible connectivity issues\\\",\\\"kb_link\\\":\\\"https://docs.aws.amazon.com/emr/latest/ManagementGuide/emr-process-restart-stop-view.html\\\"}]}\",\n            \"        conn = sqlite3.connect(db_path + \\\"metric_records.db\\\")\",\n            \"        c = conn.cursor()\",\n            \"        c.execute(\\\"CREATE TABLE IF NOT EXISTS events (id text PRIMARY KEY, metricdata text)\\\")\",\n            \"\",\n            \"\",\n            \"        #log(\\\"4. Getting log info\\\")\",\n            \"        instance_id, jobflow_id = get_node_info()\",\n            \"\",\n            \"\",\n            \"        result_lines = []\",\n            \"        counter=0\",\n            \"        #log(\\\"5. Parsing log definitions\\\")\",\n            \"        for log_item in log_defs[\\\"log_items\\\"]:\",\n            \"                check_name = log_item[\\\"name\\\"]\",\n            \"                log_file = log_item[\\\"location\\\"]\",\n            \"                log_sig = log_item[\\\"signature\\\"]\",\n            \"                description = log_item[\\\"description\\\"]\",\n            \"                kb_link = log_item[\\\"kb_link\\\"]\",\n            \"                timestamp_format = log_item[\\\"timestamp_format\\\"]\",\n            \"\",\n            \"\",\n            \"                timestamp_regx = re.compile(timestamp_format)\",\n            \"                #log(\\\"\\\\t5.1 Checking for \\\" + check_name + \\\" messages\\\")\",\n            \"                cmd_result = create_postcommand(check_name, log_file, log_sig)\",\n            \"\",\n            \"                #log (\\\"\\\\t\\\\t5.2 Trying to find an error\\\")\",\n            \"                if (len(cmd_result)>0):\",\n            \"                        for line in cmd_result:\",\n            \"                                result_line = \\\"\\\"\",\n            \"                                if isinstance(line, bytes):\",\n            \"                                        line = str(line.decode(\\\"utf-8\\\").strip())\",\n            \"                                        #log(\\\"\\\\t\\\\t\\\\tFound: \\\" + line)\",\n            \"                                timestamp_match = timestamp_regx.search(line)\",\n            \"                                if timestamp_match:\",\n            \"                                        if (check_name == \\\"node_state_change\\\") or (check_name == \\\"step_failure\\\"):\",\n            \"                                                epoch_seconds = int(timestamp_match.group(1)) / 1000\",\n            \"                                                parsed_timestamp = datetime.fromtimestamp(epoch_seconds).strftime(\\\"%Y-%m-%d %H:%M:%S\\\")\",\n            \"                                        else:\",\n            \"                                              parsed_timestamp = timestamp_match.group(1)\",\n            \"                                        result_line = (parsed_timestamp + \\\"\\\\t\\\" + jobflow_id + \\\"\\\\t\\\" + instance_id + \\\"\\\\t\\\" + check_name + \\\"\\\\t[\\\" + description + \\\"]\\\\t\\\" + kb_link + \\\"\\\\t\\\" + line)\",\n            \"                                        result_lines.append(result_line)\",\n            \"                                        #log(str(result_lines))\",\n            \"                                        # create a unique event id based on the log entry\",\n            \"                                        logline_id = hashlib.md5(str(result_line).encode()).hexdigest()\",\n            \"                                        #print(logline_id)\",\n            \"                                #write event to sqlite\",\n            \"                                uni = str(logline_id)\",\n            \"                                already_exists=c.execute(\\\"SELECT id FROM events WHERE id = ?\\\", (uni,),).fetchall()\",\n            \"                                if len(already_exists) == 0:\",\n            \"                                        counter+=1\",\n            \"                                        c.execute(\\\"INSERT OR IGNORE INTO events values (?, ?)\\\", (uni, str(result_line)))\",\n            \"                                        output_events(uni)\",\n            \"                                        if \\\"{{LogToCloudWatchLogs}}\\\" == \\\"Yes\\\":\",\n            \"                                          post_logs_cwl(logGroup,instance_id,parsed_timestamp,result_line)\",\n            \"\",\n            \"                                #log(\\\"5.2.1 Event found: while checking for \\\" + check_name + \\\" messages \\\" + str(result_line) + \\\"\\\\n\\\")\",\n            \"                                #counter+=1\",\n            \"\",\n            \"\",\n            \"        #log(\\\"6. Sending events to the console\\\")\",\n            \"        conn.commit()\",\n            \"        c.close()\",\n            \"        conn.close()\",\n            \"        #os.remove(logdef)\",\n            \"\",\n            \"\",\n            \"        log(\\\"Number of error/s found: \\\" + str(counter) + \\\"\\\\n\\\")\",\n            \"        #print(\\\"End\\\")\",\n            \" \"\n          ]\n        },\n        \"InstanceIds\": \"{{ ListingClusterInstances.InstanceIDs }}\"\n      },\n      \"description\": \"This steps finds LogPattern On each EMR Node\",\n      \"timeoutSeconds\": 120,\n      \"isEnd\": true\n    },\n    {\n      \"name\": \"CreatingScheduleCloudFormationStack\",\n      \"action\": \"aws:createStack\",\n      \"inputs\": {\n        \"TemplateBody\": \"AWSTemplateFormatVersion: 2010-09-09\\nParameters:\\n  IntervalTime:\\n    Type: String\\n    Description: \\\"Interval in at which the doc will be triggered\\\" \\nResources:\\n  EMRSchedulingRuleCreatedbySSM: \\n    Type: AWS::Events::Rule\\n    Properties: \\n      Description: \\\"Scheduling rule for AWSSupport-AnalyzeEMRLogs\\\"\\n      ScheduleExpression: !Sub 'rate(${IntervalTime})'\\n      Targets: \\n        - Arn: !Sub 'arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:automation-definition/AWSSupport-AnalyzeEMRLogs:$DEFAULT'\\n          Id: \\\"AWSSupport-AnalyzeEMRLogs-{{ClusterID}}-Rule\\\"\\n          RoleArn: !Sub 'arn:aws:iam::${AWS::AccountId}:role/${RoletoTriggerAWSSupportAnalyzeEMRLogs}'\\n          Input: !Sub \\\" {\\\\\\\"ClusterID\\\\\\\":[\\\\\\\"{{ClusterID}}\\\\\\\"],\\\\\\\"AutomationAssumeRole\\\\\\\":[\\\\\\\"{{AutomationAssumeRole}}\\\\\\\"],\\\\\\\"Operation\\\\\\\":[\\\\\\\"Run Once\\\\\\\"],\\\\\\\"IntervalTime\\\\\\\":[\\\\\\\"{{IntervalTime}}\\\\\\\"],\\\\\\\"LogToCloudWatchLogs\\\\\\\":[\\\\\\\"{{LogToCloudWatchLogs}}\\\\\\\"],\\\\\\\"CreateLogInsightsDashboard\\\\\\\":[\\\\\\\"{{CreateLogInsightsDashboard}}\\\\\\\"],\\\\\\\"CreateMetricFilters\\\\\\\":[\\\\\\\"{{CreateMetricFilters}}\\\\\\\"],\\\\\\\"CloudWatchLogGroup\\\\\\\":[\\\\\\\"{{CloudWatchLogGroup}}\\\\\\\"]}\\\"\\n  RoletoTriggerAWSSupportAnalyzeEMRLogs:\\n   Type: AWS::IAM::Role\\n   Properties:\\n     AssumeRolePolicyDocument:\\n       Version: 2012-10-17\\n       Statement:\\n         - Effect: Allow\\n           Principal:\\n             Service:\\n               - events.amazonaws.com\\n           Action:\\n             - sts:AssumeRole\\n     Path: /\\n     Policies:\\n       - PolicyName: \\\"StartAutomationAndPassRole\\\"\\n         PolicyDocument:\\n           Version: '2012-10-17'\\n           Statement:\\n             - Effect: Allow\\n               Action: ssm:StartAutomationExecution\\n               Resource:\\n                 - !Sub 'arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:automation-definition/AWSSupport-AnalyzeEMRLogs:$DEFAULT'\\n             - Effect: Allow\\n               Action: \\n                 - iam:PassRole\\n               Resource: !Sub '{{AutomationAssumeRole}}'\\n               Condition:\\n                 StringLikeIfExists: \\n                   iam:PassedToService: 'ssm.amazonaws.com'\\n\",\n        \"StackName\": \"AWSSupport-AnalyzeEMRLogs-{{ClusterID}}\",\n        \"Capabilities\": [\n          \"CAPABILITY_IAM\"\n        ],\n        \"TimeoutInMinutes\": 10,\n        \"Parameters\": [\n          {\n            \"ParameterKey\": \"IntervalTime\",\n            \"ParameterValue\": \"{{IntervalTime }}\"\n          }\n        ]\n      },\n      \"description\": \"In this step, an event bridge event is created with target as this automation document and a role is also created to trigger that event. This step take time interval parameter as an input.\",\n      \"timeoutSeconds\": 180,\n      \"isEnd\": true\n    },\n    {\n      \"name\": \"CheckIfLogGroupExists\",\n      \"action\": \"aws:executeScript\",\n      \"nextStep\": \"BranchOnMetricFilterChoice\",\n      \"inputs\": {\n        \"Runtime\": \"python3.7\",\n        \"Handler\": \"script_handler\",\n        \"Script\": \"import json\\nimport boto3\\nimport botocore\\n\\ndef script_handler(events, context):\\n\\n    logGroup = events['CloudWatchLogGroup']\\n    cwLog = boto3.client('logs')\\n\\n    try:   \\n        createLogGroup = cwLog.create_log_group(logGroupName=logGroup)\\n        Results=\\\"Log group successfully created with name: \\\" + logGroup + \\\"\\\\nPlease check log group \\\" + logGroup + \\\" for details. Please note, logs will only exists if any errors/patterns are found in step 'FindLogPatternOnEMRNode'.\\\"\\n        return {'output': Results}\\n        \\n    except botocore.exceptions.ClientError as err:\\n        if (err.response['Error']['Message'].find('specified log group already exists')!= -1):\\n            Results=\\\"Log group already exists with name: \\\" + logGroup + \\\"\\\\nPlease check log group \\\" + logGroup + \\\" for details.  Please note, logs will only exists if any errors/patterns are found in step 'FindLogPatternOnEMRNode'.\\\"\\n            return {'output': Results}\\n\",\n        \"InputPayload\": {\n          \"CloudWatchLogGroup\": \"{{CloudWatchLogGroup}}\"\n        }\n      },\n      \"outputs\": [\n        {\n          \"Name\": \"output\",\n          \"Selector\": \"$.Payload.output\",\n          \"Type\": \"String\"\n        }\n      ],\n      \"onFailure\": \"Abort\",\n      \"description\": \"This will check if a cloudwatch log group with the name specified in parameter CloudWatchLogGroup already exists. If not, it creates with the same name.\"\n    },\n    {\n      \"name\": \"BranchOnMetricFilterChoice\",\n      \"action\": \"aws:branch\",\n      \"inputs\": {\n        \"Choices\": [\n          {\n            \"NextStep\": \"PutMetricFilterHighLoad\",\n            \"Variable\": \"{{CreateMetricFilters}}\",\n            \"StringEquals\": \"Yes\"\n          },\n          {\n            \"NextStep\": \"Branch_CreatCloudWatchLogInsightsOrNot\",\n            \"Variable\": \"{{CreateMetricFilters}}\",\n            \"StringEquals\": \"No\"\n          }\n        ]\n      },\n      \"description\": \"Branch step to branch the step based on the input selected in CreateMetricFilters.\"\n    },\n    {\n      \"name\": \"PutMetricFilterHighLoad\",\n      \"action\": \"aws:executeAwsApi\",\n      \"inputs\": {\n        \"Service\": \"logs\",\n        \"Api\": \"PutMetricFilter\",\n        \"filterName\": \"HighLoad\",\n        \"filterPattern\": \"high_load\",\n        \"logGroupName\": \"{{CloudWatchLogGroup}}\",\n        \"metricTransformations\": [\n          {\n            \"metricName\": \"HighLoad\",\n            \"metricNamespace\": \"EMR\",\n            \"metricValue\": \"1\",\n            \"defaultValue\": 0\n          }\n        ]\n      },\n      \"description\": \"In this step metric HighLoad filter is created in the log group selected by user.\",\n      \"timeoutSeconds\": 15\n    },\n    {\n      \"name\": \"PutMetricFilterContainerOutofMemory\",\n      \"action\": \"aws:executeAwsApi\",\n      \"inputs\": {\n        \"Api\": \"PutMetricFilter\",\n        \"Service\": \"logs\",\n        \"logGroupName\": \"{{CloudWatchLogGroup}}\",\n        \"metricTransformations\": [\n          {\n            \"metricName\": \"ContainerOutofMemory\",\n            \"metricNamespace\": \"EMR\",\n            \"metricValue\": \"1\",\n            \"defaultValue\": 0\n          }\n        ],\n        \"filterName\": \"ContainerOutofMemory\",\n        \"filterPattern\": \"container_out_of_memory\"\n      },\n      \"description\": \"In this step ContainerOutofMemory metric filter is created in the log group selected by user.\"\n    },\n    {\n      \"name\": \"PutMetricFilterYarnNodeManagerHealth\",\n      \"action\": \"aws:executeAwsApi\",\n      \"inputs\": {\n        \"Service\": \"logs\",\n        \"Api\": \"PutMetricFilter\",\n        \"logGroupName\": \"{{CloudWatchLogGroup}}\",\n        \"metricTransformations\": [\n          {\n            \"metricName\": \"YarnNodeManagerHealth\",\n            \"metricNamespace\": \"EMR\",\n            \"metricValue\": \"1\",\n            \"defaultValue\": 0\n          }\n        ],\n        \"filterName\": \"YarnNodeManagerHealth\",\n        \"filterPattern\": \"yarn_nodemanager_health\"\n      },\n      \"description\": \"In this step YarnNodeManagerHealth metric filter is created in the log group selected by user.\"\n    },\n    {\n      \"name\": \"PutMetricFilterNodeStateChange\",\n      \"action\": \"aws:executeAwsApi\",\n      \"inputs\": {\n        \"Service\": \"logs\",\n        \"Api\": \"PutMetricFilter\",\n        \"logGroupName\": \"{{CloudWatchLogGroup}}\",\n        \"metricTransformations\": [\n          {\n            \"metricName\": \"NodeStateChange\",\n            \"metricNamespace\": \"EMR\",\n            \"metricValue\": \"1\",\n            \"defaultValue\": 0\n          }\n        ],\n        \"filterName\": \"NodeStateChange\",\n        \"filterPattern\": \"node_state_change\"\n      },\n      \"description\": \"In this step NodeStateChange metric filter is created in the log group selected by user.\"\n    },\n    {\n      \"name\": \"PutMetricFilterStepFailure\",\n      \"action\": \"aws:executeAwsApi\",\n      \"inputs\": {\n        \"Service\": \"logs\",\n        \"Api\": \"PutMetricFilter\",\n        \"logGroupName\": \"{{CloudWatchLogGroup}}\",\n        \"metricTransformations\": [\n          {\n            \"metricName\": \"StepFailure\",\n            \"metricNamespace\": \"EMR\",\n            \"metricValue\": \"1\",\n            \"defaultValue\": 0\n          }\n        ],\n        \"filterName\": \"StepFailure\",\n        \"filterPattern\": \"step_failure\"\n      },\n      \"description\": \"In this step StepFailure metric filter is created in the log group selected by user.\"\n    },\n    {\n      \"name\": \"PutMetricFilterNoCoreNodesRunning\",\n      \"action\": \"aws:executeAwsApi\",\n      \"inputs\": {\n        \"Service\": \"logs\",\n        \"Api\": \"PutMetricFilter\",\n        \"logGroupName\": \"{{CloudWatchLogGroup}}\",\n        \"metricTransformations\": [\n          {\n            \"metricName\": \"NoCoreNodesRunning\",\n            \"metricNamespace\": \"EMR\",\n            \"metricValue\": \"1\",\n            \"defaultValue\": 0\n          }\n        ],\n        \"filterName\": \"NoCoreNodesRunning\",\n        \"filterPattern\": \"no_core_nodes_running\"\n      },\n      \"description\": \"In this step NoCoreNodesRunning metric filter is created in the log group selected by user.\"\n    },\n    {\n      \"name\": \"PutMetricFilterHDFSMissingBlocks\",\n      \"action\": \"aws:executeAwsApi\",\n      \"inputs\": {\n        \"Service\": \"logs \",\n        \"Api\": \"PutMetricFilter\",\n        \"logGroupName\": \"{{CloudWatchLogGroup}}\",\n        \"metricTransformations\": [\n          {\n            \"metricName\": \"HDFSMissingBlocks\",\n            \"metricNamespace\": \"EMR\",\n            \"metricValue\": \"1\",\n            \"defaultValue\": 0\n          }\n        ],\n        \"filterName\": \"HDFSMissingBlocks\",\n        \"filterPattern\": \"hdfs_missing_blocks\"\n      },\n      \"description\": \"In this step HDFSMissingBlocks metric filter is created in the log group selected by user.\"\n    },\n    {\n      \"name\": \"PutMetricFilterHDFSHighUtilization\",\n      \"action\": \"aws:executeAwsApi\",\n      \"inputs\": {\n        \"Service\": \"logs\",\n        \"Api\": \"PutMetricFilter\",\n        \"logGroupName\": \"{{CloudWatchLogGroup}}\",\n        \"metricTransformations\": [\n          {\n            \"metricName\": \"HDFSHighUtilization\",\n            \"metricNamespace\": \"EMR\",\n            \"metricValue\": \"1\",\n            \"defaultValue\": 0\n          }\n        ],\n        \"filterName\": \"HDFSHighUtilization\",\n        \"filterPattern\": \"hdfs_high_util\"\n      },\n      \"description\": \"In this step HDFSHighUtilization metric filter is created in the log group selected by user.\"\n    },\n    {\n      \"name\": \"PutMetricFilterInstanceControllerRestart\",\n      \"action\": \"aws:executeAwsApi\",\n      \"inputs\": {\n        \"Service\": \"logs\",\n        \"Api\": \"PutMetricFilter\",\n        \"logGroupName\": \"{{CloudWatchLogGroup}}\",\n        \"metricTransformations\": [\n          {\n            \"metricName\": \"InstanceControllerRestart\",\n            \"metricNamespace\": \"EMR\",\n            \"metricValue\": \"1\",\n            \"defaultValue\": 0\n          }\n        ],\n        \"filterName\": \"InstanceControllerRestart\",\n        \"filterPattern\": \"instance_controller_restart\"\n      },\n      \"description\": \"In this step InstanceControllerRestart metric filter is created in the log group selected by user.\"\n    },\n    {\n      \"name\": \"PutMetricFilterYarnNodeBlackListed\",\n      \"action\": \"aws:executeAwsApi\",\n      \"inputs\": {\n        \"Service\": \"logs\",\n        \"Api\": \"PutMetricFilter\",\n        \"filterName\": \"YarnNodeBlackListed\",\n        \"filterPattern\": \"yarn_node_blacklisted\",\n        \"logGroupName\": \"{{CloudWatchLogGroup}}\",\n        \"metricTransformations\": [\n          {\n            \"metricName\": \"YarnNodeBlackListed\",\n            \"metricNamespace\": \"EMR\",\n            \"metricValue\": \"1\",\n            \"defaultValue\": 0\n          }\n        ]\n      },\n      \"description\": \"In this step YarnNodeBlackListed metric filter is created in the log group selected by user.\"\n    },\n    {\n      \"name\": \"PutMetricFilterYarnNodeLost\",\n      \"action\": \"aws:executeAwsApi\",\n      \"inputs\": {\n        \"Service\": \"logs\",\n        \"Api\": \"PutMetricFilter\",\n        \"filterName\": \"YarnNodeLost\",\n        \"filterPattern\": \"yarn_node_lost\",\n        \"logGroupName\": \"{{CloudWatchLogGroup}}\",\n        \"metricTransformations\": [\n          {\n            \"metricName\": \"YarnNodeLost\",\n            \"metricNamespace\": \"EMR\",\n            \"metricValue\": \"1\",\n            \"defaultValue\": 0\n          }\n        ]\n      },\n      \"description\": \"In this step YarnNodeLost metric filter is created in the log group selected by user.\"\n    },\n    {\n      \"name\": \"Branch_CreatCloudWatchLogInsightsOrNot\",\n      \"action\": \"aws:branch\",\n      \"inputs\": {\n        \"Choices\": [\n          {\n            \"NextStep\": \"PutDashboard\",\n            \"Variable\": \"{{CreateLogInsightsDashboard}}\",\n            \"StringEquals\": \"Yes\"\n          },\n          {\n            \"NextStep\": \"FindLogPatternOnEMRNode\",\n            \"Variable\": \"{{CreateLogInsightsDashboard}}\",\n            \"StringEquals\": \"No\"\n          }\n        ]\n      },\n      \"description\": \"It is a branch step to branch the step based on the input selected in CreateLogInsightsDashboard parameter.\"\n    },\n    {\n      \"name\": \"PutDashboard\",\n      \"action\": \"aws:executeAwsApi\",\n      \"nextStep\": \"FindLogPatternOnEMRNode\",\n      \"inputs\": {\n        \"Api\": \"PutDashboard\",\n        \"Service\": \"cloudwatch\",\n        \"DashboardName\": \"{{CloudWatchLogGroup}}\",\n        \"DashboardBody\": \"{ \\\"widgets\\\": [ { \\\"height\\\": 5, \\\"width\\\": 24, \\\"y\\\": 0, \\\"x\\\": 0, \\\"type\\\": \\\"log\\\", \\\"properties\\\": { \\\"query\\\": \\\"SOURCE \\\\\\\"{{CloudWatchLogGroup}}\\\\\\\" | parse @message \\\\\\\"* *\\\\\\\\t*\\\\\\\\t*\\\\\\\\t*\\\\\\\\t*\\\\\\\\t*\\\\\\\\t*\\\\\\\" as EventDate, event_time, cluster_id, instance_id, issue_name, issue_description, issue_link, log_message | DISPLAY  EventDate, event_time, cluster_id, instance_id, issue_name, issue_description, issue_link\\\", \\\"region\\\": \\\"us-east-1\\\", \\\"title\\\": \\\"us-east-1 EMRMonolog Events\\\", \\\"view\\\": \\\"table\\\" } }, { \\\"height\\\": 5, \\\"width\\\": 24, \\\"y\\\": 0, \\\"x\\\": 0, \\\"type\\\": \\\"log\\\", \\\"properties\\\": { \\\"query\\\": \\\"SOURCE \\\\\\\"{{CloudWatchLogGroup}}\\\\\\\" | parse @message \\\\\\\"* *\\\\\\\\t*\\\\\\\\t*\\\\\\\\t*\\\\\\\\t*\\\\\\\\t*\\\\\\\\t*\\\\\\\" as EventDate, event_time, cluster_id, instance_id, issue_name, issue_description, issue_link, log_message | DISPLAY  EventDate, event_time, cluster_id, instance_id, issue_name, issue_description, issue_link\\\", \\\"region\\\": \\\"us-east-2\\\", \\\"title\\\": \\\"us-east-2 EMRMonolog Events\\\", \\\"view\\\": \\\"table\\\" } }, { \\\"height\\\": 5, \\\"width\\\": 24, \\\"y\\\": 0, \\\"x\\\": 0, \\\"type\\\": \\\"log\\\", \\\"properties\\\": { \\\"query\\\": \\\"SOURCE \\\\\\\"{{CloudWatchLogGroup}}\\\\\\\" | parse @message \\\\\\\"* *\\\\\\\\t*\\\\\\\\t*\\\\\\\\t*\\\\\\\\t*\\\\\\\\t*\\\\\\\\t*\\\\\\\" as EventDate, event_time, cluster_id, instance_id, issue_name, issue_description, issue_link, log_message | DISPLAY  EventDate, event_time, cluster_id, instance_id, issue_name, issue_description, issue_link\\\", \\\"region\\\": \\\"us-west-1\\\", \\\"title\\\": \\\"us-west-1 EMRMonolog Events\\\", \\\"view\\\": \\\"table\\\" } }, { \\\"height\\\": 5, \\\"width\\\": 24, \\\"y\\\": 0, \\\"x\\\": 0, \\\"type\\\": \\\"log\\\", \\\"properties\\\": { \\\"query\\\": \\\"SOURCE \\\\\\\"{{CloudWatchLogGroup}}\\\\\\\" | parse @message \\\\\\\"* *\\\\\\\\t*\\\\\\\\t*\\\\\\\\t*\\\\\\\\t*\\\\\\\\t*\\\\\\\\t*\\\\\\\" as EventDate, event_time, cluster_id, instance_id, issue_name, issue_description, issue_link, log_message | DISPLAY  EventDate, event_time, cluster_id, instance_id, issue_name, issue_description, issue_link\\\", \\\"region\\\": \\\"us-west-2\\\", \\\"title\\\": \\\"us-west-2 EMRMonolog Events\\\", \\\"view\\\": \\\"table\\\" } }, { \\\"height\\\": 5, \\\"width\\\": 24, \\\"y\\\": 0, \\\"x\\\": 0, \\\"type\\\": \\\"log\\\", \\\"properties\\\": { \\\"query\\\": \\\"SOURCE \\\\\\\"{{CloudWatchLogGroup}}\\\\\\\" | parse @message \\\\\\\"* *\\\\\\\\t*\\\\\\\\t*\\\\\\\\t*\\\\\\\\t*\\\\\\\\t*\\\\\\\\t*\\\\\\\" as EventDate, event_time, cluster_id, instance_id, issue_name, issue_description, issue_link, log_message | DISPLAY  EventDate, event_time, cluster_id, instance_id, issue_name, issue_description, issue_link\\\", \\\"region\\\": \\\"af-south-1\\\", \\\"title\\\": \\\"af-south-1 EMRMonolog Events\\\", \\\"view\\\": \\\"table\\\" } }, { \\\"height\\\": 5, \\\"width\\\": 24, \\\"y\\\": 0, \\\"x\\\": 0, \\\"type\\\": \\\"log\\\", \\\"properties\\\": { \\\"query\\\": \\\"SOURCE \\\\\\\"{{CloudWatchLogGroup}}\\\\\\\" | parse @message \\\\\\\"* *\\\\\\\\t*\\\\\\\\t*\\\\\\\\t*\\\\\\\\t*\\\\\\\\t*\\\\\\\\t*\\\\\\\" as EventDate, event_time, cluster_id, instance_id, issue_name, issue_description, issue_link, log_message | DISPLAY  EventDate, event_time, cluster_id, instance_id, issue_name, issue_description, issue_link\\\", \\\"region\\\": \\\"ap-east-1\\\", \\\"title\\\": \\\"ap-east-1 EMRMonolog Events\\\", \\\"view\\\": \\\"table\\\" } }, { \\\"height\\\": 5, \\\"width\\\": 24, \\\"y\\\": 0, \\\"x\\\": 0, \\\"type\\\": \\\"log\\\", \\\"properties\\\": { \\\"query\\\": \\\"SOURCE \\\\\\\"{{CloudWatchLogGroup}}\\\\\\\" | parse @message \\\\\\\"* *\\\\\\\\t*\\\\\\\\t*\\\\\\\\t*\\\\\\\\t*\\\\\\\\t*\\\\\\\\t*\\\\\\\" as EventDate, event_time, cluster_id, instance_id, issue_name, issue_description, issue_link, log_message | DISPLAY  EventDate, event_time, cluster_id, instance_id, issue_name, issue_description, issue_link\\\", \\\"region\\\": \\\"ap-south-1\\\", \\\"title\\\": \\\"ap-south-1 EMRMonolog Events\\\", \\\"view\\\": \\\"table\\\" } }, { \\\"height\\\": 5, \\\"width\\\": 24, \\\"y\\\": 0, \\\"x\\\": 0, \\\"type\\\": \\\"log\\\", \\\"properties\\\": { \\\"query\\\": \\\"SOURCE \\\\\\\"{{CloudWatchLogGroup}}\\\\\\\" | parse @message \\\\\\\"* *\\\\\\\\t*\\\\\\\\t*\\\\\\\\t*\\\\\\\\t*\\\\\\\\t*\\\\\\\\t*\\\\\\\" as EventDate, event_time, cluster_id, instance_id, issue_name, issue_description, issue_link, log_message | DISPLAY  EventDate, event_time, cluster_id, instance_id, issue_name, issue_description, issue_link\\\", \\\"region\\\": \\\"ap-northeast-3\\\", \\\"title\\\": \\\"ap-northeast-3 EMRMonolog Events\\\", \\\"view\\\": \\\"table\\\" } }, { \\\"height\\\": 5, \\\"width\\\": 24, \\\"y\\\": 0, \\\"x\\\": 0, \\\"type\\\": \\\"log\\\", \\\"properties\\\": { \\\"query\\\": \\\"SOURCE \\\\\\\"{{CloudWatchLogGroup}}\\\\\\\" | parse @message \\\\\\\"* *\\\\\\\\t*\\\\\\\\t*\\\\\\\\t*\\\\\\\\t*\\\\\\\\t*\\\\\\\\t*\\\\\\\" as EventDate, event_time, cluster_id, instance_id, issue_name, issue_description, issue_link, log_message | DISPLAY  EventDate, event_time, cluster_id, instance_id, issue_name, issue_description, issue_link\\\", \\\"region\\\": \\\"ap-northeast-2\\\", \\\"title\\\": \\\"ap-northeast-2 EMRMonolog Events\\\", \\\"view\\\": \\\"table\\\" } }, { \\\"height\\\": 5, \\\"width\\\": 24, \\\"y\\\": 0, \\\"x\\\": 0, \\\"type\\\": \\\"log\\\", \\\"properties\\\": { \\\"query\\\": \\\"SOURCE \\\\\\\"{{CloudWatchLogGroup}}\\\\\\\" | parse @message \\\\\\\"* *\\\\\\\\t*\\\\\\\\t*\\\\\\\\t*\\\\\\\\t*\\\\\\\\t*\\\\\\\\t*\\\\\\\" as EventDate, event_time, cluster_id, instance_id, issue_name, issue_description, issue_link, log_message | DISPLAY  EventDate, event_time, cluster_id, instance_id, issue_name, issue_description, issue_link\\\", \\\"region\\\": \\\"ap-northeast-1\\\", \\\"title\\\": \\\"ap-northeast-1 EMRMonolog Events\\\", \\\"view\\\": \\\"table\\\" } }, { \\\"height\\\": 5, \\\"width\\\": 24, \\\"y\\\": 0, \\\"x\\\": 0, \\\"type\\\": \\\"log\\\", \\\"properties\\\": { \\\"query\\\": \\\"SOURCE \\\\\\\"{{CloudWatchLogGroup}}\\\\\\\" | parse @message \\\\\\\"* *\\\\\\\\t*\\\\\\\\t*\\\\\\\\t*\\\\\\\\t*\\\\\\\\t*\\\\\\\\t*\\\\\\\" as EventDate, event_time, cluster_id, instance_id, issue_name, issue_description, issue_link, log_message | DISPLAY  EventDate, event_time, cluster_id, instance_id, issue_name, issue_description, issue_link\\\", \\\"region\\\": \\\"ap-southeast-1\\\", \\\"title\\\": \\\"ap-southeast-1 EMRMonolog Events\\\", \\\"view\\\": \\\"table\\\" } }, { \\\"height\\\": 5, \\\"width\\\": 24, \\\"y\\\": 0, \\\"x\\\": 0, \\\"type\\\": \\\"log\\\", \\\"properties\\\": { \\\"query\\\": \\\"SOURCE \\\\\\\"{{CloudWatchLogGroup}}\\\\\\\" | parse @message \\\\\\\"* *\\\\\\\\t*\\\\\\\\t*\\\\\\\\t*\\\\\\\\t*\\\\\\\\t*\\\\\\\\t*\\\\\\\" as EventDate, event_time, cluster_id, instance_id, issue_name, issue_description, issue_link, log_message | DISPLAY  EventDate, event_time, cluster_id, instance_id, issue_name, issue_description, issue_link\\\", \\\"region\\\": \\\"ap-southeast-2\\\", \\\"title\\\": \\\"ap-southeast-2 EMRMonolog Events\\\", \\\"view\\\": \\\"table\\\" } }, { \\\"height\\\": 5, \\\"width\\\": 24, \\\"y\\\": 0, \\\"x\\\": 0, \\\"type\\\": \\\"log\\\", \\\"properties\\\": { \\\"query\\\": \\\"SOURCE \\\\\\\"{{CloudWatchLogGroup}}\\\\\\\" | parse @message \\\\\\\"* *\\\\\\\\t*\\\\\\\\t*\\\\\\\\t*\\\\\\\\t*\\\\\\\\t*\\\\\\\\t*\\\\\\\" as EventDate, event_time, cluster_id, instance_id, issue_name, issue_description, issue_link, log_message | DISPLAY  EventDate, event_time, cluster_id, instance_id, issue_name, issue_description, issue_link\\\", \\\"region\\\": \\\"eu-west-1\\\", \\\"title\\\": \\\"eu-west-1 EMRMonolog Events\\\", \\\"view\\\": \\\"table\\\" } }, { \\\"height\\\": 5, \\\"width\\\": 24, \\\"y\\\": 0, \\\"x\\\": 0, \\\"type\\\": \\\"log\\\", \\\"properties\\\": { \\\"query\\\": \\\"SOURCE \\\\\\\"{{CloudWatchLogGroup}}\\\\\\\" | parse @message \\\\\\\"* *\\\\\\\\t*\\\\\\\\t*\\\\\\\\t*\\\\\\\\t*\\\\\\\\t*\\\\\\\\t*\\\\\\\" as EventDate, event_time, cluster_id, instance_id, issue_name, issue_description, issue_link, log_message | DISPLAY  EventDate, event_time, cluster_id, instance_id, issue_name, issue_description, issue_link\\\", \\\"region\\\": \\\"eu-west-2\\\", \\\"title\\\": \\\"eu-west-2 EMRMonolog Events\\\", \\\"view\\\": \\\"table\\\" } }, { \\\"height\\\": 5, \\\"width\\\": 24, \\\"y\\\": 0, \\\"x\\\": 0, \\\"type\\\": \\\"log\\\", \\\"properties\\\": { \\\"query\\\": \\\"SOURCE \\\\\\\"{{CloudWatchLogGroup}}\\\\\\\" | parse @message \\\\\\\"* *\\\\\\\\t*\\\\\\\\t*\\\\\\\\t*\\\\\\\\t*\\\\\\\\t*\\\\\\\\t*\\\\\\\" as EventDate, event_time, cluster_id, instance_id, issue_name, issue_description, issue_link, log_message | DISPLAY  EventDate, event_time, cluster_id, instance_id, issue_name, issue_description, issue_link\\\", \\\"region\\\": \\\"eu-south-1\\\", \\\"title\\\": \\\"eu-south-1 EMRMonolog Events\\\", \\\"view\\\": \\\"table\\\" } }, { \\\"height\\\": 5, \\\"width\\\": 24, \\\"y\\\": 0, \\\"x\\\": 0, \\\"type\\\": \\\"log\\\", \\\"properties\\\": { \\\"query\\\": \\\"SOURCE \\\\\\\"{{CloudWatchLogGroup}}\\\\\\\" | parse @message \\\\\\\"* *\\\\\\\\t*\\\\\\\\t*\\\\\\\\t*\\\\\\\\t*\\\\\\\\t*\\\\\\\\t*\\\\\\\" as EventDate, event_time, cluster_id, instance_id, issue_name, issue_description, issue_link, log_message | DISPLAY  EventDate, event_time, cluster_id, instance_id, issue_name, issue_description, issue_link\\\", \\\"region\\\": \\\"eu-west-3\\\", \\\"title\\\": \\\"eu-west-3 EMRMonolog Events\\\", \\\"view\\\": \\\"table\\\" } }, { \\\"height\\\": 5, \\\"width\\\": 24, \\\"y\\\": 0, \\\"x\\\": 0, \\\"type\\\": \\\"log\\\", \\\"properties\\\": { \\\"query\\\": \\\"SOURCE \\\\\\\"{{CloudWatchLogGroup}}\\\\\\\" | parse @message \\\\\\\"* *\\\\\\\\t*\\\\\\\\t*\\\\\\\\t*\\\\\\\\t*\\\\\\\\t*\\\\\\\\t*\\\\\\\" as EventDate, event_time, cluster_id, instance_id, issue_name, issue_description, issue_link, log_message | DISPLAY  EventDate, event_time, cluster_id, instance_id, issue_name, issue_description, issue_link\\\", \\\"region\\\": \\\"eu-north-1\\\", \\\"title\\\": \\\"eu-north-1 EMRMonolog Events\\\", \\\"view\\\": \\\"table\\\" } }, { \\\"height\\\": 5, \\\"width\\\": 24, \\\"y\\\": 0, \\\"x\\\": 0, \\\"type\\\": \\\"log\\\", \\\"properties\\\": { \\\"query\\\": \\\"SOURCE \\\\\\\"{{CloudWatchLogGroup}}\\\\\\\" | parse @message \\\\\\\"* *\\\\\\\\t*\\\\\\\\t*\\\\\\\\t*\\\\\\\\t*\\\\\\\\t*\\\\\\\\t*\\\\\\\" as EventDate, event_time, cluster_id, instance_id, issue_name, issue_description, issue_link, log_message | DISPLAY  EventDate, event_time, cluster_id, instance_id, issue_name, issue_description, issue_link\\\", \\\"region\\\": \\\"me-south-1\\\", \\\"title\\\": \\\"me-south-1 EMRMonolog Events\\\", \\\"view\\\": \\\"table\\\" } }, { \\\"height\\\": 5, \\\"width\\\": 24, \\\"y\\\": 0, \\\"x\\\": 0, \\\"type\\\": \\\"log\\\", \\\"properties\\\": { \\\"query\\\": \\\"SOURCE \\\\\\\"{{CloudWatchLogGroup}}\\\\\\\" | parse @message \\\\\\\"* *\\\\\\\\t*\\\\\\\\t*\\\\\\\\t*\\\\\\\\t*\\\\\\\\t*\\\\\\\\t*\\\\\\\" as EventDate, event_time, cluster_id, instance_id, issue_name, issue_description, issue_link, log_message | DISPLAY  EventDate, event_time, cluster_id, instance_id, issue_name, issue_description, issue_link\\\", \\\"region\\\": \\\"sa-east-1\\\", \\\"title\\\": \\\"sa-east-1 EMRMonolog Events\\\", \\\"view\\\": \\\"table\\\" } }, { \\\"height\\\": 5, \\\"width\\\": 24, \\\"y\\\": 0, \\\"x\\\": 0, \\\"type\\\": \\\"log\\\", \\\"properties\\\": { \\\"query\\\": \\\"SOURCE \\\\\\\"{{CloudWatchLogGroup}}\\\\\\\" | parse @message \\\\\\\"* *\\\\\\\\t*\\\\\\\\t*\\\\\\\\t*\\\\\\\\t*\\\\\\\\t*\\\\\\\\t*\\\\\\\" as EventDate, event_time, cluster_id, instance_id, issue_name, issue_description, issue_link, log_message | DISPLAY  EventDate, event_time, cluster_id, instance_id, issue_name, issue_description, issue_link\\\", \\\"region\\\": \\\"eu-central-1\\\", \\\"title\\\": \\\"eu-central-1 EMRMonolog Events\\\", \\\"view\\\": \\\"table\\\" } } ] }\"\n      },\n      \"description\": \"This step will create CW Dashboard with name as mentioned in parameter \\\"CloudWatchLogGroup\\\", if it does not exist already.\"\n    }\n  ]\n}",
  "CreatedDate": "2022-01-11T18:28:02.782Z",
  "DisplayName": null,
  "DocumentFormat": {
    "Value": "JSON"
  },
  "DocumentType": {
    "Value": "Automation"
  },
  "DocumentVersion": "1",
  "Name": "AWSSupport-AnalyzeEMRLogs",
  "Requires": [],
  "ReviewStatus": null,
  "Status": {
    "Value": "Active"
  },
  "StatusInformation": null,
  "VersionName": null,
  "ResponseMetadata": {
    "RequestId": "1617029a-46bc-4abb-a38c-f35f1a02df76",
    "Metadata": {},
    "ChecksumAlgorithm": 0,
    "ChecksumValidationStatus": 0
  },
  "ContentLength": 63916,
  "HttpStatusCode": 200,
  "LoggedAt": "2022-03-15T07:13:15.1855854+00:00"
}
