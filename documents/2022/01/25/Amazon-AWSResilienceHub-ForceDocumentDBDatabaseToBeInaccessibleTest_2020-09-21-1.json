{
  "AttachmentsContent": [],
  "Content": "{\n  \"description\" : \"## Id\\nAWSResilienceHub-ForceDocumentDBDatabaseToBeInaccessibleTest_2020-09-21\\n\\n## Intent\\nTest that the alarm setup detects and alerts when database becomes unavailable and application can reconnect\\nwithin expected recovery time\\n\\n## Type\\nTEST\\n\\n## Risk\\nMedium\\n\\n## Requirements\\n  * Available DocumentDB Cluster\\n  * There is a [synthetic alarm](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch_Synthetics_Canaries.html) setup for application that alerts when unable connect to the DocumentDB cluster\\n\\n## Permissions required for AutomationAssumeRole\\n  * cloudwatch:DescribeAlarms\\n  * ec2:CreateSecurityGroup\\n  * ec2:DescribeSecurityGroups\\n  * ec2:DescribeSubnets\\n  * rds:DescribeDBClusters\\n  * rds:DescribeDBInstances\\n  * rds:DescribeDBSubnetGroups\\n  * rds:ModifyDBCluster\\n  * ssm:GetAutomationExecution\\n  * ssm:GetParameters\\n  * ssm:StartAutomationExecution\\n  * ec2:CreateTags (for `ec2:CreateAction` value \\\"CreateSecurityGroup\\\")\\n  * iam:PassRole\\n\\n##### Permissions for security groups with tag `ec2:ResourceTag/AWSResilienceHub` value \\\"docdb:test:database_alarm\\\"\\n  * ec2:DeleteSecurityGroup\\n  * ec2:RevokeSecurityGroupEgress\\n  * ec2:RevokeSecurityGroupIngress\\n  * ec2:UpdateSecurityGroupRuleDescriptionsIngress\\n\\n## Supports Rollback\\nYes. Restores the original security group\\n\\n## Cancellation behavior\\nRestores the original security group\\n\\n## Inputs\\n### (Required) AutomationAssumeRole\\n  * type: String\\n  * description: ARN of the IAM role with permissions listed above\\n\\n### (Required) DBClusterIdentifier\\n  * type: String\\n  * description: DocumentDB Cluster Identifier\\n\\n### (Required) DatabaseConnectionAttemptAlarmName\\n  * type: String\\n  * description: Name of the alarm that indicates that the application can't connect to DocumentDB\\n\\n### (Optional) IsRollback\\n  * type: String\\n  * description: Run the rollback steps of the document. True or False. If True, the parameter PreviousExecutionId should also be specified\\n  * default: false\\n\\n### (Optional) PreviousExecutionId\\n  * type: String\\n  * description: SSM execution ID of the previous execution of this document for which resources need to be cleaned up\\n\\n## Details\\nThe document creates and attaches to a DocumentDB cluster an empty security group which prevents\\napplications from connecting. In case of issues users should manually remove the empty security group.\\n\\n## Steps executed in normal flow\\n  * AssertDBClusterExistsInAvailableState\\n  * AssertAlarmToBeGreenBeforeTest\\n  * BackupDbClusterProperties\\n  * GetOneOfSubnets\\n  * GetVpc\\n  * CreateEmptySecurityGroup\\n  * ModifyVpcSecurityGroups\\n  * AssertAlarmToBeRed\\n  * AssertClusterIsAvailable\\n  * AssertInstancesAreAvailable\\n  * RestoreSecurityGroupIds\\n  * RemoveEmptySecurityGroup\\n  * AssertAlarmToBeGreen\\n\\n## Steps executed in rollback flow\\n  * CheckIsRollback\\n  * GetDBClusterIdentifierFromPreviousExecution\\n  * AssertDBClusterIdentifier\\n  * PrepareVpcSecurityGroupIds\\n  * PrepareEmptyVpcSecurityGroupId\\n  * PrepareDBInstanceIdentifiers\\n  * AssertInstancesAreAvailableOnRollbackPreviousExecution\\n  * RestoreSecurityGroupIdsOnRollbackPreviousExecution\\n  * RemoveEmptySecurityGroupOnRollbackPreviousExecution\\n\\n## Outputs\\n### CreateEmptySecurityGroup.EmptySecurityGroupId\\n  * type: String\\n  * description: Id of the created empty security group\",\n  \"schemaVersion\" : \"0.3\",\n  \"assumeRole\" : \"{{ AutomationAssumeRole }}\",\n  \"parameters\" : {\n    \"DBClusterIdentifier\" : {\n      \"type\" : \"String\",\n      \"description\" : \"(Required) DocDb Cluster Identifier\"\n    },\n    \"DatabaseConnectionAttemptAlarmName\" : {\n      \"type\" : \"String\",\n      \"description\" : \"(Required) Name of the alarm for db cluster. This should be green after the test.\"\n    },\n    \"IsRollback\" : {\n      \"type\" : \"String\",\n      \"description\" : \"(Optional) Set true to start the rollback.\",\n      \"default\" : \"false\"\n    },\n    \"PreviousExecutionId\" : {\n      \"type\" : \"String\",\n      \"description\" : \"(Optional) Previous execution id for which rollback will be started.\",\n      \"default\" : \"\"\n    },\n    \"AutomationAssumeRole\" : {\n      \"type\" : \"String\",\n      \"description\" : \"(Required) The ARN of the role that allows Automation to perform the actions on your behalf. If no role is specified, Systems Manager Automation uses your IAM permissions to run this document.\"\n    }\n  },\n  \"outputs\" : [ \"CreateEmptySecurityGroup.EmptySecurityGroupId\" ],\n  \"mainSteps\" : [ {\n    \"name\" : \"CheckIsRollback\",\n    \"description\" : \"Check if document should be executed in rollback mode\",\n    \"action\" : \"aws:branch\",\n    \"inputs\" : {\n      \"Choices\" : [ {\n        \"NextStep\" : \"GetDBClusterIdentifierFromPreviousExecution\",\n        \"Variable\" : \"{{IsRollback}}\",\n        \"StringEquals\" : \"true\"\n      } ],\n      \"Default\" : \"AssertDBClusterExistsInAvailableState\"\n    }\n  }, {\n    \"name\" : \"GetDBClusterIdentifierFromPreviousExecution\",\n    \"description\" : \"Get input from previous execution. This will be used to validate that rollback is executed with the same input\",\n    \"action\" : \"aws:executeScript\",\n    \"outputs\" : [ {\n      \"Name\" : \"DBClusterIdentifier\",\n      \"Selector\" : \"$.Payload.DBClusterIdentifier[0]\",\n      \"Type\" : \"String\"\n    } ],\n    \"inputs\" : {\n      \"Runtime\" : \"python3.7\",\n      \"Handler\" : \"get_inputs_from_ssm_execution\",\n      \"InputPayload\" : {\n        \"ExecutionId\" : \"{{ PreviousExecutionId }}\"\n      },\n      \"Script\" : \"import json\\nimport boto3\\nfrom botocore.config import Config\\n\\n\\n\\n\\ndef get_inputs_from_ssm_execution(events, context):\\n    output = {}\\n    config = Config(retries={'max_attempts': 20, 'mode': 'standard'})\\n    ssm = boto3.client('ssm', config=config)\\n\\n    if 'ExecutionId' not in events:\\n        raise KeyError('Requires ExecutionId')\\n\\n    if not events['ExecutionId']:\\n        raise KeyError('Requires not empty ExecutionId')\\n\\n    response = ssm.get_automation_execution(AutomationExecutionId=events['ExecutionId'])\\n    response_parameters = response['AutomationExecution']['Parameters']\\n    # TODO DIG-853\\n    for parameter in response_parameters:\\n        output[parameter] = response_parameters[parameter]\\n\\n    return output\"\n    }\n  }, {\n    \"name\" : \"AssertDBClusterIdentifier\",\n    \"description\" : \"Validate that rollback is executed with the same input\",\n    \"action\" : \"aws:branch\",\n    \"inputs\" : {\n      \"Choices\" : [ {\n        \"NextStep\" : \"AssertDBClusterExistsInAvailableStateOnRollbackPreviousExecution\",\n        \"Variable\" : \"{{ GetDBClusterIdentifierFromPreviousExecution.DBClusterIdentifier }}\",\n        \"StringEquals\" : \"{{ DBClusterIdentifier }}\"\n      } ]\n    },\n    \"isEnd\" : true\n  }, {\n    \"name\" : \"AssertDBClusterExistsInAvailableStateOnRollbackPreviousExecution\",\n    \"description\" : \"Validate that cluster is available\",\n    \"action\" : \"aws:waitForAwsResourceProperty\",\n    \"timeoutSeconds\" : 600,\n    \"inputs\" : {\n      \"Service\" : \"docdb\",\n      \"Api\" : \"DescribeDBClusters\",\n      \"DBClusterIdentifier\" : \"{{ DBClusterIdentifier }}\",\n      \"PropertySelector\" : \"$.DBClusters[0].Status\",\n      \"DesiredValues\" : [ \"available\" ]\n    }\n  }, {\n    \"name\" : \"PrepareVpcSecurityGroupIds\",\n    \"description\" : \"Get original security groups\",\n    \"action\" : \"aws:executeScript\",\n    \"outputs\" : [ {\n      \"Name\" : \"VpcSecurityGroupIds\",\n      \"Selector\" : \"$.Payload.VpcSecurityGroupIds\",\n      \"Type\" : \"StringList\"\n    } ],\n    \"inputs\" : {\n      \"Runtime\" : \"python3.7\",\n      \"Handler\" : \"get_output_from_ssm_step_execution\",\n      \"InputPayload\" : {\n        \"ExecutionId\" : \"{{PreviousExecutionId}}\",\n        \"StepName\" : \"BackupDbClusterProperties\",\n        \"ResponseField\" : \"VpcSecurityGroupIds\"\n      },\n      \"Script\" : \"import json\\nimport boto3\\nfrom botocore.config import Config\\n\\n\\n\\ndef get_output_from_ssm_step_execution(events, context):\\n    config = Config(retries={'max_attempts': 20, 'mode': 'standard'})\\n    ssm = boto3.client('ssm', config=config)\\n\\n    if 'ExecutionId' not in events or 'StepName' not in events or 'ResponseField' not in events:\\n        raise KeyError('Requires ExecutionId, StepName and ResponseField in events')\\n\\n    ssm_response = ssm.get_automation_execution(AutomationExecutionId=events['ExecutionId'])\\n    for step in ssm_response['AutomationExecution']['StepExecutions']:\\n        if step['StepName'] == events['StepName']:\\n            response_fields = events['ResponseField'].split(',')\\n            output = {}\\n            for response_field in response_fields:\\n                if response_field in step['Outputs']:\\n                    output[response_field] = step['Outputs'][response_field]\\n                else:\\n                    \\\"\\\"\\\"\\n                    By default SSM ignores empty values when encodes API outputs to JSON. It may result in\\n                    a situation when an empty value is a valid value but step output completely misses it.\\n                    Usually happens with SQS queue policies, default policy is returned by API as an empty value\\n                    and executeApi step output ignores it. As a result, further steps in rollback execution will fail.\\n                    Instead of ignoring this value we should use a default empty value in rollback, i.e. empty string\\n                    represents a default sqs policy\\n                    \\\"\\\"\\\"\\n                    output[response_field] = ['']\\n            return output\\n\\n    # Could not find step name\\n    raise Exception('Can not find step name % in ssm execution response', events['StepName'])\"\n    }\n  }, {\n    \"name\" : \"PrepareEmptyVpcSecurityGroupId\",\n    \"description\" : \"Get empty security group id from the previous execution\",\n    \"action\" : \"aws:executeScript\",\n    \"outputs\" : [ {\n      \"Name\" : \"EmptySecurityGroupId\",\n      \"Selector\" : \"$.Payload.EmptySecurityGroupId[0]\",\n      \"Type\" : \"String\"\n    } ],\n    \"inputs\" : {\n      \"Runtime\" : \"python3.7\",\n      \"Handler\" : \"get_output_from_ssm_step_execution\",\n      \"InputPayload\" : {\n        \"ExecutionId\" : \"{{PreviousExecutionId}}\",\n        \"StepName\" : \"CreateEmptySecurityGroup\",\n        \"ResponseField\" : \"EmptySecurityGroupId\"\n      },\n      \"Script\" : \"import json\\nimport boto3\\nfrom botocore.config import Config\\n\\n\\n\\ndef get_output_from_ssm_step_execution(events, context):\\n    config = Config(retries={'max_attempts': 20, 'mode': 'standard'})\\n    ssm = boto3.client('ssm', config=config)\\n\\n    if 'ExecutionId' not in events or 'StepName' not in events or 'ResponseField' not in events:\\n        raise KeyError('Requires ExecutionId, StepName and ResponseField in events')\\n\\n    ssm_response = ssm.get_automation_execution(AutomationExecutionId=events['ExecutionId'])\\n    for step in ssm_response['AutomationExecution']['StepExecutions']:\\n        if step['StepName'] == events['StepName']:\\n            response_fields = events['ResponseField'].split(',')\\n            output = {}\\n            for response_field in response_fields:\\n                if response_field in step['Outputs']:\\n                    output[response_field] = step['Outputs'][response_field]\\n                else:\\n                    \\\"\\\"\\\"\\n                    By default SSM ignores empty values when encodes API outputs to JSON. It may result in\\n                    a situation when an empty value is a valid value but step output completely misses it.\\n                    Usually happens with SQS queue policies, default policy is returned by API as an empty value\\n                    and executeApi step output ignores it. As a result, further steps in rollback execution will fail.\\n                    Instead of ignoring this value we should use a default empty value in rollback, i.e. empty string\\n                    represents a default sqs policy\\n                    \\\"\\\"\\\"\\n                    output[response_field] = ['']\\n            return output\\n\\n    # Could not find step name\\n    raise Exception('Can not find step name % in ssm execution response', events['StepName'])\"\n    }\n  }, {\n    \"name\" : \"PrepareDBInstanceIdentifiers\",\n    \"description\" : \"Get original instance ids\",\n    \"action\" : \"aws:executeScript\",\n    \"outputs\" : [ {\n      \"Name\" : \"DBInstanceIdentifiers\",\n      \"Selector\" : \"$.Payload.DBInstanceIdentifiers\",\n      \"Type\" : \"StringList\"\n    } ],\n    \"inputs\" : {\n      \"Runtime\" : \"python3.7\",\n      \"Handler\" : \"get_output_from_ssm_step_execution\",\n      \"InputPayload\" : {\n        \"ExecutionId\" : \"{{PreviousExecutionId}}\",\n        \"StepName\" : \"BackupDbClusterProperties\",\n        \"ResponseField\" : \"DBInstanceIdentifiers\"\n      },\n      \"Script\" : \"import json\\nimport boto3\\nfrom botocore.config import Config\\n\\n\\n\\ndef get_output_from_ssm_step_execution(events, context):\\n    config = Config(retries={'max_attempts': 20, 'mode': 'standard'})\\n    ssm = boto3.client('ssm', config=config)\\n\\n    if 'ExecutionId' not in events or 'StepName' not in events or 'ResponseField' not in events:\\n        raise KeyError('Requires ExecutionId, StepName and ResponseField in events')\\n\\n    ssm_response = ssm.get_automation_execution(AutomationExecutionId=events['ExecutionId'])\\n    for step in ssm_response['AutomationExecution']['StepExecutions']:\\n        if step['StepName'] == events['StepName']:\\n            response_fields = events['ResponseField'].split(',')\\n            output = {}\\n            for response_field in response_fields:\\n                if response_field in step['Outputs']:\\n                    output[response_field] = step['Outputs'][response_field]\\n                else:\\n                    \\\"\\\"\\\"\\n                    By default SSM ignores empty values when encodes API outputs to JSON. It may result in\\n                    a situation when an empty value is a valid value but step output completely misses it.\\n                    Usually happens with SQS queue policies, default policy is returned by API as an empty value\\n                    and executeApi step output ignores it. As a result, further steps in rollback execution will fail.\\n                    Instead of ignoring this value we should use a default empty value in rollback, i.e. empty string\\n                    represents a default sqs policy\\n                    \\\"\\\"\\\"\\n                    output[response_field] = ['']\\n            return output\\n\\n    # Could not find step name\\n    raise Exception('Can not find step name % in ssm execution response', events['StepName'])\"\n    }\n  }, {\n    \"name\" : \"AssertInstancesAreAvailableOnRollbackPreviousExecution\",\n    \"action\" : \"aws:executeScript\",\n    \"description\" : \"Wait that instances are not in CONFIGURE_VPC_SECURITY_GROUP status\",\n    \"inputs\" : {\n      \"Runtime\" : \"python3.7\",\n      \"Handler\" : \"wait_for_available_instances\",\n      \"InputPayload\" : {\n        \"DBInstanceIdentifiers\" : \"{{PrepareDBInstanceIdentifiers.DBInstanceIdentifiers}}\",\n        \"WaitTimeout\" : 1200\n      },\n      \"Script\" : \"import logging\\nimport random\\nimport time\\nimport uuid\\nfrom concurrent.futures import ThreadPoolExecutor\\nfrom datetime import datetime\\nfrom operator import itemgetter\\nfrom typing import List\\n\\nimport boto3\\nfrom botocore.config import Config\\n\\nif len(logging.getLogger().handlers) > 0:\\n    # The Lambda environment pre-configures a handler logging to stderr. If a handler is already configured,\\n    # `.basicConfig` does not execute. Thus we set the level directly.\\n    logging.getLogger().setLevel(logging.INFO)\\nelse:\\n    logging.basicConfig(level=logging.INFO)\\nlogger = logging.getLogger(__name__)\\n\\n\\n\\ndef wait_for_available_instances(events, context):\\n    \\\"\\\"\\\"\\n    Wait for available instances\\n    \\\"\\\"\\\"\\n    required_params = [\\n        'DBInstanceIdentifiers',\\n        'WaitTimeout',\\n    ]\\n    for key in required_params:\\n        if not events.get(key):\\n            raise KeyError(f'Requires {key} in events')\\n\\n    initial_loop_timeout: int = events['WaitTimeout']\\n    db_instance_identifiers: List = events['DBInstanceIdentifiers']\\n\\n    docdb = boto3.client('docdb')\\n\\n    loop_timeout = initial_loop_timeout\\n    start_time = time.time()\\n    timeout_between_calls = 20\\n    response = None\\n    while loop_timeout > 0 and len(db_instance_identifiers) != 0:\\n        for identifier in db_instance_identifiers:\\n            response = docdb.describe_db_instances(DBInstanceIdentifier=identifier)\\n            status = response['DBInstances'][0]['DBInstanceStatus']\\n            if status == 'available':\\n                db_instance_identifiers.remove(identifier)\\n\\n        # Leave the loop if remained time less that timeout_between_calls\\n        loop_timeout = loop_timeout - (time.time() - start_time)\\n        if timeout_between_calls <= loop_timeout:\\n            time.sleep(timeout_between_calls)\\n        else:\\n            break\\n\\n    if len(db_instance_identifiers) != 0:\\n        message = f'DB Instances with identifier(-s) {db_instance_identifiers} ' \\\\\\n                  f'are not available after {initial_loop_timeout} second(-s).'\\n        logger.debug(f'{message} describe_db_instances response: {response}, db_instance_identifiers:'\\n                     f' {db_instance_identifiers}')\\n        raise TimeoutError(message)\"\n    }\n  }, {\n    \"name\" : \"RestoreSecurityGroupIdsOnRollbackPreviousExecution\",\n    \"description\" : \"Restore original security groups\",\n    \"action\" : \"aws:executeScript\",\n    \"inputs\" : {\n      \"Runtime\" : \"python3.7\",\n      \"Handler\" : \"restore_security_group_ids\",\n      \"InputPayload\" : {\n        \"VpcSecurityGroupIds\" : \"{{PrepareVpcSecurityGroupIds.VpcSecurityGroupIds}}\",\n        \"DBClusterIdentifier\" : \"{{DBClusterIdentifier}}\"\n      },\n      \"Script\" : \"import logging\\nimport random\\nimport time\\nimport uuid\\nfrom concurrent.futures import ThreadPoolExecutor\\nfrom datetime import datetime\\nfrom operator import itemgetter\\nfrom typing import List\\n\\nimport boto3\\nfrom botocore.config import Config\\n\\nif len(logging.getLogger().handlers) > 0:\\n    # The Lambda environment pre-configures a handler logging to stderr. If a handler is already configured,\\n    # `.basicConfig` does not execute. Thus we set the level directly.\\n    logging.getLogger().setLevel(logging.INFO)\\nelse:\\n    logging.basicConfig(level=logging.INFO)\\nlogger = logging.getLogger(__name__)\\n\\n\\n\\ndef restore_security_group_ids(events, context):\\n    \\\"\\\"\\\"\\n    Restore security group IDs for DB cluster\\n    :return: restored vpc security groups\\n    \\\"\\\"\\\"\\n    if not events.get('VpcSecurityGroupIds'):\\n        raise KeyError('Requires VpcSecurityGroupIds in events')\\n    if not events.get('DBClusterIdentifier'):\\n        raise KeyError('Requires DBClusterIdentifier in events')\\n\\n    vpc_security_group_ids: List = events['VpcSecurityGroupIds']\\n    db_cluster_identifier: str = events['DBClusterIdentifier']\\n    docdb = boto3.client('docdb')\\n    response = docdb.modify_db_cluster(DBClusterIdentifier=db_cluster_identifier,\\n                                       VpcSecurityGroupIds=vpc_security_group_ids)\\n    return {'VpcSecurityGroupIds': [member['VpcSecurityGroupId']\\n                                    for member in response['DBCluster']['VpcSecurityGroups']]}\"\n    },\n    \"outputs\" : [ {\n      \"Name\" : \"VpcSecurityGroupIds\",\n      \"Selector\" : \"$.Payload.VpcSecurityGroupIds\",\n      \"Type\" : \"StringList\"\n    } ]\n  }, {\n    \"name\" : \"RemoveEmptySecurityGroupOnRollbackPreviousExecution\",\n    \"description\" : \"Delete the empty security group\",\n    \"action\" : \"aws:executeScript\",\n    \"timeoutSeconds\" : 900,\n    \"maxAttempts\" : 3,\n    \"inputs\" : {\n      \"Runtime\" : \"python3.7\",\n      \"Handler\" : \"remove_empty_security_group\",\n      \"InputPayload\" : {\n        \"EmptySecurityGroupId\" : \"{{PrepareEmptyVpcSecurityGroupId.EmptySecurityGroupId}}\"\n      },\n      \"Script\" : \"import boto3\\nimport logging\\nfrom datetime import datetime, timezone\\nimport time\\n\\nfrom botocore.exceptions import ClientError\\nfrom dateutil import parser\\n\\nlogger = logging.getLogger()\\nlogger.setLevel(logging.INFO)\\n\\n\\n\\n\\ndef remove_empty_security_group(events, context):\\n    required_params = [\\n        'EmptySecurityGroupId'\\n    ]\\n\\n    for key in required_params:\\n        if key not in events:\\n            raise KeyError(f'Requires {key} in events')\\n\\n    time_to_wait = 1800\\n    ec2_client = boto3.client('ec2')\\n    if 'Timeout' in events:\\n        time_to_wait = events['Timeout']\\n    timeout_timestamp = time.time() + int(time_to_wait)\\n\\n    while time.time() < timeout_timestamp:\\n        try:\\n            logger.info(f'Deleting empty security group: {events[\\\"EmptySecurityGroupId\\\"]}')\\n            group_list = ec2_client.describe_security_groups(\\n                Filters=[\\n                    {\\n                        'Name': 'group-id',\\n                        'Values': [\\n                            events[\\\"EmptySecurityGroupId\\\"],\\n                        ]\\n                    },\\n                ]\\n            )\\n            if not group_list['SecurityGroups']:\\n                break\\n            group_id = group_list['SecurityGroups'][0]['GroupId']\\n            logger.info(f'Deleting empty security group: {group_id}')\\n            response = ec2_client.delete_security_group(\\n                GroupId=group_id\\n            )\\n            if response['ResponseMetadata']['HTTPStatusCode'] < 400:\\n                break\\n        except ClientError as error:\\n            if error.response['Error']['Code'] == 'InvalidGroup.NotFound':\\n                logger.info(f\\\"Empty security group doesn't exist: {events['EmptySecurityGroupId']}\\\")\\n                break\\n            elif error.response['Error']['Code'] == 'DependencyViolation' \\\\\\n                    or error.response['Error']['Code'] == 'RequestLimitExceeded':\\n                time.sleep(5)\\n                continue\\n            else:\\n                raise error\\n\\n    if datetime.timestamp(datetime.now()) > timeout_timestamp:\\n        raise TimeoutError(f'Security group {events[\\\"EmptySecurityGroupId\\\"]} couldn\\\\'t '\\n                           f'be deleted in {time_to_wait} seconds')\"\n    },\n    \"isEnd\" : true\n  }, {\n    \"name\" : \"AssertDBClusterExistsInAvailableState\",\n    \"description\" : \"Validate that cluster is available\",\n    \"action\" : \"aws:waitForAwsResourceProperty\",\n    \"timeoutSeconds\" : 600,\n    \"inputs\" : {\n      \"Service\" : \"docdb\",\n      \"Api\" : \"DescribeDBClusters\",\n      \"DBClusterIdentifier\" : \"{{ DBClusterIdentifier }}\",\n      \"PropertySelector\" : \"$.DBClusters[0].Status\",\n      \"DesiredValues\" : [ \"available\" ]\n    }\n  }, {\n    \"name\" : \"AssertAlarmToBeGreenBeforeTest\",\n    \"description\" : \"Ensure alarm is green before starting test. Fail if alarm is not green within expected time.\",\n    \"action\" : \"aws:waitForAwsResourceProperty\",\n    \"timeoutSeconds\" : 1200,\n    \"inputs\" : {\n      \"Service\" : \"cloudwatch\",\n      \"Api\" : \"DescribeAlarms\",\n      \"AlarmNames\" : [ \"{{ DatabaseConnectionAttemptAlarmName }}\" ],\n      \"PropertySelector\" : \"$.MetricAlarms[0].StateValue\",\n      \"DesiredValues\" : [ \"OK\" ]\n    }\n  }, {\n    \"name\" : \"BackupDbClusterProperties\",\n    \"description\" : \"Backup original security groups for rollback\",\n    \"action\" : \"aws:executeScript\",\n    \"inputs\" : {\n      \"Runtime\" : \"python3.7\",\n      \"Handler\" : \"get_db_cluster_properties\",\n      \"InputPayload\" : {\n        \"DBClusterIdentifier\" : \"{{ DBClusterIdentifier }}\"\n      },\n      \"Script\" : \"import logging\\nimport random\\nimport time\\nimport uuid\\nfrom concurrent.futures import ThreadPoolExecutor\\nfrom datetime import datetime\\nfrom operator import itemgetter\\nfrom typing import List\\n\\nimport boto3\\nfrom botocore.config import Config\\n\\nif len(logging.getLogger().handlers) > 0:\\n    # The Lambda environment pre-configures a handler logging to stderr. If a handler is already configured,\\n    # `.basicConfig` does not execute. Thus we set the level directly.\\n    logging.getLogger().setLevel(logging.INFO)\\nelse:\\n    logging.basicConfig(level=logging.INFO)\\nlogger = logging.getLogger(__name__)\\n\\n\\n\\ndef get_db_cluster_properties(events, context):\\n    \\\"\\\"\\\"\\n    Get db cluster properties.\\n    \\\"\\\"\\\"\\n    if not events.get('DBClusterIdentifier'):\\n        raise KeyError('Requires DBClusterIdentifier in events')\\n\\n    db_cluster_identifier: str = events['DBClusterIdentifier']\\n    docdb = boto3.client('docdb')\\n    response = docdb.describe_db_clusters(DBClusterIdentifier=db_cluster_identifier)\\n    return {'DBInstanceIdentifiers': [member['DBInstanceIdentifier']\\n                                      for member in response['DBClusters'][0]['DBClusterMembers']],\\n            'DBSubnetGroup': response['DBClusters'][0]['DBSubnetGroup'],\\n            'VpcSecurityGroupIds': [member['VpcSecurityGroupId']\\n                                    for member in response['DBClusters'][0]['VpcSecurityGroups']]}\"\n    },\n    \"outputs\" : [ {\n      \"Name\" : \"DBInstanceIdentifiers\",\n      \"Selector\" : \"$.Payload.DBInstanceIdentifiers\",\n      \"Type\" : \"StringList\"\n    }, {\n      \"Name\" : \"VpcSecurityGroupIds\",\n      \"Selector\" : \"$.Payload.VpcSecurityGroupIds\",\n      \"Type\" : \"StringList\"\n    }, {\n      \"Name\" : \"DBSubnetGroup\",\n      \"Selector\" : \"$.Payload.DBSubnetGroup\",\n      \"Type\" : \"String\"\n    } ]\n  }, {\n    \"name\" : \"GetOneOfSubnets\",\n    \"description\" : \"Get available subnet\",\n    \"action\" : \"aws:executeAwsApi\",\n    \"inputs\" : {\n      \"Service\" : \"docdb\",\n      \"Api\" : \"DescribeDBSubnetGroups\",\n      \"DBSubnetGroupName\" : \"{{BackupDbClusterProperties.DBSubnetGroup}}\"\n    },\n    \"outputs\" : [ {\n      \"Name\" : \"SubnetIdentifier\",\n      \"Selector\" : \"$.DBSubnetGroups[0].Subnets[0].SubnetIdentifier\",\n      \"Type\" : \"String\"\n    } ]\n  }, {\n    \"name\" : \"GetVpc\",\n    \"description\" : \"Get available VPC\",\n    \"action\" : \"aws:executeAwsApi\",\n    \"inputs\" : {\n      \"Service\" : \"ec2\",\n      \"Api\" : \"DescribeSubnets\",\n      \"Filters\" : [ {\n        \"Name\" : \"subnet-id\",\n        \"Values\" : [ \"{{ GetOneOfSubnets.SubnetIdentifier }}\" ]\n      } ]\n    },\n    \"outputs\" : [ {\n      \"Name\" : \"VpcId\",\n      \"Selector\" : \"$.Subnets[0].VpcId\",\n      \"Type\" : \"String\"\n    } ]\n  }, {\n    \"name\" : \"CreateEmptySecurityGroup\",\n    \"description\" : \"Crete an empty security group\",\n    \"action\" : \"aws:executeScript\",\n    \"onFailure\" : \"step:AssertClusterIsAvailable\",\n    \"onCancel\" : \"step:TriggerRollback\",\n    \"outputs\" : [ {\n      \"Name\" : \"EmptySecurityGroupId\",\n      \"Selector\" : \"$.Payload.EmptySecurityGroupId\",\n      \"Type\" : \"String\"\n    } ],\n    \"inputs\" : {\n      \"Runtime\" : \"python3.7\",\n      \"Handler\" : \"create_empty_security_group\",\n      \"InputPayload\" : {\n        \"VpcId\" : \"{{GetVpc.VpcId}}\",\n        \"Tag\" : \"docdb:test:database_alarm\",\n        \"ExecutionId\" : \"{{automation:EXECUTION_ID}}\"\n      },\n      \"Script\" : \"import boto3\\nimport logging\\nfrom datetime import datetime, timezone\\nimport time\\n\\nfrom botocore.exceptions import ClientError\\nfrom dateutil import parser\\n\\nlogger = logging.getLogger()\\nlogger.setLevel(logging.INFO)\\n\\n\\n\\n\\ndef remove_empty_security_group(events, context):\\n    required_params = [\\n        'EmptySecurityGroupId'\\n    ]\\n\\n    for key in required_params:\\n        if key not in events:\\n            raise KeyError(f'Requires {key} in events')\\n\\n    time_to_wait = 1800\\n    ec2_client = boto3.client('ec2')\\n    if 'Timeout' in events:\\n        time_to_wait = events['Timeout']\\n    timeout_timestamp = time.time() + int(time_to_wait)\\n\\n    while time.time() < timeout_timestamp:\\n        try:\\n            logger.info(f'Deleting empty security group: {events[\\\"EmptySecurityGroupId\\\"]}')\\n            group_list = ec2_client.describe_security_groups(\\n                Filters=[\\n                    {\\n                        'Name': 'group-id',\\n                        'Values': [\\n                            events[\\\"EmptySecurityGroupId\\\"],\\n                        ]\\n                    },\\n                ]\\n            )\\n            if not group_list['SecurityGroups']:\\n                break\\n            group_id = group_list['SecurityGroups'][0]['GroupId']\\n            logger.info(f'Deleting empty security group: {group_id}')\\n            response = ec2_client.delete_security_group(\\n                GroupId=group_id\\n            )\\n            if response['ResponseMetadata']['HTTPStatusCode'] < 400:\\n                break\\n        except ClientError as error:\\n            if error.response['Error']['Code'] == 'InvalidGroup.NotFound':\\n                logger.info(f\\\"Empty security group doesn't exist: {events['EmptySecurityGroupId']}\\\")\\n                break\\n            elif error.response['Error']['Code'] == 'DependencyViolation' \\\\\\n                    or error.response['Error']['Code'] == 'RequestLimitExceeded':\\n                time.sleep(5)\\n                continue\\n            else:\\n                raise error\\n\\n    if datetime.timestamp(datetime.now()) > timeout_timestamp:\\n        raise TimeoutError(f'Security group {events[\\\"EmptySecurityGroupId\\\"]} couldn\\\\'t '\\n                           f'be deleted in {time_to_wait} seconds')\\n\\n\\n\\n\\ndef create_empty_security_group(events: dict, context: dict) -> dict:\\n    \\\"\\\"\\\"\\n    Creates a empty security group in provided VPC\\n    The name of this SG contains Execution Id of the SSM execution\\n    :param events: The dictionary that supposed to have the following keys:\\n        * `VpcId` - The vpc id to create SG into\\n        * `ExecutionId` - The execution id of SSM\\n        * `Tag` - a value of `AWSResilienceHub` tag to assign\\n    :param context:\\n    :return: Dict with two keys:\\n        * EmptySecurityGroupId - string wih SG id, you can use it as String parameter in SSM\\n        * EmptySecurityGroupId - one element list wih SG id, you can use it as StringList parameter in SSM\\n    \\\"\\\"\\\"\\n    required_params = [\\n        'VpcId',\\n        'ExecutionId',\\n        'Tag'\\n    ]\\n\\n    for key in required_params:\\n        if key not in events:\\n            raise KeyError(f'Requires {key} in events')\\n\\n    ec2_client = boto3.client('ec2')\\n\\n    group_id = ec2_client.create_security_group(\\n        Description=f'Empty SG for executionID {events[\\\"ExecutionId\\\"]}',\\n        GroupName=f'EmptySG-{events[\\\"ExecutionId\\\"]}',\\n        VpcId=events['VpcId'],\\n        TagSpecifications=[\\n            {\\n                'ResourceType': 'security-group',\\n                'Tags': [\\n                    {\\n                        'Key': 'AWSResilienceHub',\\n                        'Value': events['Tag']\\n                    },\\n                ]\\n            }\\n        ]\\n    )['GroupId']\\n\\n    result = ec2_client.revoke_security_group_egress(\\n        GroupId=group_id,\\n        IpPermissions=[\\n            {\\n                \\\"IpProtocol\\\": \\\"-1\\\",\\n                \\\"IpRanges\\\": [\\n                    {\\n                        \\\"CidrIp\\\": \\\"0.0.0.0/0\\\"\\n                    }\\n                ],\\n                \\\"Ipv6Ranges\\\": [],\\n                \\\"PrefixListIds\\\": [],\\n                \\\"UserIdGroupPairs\\\": []\\n            }\\n        ]\\n    )\\n    if not result['Return']:\\n        remove_empty_security_group({'EmptySecurityGroupId': group_id}, context)\\n        raise ClientError(\\n            error_response={\\n                \\\"Error\\\":\\n                {\\n                    \\\"Code\\\": \\\"CouldNotRevoke\\\",\\n                    \\\"Message\\\": f\\\"Could not revoke egress from sg: {group_id}\\\"\\n                }\\n            },\\n            operation_name='RevokeSecurityGroupEgress'\\n        )\\n    return {'EmptySecurityGroupId': group_id, 'EmptySecurityGroupIdList': [group_id]}\"\n    }\n  }, {\n    \"name\" : \"ModifyVpcSecurityGroups\",\n    \"description\" : \"Replace secutiry groups with the empty one\",\n    \"action\" : \"aws:executeAwsApi\",\n    \"onFailure\" : \"step:AssertClusterIsAvailable\",\n    \"onCancel\" : \"step:TriggerRollback\",\n    \"inputs\" : {\n      \"Service\" : \"docdb\",\n      \"Api\" : \"ModifyDBCluster\",\n      \"DBClusterIdentifier\" : \"{{ DBClusterIdentifier }}\",\n      \"VpcSecurityGroupIds\" : [ \"{{CreateEmptySecurityGroup.EmptySecurityGroupId}}\" ]\n    },\n    \"outputs\" : [ {\n      \"Name\" : \"VpcSecurityGroups\",\n      \"Selector\" : \"$.DBCluster.VpcSecurityGroups\",\n      \"Type\" : \"MapList\"\n    } ]\n  }, {\n    \"name\" : \"AssertAlarmToBeRed\",\n    \"description\" : \"Wait for expected alarm to be red after failure is injected\",\n    \"action\" : \"aws:waitForAwsResourceProperty\",\n    \"onFailure\" : \"step:AssertClusterIsAvailable\",\n    \"onCancel\" : \"step:TriggerRollback\",\n    \"timeoutSeconds\" : 1200,\n    \"inputs\" : {\n      \"Service\" : \"cloudwatch\",\n      \"Api\" : \"DescribeAlarms\",\n      \"AlarmNames\" : [ \"{{ DatabaseConnectionAttemptAlarmName }}\" ],\n      \"PropertySelector\" : \"$.MetricAlarms[0].StateValue\",\n      \"DesiredValues\" : [ \"ALARM\" ]\n    }\n  }, {\n    \"name\" : \"AssertClusterIsAvailable\",\n    \"description\" : \"Validate that cluster is available\",\n    \"action\" : \"aws:waitForAwsResourceProperty\",\n    \"onCancel\" : \"step:TriggerRollback\",\n    \"timeoutSeconds\" : 1200,\n    \"inputs\" : {\n      \"Service\" : \"docdb\",\n      \"Api\" : \"DescribeDBClusters\",\n      \"DBClusterIdentifier\" : \"{{ DBClusterIdentifier }}\",\n      \"PropertySelector\" : \"$.DBClusters[0].Status\",\n      \"DesiredValues\" : [ \"available\" ]\n    }\n  }, {\n    \"name\" : \"AssertInstancesAreAvailable\",\n    \"action\" : \"aws:executeScript\",\n    \"description\" : \"Wait that instances are not in CONFIGURE_VPC_SECURITY_GROUP status\",\n    \"onCancel\" : \"step:TriggerRollback\",\n    \"inputs\" : {\n      \"Runtime\" : \"python3.7\",\n      \"Handler\" : \"wait_for_available_instances\",\n      \"InputPayload\" : {\n        \"DBInstanceIdentifiers\" : \"{{BackupDbClusterProperties.DBInstanceIdentifiers}}\",\n        \"WaitTimeout\" : 1200\n      },\n      \"Script\" : \"import logging\\nimport random\\nimport time\\nimport uuid\\nfrom concurrent.futures import ThreadPoolExecutor\\nfrom datetime import datetime\\nfrom operator import itemgetter\\nfrom typing import List\\n\\nimport boto3\\nfrom botocore.config import Config\\n\\nif len(logging.getLogger().handlers) > 0:\\n    # The Lambda environment pre-configures a handler logging to stderr. If a handler is already configured,\\n    # `.basicConfig` does not execute. Thus we set the level directly.\\n    logging.getLogger().setLevel(logging.INFO)\\nelse:\\n    logging.basicConfig(level=logging.INFO)\\nlogger = logging.getLogger(__name__)\\n\\n\\n\\ndef wait_for_available_instances(events, context):\\n    \\\"\\\"\\\"\\n    Wait for available instances\\n    \\\"\\\"\\\"\\n    required_params = [\\n        'DBInstanceIdentifiers',\\n        'WaitTimeout',\\n    ]\\n    for key in required_params:\\n        if not events.get(key):\\n            raise KeyError(f'Requires {key} in events')\\n\\n    initial_loop_timeout: int = events['WaitTimeout']\\n    db_instance_identifiers: List = events['DBInstanceIdentifiers']\\n\\n    docdb = boto3.client('docdb')\\n\\n    loop_timeout = initial_loop_timeout\\n    start_time = time.time()\\n    timeout_between_calls = 20\\n    response = None\\n    while loop_timeout > 0 and len(db_instance_identifiers) != 0:\\n        for identifier in db_instance_identifiers:\\n            response = docdb.describe_db_instances(DBInstanceIdentifier=identifier)\\n            status = response['DBInstances'][0]['DBInstanceStatus']\\n            if status == 'available':\\n                db_instance_identifiers.remove(identifier)\\n\\n        # Leave the loop if remained time less that timeout_between_calls\\n        loop_timeout = loop_timeout - (time.time() - start_time)\\n        if timeout_between_calls <= loop_timeout:\\n            time.sleep(timeout_between_calls)\\n        else:\\n            break\\n\\n    if len(db_instance_identifiers) != 0:\\n        message = f'DB Instances with identifier(-s) {db_instance_identifiers} ' \\\\\\n                  f'are not available after {initial_loop_timeout} second(-s).'\\n        logger.debug(f'{message} describe_db_instances response: {response}, db_instance_identifiers:'\\n                     f' {db_instance_identifiers}')\\n        raise TimeoutError(message)\"\n    }\n  }, {\n    \"name\" : \"RestoreSecurityGroupIds\",\n    \"description\" : \"Restore original security groups\",\n    \"action\" : \"aws:executeScript\",\n    \"onCancel\" : \"step:TriggerRollback\",\n    \"inputs\" : {\n      \"Runtime\" : \"python3.7\",\n      \"Handler\" : \"restore_security_group_ids\",\n      \"InputPayload\" : {\n        \"VpcSecurityGroupIds\" : \"{{BackupDbClusterProperties.VpcSecurityGroupIds }}\",\n        \"DBClusterIdentifier\" : \"{{DBClusterIdentifier}}\"\n      },\n      \"Script\" : \"import logging\\nimport random\\nimport time\\nimport uuid\\nfrom concurrent.futures import ThreadPoolExecutor\\nfrom datetime import datetime\\nfrom operator import itemgetter\\nfrom typing import List\\n\\nimport boto3\\nfrom botocore.config import Config\\n\\nif len(logging.getLogger().handlers) > 0:\\n    # The Lambda environment pre-configures a handler logging to stderr. If a handler is already configured,\\n    # `.basicConfig` does not execute. Thus we set the level directly.\\n    logging.getLogger().setLevel(logging.INFO)\\nelse:\\n    logging.basicConfig(level=logging.INFO)\\nlogger = logging.getLogger(__name__)\\n\\n\\n\\ndef restore_security_group_ids(events, context):\\n    \\\"\\\"\\\"\\n    Restore security group IDs for DB cluster\\n    :return: restored vpc security groups\\n    \\\"\\\"\\\"\\n    if not events.get('VpcSecurityGroupIds'):\\n        raise KeyError('Requires VpcSecurityGroupIds in events')\\n    if not events.get('DBClusterIdentifier'):\\n        raise KeyError('Requires DBClusterIdentifier in events')\\n\\n    vpc_security_group_ids: List = events['VpcSecurityGroupIds']\\n    db_cluster_identifier: str = events['DBClusterIdentifier']\\n    docdb = boto3.client('docdb')\\n    response = docdb.modify_db_cluster(DBClusterIdentifier=db_cluster_identifier,\\n                                       VpcSecurityGroupIds=vpc_security_group_ids)\\n    return {'VpcSecurityGroupIds': [member['VpcSecurityGroupId']\\n                                    for member in response['DBCluster']['VpcSecurityGroups']]}\"\n    },\n    \"outputs\" : [ {\n      \"Name\" : \"VpcSecurityGroupIds\",\n      \"Selector\" : \"$.Payload.VpcSecurityGroupIds\",\n      \"Type\" : \"StringList\"\n    } ]\n  }, {\n    \"name\" : \"RemoveEmptySecurityGroup\",\n    \"description\" : \"Delete the empty security group\",\n    \"action\" : \"aws:executeScript\",\n    \"onCancel\" : \"step:TriggerRollback\",\n    \"timeoutSeconds\" : 900,\n    \"maxAttempts\" : 3,\n    \"inputs\" : {\n      \"Runtime\" : \"python3.7\",\n      \"Handler\" : \"remove_empty_security_group\",\n      \"InputPayload\" : {\n        \"EmptySecurityGroupId\" : \"{{CreateEmptySecurityGroup.EmptySecurityGroupId}}\"\n      },\n      \"Script\" : \"import boto3\\nimport logging\\nfrom datetime import datetime, timezone\\nimport time\\n\\nfrom botocore.exceptions import ClientError\\nfrom dateutil import parser\\n\\nlogger = logging.getLogger()\\nlogger.setLevel(logging.INFO)\\n\\n\\n\\n\\ndef remove_empty_security_group(events, context):\\n    required_params = [\\n        'EmptySecurityGroupId'\\n    ]\\n\\n    for key in required_params:\\n        if key not in events:\\n            raise KeyError(f'Requires {key} in events')\\n\\n    time_to_wait = 1800\\n    ec2_client = boto3.client('ec2')\\n    if 'Timeout' in events:\\n        time_to_wait = events['Timeout']\\n    timeout_timestamp = time.time() + int(time_to_wait)\\n\\n    while time.time() < timeout_timestamp:\\n        try:\\n            logger.info(f'Deleting empty security group: {events[\\\"EmptySecurityGroupId\\\"]}')\\n            group_list = ec2_client.describe_security_groups(\\n                Filters=[\\n                    {\\n                        'Name': 'group-id',\\n                        'Values': [\\n                            events[\\\"EmptySecurityGroupId\\\"],\\n                        ]\\n                    },\\n                ]\\n            )\\n            if not group_list['SecurityGroups']:\\n                break\\n            group_id = group_list['SecurityGroups'][0]['GroupId']\\n            logger.info(f'Deleting empty security group: {group_id}')\\n            response = ec2_client.delete_security_group(\\n                GroupId=group_id\\n            )\\n            if response['ResponseMetadata']['HTTPStatusCode'] < 400:\\n                break\\n        except ClientError as error:\\n            if error.response['Error']['Code'] == 'InvalidGroup.NotFound':\\n                logger.info(f\\\"Empty security group doesn't exist: {events['EmptySecurityGroupId']}\\\")\\n                break\\n            elif error.response['Error']['Code'] == 'DependencyViolation' \\\\\\n                    or error.response['Error']['Code'] == 'RequestLimitExceeded':\\n                time.sleep(5)\\n                continue\\n            else:\\n                raise error\\n\\n    if datetime.timestamp(datetime.now()) > timeout_timestamp:\\n        raise TimeoutError(f'Security group {events[\\\"EmptySecurityGroupId\\\"]} couldn\\\\'t '\\n                           f'be deleted in {time_to_wait} seconds')\"\n    }\n  }, {\n    \"name\" : \"AssertAlarmToBeGreen\",\n    \"description\" : \"Wait for the alarm to be green after test is complete\",\n    \"action\" : \"aws:waitForAwsResourceProperty\",\n    \"timeoutSeconds\" : 1200,\n    \"inputs\" : {\n      \"Service\" : \"cloudwatch\",\n      \"Api\" : \"DescribeAlarms\",\n      \"AlarmNames\" : [ \"{{ DatabaseConnectionAttemptAlarmName }}\" ],\n      \"PropertySelector\" : \"$.MetricAlarms[0].StateValue\",\n      \"DesiredValues\" : [ \"OK\" ]\n    },\n    \"isEnd\" : true\n  }, {\n    \"name\" : \"TriggerRollback\",\n    \"description\" : \"This step is executed when ssm document is cancelled while it was in progress. This step starts a new execution of document in rollback mode to rollback the changes made as part of normal execution\",\n    \"action\" : \"aws:executeScript\",\n    \"onFailure\" : \"Abort\",\n    \"outputs\" : [ {\n      \"Name\" : \"RollbackExecutionId\",\n      \"Selector\" : \"$.Payload.RollbackExecutionId\",\n      \"Type\" : \"String\"\n    } ],\n    \"inputs\" : {\n      \"Runtime\" : \"python3.7\",\n      \"Handler\" : \"start_rollback_execution\",\n      \"InputPayload\" : {\n        \"ExecutionId\" : \"{{automation:EXECUTION_ID}}\"\n      },\n      \"Script\" : \"import json\\nimport boto3\\nfrom botocore.config import Config\\n\\n\\n\\n\\ndef start_rollback_execution(events, context):\\n    output = {}\\n    config = Config(retries={'max_attempts': 20, 'mode': 'standard'})\\n    ssm = boto3.client('ssm', config=config)\\n\\n    if 'ExecutionId' not in events or not events['ExecutionId']:\\n        raise KeyError('Requires not empty ExecutionId')\\n\\n    response = ssm.get_automation_execution(AutomationExecutionId=events['ExecutionId'])\\n\\n    # Get parameters for current execution and add IsRollback and PreviousExecutionId\\n    response_parameters = response['AutomationExecution']['Parameters']\\n    response_parameters['IsRollback'] = ['true']\\n    response_parameters['PreviousExecutionId'] = [events['ExecutionId']]\\n\\n    rollback_execution_response = ssm.start_automation_execution(\\n        DocumentName=response['AutomationExecution']['DocumentName'],\\n        DocumentVersion=response['AutomationExecution']['DocumentVersion'],\\n        Parameters=response_parameters\\n    )\\n    output['RollbackExecutionId'] = rollback_execution_response['AutomationExecutionId']\\n    return output\"\n    },\n    \"isEnd\" : true\n  } ]\n}",
  "CreatedDate": "2021-11-05T22:27:04.248Z",
  "DisplayName": null,
  "DocumentFormat": {
    "Value": "JSON"
  },
  "DocumentType": {
    "Value": "Automation"
  },
  "DocumentVersion": "1",
  "Name": "AWSResilienceHub-ForceDocumentDBDatabaseToBeInaccessibleTest_2020-09-21",
  "Requires": [],
  "ReviewStatus": null,
  "Status": {
    "Value": "Active"
  },
  "StatusInformation": null,
  "VersionName": null,
  "ResponseMetadata": {
    "RequestId": "6bed8f17-4b5f-4fd1-b5c7-d17aed65bb6d",
    "Metadata": {}
  },
  "ContentLength": 46030,
  "HttpStatusCode": 200,
  "LoggedAt": "2022-01-25T07:11:53.8978819+00:00"
}
